var fixed.$heap: $heap_type;

var fixed.$intArrayType: javaType;

var fixed.$charArrayType: javaType;

var fixed.$boolArrayType: javaType;

var fixed.$byteArrayType: javaType;

var fixed.$longArrayType: javaType;

var fixed.$arrSizeHeap: [ref]int;

var fixed.$stringSizeHeap: [ref]int;

var fixed.$boolArrHeap: boolArrHeap_type;

var fixed.$refArrHeap: refArrHeap_type;

var fixed.$realArrHeap: realArrHeap_type;

var fixed.$intArrHeap: intArrHeap_type;

var fixed.$objIndex: int;

var fixed.char$lp$$rp$$java.lang.String$chars259: Field ref;

var fixed.boolean$java.lang.Boolean$value0: Field int;

var fixed.int$java.lang.Integer$value0: Field int;

const unique fixed.$type: Field javaType;

const unique fixed.$alloc: Field bool;

const unique fixed.$null: ref;

const {:sourceloc "Math.java", -1, -1, -1, -1} unique fixed.java.lang.Object: javaType extends complete;

const {:sourceloc "Math.java", -1, -1, -1, -1} unique fixed.java.lang.Math: javaType extends unique fixed.java.lang.Object complete;

const unique fixed.$DoubleConst0: int extends complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.lang.String: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.io.Serializable: javaType extends complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.lang.Throwable: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.lang.Exception: javaType extends unique fixed.java.lang.Throwable complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.lang.RuntimeException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.lang.IndexOutOfBoundsException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "String.java", -1, -1, -1, -1} unique fixed.java.lang.ArrayIndexOutOfBoundsException: javaType extends unique fixed.java.lang.IndexOutOfBoundsException complete;

const {:sourceloc "Boolean.java", -1, -1, -1, -1} unique fixed.java.lang.Boolean: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "Integer.java", -1, -1, -1, -1} unique fixed.java.lang.Comparable: javaType extends complete;

const {:sourceloc "Integer.java", -1, -1, -1, -1} unique fixed.java.lang.Integer: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable, fixed.java.lang.Comparable complete;

const {:sourceloc "Integer.java", -1, -1, -1, -1} unique fixed.java.lang.NullPointerException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "Integer.java", -1, -1, -1, -1} unique fixed.java.lang.ClassCastException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} unique fixed.modpow.SimplifiedRSA: javaType extends unique fixed.java.lang.Object complete;

const unique fixed.$DoubleConst1: int extends complete;

const {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} unique fixed.sg.edu.nus.comp.tsunami.safe.Safe: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} unique fixed.java.lang.ArithmeticException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} unique fixed.java.lang.Number: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable complete;

function fixed.$arrayType(t: javaType) : javaType;

function fixed.$intToReal(x: int) : real;

function fixed.$intToBool(x: int) : bool;

function fixed.$refToBool(x: ref) : bool;

function fixed.$boolToInt(x: bool) : int;

function fixed.$cmpBool(x: bool, y: bool) : int;

function fixed.$cmpRef(x: ref, y: ref) : int;

function fixed.$cmpReal(x: real, y: real) : int;

function fixed.$cmpInt(x: int, y: int) : int;

function fixed.$bitOr(x: int, y: int) : int;

function fixed.$bitAnd(x: int, y: int) : int;

function fixed.$xorInt(x: int, y: int) : int;

function fixed.$shlInt(x: int, y: int) : int;

function fixed.$ushrInt(x: int, y: int) : int;

function fixed.$shrInt(x: int, y: int) : int;

function fixed.$mulInt(x: int, y: int) : int;

function fixed.$divInt(x: int, y: int) : int;

function fixed.$modInt(x: int, y: int) : int;

function fixed.$intToRef(id: int) : ref;

function fixed.$realOp32241(x: int, y: int) : int;

axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "fixed"} fixed.$new(obj_type: javaType) returns ($obj: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures fixed.$objIndex == old(fixed.$objIndex) + 1;
  free ensures $obj == fixed.$intToRef(old(fixed.$objIndex));
  free ensures $obj != fixed.$null;
  free ensures !old(fixed.$heap[$obj, fixed.$alloc]);
  free ensures fixed.$heap
   == old(fixed.$heap)[$obj, fixed.$alloc := true][$obj, fixed.$type := obj_type];



procedure {:prefix "fixed"} fixed.java.lang.Object$java.lang.Object$clone$43($this: ref) returns ($other: ref);
  free ensures $other != fixed.$null;
  free ensures fixed.$heap[$other, fixed.$alloc] <==> true;
  free ensures fixed.$heap[$other, fixed.$type] == fixed.$heap[$this, fixed.$type];



procedure {:prefix "fixed"} fixed.int$java.lang.String$compareTo$87($this: ref, $other: ref) returns ($return: int);



procedure {:prefix "fixed"} fixed.java.lang.Math$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception
   == _uf_fixed.java.lang.Math$$la$init$ra$$_$exception($this, old(fixed.$heap), old(fixed.$arrSizeHeap), old(fixed.$stringSizeHeap));



procedure {:prefix "fixed"} fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:inline 1} fixed.java.lang.Math$min$int_int($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);
  free ensures $return
   == _uf_fixed.java.lang.Math$min$int_int_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.java.lang.Math$min$int_int_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "fixed"} fixed.java.lang.Math$log$double($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.String$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Integer$$la$init$ra$$int($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Integer$valueOf$int($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Integer$intValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Integer$compareTo$java.lang.Integer($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.java.lang.Integer$compareTo$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.modpow.SimplifiedRSA$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int($in_parameter__0: int, 
    $in_parameter__1: int, 
    $in_parameter__2: int, 
    $in_parameter__3: int)
   returns ($return: int, $exception: ref);
  free requires $in_parameter__2 == 834443;
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19(in_$return: int, 
    in_$exception: ref, 
    in_$fakelocal_7: ref, 
    in_$r23: ref, 
    in_$z3: int, 
    in_i21: int, 
    in_$r26: ref, 
    in_$l9: int, 
    in_$r24: ref, 
    in_$r2: ref, 
    in_$fakelocal_16: ref, 
    in_$r21: ref, 
    in_$r5: ref, 
    in_z4: int, 
    in_$r22: ref, 
    in_$r3: ref, 
    in_$r31: ref, 
    in_$r15: ref, 
    in_$i15: int, 
    in_$r12: ref, 
    in_$fakelocal_4: ref, 
    in_$fakelocal_17: ref, 
    in_$r18: ref, 
    in_$r9: ref, 
    in_i20: int, 
    in_z0: int, 
    in_$fakelocal_5: ref, 
    in_$i7: int, 
    in_i19: int, 
    in_$r17: ref, 
    in_$r11: ref, 
    in_$r10: ref, 
    in_i24: int, 
    in_$r14: ref, 
    in_$fakelocal_8: ref, 
    in_$r20: ref, 
    in_$fakelocal_9: ref, 
    in_$fakelocal_13: ref, 
    in_$i11: int, 
    in_$l8: int, 
    in_$r29: ref, 
    in_i18: int, 
    in_z2: int, 
    in_$fakelocal_6: ref, 
    in_$fakelocal_1: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_0: ref, 
    in_$r27: ref, 
    in_$l6: int, 
    in_i17: int, 
    in_z1: int, 
    in_$r1: ref, 
    in_$fakelocal_11: ref, 
    in_$r7: ref, 
    in_i22: int, 
    in_i23: int, 
    in_$i12: int, 
    in_$r28: ref, 
    in_$r8: ref, 
    in_$fakelocal_10: ref, 
    in_$i13: int, 
    in_$r13: ref, 
    in_$fakelocal_12: ref, 
    in_$r4: ref, 
    in_$r25: ref, 
    in_i4: int, 
    in_$r0: ref, 
    in_i1: int, 
    in_$r6: ref, 
    in_$fakelocal_15: ref, 
    in_$i16: int, 
    in_$i14: int, 
    in_$l10: int, 
    in_$r30: ref, 
    in_$r19: ref, 
    in_$r16: ref, 
    in_i3: int, 
    in_$fakelocal_14: ref, 
    in_$fakelocal_3: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$fakelocal_7: ref, 
    out_$r23: ref, 
    out_$z3: int, 
    out_i21: int, 
    out_$r26: ref, 
    out_$l9: int, 
    out_$r24: ref, 
    out_$r2: ref, 
    out_$fakelocal_16: ref, 
    out_$r21: ref, 
    out_$r5: ref, 
    out_z4: int, 
    out_$r22: ref, 
    out_$r3: ref, 
    out_$r31: ref, 
    out_$r15: ref, 
    out_$i15: int, 
    out_$r12: ref, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_17: ref, 
    out_$r18: ref, 
    out_$r9: ref, 
    out_i20: int, 
    out_z0: int, 
    out_$fakelocal_5: ref, 
    out_$i7: int, 
    out_i19: int, 
    out_$r17: ref, 
    out_$r11: ref, 
    out_$r10: ref, 
    out_i24: int, 
    out_$r14: ref, 
    out_$fakelocal_8: ref, 
    out_$r20: ref, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_13: ref, 
    out_$i11: int, 
    out_$l8: int, 
    out_$r29: ref, 
    out_i18: int, 
    out_z2: int, 
    out_$fakelocal_6: ref, 
    out_$fakelocal_1: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_0: ref, 
    out_$r27: ref, 
    out_$l6: int, 
    out_i17: int, 
    out_z1: int, 
    out_$r1: ref, 
    out_$fakelocal_11: ref, 
    out_$r7: ref, 
    out_i22: int, 
    out_i23: int, 
    out_$i12: int, 
    out_$r28: ref, 
    out_$r8: ref, 
    out_$fakelocal_10: ref, 
    out_$i13: int, 
    out_$r13: ref, 
    out_$fakelocal_12: ref, 
    out_$r4: ref, 
    out_$r25: ref, 
    out_$r0: ref, 
    out_$r6: ref, 
    out_$fakelocal_15: ref, 
    out_$i16: int, 
    out_$i14: int, 
    out_$l10: int, 
    out_$r30: ref, 
    out_$r19: ref, 
    out_$r16: ref, 
    out_$fakelocal_14: ref, 
    out_$fakelocal_3: ref);
  modifies fixed.$objIndex, fixed.$heap;



implementation fixed.java.lang.Math$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Math.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Math;
    assume {:sourceloc "Math.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Math.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Math.java", 3, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation {:inline 1} fixed.java.lang.Math$min$int_int($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var i1: int;
  var i0: int;
  var $i2: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    i1 := $in_parameter__1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} i1 > i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    $i2 := i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto block3;

  block3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    $return := $i2;
    goto block4;

  block4:
    return;

  anon4_Then:
    assume {:partition} i0 >= i1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "thenblock"} true;
    goto block2;

  block2:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    $i2 := i1;
    goto block3;
}



implementation fixed.java.lang.Math$log$double($in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var d0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Math.java", 10, -1, -1, -1} true;
    $return := fixed.$DoubleConst0;
    goto block5;

  block5:
    return;
}



implementation fixed.java.lang.String$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 3, -1, -1, -1} true;
    goto block6;

  block6:
    return;
}



implementation fixed.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var $r1: ref;
  var i0: int;
  var r0: ref;
  var $c1: int;
  var $fakelocal_0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    $r1 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars259];
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !(i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon4_Then:
    assume {:partition} i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0;
    $exception := $exception;
    goto anon3;

  anon3:
    $c1 := fixed.$intArrHeap[$r1][i0];
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    $return := $c1;
    goto block7;

  block7:
    return;
}



implementation fixed.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var z0: int;
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0 := z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto block8;

  block8:
    return;
}



implementation fixed.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var z0: int;
  var $r0: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := $r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    $exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    $return := $r0;
    goto block9;

  block9:
    return;
}



implementation fixed.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref)
{
  var r0: ref;
  var $z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $z0 := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $return := $z0;
    goto block10;

  block10:
    return;
}



implementation fixed.java.lang.Integer$$la$init$ra$$int($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var i0: int;
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.int$java.lang.Integer$value0 := i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto block11;

  block11:
    return;
}



implementation fixed.java.lang.Integer$valueOf$int($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $r0: ref;
  var i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Integer;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$0$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$0$$this := $r0;
    inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0 := i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$0$i0, inline$java.lang.Integer$$la$init$ra$$int$0$r0, inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$0$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$r0 := inline$java.lang.Integer$$la$init$ra$$int$0$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$i0 := inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Integer$$la$init$ra$$int$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$0$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$block11;

  inline$java.lang.Integer$$la$init$ra$$int$0$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Return;

  inline$java.lang.Integer$$la$init$ra$$int$0$Return:
    $exception := inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    $return := $r0;
    goto block12;

  block12:
    return;
}



implementation fixed.java.lang.Integer$intValue$($this: ref) returns ($return: int, $exception: ref)
{
  var $i0: int;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    $i0 := fixed.$heap[r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    $return := $i0;
    goto block13;

  block13:
    return;
}



implementation fixed.java.lang.Integer$compareTo$java.lang.Integer($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref)
{
  var $i2: int;
  var $i1: int;
  var $i3: int;
  var r0: ref;
  var $i0: int;
  var $fakelocal_0: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Integer;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    $i1 := fixed.$heap[r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon10_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$heap[r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} $i0 < $i1;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Integer.java", 23, -1, -1, -1} true;
    $return := 1;
    goto block16;

  block16:
    return;

  anon11_Then:
    assume {:partition} $i1 <= $i0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto block14;

  block14:
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    $i3 := fixed.$heap[r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    $i2 := fixed.$heap[r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} $i2 > $i3;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "Integer.java", 25, -1, -1, -1} true;
    $return := -1;
    goto block16;

  anon12_Then:
    assume {:partition} $i3 >= $i2;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "thenblock"} true;
    goto block15;

  block15:
    assert {:sourceloc "Integer.java", 27, -1, -1, -1} true;
    $return := 0;
    goto block16;
}



implementation fixed.java.lang.Integer$compareTo$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref)
{
  var $i0: int;
  var r0: ref;
  var $r2: ref;
  var $fakelocal_0: ref;
  var r1: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$objIndex: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 5, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !(fixed.$heap[r1, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon4_Then:
    assume {:partition} fixed.$heap[r1, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon3;

  anon3:
    $r2 := r1;
    assert {:sourceloc "Integer.java", 5, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$Entry;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$Entry:
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this := r0;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0 := $r2;
    havoc inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3, inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0, inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon0;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0 := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1 := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Then, inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Else;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Else:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1 == fixed.$null;
    call inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := 0;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$Return;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Then:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1 != fixed.$null;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon3;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon3:
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Then, inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Else;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Else:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0
   < inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon6;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon6:
    assert {:sourceloc "Integer.java", 23, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := 1;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16:
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$Return;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Then:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1
   <= inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block14;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$block14:
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Then, inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Else;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Else:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2
   > inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon9;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon9:
    assert {:sourceloc "Integer.java", 25, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := -1;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Then:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3
   >= inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block15;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$block15:
    assert {:sourceloc "Integer.java", 27, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := 0;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$Return:
    $i0 := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return;
    $exception := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "Integer.java", 5, -1, -1, -1} true;
    $return := $i0;
    goto block17;

  block17:
    return;
}



implementation fixed.modpow.SimplifiedRSA$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.modpow.SimplifiedRSA;
    assume {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "SimplifiedRSA.java", 7, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "SimplifiedRSA.java", 7, -1, -1, -1} true;
    goto block18;

  block18:
    return;
}



implementation fixed.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int($in_parameter__0: int, 
    $in_parameter__1: int, 
    $in_parameter__2: int, 
    $in_parameter__3: int)
   returns ($return: int, $exception: ref)
{
  var $fakelocal_7: ref;
  var $r23: ref;
  var $d1: int;
  var $z3: int;
  var i21: int;
  var $r26: ref;
  var $l9: int;
  var $r24: ref;
  var $r2: ref;
  var $fakelocal_16: ref;
  var $r21: ref;
  var $r5: ref;
  var z4: int;
  var $r22: ref;
  var $r3: ref;
  var $r31: ref;
  var $r15: ref;
  var $i15: int;
  var $r12: ref;
  var $fakelocal_4: ref;
  var $fakelocal_17: ref;
  var $r18: ref;
  var $r9: ref;
  var i20: int;
  var z0: int;
  var $fakelocal_5: ref;
  var $i7: int;
  var i19: int;
  var $r17: ref;
  var $r11: ref;
  var i2: int;
  var $r10: ref;
  var i24: int;
  var $r14: ref;
  var $fakelocal_8: ref;
  var $r20: ref;
  var $fakelocal_9: ref;
  var $fakelocal_13: ref;
  var $i5: int;
  var $i11: int;
  var $l8: int;
  var $d2: int;
  var $r29: ref;
  var i18: int;
  var z2: int;
  var $fakelocal_6: ref;
  var $fakelocal_1: ref;
  var $fakelocal_2: ref;
  var i0: int;
  var $fakelocal_0: ref;
  var $r27: ref;
  var $l6: int;
  var i17: int;
  var z1: int;
  var $r1: ref;
  var $fakelocal_11: ref;
  var $r7: ref;
  var i22: int;
  var i23: int;
  var $i12: int;
  var $r28: ref;
  var $r8: ref;
  var $fakelocal_10: ref;
  var $i13: int;
  var $r13: ref;
  var $fakelocal_12: ref;
  var $r4: ref;
  var $r25: ref;
  var i4: int;
  var $r0: ref;
  var i1: int;
  var $r6: ref;
  var $fakelocal_15: ref;
  var $i16: int;
  var $i14: int;
  var $l10: int;
  var $d3: int;
  var $r30: ref;
  var $r19: ref;
  var $r16: ref;
  var $d0: int;
  var i3: int;
  var $fakelocal_14: ref;
  var $fakelocal_3: ref;
  var inline$java.lang.Math$log$double$0$d0: int;
  var inline$java.lang.Math$log$double$0$$in_parameter__0: int;
  var inline$java.lang.Math$log$double$0$$return: int;
  var inline$java.lang.Math$log$double$0$$exception: ref;
  var inline$java.lang.Math$log$double$1$d0: int;
  var inline$java.lang.Math$log$double$1$$in_parameter__0: int;
  var inline$java.lang.Math$log$double$1$$return: int;
  var inline$java.lang.Math$log$double$1$$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap: $heap_type;
  var inline$java.lang.Integer$intValue$$0$$i0: int;
  var inline$java.lang.Integer$intValue$$0$r0: ref;
  var inline$java.lang.Integer$intValue$$0$$this: ref;
  var inline$java.lang.Integer$intValue$$0$$return: int;
  var inline$java.lang.Integer$intValue$$0$$exception: ref;
  var inline$java.lang.Integer$intValue$$1$$i0: int;
  var inline$java.lang.Integer$intValue$$1$r0: ref;
  var inline$java.lang.Integer$intValue$$1$$this: ref;
  var inline$java.lang.Integer$intValue$$1$$return: int;
  var inline$java.lang.Integer$intValue$$1$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$0$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$0$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$0$i0: int;
  var inline$java.lang.Integer$valueOf$int$0$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$0$$return: ref;
  var inline$java.lang.Integer$valueOf$int$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$0$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$0$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$0$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$1$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$1$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$1$i0: int;
  var inline$java.lang.Integer$valueOf$int$1$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$1$$return: ref;
  var inline$java.lang.Integer$valueOf$int$1$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$1$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$1$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$1$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$1$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$2$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$2$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$2$i0: int;
  var inline$java.lang.Integer$valueOf$int$2$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$2$$return: ref;
  var inline$java.lang.Integer$valueOf$int$2$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$2$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$2$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$2$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$2$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$java.lang.Integer$intValue$$2$$i0: int;
  var inline$java.lang.Integer$intValue$$2$r0: ref;
  var inline$java.lang.Integer$intValue$$2$$this: ref;
  var inline$java.lang.Integer$intValue$$2$$return: int;
  var inline$java.lang.Integer$intValue$$2$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$3$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$3$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$3$i0: int;
  var inline$java.lang.Integer$valueOf$int$3$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$3$$return: ref;
  var inline$java.lang.Integer$valueOf$int$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$3$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$3$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$3$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$3$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$4$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$4$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$4$i0: int;
  var inline$java.lang.Integer$valueOf$int$4$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$4$$return: ref;
  var inline$java.lang.Integer$valueOf$int$4$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$4$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$4$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$4$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$4$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$java.lang.Integer$intValue$$3$$i0: int;
  var inline$java.lang.Integer$intValue$$3$r0: ref;
  var inline$java.lang.Integer$intValue$$3$$this: ref;
  var inline$java.lang.Integer$intValue$$3$$return: int;
  var inline$java.lang.Integer$intValue$$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$5$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$5$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$5$i0: int;
  var inline$java.lang.Integer$valueOf$int$5$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$5$$return: ref;
  var inline$java.lang.Integer$valueOf$int$5$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$5$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$5$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$5$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$5$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.Integer$intValue$$4$$i0: int;
  var inline$java.lang.Integer$intValue$$4$r0: ref;
  var inline$java.lang.Integer$intValue$$4$$this: ref;
  var inline$java.lang.Integer$intValue$$4$$return: int;
  var inline$java.lang.Integer$intValue$$4$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$6$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$6$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$6$i0: int;
  var inline$java.lang.Integer$valueOf$int$6$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$6$$return: ref;
  var inline$java.lang.Integer$valueOf$int$6$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$6$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$6$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$6$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$6$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$7$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$7$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$7$i0: int;
  var inline$java.lang.Integer$valueOf$int$7$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$7$$return: ref;
  var inline$java.lang.Integer$valueOf$int$7$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$7$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$7$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$7$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$7$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$8$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$8$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$8$i0: int;
  var inline$java.lang.Integer$valueOf$int$8$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$8$$return: ref;
  var inline$java.lang.Integer$valueOf$int$8$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$8$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$8$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$8$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$8$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$9$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$9$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$9$i0: int;
  var inline$java.lang.Integer$valueOf$int$9$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$9$$return: ref;
  var inline$java.lang.Integer$valueOf$int$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$9$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$9$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$9$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$9$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$10$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$10$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$10$i0: int;
  var inline$java.lang.Integer$valueOf$int$10$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$10$$return: ref;
  var inline$java.lang.Integer$valueOf$int$10$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$10$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$10$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$10$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$10$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$java.lang.Integer$intValue$$5$$i0: int;
  var inline$java.lang.Integer$intValue$$5$r0: ref;
  var inline$java.lang.Integer$intValue$$5$$this: ref;
  var inline$java.lang.Integer$intValue$$5$$return: int;
  var inline$java.lang.Integer$intValue$$5$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$11$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$11$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$11$i0: int;
  var inline$java.lang.Integer$valueOf$int$11$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$11$$return: ref;
  var inline$java.lang.Integer$valueOf$int$11$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$11$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$11$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$11$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$11$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$12$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$12$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$12$i0: int;
  var inline$java.lang.Integer$valueOf$int$12$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$12$$return: ref;
  var inline$java.lang.Integer$valueOf$int$12$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$12$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$12$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$12$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$12$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$13$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$13$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$13$i0: int;
  var inline$java.lang.Integer$valueOf$int$13$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$13$$return: ref;
  var inline$java.lang.Integer$valueOf$int$13$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$13$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$13$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$13$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$13$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$0$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$0$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$return: int;
  var inline$java.lang.Boolean$booleanValue$$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$14$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$15$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$16$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$17$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$1$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$1$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$return: int;
  var inline$java.lang.Boolean$booleanValue$$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$14$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$14$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$14$i0: int;
  var inline$java.lang.Integer$valueOf$int$14$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$14$$return: ref;
  var inline$java.lang.Integer$valueOf$int$14$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$14$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$14$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$14$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$14$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$18$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$15$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$15$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$15$i0: int;
  var inline$java.lang.Integer$valueOf$int$15$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$15$$return: ref;
  var inline$java.lang.Integer$valueOf$int$15$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$15$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$15$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$15$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$15$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$19$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception: ref;
  var inline$java.lang.Integer$intValue$$6$$i0: int;
  var inline$java.lang.Integer$intValue$$6$r0: ref;
  var inline$java.lang.Integer$intValue$$6$$this: ref;
  var inline$java.lang.Integer$intValue$$6$$return: int;
  var inline$java.lang.Integer$intValue$$6$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$16$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$16$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$16$i0: int;
  var inline$java.lang.Integer$valueOf$int$16$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$16$$return: ref;
  var inline$java.lang.Integer$valueOf$int$16$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$16$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$16$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$16$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$16$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$20$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$17$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$17$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$17$i0: int;
  var inline$java.lang.Integer$valueOf$int$17$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$17$$return: ref;
  var inline$java.lang.Integer$valueOf$int$17$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$17$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$17$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$17$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$17$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$21$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$18$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$18$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$18$i0: int;
  var inline$java.lang.Integer$valueOf$int$18$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$18$$return: ref;
  var inline$java.lang.Integer$valueOf$int$18$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$18$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$18$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$18$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$18$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$22$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception: ref;
  var inline$java.lang.Integer$intValue$$7$$i0: int;
  var inline$java.lang.Integer$intValue$$7$r0: ref;
  var inline$java.lang.Integer$intValue$$7$$this: ref;
  var inline$java.lang.Integer$intValue$$7$$return: int;
  var inline$java.lang.Integer$intValue$$7$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$19$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$19$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$19$i0: int;
  var inline$java.lang.Integer$valueOf$int$19$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$19$$return: ref;
  var inline$java.lang.Integer$valueOf$int$19$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$19$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$19$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$19$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$19$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$23$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$20$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$20$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$20$i0: int;
  var inline$java.lang.Integer$valueOf$int$20$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$20$$return: ref;
  var inline$java.lang.Integer$valueOf$int$20$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$20$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$20$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$20$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$20$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$24$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$24$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$21$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$21$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$21$i0: int;
  var inline$java.lang.Integer$valueOf$int$21$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$21$$return: ref;
  var inline$java.lang.Integer$valueOf$int$21$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$21$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$21$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$21$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$21$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$25$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$25$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception: ref;
  var inline$java.lang.Integer$intValue$$8$$i0: int;
  var inline$java.lang.Integer$intValue$$8$r0: ref;
  var inline$java.lang.Integer$intValue$$8$$this: ref;
  var inline$java.lang.Integer$intValue$$8$$return: int;
  var inline$java.lang.Integer$intValue$$8$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$22$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$22$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$22$i0: int;
  var inline$java.lang.Integer$valueOf$int$22$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$22$$return: ref;
  var inline$java.lang.Integer$valueOf$int$22$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$22$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$22$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$22$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$22$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$26$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$26$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$23$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$23$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$23$i0: int;
  var inline$java.lang.Integer$valueOf$int$23$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$23$$return: ref;
  var inline$java.lang.Integer$valueOf$int$23$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$23$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$23$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$23$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$23$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$27$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$27$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception: ref;
  var inline$java.lang.Integer$intValue$$9$$i0: int;
  var inline$java.lang.Integer$intValue$$9$r0: ref;
  var inline$java.lang.Integer$intValue$$9$$this: ref;
  var inline$java.lang.Integer$intValue$$9$$return: int;
  var inline$java.lang.Integer$intValue$$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$24$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$24$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$24$i0: int;
  var inline$java.lang.Integer$valueOf$int$24$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$24$$return: ref;
  var inline$java.lang.Integer$valueOf$int$24$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$24$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$24$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$24$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$24$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$28$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$28$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$25$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$25$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$25$i0: int;
  var inline$java.lang.Integer$valueOf$int$25$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$25$$return: ref;
  var inline$java.lang.Integer$valueOf$int$25$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$25$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$25$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$25$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$25$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$29$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$29$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception: ref;
  var inline$java.lang.Integer$intValue$$10$$i0: int;
  var inline$java.lang.Integer$intValue$$10$r0: ref;
  var inline$java.lang.Integer$intValue$$10$$this: ref;
  var inline$java.lang.Integer$intValue$$10$$return: int;
  var inline$java.lang.Integer$intValue$$10$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$26$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$26$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$26$i0: int;
  var inline$java.lang.Integer$valueOf$int$26$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$26$$return: ref;
  var inline$java.lang.Integer$valueOf$int$26$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$26$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$26$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$26$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$26$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$30$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$30$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$27$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$27$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$27$i0: int;
  var inline$java.lang.Integer$valueOf$int$27$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$27$$return: ref;
  var inline$java.lang.Integer$valueOf$int$27$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$27$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$27$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$27$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$27$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$31$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$31$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception: ref;
  var inline$java.lang.Integer$intValue$$11$$i0: int;
  var inline$java.lang.Integer$intValue$$11$r0: ref;
  var inline$java.lang.Integer$intValue$$11$$this: ref;
  var inline$java.lang.Integer$intValue$$11$$return: int;
  var inline$java.lang.Integer$intValue$$11$$exception: ref;

  anon0:
    assume $in_parameter__2 == 834443;
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i17 := $in_parameter__1;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i1 := $in_parameter__2;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i2 := $in_parameter__3;
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    i18 := 1;
    assert {:sourceloc "SimplifiedRSA.java", 13, -1, -1, -1} true;
    i3 := i0;
    assert {:sourceloc "SimplifiedRSA.java", 14, -1, -1, -1} true;
    i19 := 0;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    $i5 := i2 + 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    $d0 := $i5;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto inline$java.lang.Math$log$double$0$Entry;

  inline$java.lang.Math$log$double$0$Entry:
    inline$java.lang.Math$log$double$0$$in_parameter__0 := $d0;
    havoc inline$java.lang.Math$log$double$0$d0, inline$java.lang.Math$log$double$0$$return, inline$java.lang.Math$log$double$0$$exception;
    goto inline$java.lang.Math$log$double$0$anon0;

  inline$java.lang.Math$log$double$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$java.lang.Math$log$double$0$$exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$java.lang.Math$log$double$0$d0 := inline$java.lang.Math$log$double$0$$in_parameter__0;
    assert {:sourceloc "Math.java", 10, -1, -1, -1} true;
    inline$java.lang.Math$log$double$0$$return := fixed.$DoubleConst0;
    goto inline$java.lang.Math$log$double$0$block5;

  inline$java.lang.Math$log$double$0$block5:
    goto inline$java.lang.Math$log$double$0$Return;

  inline$java.lang.Math$log$double$0$Return:
    $d1 := inline$java.lang.Math$log$double$0$$return;
    $exception := inline$java.lang.Math$log$double$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto inline$java.lang.Math$log$double$1$Entry;

  inline$java.lang.Math$log$double$1$Entry:
    inline$java.lang.Math$log$double$1$$in_parameter__0 := fixed.$DoubleConst1;
    havoc inline$java.lang.Math$log$double$1$d0, inline$java.lang.Math$log$double$1$$return, inline$java.lang.Math$log$double$1$$exception;
    goto inline$java.lang.Math$log$double$1$anon0;

  inline$java.lang.Math$log$double$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$java.lang.Math$log$double$1$$exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$java.lang.Math$log$double$1$d0 := inline$java.lang.Math$log$double$1$$in_parameter__0;
    assert {:sourceloc "Math.java", 10, -1, -1, -1} true;
    inline$java.lang.Math$log$double$1$$return := fixed.$DoubleConst0;
    goto inline$java.lang.Math$log$double$1$block5;

  inline$java.lang.Math$log$double$1$block5:
    goto inline$java.lang.Math$log$double$1$Return;

  inline$java.lang.Math$log$double$1$Return:
    $d2 := inline$java.lang.Math$log$double$1$$return;
    $exception := inline$java.lang.Math$log$double$1$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    $d3 := fixed.$realOp32241($d1, $d2);
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    i4 := $d3;
    assert {:sourceloc "SimplifiedRSA.java", 18, -1, -1, -1} true;
    i20 := 0;
    assert {:sourceloc "SimplifiedRSA.java", 19, -1, -1, -1} true;
    i21 := 32;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} true;
    z4 := 0;
    goto block19;

  block19:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return := $return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception := $exception;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7 := $fakelocal_7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23 := $r23;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3 := $z3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21 := i21;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26 := $r26;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9 := $l9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24 := $r24;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2 := $r2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16 := $fakelocal_16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21 := $r21;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5 := $r5;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4 := z4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22 := $r22;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3 := $r3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31 := $r31;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15 := $r15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15 := $i15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12 := $r12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4 := $fakelocal_4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17 := $fakelocal_17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18 := $r18;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9 := $r9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20 := i20;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0 := z0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5 := $fakelocal_5;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7 := $i7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19 := i19;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17 := $r17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11 := $r11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10 := $r10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24 := i24;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14 := $r14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8 := $fakelocal_8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20 := $r20;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9 := $fakelocal_9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13 := $fakelocal_13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11 := $i11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8 := $l8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29 := $r29;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18 := i18;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2 := z2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6 := $fakelocal_6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1 := $fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2 := $fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0 := $fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27 := $r27;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6 := $l6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17 := i17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1 := z1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1 := $r1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11 := $fakelocal_11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7 := $r7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22 := i22;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23 := i23;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12 := $i12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28 := $r28;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8 := $r8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10 := $fakelocal_10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13 := $i13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13 := $r13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12 := $fakelocal_12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4 := $r4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25 := $r25;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4 := i4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0 := $r0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1 := i1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6 := $r6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15 := $fakelocal_15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16 := $i16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14 := $i14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10 := $l10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30 := $r30;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19 := $r19;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16 := $r16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3 := i3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14 := $fakelocal_14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3 := $fakelocal_3;
    havoc inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex := fixed.$objIndex;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap := fixed.$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21
   + -1;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21
   <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21:
    assert {:sourceloc "SimplifiedRSA.java", 44, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21_dummy;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20
   != inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57:
    goto inline$java.lang.Integer$intValue$$0$Entry;

  inline$java.lang.Integer$intValue$$0$Entry:
    inline$java.lang.Integer$intValue$$0$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31;
    havoc inline$java.lang.Integer$intValue$$0$$i0, inline$java.lang.Integer$intValue$$0$r0, inline$java.lang.Integer$intValue$$0$$return, inline$java.lang.Integer$intValue$$0$$exception;
    goto inline$java.lang.Integer$intValue$$0$anon0;

  inline$java.lang.Integer$intValue$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$0$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$0$r0 := inline$java.lang.Integer$intValue$$0$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$0$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$0$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$0$$return := inline$java.lang.Integer$intValue$$0$$i0;
    goto inline$java.lang.Integer$intValue$$0$block13;

  inline$java.lang.Integer$intValue$$0$block13:
    goto inline$java.lang.Integer$intValue$$0$Return;

  inline$java.lang.Integer$intValue$$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20 := inline$java.lang.Integer$intValue$$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57$1:
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20
   == inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon54:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon54;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51:
    goto inline$java.lang.Integer$intValue$$1$Entry;

  inline$java.lang.Integer$intValue$$1$Entry:
    inline$java.lang.Integer$intValue$$1$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27;
    havoc inline$java.lang.Integer$intValue$$1$$i0, inline$java.lang.Integer$intValue$$1$r0, inline$java.lang.Integer$intValue$$1$$return, inline$java.lang.Integer$intValue$$1$$exception;
    goto inline$java.lang.Integer$intValue$$1$anon0;

  inline$java.lang.Integer$intValue$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$1$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$1$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$1$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$1$r0 := inline$java.lang.Integer$intValue$$1$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$1$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$1$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$1$$return := inline$java.lang.Integer$intValue$$1$$i0;
    goto inline$java.lang.Integer$intValue$$1$block13;

  inline$java.lang.Integer$intValue$$1$block13:
    goto inline$java.lang.Integer$intValue$$1$Return;

  inline$java.lang.Integer$intValue$$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17 := inline$java.lang.Integer$intValue$$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$1:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$0$Entry;

  inline$java.lang.Integer$valueOf$int$0$Entry:
    inline$java.lang.Integer$valueOf$int$0$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20;
    havoc inline$java.lang.Integer$valueOf$int$0$$fakelocal_0, inline$java.lang.Integer$valueOf$int$0$$r0, inline$java.lang.Integer$valueOf$int$0$i0, inline$java.lang.Integer$valueOf$int$0$$return, inline$java.lang.Integer$valueOf$int$0$$exception;
    inline$java.lang.Integer$valueOf$int$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$0$anon0;

  inline$java.lang.Integer$valueOf$int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$0$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$0$i0 := inline$java.lang.Integer$valueOf$int$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$0$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$0$$r0 := inline$java.lang.Integer$valueOf$int$0$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$0$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$0$$this := inline$java.lang.Integer$valueOf$int$0$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$0$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$0$i0, inline$java.lang.Integer$$la$init$ra$$int$0$r0, inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$0$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$r0 := inline$java.lang.Integer$$la$init$ra$$int$0$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$i0 := inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Integer$$la$init$ra$$int$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$0$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$block11;

  inline$java.lang.Integer$$la$init$ra$$int$0$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Return;

  inline$java.lang.Integer$$la$init$ra$$int$0$Return:
    inline$java.lang.Integer$valueOf$int$0$$exception := inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    goto inline$java.lang.Integer$valueOf$int$0$anon0$1;

  inline$java.lang.Integer$valueOf$int$0$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$0$$return := inline$java.lang.Integer$valueOf$int$0$$r0;
    goto inline$java.lang.Integer$valueOf$int$0$block12;

  inline$java.lang.Integer$valueOf$int$0$block12:
    goto inline$java.lang.Integer$valueOf$int$0$Return;

  inline$java.lang.Integer$valueOf$int$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28 := inline$java.lang.Integer$valueOf$int$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$2:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20
   + 1;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$1$Entry;

  inline$java.lang.Integer$valueOf$int$1$Entry:
    inline$java.lang.Integer$valueOf$int$1$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16;
    havoc inline$java.lang.Integer$valueOf$int$1$$fakelocal_0, inline$java.lang.Integer$valueOf$int$1$$r0, inline$java.lang.Integer$valueOf$int$1$i0, inline$java.lang.Integer$valueOf$int$1$$return, inline$java.lang.Integer$valueOf$int$1$$exception;
    inline$java.lang.Integer$valueOf$int$1$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$1$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$1$anon0;

  inline$java.lang.Integer$valueOf$int$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$1$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$1$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$1$i0 := inline$java.lang.Integer$valueOf$int$1$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$1$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$1$$r0 := inline$java.lang.Integer$valueOf$int$1$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$1$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$1$$this := inline$java.lang.Integer$valueOf$int$1$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$1$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$1$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$1$i0, inline$java.lang.Integer$$la$init$ra$$int$1$r0, inline$java.lang.Integer$$la$init$ra$$int$1$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$1$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$1$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$1$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$1$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$1$r0 := inline$java.lang.Integer$$la$init$ra$$int$1$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$1$i0 := inline$java.lang.Integer$$la$init$ra$$int$1$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.Integer$$la$init$ra$$int$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.Integer$$la$init$ra$$int$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$1$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$1$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$1$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$block11;

  inline$java.lang.Integer$$la$init$ra$$int$1$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$1$Return;

  inline$java.lang.Integer$$la$init$ra$$int$1$Return:
    inline$java.lang.Integer$valueOf$int$1$$exception := inline$java.lang.Integer$$la$init$ra$$int$1$$exception;
    goto inline$java.lang.Integer$valueOf$int$1$anon0$1;

  inline$java.lang.Integer$valueOf$int$1$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$1$$return := inline$java.lang.Integer$valueOf$int$1$$r0;
    goto inline$java.lang.Integer$valueOf$int$1$block12;

  inline$java.lang.Integer$valueOf$int$1$block12:
    goto inline$java.lang.Integer$valueOf$int$1$Return;

  inline$java.lang.Integer$valueOf$int$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29 := inline$java.lang.Integer$valueOf$int$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$3:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$4:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon48:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26;
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon48;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15 := fixed.$divInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$2$Entry;

  inline$java.lang.Integer$valueOf$int$2$Entry:
    inline$java.lang.Integer$valueOf$int$2$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15;
    havoc inline$java.lang.Integer$valueOf$int$2$$fakelocal_0, inline$java.lang.Integer$valueOf$int$2$$r0, inline$java.lang.Integer$valueOf$int$2$i0, inline$java.lang.Integer$valueOf$int$2$$return, inline$java.lang.Integer$valueOf$int$2$$exception;
    inline$java.lang.Integer$valueOf$int$2$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$2$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$2$anon0;

  inline$java.lang.Integer$valueOf$int$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$2$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$2$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$2$i0 := inline$java.lang.Integer$valueOf$int$2$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$2$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$2$$r0 := inline$java.lang.Integer$valueOf$int$2$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$2$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$2$$this := inline$java.lang.Integer$valueOf$int$2$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$2$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$2$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$2$i0, inline$java.lang.Integer$$la$init$ra$$int$2$r0, inline$java.lang.Integer$$la$init$ra$$int$2$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$2$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$2$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$2$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$2$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$2$r0 := inline$java.lang.Integer$$la$init$ra$$int$2$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$2$i0 := inline$java.lang.Integer$$la$init$ra$$int$2$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.Integer$$la$init$ra$$int$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.Integer$$la$init$ra$$int$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$2$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$2$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$2$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$block11;

  inline$java.lang.Integer$$la$init$ra$$int$2$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$2$Return;

  inline$java.lang.Integer$$la$init$ra$$int$2$Return:
    inline$java.lang.Integer$valueOf$int$2$$exception := inline$java.lang.Integer$$la$init$ra$$int$2$$exception;
    goto inline$java.lang.Integer$valueOf$int$2$anon0$1;

  inline$java.lang.Integer$valueOf$int$2$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$2$$return := inline$java.lang.Integer$valueOf$int$2$$r0;
    goto inline$java.lang.Integer$valueOf$int$2$block12;

  inline$java.lang.Integer$valueOf$int$2$block12:
    goto inline$java.lang.Integer$valueOf$int$2$Return;

  inline$java.lang.Integer$valueOf$int$2$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25 := inline$java.lang.Integer$valueOf$int$2$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$2$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42:
    goto inline$java.lang.Integer$intValue$$2$Entry;

  inline$java.lang.Integer$intValue$$2$Entry:
    inline$java.lang.Integer$intValue$$2$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23;
    havoc inline$java.lang.Integer$intValue$$2$$i0, inline$java.lang.Integer$intValue$$2$r0, inline$java.lang.Integer$intValue$$2$$return, inline$java.lang.Integer$intValue$$2$$exception;
    goto inline$java.lang.Integer$intValue$$2$anon0;

  inline$java.lang.Integer$intValue$$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$2$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$2$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$2$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$2$r0 := inline$java.lang.Integer$intValue$$2$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$2$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$2$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$2$$return := inline$java.lang.Integer$intValue$$2$$i0;
    goto inline$java.lang.Integer$intValue$$2$block13;

  inline$java.lang.Integer$intValue$$2$block13:
    goto inline$java.lang.Integer$intValue$$2$Return;

  inline$java.lang.Integer$intValue$$2$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18 := inline$java.lang.Integer$intValue$$2$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$2$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$3$Entry;

  inline$java.lang.Integer$valueOf$int$3$Entry:
    inline$java.lang.Integer$valueOf$int$3$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17;
    havoc inline$java.lang.Integer$valueOf$int$3$$fakelocal_0, inline$java.lang.Integer$valueOf$int$3$$r0, inline$java.lang.Integer$valueOf$int$3$i0, inline$java.lang.Integer$valueOf$int$3$$return, inline$java.lang.Integer$valueOf$int$3$$exception;
    inline$java.lang.Integer$valueOf$int$3$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$3$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$3$anon0;

  inline$java.lang.Integer$valueOf$int$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$3$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$3$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$3$i0 := inline$java.lang.Integer$valueOf$int$3$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$3$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$3$$r0 := inline$java.lang.Integer$valueOf$int$3$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$3$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$3$$this := inline$java.lang.Integer$valueOf$int$3$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$3$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$3$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$3$i0, inline$java.lang.Integer$$la$init$ra$$int$3$r0, inline$java.lang.Integer$$la$init$ra$$int$3$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$3$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$3$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$3$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$3$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$3$r0 := inline$java.lang.Integer$$la$init$ra$$int$3$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$3$i0 := inline$java.lang.Integer$$la$init$ra$$int$3$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.Integer$$la$init$ra$$int$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.Integer$$la$init$ra$$int$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$3$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$3$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$3$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$block11;

  inline$java.lang.Integer$$la$init$ra$$int$3$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$3$Return;

  inline$java.lang.Integer$$la$init$ra$$int$3$Return:
    inline$java.lang.Integer$valueOf$int$3$$exception := inline$java.lang.Integer$$la$init$ra$$int$3$$exception;
    goto inline$java.lang.Integer$valueOf$int$3$anon0$1;

  inline$java.lang.Integer$valueOf$int$3$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$3$$return := inline$java.lang.Integer$valueOf$int$3$$r0;
    goto inline$java.lang.Integer$valueOf$int$3$block12;

  inline$java.lang.Integer$valueOf$int$3$block12:
    goto inline$java.lang.Integer$valueOf$int$3$Return;

  inline$java.lang.Integer$valueOf$int$3$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24 := inline$java.lang.Integer$valueOf$int$3$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$3$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon39:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22;
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon39;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$4$Entry;

  inline$java.lang.Integer$valueOf$int$4$Entry:
    inline$java.lang.Integer$valueOf$int$4$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14;
    havoc inline$java.lang.Integer$valueOf$int$4$$fakelocal_0, inline$java.lang.Integer$valueOf$int$4$$r0, inline$java.lang.Integer$valueOf$int$4$i0, inline$java.lang.Integer$valueOf$int$4$$return, inline$java.lang.Integer$valueOf$int$4$$exception;
    inline$java.lang.Integer$valueOf$int$4$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$4$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$4$anon0;

  inline$java.lang.Integer$valueOf$int$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$4$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$4$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$4$i0 := inline$java.lang.Integer$valueOf$int$4$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$4$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$4$$r0 := inline$java.lang.Integer$valueOf$int$4$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$4$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$4$$this := inline$java.lang.Integer$valueOf$int$4$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$4$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$4$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$4$i0, inline$java.lang.Integer$$la$init$ra$$int$4$r0, inline$java.lang.Integer$$la$init$ra$$int$4$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$4$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$4$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$4$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$4$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$4$r0 := inline$java.lang.Integer$$la$init$ra$$int$4$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$4$i0 := inline$java.lang.Integer$$la$init$ra$$int$4$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.Integer$$la$init$ra$$int$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.Integer$$la$init$ra$$int$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$4$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$4$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$4$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$block11;

  inline$java.lang.Integer$$la$init$ra$$int$4$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$4$Return;

  inline$java.lang.Integer$$la$init$ra$$int$4$Return:
    inline$java.lang.Integer$valueOf$int$4$$exception := inline$java.lang.Integer$$la$init$ra$$int$4$$exception;
    goto inline$java.lang.Integer$valueOf$int$4$anon0$1;

  inline$java.lang.Integer$valueOf$int$4$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$4$$return := inline$java.lang.Integer$valueOf$int$4$$r0;
    goto inline$java.lang.Integer$valueOf$int$4$block12;

  inline$java.lang.Integer$valueOf$int$4$block12:
    goto inline$java.lang.Integer$valueOf$int$4$Return;

  inline$java.lang.Integer$valueOf$int$4$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21 := inline$java.lang.Integer$valueOf$int$4$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$4$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33:
    goto inline$java.lang.Integer$intValue$$3$Entry;

  inline$java.lang.Integer$intValue$$3$Entry:
    inline$java.lang.Integer$intValue$$3$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19;
    havoc inline$java.lang.Integer$intValue$$3$$i0, inline$java.lang.Integer$intValue$$3$r0, inline$java.lang.Integer$intValue$$3$$return, inline$java.lang.Integer$intValue$$3$$exception;
    goto inline$java.lang.Integer$intValue$$3$anon0;

  inline$java.lang.Integer$intValue$$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$3$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$3$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$3$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$3$r0 := inline$java.lang.Integer$intValue$$3$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$3$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$3$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$3$$return := inline$java.lang.Integer$intValue$$3$$i0;
    goto inline$java.lang.Integer$intValue$$3$block13;

  inline$java.lang.Integer$intValue$$3$block13:
    goto inline$java.lang.Integer$intValue$$3$Return;

  inline$java.lang.Integer$intValue$$3$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19 := inline$java.lang.Integer$intValue$$3$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$3$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$5$Entry;

  inline$java.lang.Integer$valueOf$int$5$Entry:
    inline$java.lang.Integer$valueOf$int$5$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18;
    havoc inline$java.lang.Integer$valueOf$int$5$$fakelocal_0, inline$java.lang.Integer$valueOf$int$5$$r0, inline$java.lang.Integer$valueOf$int$5$i0, inline$java.lang.Integer$valueOf$int$5$$return, inline$java.lang.Integer$valueOf$int$5$$exception;
    inline$java.lang.Integer$valueOf$int$5$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$5$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$5$anon0;

  inline$java.lang.Integer$valueOf$int$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$5$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$5$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$5$i0 := inline$java.lang.Integer$valueOf$int$5$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$5$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$5$$r0 := inline$java.lang.Integer$valueOf$int$5$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$5$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$5$$this := inline$java.lang.Integer$valueOf$int$5$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$5$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$5$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$5$i0, inline$java.lang.Integer$$la$init$ra$$int$5$r0, inline$java.lang.Integer$$la$init$ra$$int$5$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$5$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$5$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$5$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$5$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$5$r0 := inline$java.lang.Integer$$la$init$ra$$int$5$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$5$i0 := inline$java.lang.Integer$$la$init$ra$$int$5$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.Integer$$la$init$ra$$int$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.Integer$$la$init$ra$$int$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$5$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$5$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$5$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$block11;

  inline$java.lang.Integer$$la$init$ra$$int$5$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$5$Return;

  inline$java.lang.Integer$$la$init$ra$$int$5$Return:
    inline$java.lang.Integer$valueOf$int$5$$exception := inline$java.lang.Integer$$la$init$ra$$int$5$$exception;
    goto inline$java.lang.Integer$valueOf$int$5$anon0$1;

  inline$java.lang.Integer$valueOf$int$5$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$5$$return := inline$java.lang.Integer$valueOf$int$5$$r0;
    goto inline$java.lang.Integer$valueOf$int$5$block12;

  inline$java.lang.Integer$valueOf$int$5$block12:
    goto inline$java.lang.Integer$valueOf$int$5$Return;

  inline$java.lang.Integer$valueOf$int$5$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20 := inline$java.lang.Integer$valueOf$int$5$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$5$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18;
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27:
    goto inline$java.lang.Integer$intValue$$4$Entry;

  inline$java.lang.Integer$intValue$$4$Entry:
    inline$java.lang.Integer$intValue$$4$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13;
    havoc inline$java.lang.Integer$intValue$$4$$i0, inline$java.lang.Integer$intValue$$4$r0, inline$java.lang.Integer$intValue$$4$$return, inline$java.lang.Integer$intValue$$4$$exception;
    goto inline$java.lang.Integer$intValue$$4$anon0;

  inline$java.lang.Integer$intValue$$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$4$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$4$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$4$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$4$r0 := inline$java.lang.Integer$intValue$$4$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$4$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$4$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$4$$return := inline$java.lang.Integer$intValue$$4$$i0;
    goto inline$java.lang.Integer$intValue$$4$block13;

  inline$java.lang.Integer$intValue$$4$block13:
    goto inline$java.lang.Integer$intValue$$4$Return;

  inline$java.lang.Integer$intValue$$4$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24 := inline$java.lang.Integer$intValue$$4$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$4$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$1:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$6$Entry;

  inline$java.lang.Integer$valueOf$int$6$Entry:
    inline$java.lang.Integer$valueOf$int$6$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24;
    havoc inline$java.lang.Integer$valueOf$int$6$$fakelocal_0, inline$java.lang.Integer$valueOf$int$6$$r0, inline$java.lang.Integer$valueOf$int$6$i0, inline$java.lang.Integer$valueOf$int$6$$return, inline$java.lang.Integer$valueOf$int$6$$exception;
    inline$java.lang.Integer$valueOf$int$6$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$6$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$6$anon0;

  inline$java.lang.Integer$valueOf$int$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$6$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$6$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$6$i0 := inline$java.lang.Integer$valueOf$int$6$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$6$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$6$$r0 := inline$java.lang.Integer$valueOf$int$6$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$6$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$6$$this := inline$java.lang.Integer$valueOf$int$6$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$6$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$6$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$6$i0, inline$java.lang.Integer$$la$init$ra$$int$6$r0, inline$java.lang.Integer$$la$init$ra$$int$6$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$6$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$6$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$6$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$6$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$6$r0 := inline$java.lang.Integer$$la$init$ra$$int$6$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$6$i0 := inline$java.lang.Integer$$la$init$ra$$int$6$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.Integer$$la$init$ra$$int$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.Integer$$la$init$ra$$int$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$6$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$6$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$6$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$block11;

  inline$java.lang.Integer$$la$init$ra$$int$6$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$6$Return;

  inline$java.lang.Integer$$la$init$ra$$int$6$Return:
    inline$java.lang.Integer$valueOf$int$6$$exception := inline$java.lang.Integer$$la$init$ra$$int$6$$exception;
    goto inline$java.lang.Integer$valueOf$int$6$anon0$1;

  inline$java.lang.Integer$valueOf$int$6$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$6$$return := inline$java.lang.Integer$valueOf$int$6$$r0;
    goto inline$java.lang.Integer$valueOf$int$6$block12;

  inline$java.lang.Integer$valueOf$int$6$block12:
    goto inline$java.lang.Integer$valueOf$int$6$Return;

  inline$java.lang.Integer$valueOf$int$6$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14 := inline$java.lang.Integer$valueOf$int$6$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$6$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$2:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$7$Entry;

  inline$java.lang.Integer$valueOf$int$7$Entry:
    inline$java.lang.Integer$valueOf$int$7$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24;
    havoc inline$java.lang.Integer$valueOf$int$7$$fakelocal_0, inline$java.lang.Integer$valueOf$int$7$$r0, inline$java.lang.Integer$valueOf$int$7$i0, inline$java.lang.Integer$valueOf$int$7$$return, inline$java.lang.Integer$valueOf$int$7$$exception;
    inline$java.lang.Integer$valueOf$int$7$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$7$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$7$anon0;

  inline$java.lang.Integer$valueOf$int$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$7$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$7$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$7$i0 := inline$java.lang.Integer$valueOf$int$7$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$7$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$7$$r0 := inline$java.lang.Integer$valueOf$int$7$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$7$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$7$$this := inline$java.lang.Integer$valueOf$int$7$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$7$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$7$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$7$i0, inline$java.lang.Integer$$la$init$ra$$int$7$r0, inline$java.lang.Integer$$la$init$ra$$int$7$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$7$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$7$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$7$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$7$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$7$r0 := inline$java.lang.Integer$$la$init$ra$$int$7$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$7$i0 := inline$java.lang.Integer$$la$init$ra$$int$7$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.lang.Integer$$la$init$ra$$int$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.lang.Integer$$la$init$ra$$int$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$7$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$7$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$7$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$block11;

  inline$java.lang.Integer$$la$init$ra$$int$7$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$7$Return;

  inline$java.lang.Integer$$la$init$ra$$int$7$Return:
    inline$java.lang.Integer$valueOf$int$7$$exception := inline$java.lang.Integer$$la$init$ra$$int$7$$exception;
    goto inline$java.lang.Integer$valueOf$int$7$anon0$1;

  inline$java.lang.Integer$valueOf$int$7$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$7$$return := inline$java.lang.Integer$valueOf$int$7$$r0;
    goto inline$java.lang.Integer$valueOf$int$7$block12;

  inline$java.lang.Integer$valueOf$int$7$block12:
    goto inline$java.lang.Integer$valueOf$int$7$Return;

  inline$java.lang.Integer$valueOf$int$7$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15 := inline$java.lang.Integer$valueOf$int$7$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$7$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$3:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$8$Entry;

  inline$java.lang.Integer$valueOf$int$8$Entry:
    inline$java.lang.Integer$valueOf$int$8$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18;
    havoc inline$java.lang.Integer$valueOf$int$8$$fakelocal_0, inline$java.lang.Integer$valueOf$int$8$$r0, inline$java.lang.Integer$valueOf$int$8$i0, inline$java.lang.Integer$valueOf$int$8$$return, inline$java.lang.Integer$valueOf$int$8$$exception;
    inline$java.lang.Integer$valueOf$int$8$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$8$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$8$anon0;

  inline$java.lang.Integer$valueOf$int$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$8$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$8$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$8$i0 := inline$java.lang.Integer$valueOf$int$8$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$8$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$8$$r0 := inline$java.lang.Integer$valueOf$int$8$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$8$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$8$$this := inline$java.lang.Integer$valueOf$int$8$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$8$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$8$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$8$i0, inline$java.lang.Integer$$la$init$ra$$int$8$r0, inline$java.lang.Integer$$la$init$ra$$int$8$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$8$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$8$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$8$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$8$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$8$r0 := inline$java.lang.Integer$$la$init$ra$$int$8$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$8$i0 := inline$java.lang.Integer$$la$init$ra$$int$8$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.lang.Integer$$la$init$ra$$int$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.lang.Integer$$la$init$ra$$int$8$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$8$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$8$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$8$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$block11;

  inline$java.lang.Integer$$la$init$ra$$int$8$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$8$Return;

  inline$java.lang.Integer$$la$init$ra$$int$8$Return:
    inline$java.lang.Integer$valueOf$int$8$$exception := inline$java.lang.Integer$$la$init$ra$$int$8$$exception;
    goto inline$java.lang.Integer$valueOf$int$8$anon0$1;

  inline$java.lang.Integer$valueOf$int$8$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$8$$return := inline$java.lang.Integer$valueOf$int$8$$r0;
    goto inline$java.lang.Integer$valueOf$int$8$block12;

  inline$java.lang.Integer$valueOf$int$8$block12:
    goto inline$java.lang.Integer$valueOf$int$8$Return;

  inline$java.lang.Integer$valueOf$int$8$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16 := inline$java.lang.Integer$valueOf$int$8$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$8$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$4:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$5;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$5:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$6;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$6:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon24:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12;
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon24;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$9$Entry;

  inline$java.lang.Integer$valueOf$int$9$Entry:
    inline$java.lang.Integer$valueOf$int$9$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12;
    havoc inline$java.lang.Integer$valueOf$int$9$$fakelocal_0, inline$java.lang.Integer$valueOf$int$9$$r0, inline$java.lang.Integer$valueOf$int$9$i0, inline$java.lang.Integer$valueOf$int$9$$return, inline$java.lang.Integer$valueOf$int$9$$exception;
    inline$java.lang.Integer$valueOf$int$9$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$9$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$9$anon0;

  inline$java.lang.Integer$valueOf$int$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$9$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$9$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$9$i0 := inline$java.lang.Integer$valueOf$int$9$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$9$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$9$$r0 := inline$java.lang.Integer$valueOf$int$9$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$9$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$9$$this := inline$java.lang.Integer$valueOf$int$9$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$9$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$9$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$9$i0, inline$java.lang.Integer$$la$init$ra$$int$9$r0, inline$java.lang.Integer$$la$init$ra$$int$9$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$9$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$9$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$9$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$9$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$9$r0 := inline$java.lang.Integer$$la$init$ra$$int$9$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$9$i0 := inline$java.lang.Integer$$la$init$ra$$int$9$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.lang.Integer$$la$init$ra$$int$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.lang.Integer$$la$init$ra$$int$9$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$9$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$9$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$9$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$block11;

  inline$java.lang.Integer$$la$init$ra$$int$9$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$9$Return;

  inline$java.lang.Integer$$la$init$ra$$int$9$Return:
    inline$java.lang.Integer$valueOf$int$9$$exception := inline$java.lang.Integer$$la$init$ra$$int$9$$exception;
    goto inline$java.lang.Integer$valueOf$int$9$anon0$1;

  inline$java.lang.Integer$valueOf$int$9$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$9$$return := inline$java.lang.Integer$valueOf$int$9$$r0;
    goto inline$java.lang.Integer$valueOf$int$9$block12;

  inline$java.lang.Integer$valueOf$int$9$block12:
    goto inline$java.lang.Integer$valueOf$int$9$Return;

  inline$java.lang.Integer$valueOf$int$9$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9 := inline$java.lang.Integer$valueOf$int$9$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$9$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$10$Entry;

  inline$java.lang.Integer$valueOf$int$10$Entry:
    inline$java.lang.Integer$valueOf$int$10$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19;
    havoc inline$java.lang.Integer$valueOf$int$10$$fakelocal_0, inline$java.lang.Integer$valueOf$int$10$$r0, inline$java.lang.Integer$valueOf$int$10$i0, inline$java.lang.Integer$valueOf$int$10$$return, inline$java.lang.Integer$valueOf$int$10$$exception;
    inline$java.lang.Integer$valueOf$int$10$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$10$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$10$anon0;

  inline$java.lang.Integer$valueOf$int$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$10$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$10$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$10$i0 := inline$java.lang.Integer$valueOf$int$10$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$10$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$10$$r0 := inline$java.lang.Integer$valueOf$int$10$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$10$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$10$$this := inline$java.lang.Integer$valueOf$int$10$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$10$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$10$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$10$i0, inline$java.lang.Integer$$la$init$ra$$int$10$r0, inline$java.lang.Integer$$la$init$ra$$int$10$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$10$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$10$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$10$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$10$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$10$r0 := inline$java.lang.Integer$$la$init$ra$$int$10$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$10$i0 := inline$java.lang.Integer$$la$init$ra$$int$10$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.lang.Integer$$la$init$ra$$int$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.lang.Integer$$la$init$ra$$int$10$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$10$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$10$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$10$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$block11;

  inline$java.lang.Integer$$la$init$ra$$int$10$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$10$Return;

  inline$java.lang.Integer$$la$init$ra$$int$10$Return:
    inline$java.lang.Integer$valueOf$int$10$$exception := inline$java.lang.Integer$$la$init$ra$$int$10$$exception;
    goto inline$java.lang.Integer$valueOf$int$10$anon0$1;

  inline$java.lang.Integer$valueOf$int$10$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$10$$return := inline$java.lang.Integer$valueOf$int$10$$r0;
    goto inline$java.lang.Integer$valueOf$int$10$block12;

  inline$java.lang.Integer$valueOf$int$10$block12:
    goto inline$java.lang.Integer$valueOf$int$10$Return;

  inline$java.lang.Integer$valueOf$int$10$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10 := inline$java.lang.Integer$valueOf$int$10$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$10$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$3:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$4:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18:
    goto inline$java.lang.Integer$intValue$$5$Entry;

  inline$java.lang.Integer$intValue$$5$Entry:
    inline$java.lang.Integer$intValue$$5$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7;
    havoc inline$java.lang.Integer$intValue$$5$$i0, inline$java.lang.Integer$intValue$$5$r0, inline$java.lang.Integer$intValue$$5$$return, inline$java.lang.Integer$intValue$$5$$exception;
    goto inline$java.lang.Integer$intValue$$5$anon0;

  inline$java.lang.Integer$intValue$$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$5$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$5$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$5$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$5$r0 := inline$java.lang.Integer$intValue$$5$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$5$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$5$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$5$$return := inline$java.lang.Integer$intValue$$5$$i0;
    goto inline$java.lang.Integer$intValue$$5$block13;

  inline$java.lang.Integer$intValue$$5$block13:
    goto inline$java.lang.Integer$intValue$$5$Return;

  inline$java.lang.Integer$intValue$$5$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23 := inline$java.lang.Integer$intValue$$5$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$5$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$11$Entry;

  inline$java.lang.Integer$valueOf$int$11$Entry:
    inline$java.lang.Integer$valueOf$int$11$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19;
    havoc inline$java.lang.Integer$valueOf$int$11$$fakelocal_0, inline$java.lang.Integer$valueOf$int$11$$r0, inline$java.lang.Integer$valueOf$int$11$i0, inline$java.lang.Integer$valueOf$int$11$$return, inline$java.lang.Integer$valueOf$int$11$$exception;
    inline$java.lang.Integer$valueOf$int$11$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$11$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$11$anon0;

  inline$java.lang.Integer$valueOf$int$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$11$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$11$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$11$i0 := inline$java.lang.Integer$valueOf$int$11$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$11$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$11$$r0 := inline$java.lang.Integer$valueOf$int$11$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$11$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$11$$this := inline$java.lang.Integer$valueOf$int$11$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$11$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$11$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$11$i0, inline$java.lang.Integer$$la$init$ra$$int$11$r0, inline$java.lang.Integer$$la$init$ra$$int$11$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$11$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$11$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$11$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$11$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$11$r0 := inline$java.lang.Integer$$la$init$ra$$int$11$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$11$i0 := inline$java.lang.Integer$$la$init$ra$$int$11$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.lang.Integer$$la$init$ra$$int$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.lang.Integer$$la$init$ra$$int$11$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$11$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$11$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$11$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$block11;

  inline$java.lang.Integer$$la$init$ra$$int$11$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$11$Return;

  inline$java.lang.Integer$$la$init$ra$$int$11$Return:
    inline$java.lang.Integer$valueOf$int$11$$exception := inline$java.lang.Integer$$la$init$ra$$int$11$$exception;
    goto inline$java.lang.Integer$valueOf$int$11$anon0$1;

  inline$java.lang.Integer$valueOf$int$11$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$11$$return := inline$java.lang.Integer$valueOf$int$11$$r0;
    goto inline$java.lang.Integer$valueOf$int$11$block12;

  inline$java.lang.Integer$valueOf$int$11$block12:
    goto inline$java.lang.Integer$valueOf$int$11$Return;

  inline$java.lang.Integer$valueOf$int$11$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8 := inline$java.lang.Integer$valueOf$int$11$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$11$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7;
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1 := 1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block41:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block42:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block43;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block43:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$1:
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3);
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$2:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22
   - inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$12$Entry;

  inline$java.lang.Integer$valueOf$int$12$Entry:
    inline$java.lang.Integer$valueOf$int$12$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11;
    havoc inline$java.lang.Integer$valueOf$int$12$$fakelocal_0, inline$java.lang.Integer$valueOf$int$12$$r0, inline$java.lang.Integer$valueOf$int$12$i0, inline$java.lang.Integer$valueOf$int$12$$return, inline$java.lang.Integer$valueOf$int$12$$exception;
    inline$java.lang.Integer$valueOf$int$12$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$12$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$12$anon0;

  inline$java.lang.Integer$valueOf$int$12$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$12$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$12$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$12$i0 := inline$java.lang.Integer$valueOf$int$12$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$12$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$12$$r0 := inline$java.lang.Integer$valueOf$int$12$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$12$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$12$$this := inline$java.lang.Integer$valueOf$int$12$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$12$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$12$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$12$i0, inline$java.lang.Integer$$la$init$ra$$int$12$r0, inline$java.lang.Integer$$la$init$ra$$int$12$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$12$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$12$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$12$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$12$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$12$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$12$r0 := inline$java.lang.Integer$$la$init$ra$$int$12$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$12$i0 := inline$java.lang.Integer$$la$init$ra$$int$12$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.lang.Integer$$la$init$ra$$int$12$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.lang.Integer$$la$init$ra$$int$12$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$12$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$12$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$12$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$block11;

  inline$java.lang.Integer$$la$init$ra$$int$12$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$12$Return;

  inline$java.lang.Integer$$la$init$ra$$int$12$Return:
    inline$java.lang.Integer$valueOf$int$12$$exception := inline$java.lang.Integer$$la$init$ra$$int$12$$exception;
    goto inline$java.lang.Integer$valueOf$int$12$anon0$1;

  inline$java.lang.Integer$valueOf$int$12$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$12$$return := inline$java.lang.Integer$valueOf$int$12$$r0;
    goto inline$java.lang.Integer$valueOf$int$12$block12;

  inline$java.lang.Integer$valueOf$int$12$block12:
    goto inline$java.lang.Integer$valueOf$int$12$Return;

  inline$java.lang.Integer$valueOf$int$12$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4 := inline$java.lang.Integer$valueOf$int$12$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$12$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$3:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$13$Entry;

  inline$java.lang.Integer$valueOf$int$13$Entry:
    inline$java.lang.Integer$valueOf$int$13$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22;
    havoc inline$java.lang.Integer$valueOf$int$13$$fakelocal_0, inline$java.lang.Integer$valueOf$int$13$$r0, inline$java.lang.Integer$valueOf$int$13$i0, inline$java.lang.Integer$valueOf$int$13$$return, inline$java.lang.Integer$valueOf$int$13$$exception;
    inline$java.lang.Integer$valueOf$int$13$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$13$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$13$anon0;

  inline$java.lang.Integer$valueOf$int$13$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$13$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$13$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$13$i0 := inline$java.lang.Integer$valueOf$int$13$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$13$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$13$$r0 := inline$java.lang.Integer$valueOf$int$13$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$13$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$13$$this := inline$java.lang.Integer$valueOf$int$13$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$13$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$13$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$13$i0, inline$java.lang.Integer$$la$init$ra$$int$13$r0, inline$java.lang.Integer$$la$init$ra$$int$13$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$13$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$13$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$13$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$13$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$13$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$13$r0 := inline$java.lang.Integer$$la$init$ra$$int$13$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$13$i0 := inline$java.lang.Integer$$la$init$ra$$int$13$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.lang.Integer$$la$init$ra$$int$13$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.lang.Integer$$la$init$ra$$int$13$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$13$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$13$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$13$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$block11;

  inline$java.lang.Integer$$la$init$ra$$int$13$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$13$Return;

  inline$java.lang.Integer$$la$init$ra$$int$13$Return:
    inline$java.lang.Integer$valueOf$int$13$$exception := inline$java.lang.Integer$$la$init$ra$$int$13$$exception;
    goto inline$java.lang.Integer$valueOf$int$13$anon0$1;

  inline$java.lang.Integer$valueOf$int$13$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$13$$return := inline$java.lang.Integer$valueOf$int$13$$r0;
    goto inline$java.lang.Integer$valueOf$int$13$block12;

  inline$java.lang.Integer$valueOf$int$13$block12:
    goto inline$java.lang.Integer$valueOf$int$13$Return;

  inline$java.lang.Integer$valueOf$int$13$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5 := inline$java.lang.Integer$valueOf$int$13$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$13$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$4:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$5;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$5:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9:
    goto inline$java.lang.Boolean$booleanValue$$0$Entry;

  inline$java.lang.Boolean$booleanValue$$0$Entry:
    inline$java.lang.Boolean$booleanValue$$0$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3;
    havoc inline$java.lang.Boolean$booleanValue$$0$r0, inline$java.lang.Boolean$booleanValue$$0$$z0, inline$java.lang.Boolean$booleanValue$$0$$return, inline$java.lang.Boolean$booleanValue$$0$$exception;
    goto inline$java.lang.Boolean$booleanValue$$0$anon0;

  inline$java.lang.Boolean$booleanValue$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$0$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$r0 := inline$java.lang.Boolean$booleanValue$$0$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$0$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$$return := inline$java.lang.Boolean$booleanValue$$0$$z0;
    goto inline$java.lang.Boolean$booleanValue$$0$block10;

  inline$java.lang.Boolean$booleanValue$$0$block10:
    goto inline$java.lang.Boolean$booleanValue$$0$Return;

  inline$java.lang.Boolean$booleanValue$$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4 := inline$java.lang.Boolean$booleanValue$$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Boolean$booleanValue$$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9$1:
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2;
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17;
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__1 := 0;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$1:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block24:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block25:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block26;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block26:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$2:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$0$Entry;

  inline$java.lang.Boolean$valueOf$boolean$0$Entry:
    inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0 := 1;
    havoc inline$java.lang.Boolean$valueOf$boolean$0$z0, inline$java.lang.Boolean$valueOf$boolean$0$$r0, inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$0$$return, inline$java.lang.Boolean$valueOf$boolean$0$$exception;
    inline$java.lang.Boolean$valueOf$boolean$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$0$anon0;

  inline$java.lang.Boolean$valueOf$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$0$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$0$z0 := inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$0$$r0 := inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := inline$java.lang.Boolean$valueOf$boolean$0$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$0$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$14$Entry;

  inline$java.lang.Object$$la$init$ra$$$14$Entry:
    inline$java.lang.Object$$la$init$ra$$$14$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$14$anon0;

  inline$java.lang.Object$$la$init$ra$$$14$anon0:
    inline$java.lang.Object$$la$init$ra$$$14$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$14$Return;

  inline$java.lang.Object$$la$init$ra$$$14$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    inline$java.lang.Boolean$valueOf$boolean$0$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$0$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$0$$return := inline$java.lang.Boolean$valueOf$boolean$0$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$0$block9;

  inline$java.lang.Boolean$valueOf$boolean$0$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$0$Return;

  inline$java.lang.Boolean$valueOf$boolean$0$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0 := inline$java.lang.Boolean$valueOf$boolean$0$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Boolean$valueOf$boolean$0$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$3:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$1$Entry;

  inline$java.lang.Boolean$valueOf$boolean$1$Entry:
    inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    havoc inline$java.lang.Boolean$valueOf$boolean$1$z0, inline$java.lang.Boolean$valueOf$boolean$1$$r0, inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$1$$return, inline$java.lang.Boolean$valueOf$boolean$1$$exception;
    inline$java.lang.Boolean$valueOf$boolean$1$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$1$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$1$anon0;

  inline$java.lang.Boolean$valueOf$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$1$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$1$z0 := inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$1$$r0 := inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this := inline$java.lang.Boolean$valueOf$boolean$1$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$1$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$15$Entry;

  inline$java.lang.Object$$la$init$ra$$$15$Entry:
    inline$java.lang.Object$$la$init$ra$$$15$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$15$anon0;

  inline$java.lang.Object$$la$init$ra$$$15$anon0:
    inline$java.lang.Object$$la$init$ra$$$15$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$15$Return;

  inline$java.lang.Object$$la$init$ra$$$15$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception := inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$Return:
    inline$java.lang.Boolean$valueOf$boolean$1$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$1$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$1$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$1$$return := inline$java.lang.Boolean$valueOf$boolean$1$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$1$block9;

  inline$java.lang.Boolean$valueOf$boolean$1$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$1$Return;

  inline$java.lang.Boolean$valueOf$boolean$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1 := inline$java.lang.Boolean$valueOf$boolean$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Boolean$valueOf$boolean$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$4:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$5;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$5:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Else:
    assume {:partition} 0
   < inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21_dummy:
    assume false;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$exit:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return:
    $return := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return;
    $exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    $fakelocal_7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7;
    $r23 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23;
    $z3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3;
    i21 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21;
    $r26 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26;
    $l9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9;
    $r24 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24;
    $r2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2;
    $fakelocal_16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16;
    $r21 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21;
    $r5 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5;
    z4 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    $r22 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22;
    $r3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3;
    $r31 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31;
    $r15 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15;
    $i15 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15;
    $r12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12;
    $fakelocal_4 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4;
    $fakelocal_17 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17;
    $r18 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18;
    $r9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9;
    i20 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20;
    z0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0;
    $fakelocal_5 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5;
    $i7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7;
    i19 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19;
    $r17 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17;
    $r11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11;
    $r10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10;
    i24 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24;
    $r14 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14;
    $fakelocal_8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8;
    $r20 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20;
    $fakelocal_9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9;
    $fakelocal_13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13;
    $i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11;
    $l8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8;
    $r29 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29;
    i18 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18;
    z2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2;
    $fakelocal_6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6;
    $fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    $fakelocal_2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    $fakelocal_0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    $r27 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27;
    $l6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6;
    i17 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17;
    z1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1;
    $r1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1;
    $fakelocal_11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11;
    $r7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7;
    i22 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22;
    i23 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23;
    $i12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12;
    $r28 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28;
    $r8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8;
    $fakelocal_10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10;
    $i13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13;
    $r13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13;
    $fakelocal_12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12;
    $r4 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4;
    $r25 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25;
    $r0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0;
    $r6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6;
    $fakelocal_15 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15;
    $i16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16;
    $i14 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14;
    $l10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10;
    $r30 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30;
    $r19 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19;
    $r16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16;
    $fakelocal_14 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14;
    $fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    goto block19$1;

  block19$1:
    goto block19_last;

  anon61_Else:
    assume {:partition} 0 < i21;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    $l6 := i17;
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__0 := $l6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__1 := 0;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Return:
    $z3 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0 := $z3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block24:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block25:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block26;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block26:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return:
    z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto anon3$2;

  anon3$2:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$2$Entry;

  inline$java.lang.Boolean$valueOf$boolean$2$Entry:
    inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0 := 1;
    havoc inline$java.lang.Boolean$valueOf$boolean$2$z0, inline$java.lang.Boolean$valueOf$boolean$2$$r0, inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$2$$return, inline$java.lang.Boolean$valueOf$boolean$2$$exception;
    inline$java.lang.Boolean$valueOf$boolean$2$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$2$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$2$anon0;

  inline$java.lang.Boolean$valueOf$boolean$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$2$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$2$z0 := inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$2$$r0 := inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this := inline$java.lang.Boolean$valueOf$boolean$2$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$2$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$16$Entry;

  inline$java.lang.Object$$la$init$ra$$$16$Entry:
    inline$java.lang.Object$$la$init$ra$$$16$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$16$anon0;

  inline$java.lang.Object$$la$init$ra$$$16$anon0:
    inline$java.lang.Object$$la$init$ra$$$16$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$16$Return;

  inline$java.lang.Object$$la$init$ra$$$16$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception := inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$Return:
    inline$java.lang.Boolean$valueOf$boolean$2$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$2$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$2$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$2$$return := inline$java.lang.Boolean$valueOf$boolean$2$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$2$block9;

  inline$java.lang.Boolean$valueOf$boolean$2$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$2$Return;

  inline$java.lang.Boolean$valueOf$boolean$2$Return:
    $r0 := inline$java.lang.Boolean$valueOf$boolean$2$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$2$$exception;
    goto anon3$3;

  anon3$3:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$3$Entry;

  inline$java.lang.Boolean$valueOf$boolean$3$Entry:
    inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0 := z4;
    havoc inline$java.lang.Boolean$valueOf$boolean$3$z0, inline$java.lang.Boolean$valueOf$boolean$3$$r0, inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$3$$return, inline$java.lang.Boolean$valueOf$boolean$3$$exception;
    inline$java.lang.Boolean$valueOf$boolean$3$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$3$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$3$anon0;

  inline$java.lang.Boolean$valueOf$boolean$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$3$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$3$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$3$z0 := inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$3$$r0 := inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this := inline$java.lang.Boolean$valueOf$boolean$3$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$3$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$17$Entry;

  inline$java.lang.Object$$la$init$ra$$$17$Entry:
    inline$java.lang.Object$$la$init$ra$$$17$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$17$anon0;

  inline$java.lang.Object$$la$init$ra$$$17$anon0:
    inline$java.lang.Object$$la$init$ra$$$17$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$17$Return;

  inline$java.lang.Object$$la$init$ra$$$17$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception := inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$Return:
    inline$java.lang.Boolean$valueOf$boolean$3$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$3$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$3$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$3$$return := inline$java.lang.Boolean$valueOf$boolean$3$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$3$block9;

  inline$java.lang.Boolean$valueOf$boolean$3$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$3$Return;

  inline$java.lang.Boolean$valueOf$boolean$3$Return:
    $r1 := inline$java.lang.Boolean$valueOf$boolean$3$$return;
    $exception := inline$java.lang.Boolean$valueOf$boolean$3$$exception;
    goto anon3$4;

  anon3$4:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__0 := z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1 := $r0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2 := $r1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Return:
    $r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception;
    goto anon3$5;

  anon3$5:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} !(fixed.$heap[$r2, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon62_Then:
    assume {:partition} fixed.$heap[$r2, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon6;

  anon6:
    $r3 := $r2;
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} $r3 == fixed.$null;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon63_Then:
    assume {:partition} $r3 != fixed.$null;
    $exception := $exception;
    goto anon9;

  anon9:
    goto inline$java.lang.Boolean$booleanValue$$1$Entry;

  inline$java.lang.Boolean$booleanValue$$1$Entry:
    inline$java.lang.Boolean$booleanValue$$1$$this := $r3;
    havoc inline$java.lang.Boolean$booleanValue$$1$r0, inline$java.lang.Boolean$booleanValue$$1$$z0, inline$java.lang.Boolean$booleanValue$$1$$return, inline$java.lang.Boolean$booleanValue$$1$$exception;
    goto inline$java.lang.Boolean$booleanValue$$1$anon0;

  inline$java.lang.Boolean$booleanValue$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$1$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$1$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$r0 := inline$java.lang.Boolean$booleanValue$$1$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$1$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$$return := inline$java.lang.Boolean$booleanValue$$1$$z0;
    goto inline$java.lang.Boolean$booleanValue$$1$block10;

  inline$java.lang.Boolean$booleanValue$$1$block10:
    goto inline$java.lang.Boolean$booleanValue$$1$Return;

  inline$java.lang.Boolean$booleanValue$$1$Return:
    z4 := inline$java.lang.Boolean$booleanValue$$1$$return;
    $exception := inline$java.lang.Boolean$booleanValue$$1$$exception;
    goto anon9$1;

  anon9$1:
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon64_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon12;

  anon12:
    $i7 := fixed.$modInt(i17, 2);
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    $l8 := $i7;
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0 := $l8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1 := 1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block41:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block42:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block43;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block43:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return:
    z1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto anon12$1;

  anon12$1:
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    i22 := fixed.$mulInt(i18, i3);
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    $l10 := i22;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    $l9 := i1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__0 := $l10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__1 := $l9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Return:
    z2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception;
    goto anon12$2;

  anon12$2:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    $i11 := i22 - i1;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$14$Entry;

  inline$java.lang.Integer$valueOf$int$14$Entry:
    inline$java.lang.Integer$valueOf$int$14$$in_parameter__0 := $i11;
    havoc inline$java.lang.Integer$valueOf$int$14$$fakelocal_0, inline$java.lang.Integer$valueOf$int$14$$r0, inline$java.lang.Integer$valueOf$int$14$i0, inline$java.lang.Integer$valueOf$int$14$$return, inline$java.lang.Integer$valueOf$int$14$$exception;
    inline$java.lang.Integer$valueOf$int$14$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$14$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$14$anon0;

  inline$java.lang.Integer$valueOf$int$14$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$14$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$14$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$14$i0 := inline$java.lang.Integer$valueOf$int$14$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$14$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$14$$r0 := inline$java.lang.Integer$valueOf$int$14$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$14$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$14$$this := inline$java.lang.Integer$valueOf$int$14$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$14$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$14$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$14$i0, inline$java.lang.Integer$$la$init$ra$$int$14$r0, inline$java.lang.Integer$$la$init$ra$$int$14$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$14$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$14$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$14$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$14$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$14$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$14$r0 := inline$java.lang.Integer$$la$init$ra$$int$14$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$14$i0 := inline$java.lang.Integer$$la$init$ra$$int$14$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$18$Entry;

  inline$java.lang.Object$$la$init$ra$$$18$Entry:
    inline$java.lang.Object$$la$init$ra$$$18$$this := inline$java.lang.Integer$$la$init$ra$$int$14$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$18$anon0;

  inline$java.lang.Object$$la$init$ra$$$18$anon0:
    inline$java.lang.Object$$la$init$ra$$$18$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$18$Return;

  inline$java.lang.Object$$la$init$ra$$$18$Return:
    inline$java.lang.Integer$$la$init$ra$$int$14$$exception := inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$14$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$14$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$14$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$block11;

  inline$java.lang.Integer$$la$init$ra$$int$14$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$14$Return;

  inline$java.lang.Integer$$la$init$ra$$int$14$Return:
    inline$java.lang.Integer$valueOf$int$14$$exception := inline$java.lang.Integer$$la$init$ra$$int$14$$exception;
    goto inline$java.lang.Integer$valueOf$int$14$anon0$1;

  inline$java.lang.Integer$valueOf$int$14$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$14$$return := inline$java.lang.Integer$valueOf$int$14$$r0;
    goto inline$java.lang.Integer$valueOf$int$14$block12;

  inline$java.lang.Integer$valueOf$int$14$block12:
    goto inline$java.lang.Integer$valueOf$int$14$Return;

  inline$java.lang.Integer$valueOf$int$14$Return:
    $r4 := inline$java.lang.Integer$valueOf$int$14$$return;
    $exception := inline$java.lang.Integer$valueOf$int$14$$exception;
    goto anon12$3;

  anon12$3:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$15$Entry;

  inline$java.lang.Integer$valueOf$int$15$Entry:
    inline$java.lang.Integer$valueOf$int$15$$in_parameter__0 := i22;
    havoc inline$java.lang.Integer$valueOf$int$15$$fakelocal_0, inline$java.lang.Integer$valueOf$int$15$$r0, inline$java.lang.Integer$valueOf$int$15$i0, inline$java.lang.Integer$valueOf$int$15$$return, inline$java.lang.Integer$valueOf$int$15$$exception;
    inline$java.lang.Integer$valueOf$int$15$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$15$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$15$anon0;

  inline$java.lang.Integer$valueOf$int$15$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$15$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$15$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$15$i0 := inline$java.lang.Integer$valueOf$int$15$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$15$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$15$$r0 := inline$java.lang.Integer$valueOf$int$15$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$15$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$15$$this := inline$java.lang.Integer$valueOf$int$15$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$15$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$15$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$15$i0, inline$java.lang.Integer$$la$init$ra$$int$15$r0, inline$java.lang.Integer$$la$init$ra$$int$15$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$15$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$15$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$15$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$15$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$15$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$15$r0 := inline$java.lang.Integer$$la$init$ra$$int$15$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$15$i0 := inline$java.lang.Integer$$la$init$ra$$int$15$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$19$Entry;

  inline$java.lang.Object$$la$init$ra$$$19$Entry:
    inline$java.lang.Object$$la$init$ra$$$19$$this := inline$java.lang.Integer$$la$init$ra$$int$15$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$19$anon0;

  inline$java.lang.Object$$la$init$ra$$$19$anon0:
    inline$java.lang.Object$$la$init$ra$$$19$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$19$Return;

  inline$java.lang.Object$$la$init$ra$$$19$Return:
    inline$java.lang.Integer$$la$init$ra$$int$15$$exception := inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$15$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$15$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$15$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$block11;

  inline$java.lang.Integer$$la$init$ra$$int$15$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$15$Return;

  inline$java.lang.Integer$$la$init$ra$$int$15$Return:
    inline$java.lang.Integer$valueOf$int$15$$exception := inline$java.lang.Integer$$la$init$ra$$int$15$$exception;
    goto inline$java.lang.Integer$valueOf$int$15$anon0$1;

  inline$java.lang.Integer$valueOf$int$15$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$15$$return := inline$java.lang.Integer$valueOf$int$15$$r0;
    goto inline$java.lang.Integer$valueOf$int$15$block12;

  inline$java.lang.Integer$valueOf$int$15$block12:
    goto inline$java.lang.Integer$valueOf$int$15$Return;

  inline$java.lang.Integer$valueOf$int$15$Return:
    $r5 := inline$java.lang.Integer$valueOf$int$15$$return;
    $exception := inline$java.lang.Integer$valueOf$int$15$$exception;
    goto anon12$4;

  anon12$4:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__0 := z2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1 := $r4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2 := $r5;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Return:
    $r6 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception;
    goto anon12$5;

  anon12$5:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} !(fixed.$heap[$r6, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon65_Then:
    assume {:partition} fixed.$heap[$r6, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon15;

  anon15:
    $r7 := $r6;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} $r7 == fixed.$null;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_4;
    return;

  anon66_Then:
    assume {:partition} $r7 != fixed.$null;
    $exception := $exception;
    goto anon18;

  anon18:
    goto inline$java.lang.Integer$intValue$$6$Entry;

  inline$java.lang.Integer$intValue$$6$Entry:
    inline$java.lang.Integer$intValue$$6$$this := $r7;
    havoc inline$java.lang.Integer$intValue$$6$$i0, inline$java.lang.Integer$intValue$$6$r0, inline$java.lang.Integer$intValue$$6$$return, inline$java.lang.Integer$intValue$$6$$exception;
    goto inline$java.lang.Integer$intValue$$6$anon0;

  inline$java.lang.Integer$intValue$$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$6$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$6$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$6$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$6$r0 := inline$java.lang.Integer$intValue$$6$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$6$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$6$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$6$$return := inline$java.lang.Integer$intValue$$6$$i0;
    goto inline$java.lang.Integer$intValue$$6$block13;

  inline$java.lang.Integer$intValue$$6$block13:
    goto inline$java.lang.Integer$intValue$$6$Return;

  inline$java.lang.Integer$intValue$$6$Return:
    i23 := inline$java.lang.Integer$intValue$$6$$return;
    $exception := inline$java.lang.Integer$intValue$$6$$exception;
    goto anon18$1;

  anon18$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$16$Entry;

  inline$java.lang.Integer$valueOf$int$16$Entry:
    inline$java.lang.Integer$valueOf$int$16$$in_parameter__0 := i19;
    havoc inline$java.lang.Integer$valueOf$int$16$$fakelocal_0, inline$java.lang.Integer$valueOf$int$16$$r0, inline$java.lang.Integer$valueOf$int$16$i0, inline$java.lang.Integer$valueOf$int$16$$return, inline$java.lang.Integer$valueOf$int$16$$exception;
    inline$java.lang.Integer$valueOf$int$16$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$16$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$16$anon0;

  inline$java.lang.Integer$valueOf$int$16$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$16$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$16$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$16$i0 := inline$java.lang.Integer$valueOf$int$16$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$16$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$16$$r0 := inline$java.lang.Integer$valueOf$int$16$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$16$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$16$$this := inline$java.lang.Integer$valueOf$int$16$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$16$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$16$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$16$i0, inline$java.lang.Integer$$la$init$ra$$int$16$r0, inline$java.lang.Integer$$la$init$ra$$int$16$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$16$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$16$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$16$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$16$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$16$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$16$r0 := inline$java.lang.Integer$$la$init$ra$$int$16$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$16$i0 := inline$java.lang.Integer$$la$init$ra$$int$16$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$20$Entry;

  inline$java.lang.Object$$la$init$ra$$$20$Entry:
    inline$java.lang.Object$$la$init$ra$$$20$$this := inline$java.lang.Integer$$la$init$ra$$int$16$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$20$anon0;

  inline$java.lang.Object$$la$init$ra$$$20$anon0:
    inline$java.lang.Object$$la$init$ra$$$20$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$20$Return;

  inline$java.lang.Object$$la$init$ra$$$20$Return:
    inline$java.lang.Integer$$la$init$ra$$int$16$$exception := inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$16$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$16$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$16$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$block11;

  inline$java.lang.Integer$$la$init$ra$$int$16$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$16$Return;

  inline$java.lang.Integer$$la$init$ra$$int$16$Return:
    inline$java.lang.Integer$valueOf$int$16$$exception := inline$java.lang.Integer$$la$init$ra$$int$16$$exception;
    goto inline$java.lang.Integer$valueOf$int$16$anon0$1;

  inline$java.lang.Integer$valueOf$int$16$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$16$$return := inline$java.lang.Integer$valueOf$int$16$$r0;
    goto inline$java.lang.Integer$valueOf$int$16$block12;

  inline$java.lang.Integer$valueOf$int$16$block12:
    goto inline$java.lang.Integer$valueOf$int$16$Return;

  inline$java.lang.Integer$valueOf$int$16$Return:
    $r8 := inline$java.lang.Integer$valueOf$int$16$$return;
    $exception := inline$java.lang.Integer$valueOf$int$16$$exception;
    goto anon18$2;

  anon18$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} i1 == 0;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_5;
    return;

  anon67_Then:
    assume {:partition} i1 != 0;
    $exception := $exception;
    goto anon21;

  anon21:
    $i12 := fixed.$modInt(i23, i1);
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$17$Entry;

  inline$java.lang.Integer$valueOf$int$17$Entry:
    inline$java.lang.Integer$valueOf$int$17$$in_parameter__0 := $i12;
    havoc inline$java.lang.Integer$valueOf$int$17$$fakelocal_0, inline$java.lang.Integer$valueOf$int$17$$r0, inline$java.lang.Integer$valueOf$int$17$i0, inline$java.lang.Integer$valueOf$int$17$$return, inline$java.lang.Integer$valueOf$int$17$$exception;
    inline$java.lang.Integer$valueOf$int$17$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$17$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$17$anon0;

  inline$java.lang.Integer$valueOf$int$17$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$17$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$17$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$17$i0 := inline$java.lang.Integer$valueOf$int$17$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$17$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$17$$r0 := inline$java.lang.Integer$valueOf$int$17$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$17$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$17$$this := inline$java.lang.Integer$valueOf$int$17$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$17$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$17$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$17$i0, inline$java.lang.Integer$$la$init$ra$$int$17$r0, inline$java.lang.Integer$$la$init$ra$$int$17$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$17$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$17$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$17$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$17$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$17$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$17$r0 := inline$java.lang.Integer$$la$init$ra$$int$17$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$17$i0 := inline$java.lang.Integer$$la$init$ra$$int$17$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$21$Entry;

  inline$java.lang.Object$$la$init$ra$$$21$Entry:
    inline$java.lang.Object$$la$init$ra$$$21$$this := inline$java.lang.Integer$$la$init$ra$$int$17$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$21$anon0;

  inline$java.lang.Object$$la$init$ra$$$21$anon0:
    inline$java.lang.Object$$la$init$ra$$$21$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$21$Return;

  inline$java.lang.Object$$la$init$ra$$$21$Return:
    inline$java.lang.Integer$$la$init$ra$$int$17$$exception := inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$17$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$17$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$17$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$block11;

  inline$java.lang.Integer$$la$init$ra$$int$17$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$17$Return;

  inline$java.lang.Integer$$la$init$ra$$int$17$Return:
    inline$java.lang.Integer$valueOf$int$17$$exception := inline$java.lang.Integer$$la$init$ra$$int$17$$exception;
    goto inline$java.lang.Integer$valueOf$int$17$anon0$1;

  inline$java.lang.Integer$valueOf$int$17$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$17$$return := inline$java.lang.Integer$valueOf$int$17$$r0;
    goto inline$java.lang.Integer$valueOf$int$17$block12;

  inline$java.lang.Integer$valueOf$int$17$block12:
    goto inline$java.lang.Integer$valueOf$int$17$Return;

  inline$java.lang.Integer$valueOf$int$17$Return:
    $r9 := inline$java.lang.Integer$valueOf$int$17$$return;
    $exception := inline$java.lang.Integer$valueOf$int$17$$exception;
    goto anon21$1;

  anon21$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$18$Entry;

  inline$java.lang.Integer$valueOf$int$18$Entry:
    inline$java.lang.Integer$valueOf$int$18$$in_parameter__0 := i19;
    havoc inline$java.lang.Integer$valueOf$int$18$$fakelocal_0, inline$java.lang.Integer$valueOf$int$18$$r0, inline$java.lang.Integer$valueOf$int$18$i0, inline$java.lang.Integer$valueOf$int$18$$return, inline$java.lang.Integer$valueOf$int$18$$exception;
    inline$java.lang.Integer$valueOf$int$18$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$18$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$18$anon0;

  inline$java.lang.Integer$valueOf$int$18$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$18$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$18$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$18$i0 := inline$java.lang.Integer$valueOf$int$18$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$18$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$18$$r0 := inline$java.lang.Integer$valueOf$int$18$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$18$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$18$$this := inline$java.lang.Integer$valueOf$int$18$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$18$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$18$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$18$i0, inline$java.lang.Integer$$la$init$ra$$int$18$r0, inline$java.lang.Integer$$la$init$ra$$int$18$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$18$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$18$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$18$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$18$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$18$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$18$r0 := inline$java.lang.Integer$$la$init$ra$$int$18$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$18$i0 := inline$java.lang.Integer$$la$init$ra$$int$18$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$22$Entry;

  inline$java.lang.Object$$la$init$ra$$$22$Entry:
    inline$java.lang.Object$$la$init$ra$$$22$$this := inline$java.lang.Integer$$la$init$ra$$int$18$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$22$anon0;

  inline$java.lang.Object$$la$init$ra$$$22$anon0:
    inline$java.lang.Object$$la$init$ra$$$22$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$22$Return;

  inline$java.lang.Object$$la$init$ra$$$22$Return:
    inline$java.lang.Integer$$la$init$ra$$int$18$$exception := inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$18$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$18$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$18$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$block11;

  inline$java.lang.Integer$$la$init$ra$$int$18$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$18$Return;

  inline$java.lang.Integer$$la$init$ra$$int$18$Return:
    inline$java.lang.Integer$valueOf$int$18$$exception := inline$java.lang.Integer$$la$init$ra$$int$18$$exception;
    goto inline$java.lang.Integer$valueOf$int$18$anon0$1;

  inline$java.lang.Integer$valueOf$int$18$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$18$$return := inline$java.lang.Integer$valueOf$int$18$$r0;
    goto inline$java.lang.Integer$valueOf$int$18$block12;

  inline$java.lang.Integer$valueOf$int$18$block12:
    goto inline$java.lang.Integer$valueOf$int$18$Return;

  inline$java.lang.Integer$valueOf$int$18$Return:
    $r10 := inline$java.lang.Integer$valueOf$int$18$$return;
    $exception := inline$java.lang.Integer$valueOf$int$18$$exception;
    goto anon21$2;

  anon21$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__0 := z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1 := $r9;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2 := $r10;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Return:
    $r11 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception;
    goto anon21$3;

  anon21$3:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__0 := z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1 := $r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2 := $r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Return:
    $r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception;
    goto anon21$4;

  anon21$4:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} !(fixed.$heap[$r12, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_6;
    return;

  anon68_Then:
    assume {:partition} fixed.$heap[$r12, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon24;

  anon24:
    $r13 := $r12;
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} $r13 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_7;
    return;

  anon69_Then:
    assume {:partition} $r13 != fixed.$null;
    $exception := $exception;
    goto anon27;

  anon27:
    goto inline$java.lang.Integer$intValue$$7$Entry;

  inline$java.lang.Integer$intValue$$7$Entry:
    inline$java.lang.Integer$intValue$$7$$this := $r13;
    havoc inline$java.lang.Integer$intValue$$7$$i0, inline$java.lang.Integer$intValue$$7$r0, inline$java.lang.Integer$intValue$$7$$return, inline$java.lang.Integer$intValue$$7$$exception;
    goto inline$java.lang.Integer$intValue$$7$anon0;

  inline$java.lang.Integer$intValue$$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$7$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$7$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$7$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$7$r0 := inline$java.lang.Integer$intValue$$7$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$7$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$7$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$7$$return := inline$java.lang.Integer$intValue$$7$$i0;
    goto inline$java.lang.Integer$intValue$$7$block13;

  inline$java.lang.Integer$intValue$$7$block13:
    goto inline$java.lang.Integer$intValue$$7$Return;

  inline$java.lang.Integer$intValue$$7$Return:
    i24 := inline$java.lang.Integer$intValue$$7$$return;
    $exception := inline$java.lang.Integer$intValue$$7$$exception;
    goto anon27$1;

  anon27$1:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$19$Entry;

  inline$java.lang.Integer$valueOf$int$19$Entry:
    inline$java.lang.Integer$valueOf$int$19$$in_parameter__0 := i24;
    havoc inline$java.lang.Integer$valueOf$int$19$$fakelocal_0, inline$java.lang.Integer$valueOf$int$19$$r0, inline$java.lang.Integer$valueOf$int$19$i0, inline$java.lang.Integer$valueOf$int$19$$return, inline$java.lang.Integer$valueOf$int$19$$exception;
    inline$java.lang.Integer$valueOf$int$19$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$19$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$19$anon0;

  inline$java.lang.Integer$valueOf$int$19$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$19$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$19$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$19$i0 := inline$java.lang.Integer$valueOf$int$19$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$19$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$19$$r0 := inline$java.lang.Integer$valueOf$int$19$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$19$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$19$$this := inline$java.lang.Integer$valueOf$int$19$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$19$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$19$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$19$i0, inline$java.lang.Integer$$la$init$ra$$int$19$r0, inline$java.lang.Integer$$la$init$ra$$int$19$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$19$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$19$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$19$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$19$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$19$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$19$r0 := inline$java.lang.Integer$$la$init$ra$$int$19$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$19$i0 := inline$java.lang.Integer$$la$init$ra$$int$19$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$23$Entry;

  inline$java.lang.Object$$la$init$ra$$$23$Entry:
    inline$java.lang.Object$$la$init$ra$$$23$$this := inline$java.lang.Integer$$la$init$ra$$int$19$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$23$anon0;

  inline$java.lang.Object$$la$init$ra$$$23$anon0:
    inline$java.lang.Object$$la$init$ra$$$23$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$23$Return;

  inline$java.lang.Object$$la$init$ra$$$23$Return:
    inline$java.lang.Integer$$la$init$ra$$int$19$$exception := inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$19$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$19$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$19$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$block11;

  inline$java.lang.Integer$$la$init$ra$$int$19$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$19$Return;

  inline$java.lang.Integer$$la$init$ra$$int$19$Return:
    inline$java.lang.Integer$valueOf$int$19$$exception := inline$java.lang.Integer$$la$init$ra$$int$19$$exception;
    goto inline$java.lang.Integer$valueOf$int$19$anon0$1;

  inline$java.lang.Integer$valueOf$int$19$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$19$$return := inline$java.lang.Integer$valueOf$int$19$$r0;
    goto inline$java.lang.Integer$valueOf$int$19$block12;

  inline$java.lang.Integer$valueOf$int$19$block12:
    goto inline$java.lang.Integer$valueOf$int$19$Return;

  inline$java.lang.Integer$valueOf$int$19$Return:
    $r14 := inline$java.lang.Integer$valueOf$int$19$$return;
    $exception := inline$java.lang.Integer$valueOf$int$19$$exception;
    goto anon27$2;

  anon27$2:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$20$Entry;

  inline$java.lang.Integer$valueOf$int$20$Entry:
    inline$java.lang.Integer$valueOf$int$20$$in_parameter__0 := i24;
    havoc inline$java.lang.Integer$valueOf$int$20$$fakelocal_0, inline$java.lang.Integer$valueOf$int$20$$r0, inline$java.lang.Integer$valueOf$int$20$i0, inline$java.lang.Integer$valueOf$int$20$$return, inline$java.lang.Integer$valueOf$int$20$$exception;
    inline$java.lang.Integer$valueOf$int$20$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$20$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$20$anon0;

  inline$java.lang.Integer$valueOf$int$20$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$20$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$20$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$20$i0 := inline$java.lang.Integer$valueOf$int$20$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$20$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$20$$r0 := inline$java.lang.Integer$valueOf$int$20$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$20$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$20$$this := inline$java.lang.Integer$valueOf$int$20$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$20$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$20$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$20$i0, inline$java.lang.Integer$$la$init$ra$$int$20$r0, inline$java.lang.Integer$$la$init$ra$$int$20$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$20$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$20$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$20$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$20$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$20$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$20$r0 := inline$java.lang.Integer$$la$init$ra$$int$20$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$20$i0 := inline$java.lang.Integer$$la$init$ra$$int$20$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$24$Entry;

  inline$java.lang.Object$$la$init$ra$$$24$Entry:
    inline$java.lang.Object$$la$init$ra$$$24$$this := inline$java.lang.Integer$$la$init$ra$$int$20$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$24$anon0;

  inline$java.lang.Object$$la$init$ra$$$24$anon0:
    inline$java.lang.Object$$la$init$ra$$$24$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$24$Return;

  inline$java.lang.Object$$la$init$ra$$$24$Return:
    inline$java.lang.Integer$$la$init$ra$$int$20$$exception := inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$20$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$20$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$20$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$block11;

  inline$java.lang.Integer$$la$init$ra$$int$20$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$20$Return;

  inline$java.lang.Integer$$la$init$ra$$int$20$Return:
    inline$java.lang.Integer$valueOf$int$20$$exception := inline$java.lang.Integer$$la$init$ra$$int$20$$exception;
    goto inline$java.lang.Integer$valueOf$int$20$anon0$1;

  inline$java.lang.Integer$valueOf$int$20$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$20$$return := inline$java.lang.Integer$valueOf$int$20$$r0;
    goto inline$java.lang.Integer$valueOf$int$20$block12;

  inline$java.lang.Integer$valueOf$int$20$block12:
    goto inline$java.lang.Integer$valueOf$int$20$Return;

  inline$java.lang.Integer$valueOf$int$20$Return:
    $r15 := inline$java.lang.Integer$valueOf$int$20$$return;
    $exception := inline$java.lang.Integer$valueOf$int$20$$exception;
    goto anon27$3;

  anon27$3:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$21$Entry;

  inline$java.lang.Integer$valueOf$int$21$Entry:
    inline$java.lang.Integer$valueOf$int$21$$in_parameter__0 := i18;
    havoc inline$java.lang.Integer$valueOf$int$21$$fakelocal_0, inline$java.lang.Integer$valueOf$int$21$$r0, inline$java.lang.Integer$valueOf$int$21$i0, inline$java.lang.Integer$valueOf$int$21$$return, inline$java.lang.Integer$valueOf$int$21$$exception;
    inline$java.lang.Integer$valueOf$int$21$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$21$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$21$anon0;

  inline$java.lang.Integer$valueOf$int$21$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$21$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$21$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$21$i0 := inline$java.lang.Integer$valueOf$int$21$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$21$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$21$$r0 := inline$java.lang.Integer$valueOf$int$21$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$21$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$21$$this := inline$java.lang.Integer$valueOf$int$21$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$21$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$21$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$21$i0, inline$java.lang.Integer$$la$init$ra$$int$21$r0, inline$java.lang.Integer$$la$init$ra$$int$21$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$21$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$21$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$21$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$21$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$21$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$21$r0 := inline$java.lang.Integer$$la$init$ra$$int$21$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$21$i0 := inline$java.lang.Integer$$la$init$ra$$int$21$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$25$Entry;

  inline$java.lang.Object$$la$init$ra$$$25$Entry:
    inline$java.lang.Object$$la$init$ra$$$25$$this := inline$java.lang.Integer$$la$init$ra$$int$21$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$25$anon0;

  inline$java.lang.Object$$la$init$ra$$$25$anon0:
    inline$java.lang.Object$$la$init$ra$$$25$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$25$Return;

  inline$java.lang.Object$$la$init$ra$$$25$Return:
    inline$java.lang.Integer$$la$init$ra$$int$21$$exception := inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$21$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$21$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$21$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$block11;

  inline$java.lang.Integer$$la$init$ra$$int$21$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$21$Return;

  inline$java.lang.Integer$$la$init$ra$$int$21$Return:
    inline$java.lang.Integer$valueOf$int$21$$exception := inline$java.lang.Integer$$la$init$ra$$int$21$$exception;
    goto inline$java.lang.Integer$valueOf$int$21$anon0$1;

  inline$java.lang.Integer$valueOf$int$21$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$21$$return := inline$java.lang.Integer$valueOf$int$21$$r0;
    goto inline$java.lang.Integer$valueOf$int$21$block12;

  inline$java.lang.Integer$valueOf$int$21$block12:
    goto inline$java.lang.Integer$valueOf$int$21$Return;

  inline$java.lang.Integer$valueOf$int$21$Return:
    $r16 := inline$java.lang.Integer$valueOf$int$21$$return;
    $exception := inline$java.lang.Integer$valueOf$int$21$$exception;
    goto anon27$4;

  anon27$4:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__0 := z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1 := $r15;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2 := $r16;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Return:
    $r17 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception;
    goto anon27$5;

  anon27$5:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__0 := z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1 := $r14;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2 := $r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Return:
    $r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception;
    goto anon27$6;

  anon27$6:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} !(fixed.$heap[$r18, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_8;
    return;

  anon70_Then:
    assume {:partition} fixed.$heap[$r18, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon30;

  anon30:
    $r19 := $r18;
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} $r19 == fixed.$null;
    call $fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_9;
    return;

  anon71_Then:
    assume {:partition} $r19 != fixed.$null;
    $exception := $exception;
    goto anon33;

  anon33:
    goto inline$java.lang.Integer$intValue$$8$Entry;

  inline$java.lang.Integer$intValue$$8$Entry:
    inline$java.lang.Integer$intValue$$8$$this := $r19;
    havoc inline$java.lang.Integer$intValue$$8$$i0, inline$java.lang.Integer$intValue$$8$r0, inline$java.lang.Integer$intValue$$8$$return, inline$java.lang.Integer$intValue$$8$$exception;
    goto inline$java.lang.Integer$intValue$$8$anon0;

  inline$java.lang.Integer$intValue$$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$8$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$8$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$8$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$8$r0 := inline$java.lang.Integer$intValue$$8$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$8$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$8$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$8$$return := inline$java.lang.Integer$intValue$$8$$i0;
    goto inline$java.lang.Integer$intValue$$8$block13;

  inline$java.lang.Integer$intValue$$8$block13:
    goto inline$java.lang.Integer$intValue$$8$Return;

  inline$java.lang.Integer$intValue$$8$Return:
    i19 := inline$java.lang.Integer$intValue$$8$$return;
    $exception := inline$java.lang.Integer$intValue$$8$$exception;
    goto anon33$1;

  anon33$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$22$Entry;

  inline$java.lang.Integer$valueOf$int$22$Entry:
    inline$java.lang.Integer$valueOf$int$22$$in_parameter__0 := i18;
    havoc inline$java.lang.Integer$valueOf$int$22$$fakelocal_0, inline$java.lang.Integer$valueOf$int$22$$r0, inline$java.lang.Integer$valueOf$int$22$i0, inline$java.lang.Integer$valueOf$int$22$$return, inline$java.lang.Integer$valueOf$int$22$$exception;
    inline$java.lang.Integer$valueOf$int$22$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$22$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$22$anon0;

  inline$java.lang.Integer$valueOf$int$22$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$22$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$22$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$22$i0 := inline$java.lang.Integer$valueOf$int$22$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$22$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$22$$r0 := inline$java.lang.Integer$valueOf$int$22$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$22$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$22$$this := inline$java.lang.Integer$valueOf$int$22$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$22$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$22$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$22$i0, inline$java.lang.Integer$$la$init$ra$$int$22$r0, inline$java.lang.Integer$$la$init$ra$$int$22$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$22$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$22$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$22$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$22$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$22$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$22$r0 := inline$java.lang.Integer$$la$init$ra$$int$22$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$22$i0 := inline$java.lang.Integer$$la$init$ra$$int$22$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$26$Entry;

  inline$java.lang.Object$$la$init$ra$$$26$Entry:
    inline$java.lang.Object$$la$init$ra$$$26$$this := inline$java.lang.Integer$$la$init$ra$$int$22$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$26$anon0;

  inline$java.lang.Object$$la$init$ra$$$26$anon0:
    inline$java.lang.Object$$la$init$ra$$$26$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$26$Return;

  inline$java.lang.Object$$la$init$ra$$$26$Return:
    inline$java.lang.Integer$$la$init$ra$$int$22$$exception := inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$22$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$22$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$22$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$block11;

  inline$java.lang.Integer$$la$init$ra$$int$22$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$22$Return;

  inline$java.lang.Integer$$la$init$ra$$int$22$Return:
    inline$java.lang.Integer$valueOf$int$22$$exception := inline$java.lang.Integer$$la$init$ra$$int$22$$exception;
    goto inline$java.lang.Integer$valueOf$int$22$anon0$1;

  inline$java.lang.Integer$valueOf$int$22$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$22$$return := inline$java.lang.Integer$valueOf$int$22$$r0;
    goto inline$java.lang.Integer$valueOf$int$22$block12;

  inline$java.lang.Integer$valueOf$int$22$block12:
    goto inline$java.lang.Integer$valueOf$int$22$Return;

  inline$java.lang.Integer$valueOf$int$22$Return:
    $r20 := inline$java.lang.Integer$valueOf$int$22$$return;
    $exception := inline$java.lang.Integer$valueOf$int$22$$exception;
    goto anon33$2;

  anon33$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    $i13 := fixed.$mulInt(i19, i19);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} i1 == 0;
    call $fakelocal_10 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_10;
    return;

  anon72_Then:
    assume {:partition} i1 != 0;
    $exception := $exception;
    goto anon36;

  anon36:
    $i14 := fixed.$modInt($i13, i1);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$23$Entry;

  inline$java.lang.Integer$valueOf$int$23$Entry:
    inline$java.lang.Integer$valueOf$int$23$$in_parameter__0 := $i14;
    havoc inline$java.lang.Integer$valueOf$int$23$$fakelocal_0, inline$java.lang.Integer$valueOf$int$23$$r0, inline$java.lang.Integer$valueOf$int$23$i0, inline$java.lang.Integer$valueOf$int$23$$return, inline$java.lang.Integer$valueOf$int$23$$exception;
    inline$java.lang.Integer$valueOf$int$23$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$23$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$23$anon0;

  inline$java.lang.Integer$valueOf$int$23$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$23$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$23$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$23$i0 := inline$java.lang.Integer$valueOf$int$23$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$23$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$23$$r0 := inline$java.lang.Integer$valueOf$int$23$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$23$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$23$$this := inline$java.lang.Integer$valueOf$int$23$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$23$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$23$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$23$i0, inline$java.lang.Integer$$la$init$ra$$int$23$r0, inline$java.lang.Integer$$la$init$ra$$int$23$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$23$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$23$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$23$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$23$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$23$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$23$r0 := inline$java.lang.Integer$$la$init$ra$$int$23$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$23$i0 := inline$java.lang.Integer$$la$init$ra$$int$23$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$27$Entry;

  inline$java.lang.Object$$la$init$ra$$$27$Entry:
    inline$java.lang.Object$$la$init$ra$$$27$$this := inline$java.lang.Integer$$la$init$ra$$int$23$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$27$anon0;

  inline$java.lang.Object$$la$init$ra$$$27$anon0:
    inline$java.lang.Object$$la$init$ra$$$27$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$27$Return;

  inline$java.lang.Object$$la$init$ra$$$27$Return:
    inline$java.lang.Integer$$la$init$ra$$int$23$$exception := inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$23$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$23$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$23$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$block11;

  inline$java.lang.Integer$$la$init$ra$$int$23$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$23$Return;

  inline$java.lang.Integer$$la$init$ra$$int$23$Return:
    inline$java.lang.Integer$valueOf$int$23$$exception := inline$java.lang.Integer$$la$init$ra$$int$23$$exception;
    goto inline$java.lang.Integer$valueOf$int$23$anon0$1;

  inline$java.lang.Integer$valueOf$int$23$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$23$$return := inline$java.lang.Integer$valueOf$int$23$$r0;
    goto inline$java.lang.Integer$valueOf$int$23$block12;

  inline$java.lang.Integer$valueOf$int$23$block12:
    goto inline$java.lang.Integer$valueOf$int$23$Return;

  inline$java.lang.Integer$valueOf$int$23$Return:
    $r21 := inline$java.lang.Integer$valueOf$int$23$$return;
    $exception := inline$java.lang.Integer$valueOf$int$23$$exception;
    goto anon36$1;

  anon36$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__0 := z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1 := $r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2 := $r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Return:
    $r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception;
    goto anon36$2;

  anon36$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} !(fixed.$heap[$r22, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_11 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_11;
    return;

  anon73_Then:
    assume {:partition} fixed.$heap[$r22, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon39;

  anon39:
    $r23 := $r22;
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} $r23 == fixed.$null;
    call $fakelocal_12 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_12;
    return;

  anon74_Then:
    assume {:partition} $r23 != fixed.$null;
    $exception := $exception;
    goto anon42;

  anon42:
    goto inline$java.lang.Integer$intValue$$9$Entry;

  inline$java.lang.Integer$intValue$$9$Entry:
    inline$java.lang.Integer$intValue$$9$$this := $r23;
    havoc inline$java.lang.Integer$intValue$$9$$i0, inline$java.lang.Integer$intValue$$9$r0, inline$java.lang.Integer$intValue$$9$$return, inline$java.lang.Integer$intValue$$9$$exception;
    goto inline$java.lang.Integer$intValue$$9$anon0;

  inline$java.lang.Integer$intValue$$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$9$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$9$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$9$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$9$r0 := inline$java.lang.Integer$intValue$$9$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$9$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$9$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$9$$return := inline$java.lang.Integer$intValue$$9$$i0;
    goto inline$java.lang.Integer$intValue$$9$block13;

  inline$java.lang.Integer$intValue$$9$block13:
    goto inline$java.lang.Integer$intValue$$9$Return;

  inline$java.lang.Integer$intValue$$9$Return:
    i18 := inline$java.lang.Integer$intValue$$9$$return;
    $exception := inline$java.lang.Integer$intValue$$9$$exception;
    goto anon42$1;

  anon42$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$24$Entry;

  inline$java.lang.Integer$valueOf$int$24$Entry:
    inline$java.lang.Integer$valueOf$int$24$$in_parameter__0 := i17;
    havoc inline$java.lang.Integer$valueOf$int$24$$fakelocal_0, inline$java.lang.Integer$valueOf$int$24$$r0, inline$java.lang.Integer$valueOf$int$24$i0, inline$java.lang.Integer$valueOf$int$24$$return, inline$java.lang.Integer$valueOf$int$24$$exception;
    inline$java.lang.Integer$valueOf$int$24$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$24$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$24$anon0;

  inline$java.lang.Integer$valueOf$int$24$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$24$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$24$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$24$i0 := inline$java.lang.Integer$valueOf$int$24$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$24$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$24$$r0 := inline$java.lang.Integer$valueOf$int$24$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$24$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$24$$this := inline$java.lang.Integer$valueOf$int$24$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$24$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$24$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$24$i0, inline$java.lang.Integer$$la$init$ra$$int$24$r0, inline$java.lang.Integer$$la$init$ra$$int$24$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$24$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$24$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$24$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$24$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$24$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$24$r0 := inline$java.lang.Integer$$la$init$ra$$int$24$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$24$i0 := inline$java.lang.Integer$$la$init$ra$$int$24$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$28$Entry;

  inline$java.lang.Object$$la$init$ra$$$28$Entry:
    inline$java.lang.Object$$la$init$ra$$$28$$this := inline$java.lang.Integer$$la$init$ra$$int$24$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$28$anon0;

  inline$java.lang.Object$$la$init$ra$$$28$anon0:
    inline$java.lang.Object$$la$init$ra$$$28$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$28$Return;

  inline$java.lang.Object$$la$init$ra$$$28$Return:
    inline$java.lang.Integer$$la$init$ra$$int$24$$exception := inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$24$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$24$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$24$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$block11;

  inline$java.lang.Integer$$la$init$ra$$int$24$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$24$Return;

  inline$java.lang.Integer$$la$init$ra$$int$24$Return:
    inline$java.lang.Integer$valueOf$int$24$$exception := inline$java.lang.Integer$$la$init$ra$$int$24$$exception;
    goto inline$java.lang.Integer$valueOf$int$24$anon0$1;

  inline$java.lang.Integer$valueOf$int$24$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$24$$return := inline$java.lang.Integer$valueOf$int$24$$r0;
    goto inline$java.lang.Integer$valueOf$int$24$block12;

  inline$java.lang.Integer$valueOf$int$24$block12:
    goto inline$java.lang.Integer$valueOf$int$24$Return;

  inline$java.lang.Integer$valueOf$int$24$Return:
    $r24 := inline$java.lang.Integer$valueOf$int$24$$return;
    $exception := inline$java.lang.Integer$valueOf$int$24$$exception;
    goto anon42$2;

  anon42$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_13;
    return;

  anon75_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon45;

  anon45:
    $i15 := fixed.$divInt(i17, 2);
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$25$Entry;

  inline$java.lang.Integer$valueOf$int$25$Entry:
    inline$java.lang.Integer$valueOf$int$25$$in_parameter__0 := $i15;
    havoc inline$java.lang.Integer$valueOf$int$25$$fakelocal_0, inline$java.lang.Integer$valueOf$int$25$$r0, inline$java.lang.Integer$valueOf$int$25$i0, inline$java.lang.Integer$valueOf$int$25$$return, inline$java.lang.Integer$valueOf$int$25$$exception;
    inline$java.lang.Integer$valueOf$int$25$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$25$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$25$anon0;

  inline$java.lang.Integer$valueOf$int$25$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$25$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$25$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$25$i0 := inline$java.lang.Integer$valueOf$int$25$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$25$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$25$$r0 := inline$java.lang.Integer$valueOf$int$25$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$25$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$25$$this := inline$java.lang.Integer$valueOf$int$25$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$25$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$25$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$25$i0, inline$java.lang.Integer$$la$init$ra$$int$25$r0, inline$java.lang.Integer$$la$init$ra$$int$25$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$25$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$25$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$25$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$25$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$25$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$25$r0 := inline$java.lang.Integer$$la$init$ra$$int$25$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$25$i0 := inline$java.lang.Integer$$la$init$ra$$int$25$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$29$Entry;

  inline$java.lang.Object$$la$init$ra$$$29$Entry:
    inline$java.lang.Object$$la$init$ra$$$29$$this := inline$java.lang.Integer$$la$init$ra$$int$25$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$29$anon0;

  inline$java.lang.Object$$la$init$ra$$$29$anon0:
    inline$java.lang.Object$$la$init$ra$$$29$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$29$Return;

  inline$java.lang.Object$$la$init$ra$$$29$Return:
    inline$java.lang.Integer$$la$init$ra$$int$25$$exception := inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$25$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$25$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$25$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$block11;

  inline$java.lang.Integer$$la$init$ra$$int$25$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$25$Return;

  inline$java.lang.Integer$$la$init$ra$$int$25$Return:
    inline$java.lang.Integer$valueOf$int$25$$exception := inline$java.lang.Integer$$la$init$ra$$int$25$$exception;
    goto inline$java.lang.Integer$valueOf$int$25$anon0$1;

  inline$java.lang.Integer$valueOf$int$25$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$25$$return := inline$java.lang.Integer$valueOf$int$25$$r0;
    goto inline$java.lang.Integer$valueOf$int$25$block12;

  inline$java.lang.Integer$valueOf$int$25$block12:
    goto inline$java.lang.Integer$valueOf$int$25$Return;

  inline$java.lang.Integer$valueOf$int$25$Return:
    $r25 := inline$java.lang.Integer$valueOf$int$25$$return;
    $exception := inline$java.lang.Integer$valueOf$int$25$$exception;
    goto anon45$1;

  anon45$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__0 := z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1 := $r24;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2 := $r25;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Return:
    $r26 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception;
    goto anon45$2;

  anon45$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} !(fixed.$heap[$r26, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_14;
    return;

  anon76_Then:
    assume {:partition} fixed.$heap[$r26, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon48;

  anon48:
    $r27 := $r26;
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} $r27 == fixed.$null;
    call $fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_15;
    return;

  anon77_Then:
    assume {:partition} $r27 != fixed.$null;
    $exception := $exception;
    goto anon51;

  anon51:
    goto inline$java.lang.Integer$intValue$$10$Entry;

  inline$java.lang.Integer$intValue$$10$Entry:
    inline$java.lang.Integer$intValue$$10$$this := $r27;
    havoc inline$java.lang.Integer$intValue$$10$$i0, inline$java.lang.Integer$intValue$$10$r0, inline$java.lang.Integer$intValue$$10$$return, inline$java.lang.Integer$intValue$$10$$exception;
    goto inline$java.lang.Integer$intValue$$10$anon0;

  inline$java.lang.Integer$intValue$$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$10$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$10$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$10$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$10$r0 := inline$java.lang.Integer$intValue$$10$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$10$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$10$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$10$$return := inline$java.lang.Integer$intValue$$10$$i0;
    goto inline$java.lang.Integer$intValue$$10$block13;

  inline$java.lang.Integer$intValue$$10$block13:
    goto inline$java.lang.Integer$intValue$$10$Return;

  inline$java.lang.Integer$intValue$$10$Return:
    i17 := inline$java.lang.Integer$intValue$$10$$return;
    $exception := inline$java.lang.Integer$intValue$$10$$exception;
    goto anon51$1;

  anon51$1:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$26$Entry;

  inline$java.lang.Integer$valueOf$int$26$Entry:
    inline$java.lang.Integer$valueOf$int$26$$in_parameter__0 := i20;
    havoc inline$java.lang.Integer$valueOf$int$26$$fakelocal_0, inline$java.lang.Integer$valueOf$int$26$$r0, inline$java.lang.Integer$valueOf$int$26$i0, inline$java.lang.Integer$valueOf$int$26$$return, inline$java.lang.Integer$valueOf$int$26$$exception;
    inline$java.lang.Integer$valueOf$int$26$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$26$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$26$anon0;

  inline$java.lang.Integer$valueOf$int$26$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$26$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$26$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$26$i0 := inline$java.lang.Integer$valueOf$int$26$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$26$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$26$$r0 := inline$java.lang.Integer$valueOf$int$26$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$26$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$26$$this := inline$java.lang.Integer$valueOf$int$26$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$26$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$26$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$26$i0, inline$java.lang.Integer$$la$init$ra$$int$26$r0, inline$java.lang.Integer$$la$init$ra$$int$26$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$26$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$26$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$26$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$26$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$26$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$26$r0 := inline$java.lang.Integer$$la$init$ra$$int$26$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$26$i0 := inline$java.lang.Integer$$la$init$ra$$int$26$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$30$Entry;

  inline$java.lang.Object$$la$init$ra$$$30$Entry:
    inline$java.lang.Object$$la$init$ra$$$30$$this := inline$java.lang.Integer$$la$init$ra$$int$26$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$30$anon0;

  inline$java.lang.Object$$la$init$ra$$$30$anon0:
    inline$java.lang.Object$$la$init$ra$$$30$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$30$Return;

  inline$java.lang.Object$$la$init$ra$$$30$Return:
    inline$java.lang.Integer$$la$init$ra$$int$26$$exception := inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$26$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$26$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$26$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$block11;

  inline$java.lang.Integer$$la$init$ra$$int$26$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$26$Return;

  inline$java.lang.Integer$$la$init$ra$$int$26$Return:
    inline$java.lang.Integer$valueOf$int$26$$exception := inline$java.lang.Integer$$la$init$ra$$int$26$$exception;
    goto inline$java.lang.Integer$valueOf$int$26$anon0$1;

  inline$java.lang.Integer$valueOf$int$26$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$26$$return := inline$java.lang.Integer$valueOf$int$26$$r0;
    goto inline$java.lang.Integer$valueOf$int$26$block12;

  inline$java.lang.Integer$valueOf$int$26$block12:
    goto inline$java.lang.Integer$valueOf$int$26$Return;

  inline$java.lang.Integer$valueOf$int$26$Return:
    $r28 := inline$java.lang.Integer$valueOf$int$26$$return;
    $exception := inline$java.lang.Integer$valueOf$int$26$$exception;
    goto anon51$2;

  anon51$2:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    $i16 := i20 + 1;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$27$Entry;

  inline$java.lang.Integer$valueOf$int$27$Entry:
    inline$java.lang.Integer$valueOf$int$27$$in_parameter__0 := $i16;
    havoc inline$java.lang.Integer$valueOf$int$27$$fakelocal_0, inline$java.lang.Integer$valueOf$int$27$$r0, inline$java.lang.Integer$valueOf$int$27$i0, inline$java.lang.Integer$valueOf$int$27$$return, inline$java.lang.Integer$valueOf$int$27$$exception;
    inline$java.lang.Integer$valueOf$int$27$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$27$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$27$anon0;

  inline$java.lang.Integer$valueOf$int$27$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$27$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$27$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$27$i0 := inline$java.lang.Integer$valueOf$int$27$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$27$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$27$$r0 := inline$java.lang.Integer$valueOf$int$27$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$27$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$27$$this := inline$java.lang.Integer$valueOf$int$27$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$27$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$27$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$27$i0, inline$java.lang.Integer$$la$init$ra$$int$27$r0, inline$java.lang.Integer$$la$init$ra$$int$27$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$27$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$27$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$27$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$27$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$27$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$27$r0 := inline$java.lang.Integer$$la$init$ra$$int$27$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$27$i0 := inline$java.lang.Integer$$la$init$ra$$int$27$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$31$Entry;

  inline$java.lang.Object$$la$init$ra$$$31$Entry:
    inline$java.lang.Object$$la$init$ra$$$31$$this := inline$java.lang.Integer$$la$init$ra$$int$27$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$31$anon0;

  inline$java.lang.Object$$la$init$ra$$$31$anon0:
    inline$java.lang.Object$$la$init$ra$$$31$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$31$Return;

  inline$java.lang.Object$$la$init$ra$$$31$Return:
    inline$java.lang.Integer$$la$init$ra$$int$27$$exception := inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$27$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$27$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$27$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$block11;

  inline$java.lang.Integer$$la$init$ra$$int$27$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$27$Return;

  inline$java.lang.Integer$$la$init$ra$$int$27$Return:
    inline$java.lang.Integer$valueOf$int$27$$exception := inline$java.lang.Integer$$la$init$ra$$int$27$$exception;
    goto inline$java.lang.Integer$valueOf$int$27$anon0$1;

  inline$java.lang.Integer$valueOf$int$27$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$27$$return := inline$java.lang.Integer$valueOf$int$27$$r0;
    goto inline$java.lang.Integer$valueOf$int$27$block12;

  inline$java.lang.Integer$valueOf$int$27$block12:
    goto inline$java.lang.Integer$valueOf$int$27$Return;

  inline$java.lang.Integer$valueOf$int$27$Return:
    $r29 := inline$java.lang.Integer$valueOf$int$27$$return;
    $exception := inline$java.lang.Integer$valueOf$int$27$$exception;
    goto anon51$3;

  anon51$3:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__0 := z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1 := $r28;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2 := $r29;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Return:
    $r30 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception;
    goto anon51$4;

  anon51$4:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} !(fixed.$heap[$r30, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_16;
    return;

  anon78_Then:
    assume {:partition} fixed.$heap[$r30, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon54;

  anon54:
    $r31 := $r30;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} $r31 == fixed.$null;
    call $fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_17;
    return;

  anon79_Then:
    assume {:partition} $r31 != fixed.$null;
    $exception := $exception;
    goto anon57;

  anon57:
    goto inline$java.lang.Integer$intValue$$11$Entry;

  inline$java.lang.Integer$intValue$$11$Entry:
    inline$java.lang.Integer$intValue$$11$$this := $r31;
    havoc inline$java.lang.Integer$intValue$$11$$i0, inline$java.lang.Integer$intValue$$11$r0, inline$java.lang.Integer$intValue$$11$$return, inline$java.lang.Integer$intValue$$11$$exception;
    goto inline$java.lang.Integer$intValue$$11$anon0;

  inline$java.lang.Integer$intValue$$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$11$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$11$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$11$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$11$r0 := inline$java.lang.Integer$intValue$$11$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$11$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$11$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$11$$return := inline$java.lang.Integer$intValue$$11$$i0;
    goto inline$java.lang.Integer$intValue$$11$block13;

  inline$java.lang.Integer$intValue$$11$block13:
    goto inline$java.lang.Integer$intValue$$11$Return;

  inline$java.lang.Integer$intValue$$11$Return:
    i20 := inline$java.lang.Integer$intValue$$11$$return;
    $exception := inline$java.lang.Integer$intValue$$11$$exception;
    goto anon57$1;

  anon57$1:
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} true;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} i20 == i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon60;

  anon60:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    goto block20;

  block20:
    assert {:sourceloc "SimplifiedRSA.java", 45, -1, -1, -1} true;
    $return := i19;
    goto block22;

  block22:
    return;

  anon80_Then:
    assume {:partition} i20 != i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;

  block21:
    assert {:sourceloc "SimplifiedRSA.java", 44, -1, -1, -1} true;
    goto block21_dummy;

  anon61_Then:
    assume {:partition} i21 <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  block21_dummy:
    assume false;
    return;

  block19_last:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    i21 := i21 + -1;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    goto anon61_Then, anon61_Else;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.sg.edu.nus.comp.tsunami.safe.Safe;
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto block23;

  block23:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var z0: int;
  var z1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 0;
    goto block24;

  block24:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 1;
    goto block25;

  block25:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    $return := z1;
    goto block26;

  block26:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block25;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block24;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var $z2: int;
  var z1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $z2 := fixed.$bitAnd(z0, z1);
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $return := $z2;
    goto block27;

  block27:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var z1: int;
  var $z2: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $z2 := fixed.$bitOr(z0, z1);
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $return := $z2;
    goto block28;

  block28:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l1: int;
  var $b3: int;
  var z0: int;
  var $b2: int;
  var l0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 1;
    goto block29;

  block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 0;
    goto block30;

  block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    $return := z0;
    goto block31;

  block31:
    return;

  anon8_Then:
    assume {:partition} $b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto block30;

  anon7_Then:
    assume {:partition} $b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto block29;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b3: int;
  var l1: int;
  var z0: int;
  var $b2: int;
  var l0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 27, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b2;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 1;
    goto block32;

  block32:
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b3;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 0;
    goto block33;

  block33:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    $return := z0;
    goto block34;

  block34:
    return;

  anon8_Then:
    assume {:partition} $b3 < 0;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "thenblock"} true;
    goto block33;

  anon7_Then:
    assume {:partition} $b2 >= 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "thenblock"} true;
    goto block32;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var l1: int;
  var z0: int;
  var $b2: int;
  var $b3: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 34, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b2;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 1;
    goto block35;

  block35:
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b3;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 0;
    goto block36;

  block36:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    $return := z0;
    goto block37;

  block37:
    return;

  anon8_Then:
    assume {:partition} $b3 >= 0;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "thenblock"} true;
    goto block36;

  anon7_Then:
    assume {:partition} $b2 < 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "thenblock"} true;
    goto block35;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l1: int;
  var l0: int;
  var $b3: int;
  var $b2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 41, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b2;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 1;
    goto block38;

  block38:
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b3;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 0;
    goto block39;

  block39:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    $return := z0;
    goto block40;

  block40:
    return;

  anon8_Then:
    assume {:partition} $b3 <= 0;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block39;

  anon7_Then:
    assume {:partition} $b2 > 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto block38;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var $b2: int;
  var $b3: int;
  var l1: int;
  var l0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 1;
    goto block41;

  block41:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 0;
    goto block42;

  block42:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    $return := z0;
    goto block43;

  block43:
    return;

  anon8_Then:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto block42;

  anon7_Then:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto block41;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var l0: int;
  var $b3: int;
  var l1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 1;
    goto block44;

  block44:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 0;
    goto block45;

  block45:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    $return := z0;
    goto block46;

  block46:
    return;

  anon8_Then:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto block45;

  anon7_Then:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto block44;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var $b0: int;
  var $b1: int;
  var d0: int;
  var d1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 62, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 1;
    goto block47;

  block47:
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b1;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 0;
    goto block48;

  block48:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    $return := z0;
    goto block49;

  block49:
    return;

  anon8_Then:
    assume {:partition} $b1 > 0;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "thenblock"} true;
    goto block48;

  anon7_Then:
    assume {:partition} $b0 <= 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "thenblock"} true;
    goto block47;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d0: int;
  var d1: int;
  var $b0: int;
  var z0: int;
  var $b1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 69, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 1;
    goto block50;

  block50:
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b1;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 0;
    goto block51;

  block51:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    $return := z0;
    goto block52;

  block52:
    return;

  anon8_Then:
    assume {:partition} $b1 < 0;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto block51;

  anon7_Then:
    assume {:partition} $b0 >= 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block50;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d0: int;
  var $b1: int;
  var $b0: int;
  var d1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 76, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 1;
    goto block53;

  block53:
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b1;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 0;
    goto block54;

  block54:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    $return := z0;
    goto block55;

  block55:
    return;

  anon8_Then:
    assume {:partition} $b1 >= 0;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "thenblock"} true;
    goto block54;

  anon7_Then:
    assume {:partition} $b0 < 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block53;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d1: int;
  var z0: int;
  var $b1: int;
  var $b0: int;
  var d0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 83, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 1;
    goto block56;

  block56:
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b1;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 0;
    goto block57;

  block57:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    $return := z0;
    goto block58;

  block58:
    return;

  anon8_Then:
    assume {:partition} $b1 <= 0;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto block57;

  anon7_Then:
    assume {:partition} $b0 > 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "thenblock"} true;
    goto block56;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d0: int;
  var $b0: int;
  var d1: int;
  var $b1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 90, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 1;
    goto block59;

  block59:
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 0;
    goto block60;

  block60:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    $return := z0;
    goto block61;

  block61:
    return;

  anon8_Then:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "thenblock"} true;
    goto block60;

  anon7_Then:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "thenblock"} true;
    goto block59;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b1: int;
  var z0: int;
  var $b0: int;
  var d1: int;
  var d0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 97, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 1;
    goto block62;

  block62:
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 0;
    goto block63;

  block63:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    $return := z0;
    goto block64;

  block64:
    return;

  anon8_Then:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "thenblock"} true;
    goto block63;

  anon7_Then:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "thenblock"} true;
    goto block62;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var r0: ref;
  var z0: int;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 104, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 1;
    goto block65;

  block65:
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 0;
    goto block66;

  block66:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    $return := z0;
    goto block67;

  block67:
    return;

  anon8_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block66;

  anon7_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block65;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var r1: ref;
  var z0: int;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 111, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 1;
    goto block68;

  block68:
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 0;
    goto block69;

  block69:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    $return := z0;
    goto block70;

  block70:
    return;

  anon8_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block69;

  anon7_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block68;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var z0: int;
  var r0: ref;
  var r2: ref;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__2, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r0;
    goto block71;

  block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r1;
    goto block72;

  block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    $return := r2;
    goto block73;

  block73:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block72;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block71;
}



implementation fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation fixed.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19(in_$return: int, 
    in_$exception: ref, 
    in_$fakelocal_7: ref, 
    in_$r23: ref, 
    in_$z3: int, 
    in_i21: int, 
    in_$r26: ref, 
    in_$l9: int, 
    in_$r24: ref, 
    in_$r2: ref, 
    in_$fakelocal_16: ref, 
    in_$r21: ref, 
    in_$r5: ref, 
    in_z4: int, 
    in_$r22: ref, 
    in_$r3: ref, 
    in_$r31: ref, 
    in_$r15: ref, 
    in_$i15: int, 
    in_$r12: ref, 
    in_$fakelocal_4: ref, 
    in_$fakelocal_17: ref, 
    in_$r18: ref, 
    in_$r9: ref, 
    in_i20: int, 
    in_z0: int, 
    in_$fakelocal_5: ref, 
    in_$i7: int, 
    in_i19: int, 
    in_$r17: ref, 
    in_$r11: ref, 
    in_$r10: ref, 
    in_i24: int, 
    in_$r14: ref, 
    in_$fakelocal_8: ref, 
    in_$r20: ref, 
    in_$fakelocal_9: ref, 
    in_$fakelocal_13: ref, 
    in_$i11: int, 
    in_$l8: int, 
    in_$r29: ref, 
    in_i18: int, 
    in_z2: int, 
    in_$fakelocal_6: ref, 
    in_$fakelocal_1: ref, 
    in_$fakelocal_2: ref, 
    in_$fakelocal_0: ref, 
    in_$r27: ref, 
    in_$l6: int, 
    in_i17: int, 
    in_z1: int, 
    in_$r1: ref, 
    in_$fakelocal_11: ref, 
    in_$r7: ref, 
    in_i22: int, 
    in_i23: int, 
    in_$i12: int, 
    in_$r28: ref, 
    in_$r8: ref, 
    in_$fakelocal_10: ref, 
    in_$i13: int, 
    in_$r13: ref, 
    in_$fakelocal_12: ref, 
    in_$r4: ref, 
    in_$r25: ref, 
    in_i4: int, 
    in_$r0: ref, 
    in_i1: int, 
    in_$r6: ref, 
    in_$fakelocal_15: ref, 
    in_$i16: int, 
    in_$i14: int, 
    in_$l10: int, 
    in_$r30: ref, 
    in_$r19: ref, 
    in_$r16: ref, 
    in_i3: int, 
    in_$fakelocal_14: ref, 
    in_$fakelocal_3: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$fakelocal_7: ref, 
    out_$r23: ref, 
    out_$z3: int, 
    out_i21: int, 
    out_$r26: ref, 
    out_$l9: int, 
    out_$r24: ref, 
    out_$r2: ref, 
    out_$fakelocal_16: ref, 
    out_$r21: ref, 
    out_$r5: ref, 
    out_z4: int, 
    out_$r22: ref, 
    out_$r3: ref, 
    out_$r31: ref, 
    out_$r15: ref, 
    out_$i15: int, 
    out_$r12: ref, 
    out_$fakelocal_4: ref, 
    out_$fakelocal_17: ref, 
    out_$r18: ref, 
    out_$r9: ref, 
    out_i20: int, 
    out_z0: int, 
    out_$fakelocal_5: ref, 
    out_$i7: int, 
    out_i19: int, 
    out_$r17: ref, 
    out_$r11: ref, 
    out_$r10: ref, 
    out_i24: int, 
    out_$r14: ref, 
    out_$fakelocal_8: ref, 
    out_$r20: ref, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_13: ref, 
    out_$i11: int, 
    out_$l8: int, 
    out_$r29: ref, 
    out_i18: int, 
    out_z2: int, 
    out_$fakelocal_6: ref, 
    out_$fakelocal_1: ref, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_0: ref, 
    out_$r27: ref, 
    out_$l6: int, 
    out_i17: int, 
    out_z1: int, 
    out_$r1: ref, 
    out_$fakelocal_11: ref, 
    out_$r7: ref, 
    out_i22: int, 
    out_i23: int, 
    out_$i12: int, 
    out_$r28: ref, 
    out_$r8: ref, 
    out_$fakelocal_10: ref, 
    out_$i13: int, 
    out_$r13: ref, 
    out_$fakelocal_12: ref, 
    out_$r4: ref, 
    out_$r25: ref, 
    out_$r0: ref, 
    out_$r6: ref, 
    out_$fakelocal_15: ref, 
    out_$i16: int, 
    out_$i14: int, 
    out_$l10: int, 
    out_$r30: ref, 
    out_$r19: ref, 
    out_$r16: ref, 
    out_$fakelocal_14: ref, 
    out_$fakelocal_3: ref)
{
  var inline$java.lang.Integer$intValue$$0$$i0: int;
  var inline$java.lang.Integer$intValue$$0$r0: ref;
  var inline$java.lang.Integer$intValue$$0$$this: ref;
  var inline$java.lang.Integer$intValue$$0$$return: int;
  var inline$java.lang.Integer$intValue$$0$$exception: ref;
  var inline$java.lang.Integer$intValue$$1$$i0: int;
  var inline$java.lang.Integer$intValue$$1$r0: ref;
  var inline$java.lang.Integer$intValue$$1$$this: ref;
  var inline$java.lang.Integer$intValue$$1$$return: int;
  var inline$java.lang.Integer$intValue$$1$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$0$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$0$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$0$i0: int;
  var inline$java.lang.Integer$valueOf$int$0$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$0$$return: ref;
  var inline$java.lang.Integer$valueOf$int$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$0$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$0$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$0$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$1$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$1$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$1$i0: int;
  var inline$java.lang.Integer$valueOf$int$1$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$1$$return: ref;
  var inline$java.lang.Integer$valueOf$int$1$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$1$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$1$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$1$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$1$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$2$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$2$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$2$i0: int;
  var inline$java.lang.Integer$valueOf$int$2$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$2$$return: ref;
  var inline$java.lang.Integer$valueOf$int$2$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$2$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$2$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$2$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$2$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$java.lang.Integer$intValue$$2$$i0: int;
  var inline$java.lang.Integer$intValue$$2$r0: ref;
  var inline$java.lang.Integer$intValue$$2$$this: ref;
  var inline$java.lang.Integer$intValue$$2$$return: int;
  var inline$java.lang.Integer$intValue$$2$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$3$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$3$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$3$i0: int;
  var inline$java.lang.Integer$valueOf$int$3$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$3$$return: ref;
  var inline$java.lang.Integer$valueOf$int$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$3$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$3$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$3$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$3$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$4$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$4$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$4$i0: int;
  var inline$java.lang.Integer$valueOf$int$4$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$4$$return: ref;
  var inline$java.lang.Integer$valueOf$int$4$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$4$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$4$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$4$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$4$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$java.lang.Integer$intValue$$3$$i0: int;
  var inline$java.lang.Integer$intValue$$3$r0: ref;
  var inline$java.lang.Integer$intValue$$3$$this: ref;
  var inline$java.lang.Integer$intValue$$3$$return: int;
  var inline$java.lang.Integer$intValue$$3$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$5$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$5$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$5$i0: int;
  var inline$java.lang.Integer$valueOf$int$5$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$5$$return: ref;
  var inline$java.lang.Integer$valueOf$int$5$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$5$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$5$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$5$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$5$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.lang.Integer$intValue$$4$$i0: int;
  var inline$java.lang.Integer$intValue$$4$r0: ref;
  var inline$java.lang.Integer$intValue$$4$$this: ref;
  var inline$java.lang.Integer$intValue$$4$$return: int;
  var inline$java.lang.Integer$intValue$$4$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$6$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$6$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$6$i0: int;
  var inline$java.lang.Integer$valueOf$int$6$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$6$$return: ref;
  var inline$java.lang.Integer$valueOf$int$6$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$6$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$6$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$6$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$6$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$7$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$7$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$7$i0: int;
  var inline$java.lang.Integer$valueOf$int$7$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$7$$return: ref;
  var inline$java.lang.Integer$valueOf$int$7$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$7$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$7$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$7$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$7$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$7$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$8$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$8$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$8$i0: int;
  var inline$java.lang.Integer$valueOf$int$8$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$8$$return: ref;
  var inline$java.lang.Integer$valueOf$int$8$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$8$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$8$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$8$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$8$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$8$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$9$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$9$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$9$i0: int;
  var inline$java.lang.Integer$valueOf$int$9$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$9$$return: ref;
  var inline$java.lang.Integer$valueOf$int$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$9$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$9$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$9$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$9$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$9$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$10$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$10$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$10$i0: int;
  var inline$java.lang.Integer$valueOf$int$10$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$10$$return: ref;
  var inline$java.lang.Integer$valueOf$int$10$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$10$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$10$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$10$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$10$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$10$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$java.lang.Integer$intValue$$5$$i0: int;
  var inline$java.lang.Integer$intValue$$5$r0: ref;
  var inline$java.lang.Integer$intValue$$5$$this: ref;
  var inline$java.lang.Integer$intValue$$5$$return: int;
  var inline$java.lang.Integer$intValue$$5$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$11$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$11$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$11$i0: int;
  var inline$java.lang.Integer$valueOf$int$11$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$11$$return: ref;
  var inline$java.lang.Integer$valueOf$int$11$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$11$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$11$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$11$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$11$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$11$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$12$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$12$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$12$i0: int;
  var inline$java.lang.Integer$valueOf$int$12$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$12$$return: ref;
  var inline$java.lang.Integer$valueOf$int$12$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$12$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$12$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$12$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$12$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$12$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$13$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$13$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$13$i0: int;
  var inline$java.lang.Integer$valueOf$int$13$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$13$$return: ref;
  var inline$java.lang.Integer$valueOf$int$13$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$13$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$13$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$13$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$13$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$13$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$0$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$0$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$0$$return: int;
  var inline$java.lang.Boolean$booleanValue$$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$0$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$0$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$14$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$1$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$1$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$15$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap: $heap_type;
  var inline$java.lang.Integer$intValue$$6$$i0: int;
  var inline$java.lang.Integer$intValue$$6$r0: ref;
  var inline$java.lang.Integer$intValue$$6$$this: ref;
  var inline$java.lang.Integer$intValue$$6$$return: int;
  var inline$java.lang.Integer$intValue$$6$$exception: ref;
  var inline$java.lang.Integer$intValue$$7$$i0: int;
  var inline$java.lang.Integer$intValue$$7$r0: ref;
  var inline$java.lang.Integer$intValue$$7$$this: ref;
  var inline$java.lang.Integer$intValue$$7$$return: int;
  var inline$java.lang.Integer$intValue$$7$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$14$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$14$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$14$i0: int;
  var inline$java.lang.Integer$valueOf$int$14$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$14$$return: ref;
  var inline$java.lang.Integer$valueOf$int$14$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$14$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$14$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$14$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$14$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$14$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$16$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$15$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$15$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$15$i0: int;
  var inline$java.lang.Integer$valueOf$int$15$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$15$$return: ref;
  var inline$java.lang.Integer$valueOf$int$15$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$15$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$15$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$15$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$15$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$15$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$17$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$16$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$16$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$16$i0: int;
  var inline$java.lang.Integer$valueOf$int$16$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$16$$return: ref;
  var inline$java.lang.Integer$valueOf$int$16$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$16$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$16$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$16$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$16$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$16$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$18$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception: ref;
  var inline$java.lang.Integer$intValue$$8$$i0: int;
  var inline$java.lang.Integer$intValue$$8$r0: ref;
  var inline$java.lang.Integer$intValue$$8$$this: ref;
  var inline$java.lang.Integer$intValue$$8$$return: int;
  var inline$java.lang.Integer$intValue$$8$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$17$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$17$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$17$i0: int;
  var inline$java.lang.Integer$valueOf$int$17$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$17$$return: ref;
  var inline$java.lang.Integer$valueOf$int$17$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$17$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$17$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$17$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$17$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$17$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$19$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$18$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$18$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$18$i0: int;
  var inline$java.lang.Integer$valueOf$int$18$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$18$$return: ref;
  var inline$java.lang.Integer$valueOf$int$18$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$18$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$18$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$18$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$18$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$18$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$20$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception: ref;
  var inline$java.lang.Integer$intValue$$9$$i0: int;
  var inline$java.lang.Integer$intValue$$9$r0: ref;
  var inline$java.lang.Integer$intValue$$9$$this: ref;
  var inline$java.lang.Integer$intValue$$9$$return: int;
  var inline$java.lang.Integer$intValue$$9$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$19$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$19$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$19$i0: int;
  var inline$java.lang.Integer$valueOf$int$19$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$19$$return: ref;
  var inline$java.lang.Integer$valueOf$int$19$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$19$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$19$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$19$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$19$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$19$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$21$$exception: ref;
  var inline$java.lang.Integer$intValue$$10$$i0: int;
  var inline$java.lang.Integer$intValue$$10$r0: ref;
  var inline$java.lang.Integer$intValue$$10$$this: ref;
  var inline$java.lang.Integer$intValue$$10$$return: int;
  var inline$java.lang.Integer$intValue$$10$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$20$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$20$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$20$i0: int;
  var inline$java.lang.Integer$valueOf$int$20$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$20$$return: ref;
  var inline$java.lang.Integer$valueOf$int$20$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$20$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$20$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$20$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$20$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$20$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$22$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$21$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$21$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$21$i0: int;
  var inline$java.lang.Integer$valueOf$int$21$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$21$$return: ref;
  var inline$java.lang.Integer$valueOf$int$21$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$21$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$21$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$21$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$21$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$21$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$23$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$22$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$22$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$22$i0: int;
  var inline$java.lang.Integer$valueOf$int$22$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$22$$return: ref;
  var inline$java.lang.Integer$valueOf$int$22$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$22$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$22$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$22$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$22$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$22$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$24$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$24$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$23$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$23$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$23$i0: int;
  var inline$java.lang.Integer$valueOf$int$23$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$23$$return: ref;
  var inline$java.lang.Integer$valueOf$int$23$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$23$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$23$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$23$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$23$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$23$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$25$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$25$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$24$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$24$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$24$i0: int;
  var inline$java.lang.Integer$valueOf$int$24$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$24$$return: ref;
  var inline$java.lang.Integer$valueOf$int$24$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$24$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$24$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$24$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$24$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$24$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$26$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$26$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception: ref;
  var inline$java.lang.Integer$intValue$$11$$i0: int;
  var inline$java.lang.Integer$intValue$$11$r0: ref;
  var inline$java.lang.Integer$intValue$$11$$this: ref;
  var inline$java.lang.Integer$intValue$$11$$return: int;
  var inline$java.lang.Integer$intValue$$11$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$25$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$25$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$25$i0: int;
  var inline$java.lang.Integer$valueOf$int$25$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$25$$return: ref;
  var inline$java.lang.Integer$valueOf$int$25$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$25$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$25$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$25$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$25$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$25$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$27$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$27$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$26$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$26$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$26$i0: int;
  var inline$java.lang.Integer$valueOf$int$26$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$26$$return: ref;
  var inline$java.lang.Integer$valueOf$int$26$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$26$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$26$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$26$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$26$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$26$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$28$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$28$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$27$$fakelocal_0: ref;
  var inline$java.lang.Integer$valueOf$int$27$$r0: ref;
  var inline$java.lang.Integer$valueOf$int$27$i0: int;
  var inline$java.lang.Integer$valueOf$int$27$$in_parameter__0: int;
  var inline$java.lang.Integer$valueOf$int$27$$return: ref;
  var inline$java.lang.Integer$valueOf$int$27$$exception: ref;
  var inline$java.lang.Integer$valueOf$int$27$$objIndex: int;
  var inline$java.lang.Integer$valueOf$int$27$$heap: $heap_type;
  var inline$java.lang.Integer$$la$init$ra$$int$27$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$27$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$27$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$29$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$29$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception: ref;
  var inline$java.lang.Boolean$booleanValue$$1$r0: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$z0: int;
  var inline$java.lang.Boolean$booleanValue$$1$$this: ref;
  var inline$java.lang.Boolean$booleanValue$$1$$return: int;
  var inline$java.lang.Boolean$booleanValue$$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$2$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$2$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$30$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$30$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$z0: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$r0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$return: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$exception: ref;
  var inline$java.lang.Boolean$valueOf$boolean$3$$objIndex: int;
  var inline$java.lang.Boolean$valueOf$boolean$3$$heap: $heap_type;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$31$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$31$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception: ref;

  entry:
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    goto block19;

  block19:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    out_i21 := out_i21 + -1;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    goto anon61_Then, anon61_Else;

  anon61_Then:
    assume {:partition} out_i21 <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  block21:
    assert {:sourceloc "SimplifiedRSA.java", 44, -1, -1, -1} true;
    goto block21_dummy;

  anon80_Then:
    assume {:partition} out_i20 != in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;

  anon57:
    goto inline$java.lang.Integer$intValue$$0$Entry;

  inline$java.lang.Integer$intValue$$0$Entry:
    inline$java.lang.Integer$intValue$$0$$this := out_$r31;
    havoc inline$java.lang.Integer$intValue$$0$$i0, inline$java.lang.Integer$intValue$$0$r0, inline$java.lang.Integer$intValue$$0$$return, inline$java.lang.Integer$intValue$$0$$exception;
    goto inline$java.lang.Integer$intValue$$0$anon0;

  inline$java.lang.Integer$intValue$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$0$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$0$r0 := inline$java.lang.Integer$intValue$$0$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$0$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$0$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$0$$return := inline$java.lang.Integer$intValue$$0$$i0;
    goto inline$java.lang.Integer$intValue$$0$block13;

  inline$java.lang.Integer$intValue$$0$block13:
    goto inline$java.lang.Integer$intValue$$0$Return;

  inline$java.lang.Integer$intValue$$0$Return:
    out_i20 := inline$java.lang.Integer$intValue$$0$$return;
    out_$exception := inline$java.lang.Integer$intValue$$0$$exception;
    goto anon57$1;

  anon57$1:
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} true;
    goto anon80_Then, anon80_Else;

  anon80_Else:
    assume {:partition} out_i20 == in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon79_Then:
    assume {:partition} out_$r31 != fixed.$null;
    out_$exception := out_$exception;
    goto anon57;

  anon54:
    out_$r31 := out_$r30;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto anon79_Then, anon79_Else;

  anon79_Else:
    assume {:partition} out_$r31 == fixed.$null;
    call out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_17;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon78_Then:
    assume {:partition} fixed.$heap[out_$r30, fixed.$type] <: fixed.java.lang.Integer;
    out_$exception := out_$exception;
    goto anon54;

  anon51:
    goto inline$java.lang.Integer$intValue$$1$Entry;

  inline$java.lang.Integer$intValue$$1$Entry:
    inline$java.lang.Integer$intValue$$1$$this := out_$r27;
    havoc inline$java.lang.Integer$intValue$$1$$i0, inline$java.lang.Integer$intValue$$1$r0, inline$java.lang.Integer$intValue$$1$$return, inline$java.lang.Integer$intValue$$1$$exception;
    goto inline$java.lang.Integer$intValue$$1$anon0;

  inline$java.lang.Integer$intValue$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$1$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$1$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$1$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$1$r0 := inline$java.lang.Integer$intValue$$1$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$1$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$1$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$1$$return := inline$java.lang.Integer$intValue$$1$$i0;
    goto inline$java.lang.Integer$intValue$$1$block13;

  inline$java.lang.Integer$intValue$$1$block13:
    goto inline$java.lang.Integer$intValue$$1$Return;

  inline$java.lang.Integer$intValue$$1$Return:
    out_i17 := inline$java.lang.Integer$intValue$$1$$return;
    out_$exception := inline$java.lang.Integer$intValue$$1$$exception;
    goto anon51$1;

  anon51$1:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$0$Entry;

  inline$java.lang.Integer$valueOf$int$0$Entry:
    inline$java.lang.Integer$valueOf$int$0$$in_parameter__0 := out_i20;
    havoc inline$java.lang.Integer$valueOf$int$0$$fakelocal_0, inline$java.lang.Integer$valueOf$int$0$$r0, inline$java.lang.Integer$valueOf$int$0$i0, inline$java.lang.Integer$valueOf$int$0$$return, inline$java.lang.Integer$valueOf$int$0$$exception;
    inline$java.lang.Integer$valueOf$int$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$0$anon0;

  inline$java.lang.Integer$valueOf$int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$0$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$0$i0 := inline$java.lang.Integer$valueOf$int$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$0$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$0$$r0 := inline$java.lang.Integer$valueOf$int$0$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$0$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$0$$this := inline$java.lang.Integer$valueOf$int$0$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$0$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$0$i0, inline$java.lang.Integer$$la$init$ra$$int$0$r0, inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$0$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$r0 := inline$java.lang.Integer$$la$init$ra$$int$0$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$i0 := inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Integer$$la$init$ra$$int$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$0$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$block11;

  inline$java.lang.Integer$$la$init$ra$$int$0$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Return;

  inline$java.lang.Integer$$la$init$ra$$int$0$Return:
    inline$java.lang.Integer$valueOf$int$0$$exception := inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    goto inline$java.lang.Integer$valueOf$int$0$anon0$1;

  inline$java.lang.Integer$valueOf$int$0$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$0$$return := inline$java.lang.Integer$valueOf$int$0$$r0;
    goto inline$java.lang.Integer$valueOf$int$0$block12;

  inline$java.lang.Integer$valueOf$int$0$block12:
    goto inline$java.lang.Integer$valueOf$int$0$Return;

  inline$java.lang.Integer$valueOf$int$0$Return:
    out_$r28 := inline$java.lang.Integer$valueOf$int$0$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$0$$exception;
    goto anon51$2;

  anon51$2:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    out_$i16 := out_i20 + 1;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$1$Entry;

  inline$java.lang.Integer$valueOf$int$1$Entry:
    inline$java.lang.Integer$valueOf$int$1$$in_parameter__0 := out_$i16;
    havoc inline$java.lang.Integer$valueOf$int$1$$fakelocal_0, inline$java.lang.Integer$valueOf$int$1$$r0, inline$java.lang.Integer$valueOf$int$1$i0, inline$java.lang.Integer$valueOf$int$1$$return, inline$java.lang.Integer$valueOf$int$1$$exception;
    inline$java.lang.Integer$valueOf$int$1$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$1$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$1$anon0;

  inline$java.lang.Integer$valueOf$int$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$1$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$1$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$1$i0 := inline$java.lang.Integer$valueOf$int$1$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$1$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$1$$r0 := inline$java.lang.Integer$valueOf$int$1$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$1$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$1$$this := inline$java.lang.Integer$valueOf$int$1$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$1$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$1$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$1$i0, inline$java.lang.Integer$$la$init$ra$$int$1$r0, inline$java.lang.Integer$$la$init$ra$$int$1$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$1$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$1$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$1$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$1$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$1$r0 := inline$java.lang.Integer$$la$init$ra$$int$1$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$1$i0 := inline$java.lang.Integer$$la$init$ra$$int$1$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.lang.Integer$$la$init$ra$$int$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.lang.Integer$$la$init$ra$$int$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$1$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$1$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$1$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$1$block11;

  inline$java.lang.Integer$$la$init$ra$$int$1$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$1$Return;

  inline$java.lang.Integer$$la$init$ra$$int$1$Return:
    inline$java.lang.Integer$valueOf$int$1$$exception := inline$java.lang.Integer$$la$init$ra$$int$1$$exception;
    goto inline$java.lang.Integer$valueOf$int$1$anon0$1;

  inline$java.lang.Integer$valueOf$int$1$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$1$$return := inline$java.lang.Integer$valueOf$int$1$$r0;
    goto inline$java.lang.Integer$valueOf$int$1$block12;

  inline$java.lang.Integer$valueOf$int$1$block12:
    goto inline$java.lang.Integer$valueOf$int$1$Return;

  inline$java.lang.Integer$valueOf$int$1$Return:
    out_$r29 := inline$java.lang.Integer$valueOf$int$1$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$1$$exception;
    goto anon51$3;

  anon51$3:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := out_$r28;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := out_$r29;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    out_$r30 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto anon51$4;

  anon51$4:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto anon78_Then, anon78_Else;

  anon78_Else:
    assume {:partition} !(fixed.$heap[out_$r30, fixed.$type] <: fixed.java.lang.Integer);
    call out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_16;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon77_Then:
    assume {:partition} out_$r27 != fixed.$null;
    out_$exception := out_$exception;
    goto anon51;

  anon48:
    out_$r27 := out_$r26;
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto anon77_Then, anon77_Else;

  anon77_Else:
    assume {:partition} out_$r27 == fixed.$null;
    call out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_15;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon76_Then:
    assume {:partition} fixed.$heap[out_$r26, fixed.$type] <: fixed.java.lang.Integer;
    out_$exception := out_$exception;
    goto anon48;

  anon45:
    out_$i15 := fixed.$divInt(out_i17, 2);
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$2$Entry;

  inline$java.lang.Integer$valueOf$int$2$Entry:
    inline$java.lang.Integer$valueOf$int$2$$in_parameter__0 := out_$i15;
    havoc inline$java.lang.Integer$valueOf$int$2$$fakelocal_0, inline$java.lang.Integer$valueOf$int$2$$r0, inline$java.lang.Integer$valueOf$int$2$i0, inline$java.lang.Integer$valueOf$int$2$$return, inline$java.lang.Integer$valueOf$int$2$$exception;
    inline$java.lang.Integer$valueOf$int$2$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$2$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$2$anon0;

  inline$java.lang.Integer$valueOf$int$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$2$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$2$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$2$i0 := inline$java.lang.Integer$valueOf$int$2$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$2$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$2$$r0 := inline$java.lang.Integer$valueOf$int$2$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$2$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$2$$this := inline$java.lang.Integer$valueOf$int$2$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$2$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$2$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$2$i0, inline$java.lang.Integer$$la$init$ra$$int$2$r0, inline$java.lang.Integer$$la$init$ra$$int$2$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$2$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$2$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$2$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$2$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$2$r0 := inline$java.lang.Integer$$la$init$ra$$int$2$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$2$i0 := inline$java.lang.Integer$$la$init$ra$$int$2$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.lang.Integer$$la$init$ra$$int$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.lang.Integer$$la$init$ra$$int$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$2$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$2$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$2$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$2$block11;

  inline$java.lang.Integer$$la$init$ra$$int$2$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$2$Return;

  inline$java.lang.Integer$$la$init$ra$$int$2$Return:
    inline$java.lang.Integer$valueOf$int$2$$exception := inline$java.lang.Integer$$la$init$ra$$int$2$$exception;
    goto inline$java.lang.Integer$valueOf$int$2$anon0$1;

  inline$java.lang.Integer$valueOf$int$2$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$2$$return := inline$java.lang.Integer$valueOf$int$2$$r0;
    goto inline$java.lang.Integer$valueOf$int$2$block12;

  inline$java.lang.Integer$valueOf$int$2$block12:
    goto inline$java.lang.Integer$valueOf$int$2$Return;

  inline$java.lang.Integer$valueOf$int$2$Return:
    out_$r25 := inline$java.lang.Integer$valueOf$int$2$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$2$$exception;
    goto anon45$1;

  anon45$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := out_$r24;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := out_$r25;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    out_$r26 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto anon45$2;

  anon45$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto anon76_Then, anon76_Else;

  anon76_Else:
    assume {:partition} !(fixed.$heap[out_$r26, fixed.$type] <: fixed.java.lang.Integer);
    call out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_14;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon75_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon45;

  anon42:
    goto inline$java.lang.Integer$intValue$$2$Entry;

  inline$java.lang.Integer$intValue$$2$Entry:
    inline$java.lang.Integer$intValue$$2$$this := out_$r23;
    havoc inline$java.lang.Integer$intValue$$2$$i0, inline$java.lang.Integer$intValue$$2$r0, inline$java.lang.Integer$intValue$$2$$return, inline$java.lang.Integer$intValue$$2$$exception;
    goto inline$java.lang.Integer$intValue$$2$anon0;

  inline$java.lang.Integer$intValue$$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$2$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$2$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$2$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$2$r0 := inline$java.lang.Integer$intValue$$2$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$2$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$2$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$2$$return := inline$java.lang.Integer$intValue$$2$$i0;
    goto inline$java.lang.Integer$intValue$$2$block13;

  inline$java.lang.Integer$intValue$$2$block13:
    goto inline$java.lang.Integer$intValue$$2$Return;

  inline$java.lang.Integer$intValue$$2$Return:
    out_i18 := inline$java.lang.Integer$intValue$$2$$return;
    out_$exception := inline$java.lang.Integer$intValue$$2$$exception;
    goto anon42$1;

  anon42$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$3$Entry;

  inline$java.lang.Integer$valueOf$int$3$Entry:
    inline$java.lang.Integer$valueOf$int$3$$in_parameter__0 := out_i17;
    havoc inline$java.lang.Integer$valueOf$int$3$$fakelocal_0, inline$java.lang.Integer$valueOf$int$3$$r0, inline$java.lang.Integer$valueOf$int$3$i0, inline$java.lang.Integer$valueOf$int$3$$return, inline$java.lang.Integer$valueOf$int$3$$exception;
    inline$java.lang.Integer$valueOf$int$3$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$3$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$3$anon0;

  inline$java.lang.Integer$valueOf$int$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$3$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$3$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$3$i0 := inline$java.lang.Integer$valueOf$int$3$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$3$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$3$$r0 := inline$java.lang.Integer$valueOf$int$3$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$3$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$3$$this := inline$java.lang.Integer$valueOf$int$3$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$3$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$3$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$3$i0, inline$java.lang.Integer$$la$init$ra$$int$3$r0, inline$java.lang.Integer$$la$init$ra$$int$3$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$3$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$3$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$3$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$3$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$3$r0 := inline$java.lang.Integer$$la$init$ra$$int$3$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$3$i0 := inline$java.lang.Integer$$la$init$ra$$int$3$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.lang.Integer$$la$init$ra$$int$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.lang.Integer$$la$init$ra$$int$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$3$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$3$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$3$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$3$block11;

  inline$java.lang.Integer$$la$init$ra$$int$3$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$3$Return;

  inline$java.lang.Integer$$la$init$ra$$int$3$Return:
    inline$java.lang.Integer$valueOf$int$3$$exception := inline$java.lang.Integer$$la$init$ra$$int$3$$exception;
    goto inline$java.lang.Integer$valueOf$int$3$anon0$1;

  inline$java.lang.Integer$valueOf$int$3$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$3$$return := inline$java.lang.Integer$valueOf$int$3$$r0;
    goto inline$java.lang.Integer$valueOf$int$3$block12;

  inline$java.lang.Integer$valueOf$int$3$block12:
    goto inline$java.lang.Integer$valueOf$int$3$Return;

  inline$java.lang.Integer$valueOf$int$3$Return:
    out_$r24 := inline$java.lang.Integer$valueOf$int$3$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$3$$exception;
    goto anon42$2;

  anon42$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto anon75_Then, anon75_Else;

  anon75_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_13;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon74_Then:
    assume {:partition} out_$r23 != fixed.$null;
    out_$exception := out_$exception;
    goto anon42;

  anon39:
    out_$r23 := out_$r22;
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto anon74_Then, anon74_Else;

  anon74_Else:
    assume {:partition} out_$r23 == fixed.$null;
    call out_$fakelocal_12 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_12;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon73_Then:
    assume {:partition} fixed.$heap[out_$r22, fixed.$type] <: fixed.java.lang.Integer;
    out_$exception := out_$exception;
    goto anon39;

  anon36:
    out_$i14 := fixed.$modInt(out_$i13, in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$4$Entry;

  inline$java.lang.Integer$valueOf$int$4$Entry:
    inline$java.lang.Integer$valueOf$int$4$$in_parameter__0 := out_$i14;
    havoc inline$java.lang.Integer$valueOf$int$4$$fakelocal_0, inline$java.lang.Integer$valueOf$int$4$$r0, inline$java.lang.Integer$valueOf$int$4$i0, inline$java.lang.Integer$valueOf$int$4$$return, inline$java.lang.Integer$valueOf$int$4$$exception;
    inline$java.lang.Integer$valueOf$int$4$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$4$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$4$anon0;

  inline$java.lang.Integer$valueOf$int$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$4$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$4$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$4$i0 := inline$java.lang.Integer$valueOf$int$4$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$4$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$4$$r0 := inline$java.lang.Integer$valueOf$int$4$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$4$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$4$$this := inline$java.lang.Integer$valueOf$int$4$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$4$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$4$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$4$i0, inline$java.lang.Integer$$la$init$ra$$int$4$r0, inline$java.lang.Integer$$la$init$ra$$int$4$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$4$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$4$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$4$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$4$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$4$r0 := inline$java.lang.Integer$$la$init$ra$$int$4$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$4$i0 := inline$java.lang.Integer$$la$init$ra$$int$4$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.lang.Integer$$la$init$ra$$int$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.lang.Integer$$la$init$ra$$int$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$4$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$4$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$4$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$4$block11;

  inline$java.lang.Integer$$la$init$ra$$int$4$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$4$Return;

  inline$java.lang.Integer$$la$init$ra$$int$4$Return:
    inline$java.lang.Integer$valueOf$int$4$$exception := inline$java.lang.Integer$$la$init$ra$$int$4$$exception;
    goto inline$java.lang.Integer$valueOf$int$4$anon0$1;

  inline$java.lang.Integer$valueOf$int$4$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$4$$return := inline$java.lang.Integer$valueOf$int$4$$r0;
    goto inline$java.lang.Integer$valueOf$int$4$block12;

  inline$java.lang.Integer$valueOf$int$4$block12:
    goto inline$java.lang.Integer$valueOf$int$4$Return;

  inline$java.lang.Integer$valueOf$int$4$Return:
    out_$r21 := inline$java.lang.Integer$valueOf$int$4$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$4$$exception;
    goto anon36$1;

  anon36$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := out_$r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := out_$r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    out_$r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto anon36$2;

  anon36$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto anon73_Then, anon73_Else;

  anon73_Else:
    assume {:partition} !(fixed.$heap[out_$r22, fixed.$type] <: fixed.java.lang.Integer);
    call out_$fakelocal_11 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_11;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon72_Then:
    assume {:partition} in_i1 != 0;
    out_$exception := out_$exception;
    goto anon36;

  anon33:
    goto inline$java.lang.Integer$intValue$$3$Entry;

  inline$java.lang.Integer$intValue$$3$Entry:
    inline$java.lang.Integer$intValue$$3$$this := out_$r19;
    havoc inline$java.lang.Integer$intValue$$3$$i0, inline$java.lang.Integer$intValue$$3$r0, inline$java.lang.Integer$intValue$$3$$return, inline$java.lang.Integer$intValue$$3$$exception;
    goto inline$java.lang.Integer$intValue$$3$anon0;

  inline$java.lang.Integer$intValue$$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$3$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$3$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$3$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$3$r0 := inline$java.lang.Integer$intValue$$3$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$3$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$3$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$3$$return := inline$java.lang.Integer$intValue$$3$$i0;
    goto inline$java.lang.Integer$intValue$$3$block13;

  inline$java.lang.Integer$intValue$$3$block13:
    goto inline$java.lang.Integer$intValue$$3$Return;

  inline$java.lang.Integer$intValue$$3$Return:
    out_i19 := inline$java.lang.Integer$intValue$$3$$return;
    out_$exception := inline$java.lang.Integer$intValue$$3$$exception;
    goto anon33$1;

  anon33$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$5$Entry;

  inline$java.lang.Integer$valueOf$int$5$Entry:
    inline$java.lang.Integer$valueOf$int$5$$in_parameter__0 := out_i18;
    havoc inline$java.lang.Integer$valueOf$int$5$$fakelocal_0, inline$java.lang.Integer$valueOf$int$5$$r0, inline$java.lang.Integer$valueOf$int$5$i0, inline$java.lang.Integer$valueOf$int$5$$return, inline$java.lang.Integer$valueOf$int$5$$exception;
    inline$java.lang.Integer$valueOf$int$5$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$5$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$5$anon0;

  inline$java.lang.Integer$valueOf$int$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$5$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$5$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$5$i0 := inline$java.lang.Integer$valueOf$int$5$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$5$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$5$$r0 := inline$java.lang.Integer$valueOf$int$5$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$5$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$5$$this := inline$java.lang.Integer$valueOf$int$5$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$5$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$5$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$5$i0, inline$java.lang.Integer$$la$init$ra$$int$5$r0, inline$java.lang.Integer$$la$init$ra$$int$5$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$5$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$5$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$5$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$5$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$5$r0 := inline$java.lang.Integer$$la$init$ra$$int$5$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$5$i0 := inline$java.lang.Integer$$la$init$ra$$int$5$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.lang.Integer$$la$init$ra$$int$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.lang.Integer$$la$init$ra$$int$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$5$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$5$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$5$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$5$block11;

  inline$java.lang.Integer$$la$init$ra$$int$5$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$5$Return;

  inline$java.lang.Integer$$la$init$ra$$int$5$Return:
    inline$java.lang.Integer$valueOf$int$5$$exception := inline$java.lang.Integer$$la$init$ra$$int$5$$exception;
    goto inline$java.lang.Integer$valueOf$int$5$anon0$1;

  inline$java.lang.Integer$valueOf$int$5$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$5$$return := inline$java.lang.Integer$valueOf$int$5$$r0;
    goto inline$java.lang.Integer$valueOf$int$5$block12;

  inline$java.lang.Integer$valueOf$int$5$block12:
    goto inline$java.lang.Integer$valueOf$int$5$Return;

  inline$java.lang.Integer$valueOf$int$5$Return:
    out_$r20 := inline$java.lang.Integer$valueOf$int$5$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$5$$exception;
    goto anon33$2;

  anon33$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    out_$i13 := fixed.$mulInt(out_i19, out_i19);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Else:
    assume {:partition} in_i1 == 0;
    call out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_10;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon71_Then:
    assume {:partition} out_$r19 != fixed.$null;
    out_$exception := out_$exception;
    goto anon33;

  anon30:
    out_$r19 := out_$r18;
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Else:
    assume {:partition} out_$r19 == fixed.$null;
    call out_$fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_9;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon70_Then:
    assume {:partition} fixed.$heap[out_$r18, fixed.$type] <: fixed.java.lang.Integer;
    out_$exception := out_$exception;
    goto anon30;

  anon27:
    goto inline$java.lang.Integer$intValue$$4$Entry;

  inline$java.lang.Integer$intValue$$4$Entry:
    inline$java.lang.Integer$intValue$$4$$this := out_$r13;
    havoc inline$java.lang.Integer$intValue$$4$$i0, inline$java.lang.Integer$intValue$$4$r0, inline$java.lang.Integer$intValue$$4$$return, inline$java.lang.Integer$intValue$$4$$exception;
    goto inline$java.lang.Integer$intValue$$4$anon0;

  inline$java.lang.Integer$intValue$$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$4$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$4$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$4$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$4$r0 := inline$java.lang.Integer$intValue$$4$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$4$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$4$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$4$$return := inline$java.lang.Integer$intValue$$4$$i0;
    goto inline$java.lang.Integer$intValue$$4$block13;

  inline$java.lang.Integer$intValue$$4$block13:
    goto inline$java.lang.Integer$intValue$$4$Return;

  inline$java.lang.Integer$intValue$$4$Return:
    out_i24 := inline$java.lang.Integer$intValue$$4$$return;
    out_$exception := inline$java.lang.Integer$intValue$$4$$exception;
    goto anon27$1;

  anon27$1:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$6$Entry;

  inline$java.lang.Integer$valueOf$int$6$Entry:
    inline$java.lang.Integer$valueOf$int$6$$in_parameter__0 := out_i24;
    havoc inline$java.lang.Integer$valueOf$int$6$$fakelocal_0, inline$java.lang.Integer$valueOf$int$6$$r0, inline$java.lang.Integer$valueOf$int$6$i0, inline$java.lang.Integer$valueOf$int$6$$return, inline$java.lang.Integer$valueOf$int$6$$exception;
    inline$java.lang.Integer$valueOf$int$6$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$6$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$6$anon0;

  inline$java.lang.Integer$valueOf$int$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$6$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$6$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$6$i0 := inline$java.lang.Integer$valueOf$int$6$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$6$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$6$$r0 := inline$java.lang.Integer$valueOf$int$6$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$6$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$6$$this := inline$java.lang.Integer$valueOf$int$6$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$6$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$6$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$6$i0, inline$java.lang.Integer$$la$init$ra$$int$6$r0, inline$java.lang.Integer$$la$init$ra$$int$6$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$6$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$6$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$6$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$6$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$6$r0 := inline$java.lang.Integer$$la$init$ra$$int$6$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$6$i0 := inline$java.lang.Integer$$la$init$ra$$int$6$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.lang.Integer$$la$init$ra$$int$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.lang.Integer$$la$init$ra$$int$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$6$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$6$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$6$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$6$block11;

  inline$java.lang.Integer$$la$init$ra$$int$6$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$6$Return;

  inline$java.lang.Integer$$la$init$ra$$int$6$Return:
    inline$java.lang.Integer$valueOf$int$6$$exception := inline$java.lang.Integer$$la$init$ra$$int$6$$exception;
    goto inline$java.lang.Integer$valueOf$int$6$anon0$1;

  inline$java.lang.Integer$valueOf$int$6$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$6$$return := inline$java.lang.Integer$valueOf$int$6$$r0;
    goto inline$java.lang.Integer$valueOf$int$6$block12;

  inline$java.lang.Integer$valueOf$int$6$block12:
    goto inline$java.lang.Integer$valueOf$int$6$Return;

  inline$java.lang.Integer$valueOf$int$6$Return:
    out_$r14 := inline$java.lang.Integer$valueOf$int$6$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$6$$exception;
    goto anon27$2;

  anon27$2:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$7$Entry;

  inline$java.lang.Integer$valueOf$int$7$Entry:
    inline$java.lang.Integer$valueOf$int$7$$in_parameter__0 := out_i24;
    havoc inline$java.lang.Integer$valueOf$int$7$$fakelocal_0, inline$java.lang.Integer$valueOf$int$7$$r0, inline$java.lang.Integer$valueOf$int$7$i0, inline$java.lang.Integer$valueOf$int$7$$return, inline$java.lang.Integer$valueOf$int$7$$exception;
    inline$java.lang.Integer$valueOf$int$7$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$7$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$7$anon0;

  inline$java.lang.Integer$valueOf$int$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$7$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$7$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$7$i0 := inline$java.lang.Integer$valueOf$int$7$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$7$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$7$$r0 := inline$java.lang.Integer$valueOf$int$7$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$7$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$7$$this := inline$java.lang.Integer$valueOf$int$7$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$7$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$7$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$7$i0, inline$java.lang.Integer$$la$init$ra$$int$7$r0, inline$java.lang.Integer$$la$init$ra$$int$7$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$7$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$7$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$7$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$7$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$7$r0 := inline$java.lang.Integer$$la$init$ra$$int$7$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$7$i0 := inline$java.lang.Integer$$la$init$ra$$int$7$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.lang.Integer$$la$init$ra$$int$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.lang.Integer$$la$init$ra$$int$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$7$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$7$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$7$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$7$block11;

  inline$java.lang.Integer$$la$init$ra$$int$7$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$7$Return;

  inline$java.lang.Integer$$la$init$ra$$int$7$Return:
    inline$java.lang.Integer$valueOf$int$7$$exception := inline$java.lang.Integer$$la$init$ra$$int$7$$exception;
    goto inline$java.lang.Integer$valueOf$int$7$anon0$1;

  inline$java.lang.Integer$valueOf$int$7$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$7$$return := inline$java.lang.Integer$valueOf$int$7$$r0;
    goto inline$java.lang.Integer$valueOf$int$7$block12;

  inline$java.lang.Integer$valueOf$int$7$block12:
    goto inline$java.lang.Integer$valueOf$int$7$Return;

  inline$java.lang.Integer$valueOf$int$7$Return:
    out_$r15 := inline$java.lang.Integer$valueOf$int$7$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$7$$exception;
    goto anon27$3;

  anon27$3:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$8$Entry;

  inline$java.lang.Integer$valueOf$int$8$Entry:
    inline$java.lang.Integer$valueOf$int$8$$in_parameter__0 := out_i18;
    havoc inline$java.lang.Integer$valueOf$int$8$$fakelocal_0, inline$java.lang.Integer$valueOf$int$8$$r0, inline$java.lang.Integer$valueOf$int$8$i0, inline$java.lang.Integer$valueOf$int$8$$return, inline$java.lang.Integer$valueOf$int$8$$exception;
    inline$java.lang.Integer$valueOf$int$8$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$8$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$8$anon0;

  inline$java.lang.Integer$valueOf$int$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$8$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$8$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$8$i0 := inline$java.lang.Integer$valueOf$int$8$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$8$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$8$$r0 := inline$java.lang.Integer$valueOf$int$8$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$8$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$8$$this := inline$java.lang.Integer$valueOf$int$8$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$8$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$8$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$8$i0, inline$java.lang.Integer$$la$init$ra$$int$8$r0, inline$java.lang.Integer$$la$init$ra$$int$8$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$8$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$8$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$8$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$8$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$8$r0 := inline$java.lang.Integer$$la$init$ra$$int$8$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$8$i0 := inline$java.lang.Integer$$la$init$ra$$int$8$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.lang.Integer$$la$init$ra$$int$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.lang.Integer$$la$init$ra$$int$8$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$8$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$8$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$8$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$8$block11;

  inline$java.lang.Integer$$la$init$ra$$int$8$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$8$Return;

  inline$java.lang.Integer$$la$init$ra$$int$8$Return:
    inline$java.lang.Integer$valueOf$int$8$$exception := inline$java.lang.Integer$$la$init$ra$$int$8$$exception;
    goto inline$java.lang.Integer$valueOf$int$8$anon0$1;

  inline$java.lang.Integer$valueOf$int$8$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$8$$return := inline$java.lang.Integer$valueOf$int$8$$r0;
    goto inline$java.lang.Integer$valueOf$int$8$block12;

  inline$java.lang.Integer$valueOf$int$8$block12:
    goto inline$java.lang.Integer$valueOf$int$8$Return;

  inline$java.lang.Integer$valueOf$int$8$Return:
    out_$r16 := inline$java.lang.Integer$valueOf$int$8$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$8$$exception;
    goto anon27$4;

  anon27$4:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := out_z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := out_$r15;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := out_$r16;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    out_$r17 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto anon27$5;

  anon27$5:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := out_$r14;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := out_$r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    out_$r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto anon27$6;

  anon27$6:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Else:
    assume {:partition} !(fixed.$heap[out_$r18, fixed.$type] <: fixed.java.lang.Integer);
    call out_$fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_8;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon69_Then:
    assume {:partition} out_$r13 != fixed.$null;
    out_$exception := out_$exception;
    goto anon27;

  anon24:
    out_$r13 := out_$r12;
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Else:
    assume {:partition} out_$r13 == fixed.$null;
    call out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_7;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon68_Then:
    assume {:partition} fixed.$heap[out_$r12, fixed.$type] <: fixed.java.lang.Integer;
    out_$exception := out_$exception;
    goto anon24;

  anon21:
    out_$i12 := fixed.$modInt(out_i23, in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$9$Entry;

  inline$java.lang.Integer$valueOf$int$9$Entry:
    inline$java.lang.Integer$valueOf$int$9$$in_parameter__0 := out_$i12;
    havoc inline$java.lang.Integer$valueOf$int$9$$fakelocal_0, inline$java.lang.Integer$valueOf$int$9$$r0, inline$java.lang.Integer$valueOf$int$9$i0, inline$java.lang.Integer$valueOf$int$9$$return, inline$java.lang.Integer$valueOf$int$9$$exception;
    inline$java.lang.Integer$valueOf$int$9$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$9$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$9$anon0;

  inline$java.lang.Integer$valueOf$int$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$9$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$9$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$9$i0 := inline$java.lang.Integer$valueOf$int$9$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$9$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$9$$r0 := inline$java.lang.Integer$valueOf$int$9$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$9$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$9$$this := inline$java.lang.Integer$valueOf$int$9$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$9$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$9$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$9$i0, inline$java.lang.Integer$$la$init$ra$$int$9$r0, inline$java.lang.Integer$$la$init$ra$$int$9$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$9$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$9$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$9$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$9$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$9$r0 := inline$java.lang.Integer$$la$init$ra$$int$9$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$9$i0 := inline$java.lang.Integer$$la$init$ra$$int$9$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.lang.Integer$$la$init$ra$$int$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.lang.Integer$$la$init$ra$$int$9$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$9$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$9$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$9$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$9$block11;

  inline$java.lang.Integer$$la$init$ra$$int$9$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$9$Return;

  inline$java.lang.Integer$$la$init$ra$$int$9$Return:
    inline$java.lang.Integer$valueOf$int$9$$exception := inline$java.lang.Integer$$la$init$ra$$int$9$$exception;
    goto inline$java.lang.Integer$valueOf$int$9$anon0$1;

  inline$java.lang.Integer$valueOf$int$9$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$9$$return := inline$java.lang.Integer$valueOf$int$9$$r0;
    goto inline$java.lang.Integer$valueOf$int$9$block12;

  inline$java.lang.Integer$valueOf$int$9$block12:
    goto inline$java.lang.Integer$valueOf$int$9$Return;

  inline$java.lang.Integer$valueOf$int$9$Return:
    out_$r9 := inline$java.lang.Integer$valueOf$int$9$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$9$$exception;
    goto anon21$1;

  anon21$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$10$Entry;

  inline$java.lang.Integer$valueOf$int$10$Entry:
    inline$java.lang.Integer$valueOf$int$10$$in_parameter__0 := out_i19;
    havoc inline$java.lang.Integer$valueOf$int$10$$fakelocal_0, inline$java.lang.Integer$valueOf$int$10$$r0, inline$java.lang.Integer$valueOf$int$10$i0, inline$java.lang.Integer$valueOf$int$10$$return, inline$java.lang.Integer$valueOf$int$10$$exception;
    inline$java.lang.Integer$valueOf$int$10$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$10$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$10$anon0;

  inline$java.lang.Integer$valueOf$int$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$10$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$10$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$10$i0 := inline$java.lang.Integer$valueOf$int$10$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$10$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$10$$r0 := inline$java.lang.Integer$valueOf$int$10$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$10$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$10$$this := inline$java.lang.Integer$valueOf$int$10$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$10$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$10$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$10$i0, inline$java.lang.Integer$$la$init$ra$$int$10$r0, inline$java.lang.Integer$$la$init$ra$$int$10$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$10$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$10$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$10$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$10$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$10$r0 := inline$java.lang.Integer$$la$init$ra$$int$10$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$10$i0 := inline$java.lang.Integer$$la$init$ra$$int$10$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.lang.Integer$$la$init$ra$$int$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.lang.Integer$$la$init$ra$$int$10$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$10$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$10$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$10$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$10$block11;

  inline$java.lang.Integer$$la$init$ra$$int$10$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$10$Return;

  inline$java.lang.Integer$$la$init$ra$$int$10$Return:
    inline$java.lang.Integer$valueOf$int$10$$exception := inline$java.lang.Integer$$la$init$ra$$int$10$$exception;
    goto inline$java.lang.Integer$valueOf$int$10$anon0$1;

  inline$java.lang.Integer$valueOf$int$10$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$10$$return := inline$java.lang.Integer$valueOf$int$10$$r0;
    goto inline$java.lang.Integer$valueOf$int$10$block12;

  inline$java.lang.Integer$valueOf$int$10$block12:
    goto inline$java.lang.Integer$valueOf$int$10$Return;

  inline$java.lang.Integer$valueOf$int$10$Return:
    out_$r10 := inline$java.lang.Integer$valueOf$int$10$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$10$$exception;
    goto anon21$2;

  anon21$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := out_z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := out_$r9;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := out_$r10;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    out_$r11 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto anon21$3;

  anon21$3:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := out_$r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    out_$r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto anon21$4;

  anon21$4:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Else:
    assume {:partition} !(fixed.$heap[out_$r12, fixed.$type] <: fixed.java.lang.Integer);
    call out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_6;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon67_Then:
    assume {:partition} in_i1 != 0;
    out_$exception := out_$exception;
    goto anon21;

  anon18:
    goto inline$java.lang.Integer$intValue$$5$Entry;

  inline$java.lang.Integer$intValue$$5$Entry:
    inline$java.lang.Integer$intValue$$5$$this := out_$r7;
    havoc inline$java.lang.Integer$intValue$$5$$i0, inline$java.lang.Integer$intValue$$5$r0, inline$java.lang.Integer$intValue$$5$$return, inline$java.lang.Integer$intValue$$5$$exception;
    goto inline$java.lang.Integer$intValue$$5$anon0;

  inline$java.lang.Integer$intValue$$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$5$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$5$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$5$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$5$r0 := inline$java.lang.Integer$intValue$$5$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$5$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$5$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$5$$return := inline$java.lang.Integer$intValue$$5$$i0;
    goto inline$java.lang.Integer$intValue$$5$block13;

  inline$java.lang.Integer$intValue$$5$block13:
    goto inline$java.lang.Integer$intValue$$5$Return;

  inline$java.lang.Integer$intValue$$5$Return:
    out_i23 := inline$java.lang.Integer$intValue$$5$$return;
    out_$exception := inline$java.lang.Integer$intValue$$5$$exception;
    goto anon18$1;

  anon18$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$11$Entry;

  inline$java.lang.Integer$valueOf$int$11$Entry:
    inline$java.lang.Integer$valueOf$int$11$$in_parameter__0 := out_i19;
    havoc inline$java.lang.Integer$valueOf$int$11$$fakelocal_0, inline$java.lang.Integer$valueOf$int$11$$r0, inline$java.lang.Integer$valueOf$int$11$i0, inline$java.lang.Integer$valueOf$int$11$$return, inline$java.lang.Integer$valueOf$int$11$$exception;
    inline$java.lang.Integer$valueOf$int$11$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$11$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$11$anon0;

  inline$java.lang.Integer$valueOf$int$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$11$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$11$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$11$i0 := inline$java.lang.Integer$valueOf$int$11$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$11$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$11$$r0 := inline$java.lang.Integer$valueOf$int$11$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$11$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$11$$this := inline$java.lang.Integer$valueOf$int$11$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$11$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$11$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$11$i0, inline$java.lang.Integer$$la$init$ra$$int$11$r0, inline$java.lang.Integer$$la$init$ra$$int$11$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$11$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$11$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$11$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$11$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$11$r0 := inline$java.lang.Integer$$la$init$ra$$int$11$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$11$i0 := inline$java.lang.Integer$$la$init$ra$$int$11$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.lang.Integer$$la$init$ra$$int$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.lang.Integer$$la$init$ra$$int$11$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$11$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$11$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$11$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$11$block11;

  inline$java.lang.Integer$$la$init$ra$$int$11$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$11$Return;

  inline$java.lang.Integer$$la$init$ra$$int$11$Return:
    inline$java.lang.Integer$valueOf$int$11$$exception := inline$java.lang.Integer$$la$init$ra$$int$11$$exception;
    goto inline$java.lang.Integer$valueOf$int$11$anon0$1;

  inline$java.lang.Integer$valueOf$int$11$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$11$$return := inline$java.lang.Integer$valueOf$int$11$$r0;
    goto inline$java.lang.Integer$valueOf$int$11$block12;

  inline$java.lang.Integer$valueOf$int$11$block12:
    goto inline$java.lang.Integer$valueOf$int$11$Return;

  inline$java.lang.Integer$valueOf$int$11$Return:
    out_$r8 := inline$java.lang.Integer$valueOf$int$11$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$11$$exception;
    goto anon18$2;

  anon18$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Else:
    assume {:partition} in_i1 == 0;
    call out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_5;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon66_Then:
    assume {:partition} out_$r7 != fixed.$null;
    out_$exception := out_$exception;
    goto anon18;

  anon15:
    out_$r7 := out_$r6;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto anon66_Then, anon66_Else;

  anon66_Else:
    assume {:partition} out_$r7 == fixed.$null;
    call out_$fakelocal_4 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_4;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon65_Then:
    assume {:partition} fixed.$heap[out_$r6, fixed.$type] <: fixed.java.lang.Integer;
    out_$exception := out_$exception;
    goto anon15;

  anon12:
    out_$i7 := fixed.$modInt(out_i17, 2);
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    out_$l8 := out_$i7;
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0 := out_$l8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1 := 1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block41:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block42:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block43;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block43:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return:
    out_z1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto anon12$1;

  anon12$1:
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    out_i22 := fixed.$mulInt(out_i18, in_i3);
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    out_$l10 := out_i22;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    out_$l9 := in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__0 := out_$l10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__1 := out_$l9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$Return:
    out_z2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$0$$exception;
    goto anon12$2;

  anon12$2:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    out_$i11 := out_i22 - in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$12$Entry;

  inline$java.lang.Integer$valueOf$int$12$Entry:
    inline$java.lang.Integer$valueOf$int$12$$in_parameter__0 := out_$i11;
    havoc inline$java.lang.Integer$valueOf$int$12$$fakelocal_0, inline$java.lang.Integer$valueOf$int$12$$r0, inline$java.lang.Integer$valueOf$int$12$i0, inline$java.lang.Integer$valueOf$int$12$$return, inline$java.lang.Integer$valueOf$int$12$$exception;
    inline$java.lang.Integer$valueOf$int$12$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$12$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$12$anon0;

  inline$java.lang.Integer$valueOf$int$12$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$12$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$12$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$12$i0 := inline$java.lang.Integer$valueOf$int$12$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$12$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$12$$r0 := inline$java.lang.Integer$valueOf$int$12$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$12$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$12$$this := inline$java.lang.Integer$valueOf$int$12$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$12$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$12$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$12$i0, inline$java.lang.Integer$$la$init$ra$$int$12$r0, inline$java.lang.Integer$$la$init$ra$$int$12$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$12$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$12$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$12$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$12$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$12$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$12$r0 := inline$java.lang.Integer$$la$init$ra$$int$12$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$12$i0 := inline$java.lang.Integer$$la$init$ra$$int$12$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.lang.Integer$$la$init$ra$$int$12$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.lang.Integer$$la$init$ra$$int$12$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$12$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$12$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$12$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$12$block11;

  inline$java.lang.Integer$$la$init$ra$$int$12$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$12$Return;

  inline$java.lang.Integer$$la$init$ra$$int$12$Return:
    inline$java.lang.Integer$valueOf$int$12$$exception := inline$java.lang.Integer$$la$init$ra$$int$12$$exception;
    goto inline$java.lang.Integer$valueOf$int$12$anon0$1;

  inline$java.lang.Integer$valueOf$int$12$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$12$$return := inline$java.lang.Integer$valueOf$int$12$$r0;
    goto inline$java.lang.Integer$valueOf$int$12$block12;

  inline$java.lang.Integer$valueOf$int$12$block12:
    goto inline$java.lang.Integer$valueOf$int$12$Return;

  inline$java.lang.Integer$valueOf$int$12$Return:
    out_$r4 := inline$java.lang.Integer$valueOf$int$12$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$12$$exception;
    goto anon12$3;

  anon12$3:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$13$Entry;

  inline$java.lang.Integer$valueOf$int$13$Entry:
    inline$java.lang.Integer$valueOf$int$13$$in_parameter__0 := out_i22;
    havoc inline$java.lang.Integer$valueOf$int$13$$fakelocal_0, inline$java.lang.Integer$valueOf$int$13$$r0, inline$java.lang.Integer$valueOf$int$13$i0, inline$java.lang.Integer$valueOf$int$13$$return, inline$java.lang.Integer$valueOf$int$13$$exception;
    inline$java.lang.Integer$valueOf$int$13$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$13$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$13$anon0;

  inline$java.lang.Integer$valueOf$int$13$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$13$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$13$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$13$i0 := inline$java.lang.Integer$valueOf$int$13$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$13$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$13$$r0 := inline$java.lang.Integer$valueOf$int$13$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$13$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$13$$this := inline$java.lang.Integer$valueOf$int$13$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$13$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$13$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$13$i0, inline$java.lang.Integer$$la$init$ra$$int$13$r0, inline$java.lang.Integer$$la$init$ra$$int$13$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$13$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$13$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$13$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$13$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$13$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$13$r0 := inline$java.lang.Integer$$la$init$ra$$int$13$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$13$i0 := inline$java.lang.Integer$$la$init$ra$$int$13$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.lang.Integer$$la$init$ra$$int$13$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.lang.Integer$$la$init$ra$$int$13$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$13$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$13$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$13$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$13$block11;

  inline$java.lang.Integer$$la$init$ra$$int$13$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$13$Return;

  inline$java.lang.Integer$$la$init$ra$$int$13$Return:
    inline$java.lang.Integer$valueOf$int$13$$exception := inline$java.lang.Integer$$la$init$ra$$int$13$$exception;
    goto inline$java.lang.Integer$valueOf$int$13$anon0$1;

  inline$java.lang.Integer$valueOf$int$13$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$13$$return := inline$java.lang.Integer$valueOf$int$13$$r0;
    goto inline$java.lang.Integer$valueOf$int$13$block12;

  inline$java.lang.Integer$valueOf$int$13$block12:
    goto inline$java.lang.Integer$valueOf$int$13$Return;

  inline$java.lang.Integer$valueOf$int$13$Return:
    out_$r5 := inline$java.lang.Integer$valueOf$int$13$$return;
    out_$exception := inline$java.lang.Integer$valueOf$int$13$$exception;
    goto anon12$4;

  anon12$4:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0 := out_z2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1 := out_$r4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2 := out_$r5;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return:
    out_$r6 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto anon12$5;

  anon12$5:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto anon65_Then, anon65_Else;

  anon65_Else:
    assume {:partition} !(fixed.$heap[out_$r6, fixed.$type] <: fixed.java.lang.Integer);
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon64_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon12;

  anon9:
    goto inline$java.lang.Boolean$booleanValue$$0$Entry;

  inline$java.lang.Boolean$booleanValue$$0$Entry:
    inline$java.lang.Boolean$booleanValue$$0$$this := out_$r3;
    havoc inline$java.lang.Boolean$booleanValue$$0$r0, inline$java.lang.Boolean$booleanValue$$0$$z0, inline$java.lang.Boolean$booleanValue$$0$$return, inline$java.lang.Boolean$booleanValue$$0$$exception;
    goto inline$java.lang.Boolean$booleanValue$$0$anon0;

  inline$java.lang.Boolean$booleanValue$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$0$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$r0 := inline$java.lang.Boolean$booleanValue$$0$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$0$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$0$$return := inline$java.lang.Boolean$booleanValue$$0$$z0;
    goto inline$java.lang.Boolean$booleanValue$$0$block10;

  inline$java.lang.Boolean$booleanValue$$0$block10:
    goto inline$java.lang.Boolean$booleanValue$$0$Return;

  inline$java.lang.Boolean$booleanValue$$0$Return:
    out_z4 := inline$java.lang.Boolean$booleanValue$$0$$return;
    out_$exception := inline$java.lang.Boolean$booleanValue$$0$$exception;
    goto anon9$1;

  anon9$1:
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto anon64_Then, anon64_Else;

  anon64_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon63_Then:
    assume {:partition} out_$r3 != fixed.$null;
    out_$exception := out_$exception;
    goto anon9;

  anon6:
    out_$r3 := out_$r2;
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto anon63_Then, anon63_Else;

  anon63_Else:
    assume {:partition} out_$r3 == fixed.$null;
    call out_$fakelocal_1 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_1;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon62_Then:
    assume {:partition} fixed.$heap[out_$r2, fixed.$type] <: fixed.java.lang.Boolean;
    out_$exception := out_$exception;
    goto anon6;

  anon3:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    out_$l6 := out_i17;
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__0 := out_$l6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__1 := 0;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$Return:
    out_$z3 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$1$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0 := out_$z3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block24:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block25:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block26;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block26:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return:
    out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto anon3$2;

  anon3$2:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$0$Entry;

  inline$java.lang.Boolean$valueOf$boolean$0$Entry:
    inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0 := 1;
    havoc inline$java.lang.Boolean$valueOf$boolean$0$z0, inline$java.lang.Boolean$valueOf$boolean$0$$r0, inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$0$$return, inline$java.lang.Boolean$valueOf$boolean$0$$exception;
    inline$java.lang.Boolean$valueOf$boolean$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$0$anon0;

  inline$java.lang.Boolean$valueOf$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$0$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$0$z0 := inline$java.lang.Boolean$valueOf$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$0$$r0 := inline$java.lang.Boolean$valueOf$boolean$0$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := inline$java.lang.Boolean$valueOf$boolean$0$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$0$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$14$Entry;

  inline$java.lang.Object$$la$init$ra$$$14$Entry:
    inline$java.lang.Object$$la$init$ra$$$14$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$14$anon0;

  inline$java.lang.Object$$la$init$ra$$$14$anon0:
    inline$java.lang.Object$$la$init$ra$$$14$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$14$Return;

  inline$java.lang.Object$$la$init$ra$$$14$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    inline$java.lang.Boolean$valueOf$boolean$0$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$0$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$0$$return := inline$java.lang.Boolean$valueOf$boolean$0$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$0$block9;

  inline$java.lang.Boolean$valueOf$boolean$0$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$0$Return;

  inline$java.lang.Boolean$valueOf$boolean$0$Return:
    out_$r0 := inline$java.lang.Boolean$valueOf$boolean$0$$return;
    out_$exception := inline$java.lang.Boolean$valueOf$boolean$0$$exception;
    goto anon3$3;

  anon3$3:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$1$Entry;

  inline$java.lang.Boolean$valueOf$boolean$1$Entry:
    inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0 := out_z4;
    havoc inline$java.lang.Boolean$valueOf$boolean$1$z0, inline$java.lang.Boolean$valueOf$boolean$1$$r0, inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$1$$return, inline$java.lang.Boolean$valueOf$boolean$1$$exception;
    inline$java.lang.Boolean$valueOf$boolean$1$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$1$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$1$anon0;

  inline$java.lang.Boolean$valueOf$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$1$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$1$z0 := inline$java.lang.Boolean$valueOf$boolean$1$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$1$$r0 := inline$java.lang.Boolean$valueOf$boolean$1$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this := inline$java.lang.Boolean$valueOf$boolean$1$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$1$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$15$Entry;

  inline$java.lang.Object$$la$init$ra$$$15$Entry:
    inline$java.lang.Object$$la$init$ra$$$15$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$15$anon0;

  inline$java.lang.Object$$la$init$ra$$$15$anon0:
    inline$java.lang.Object$$la$init$ra$$$15$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$15$Return;

  inline$java.lang.Object$$la$init$ra$$$15$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception := inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$1$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$1$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$1$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$1$Return:
    inline$java.lang.Boolean$valueOf$boolean$1$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$1$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$1$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$1$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$1$$return := inline$java.lang.Boolean$valueOf$boolean$1$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$1$block9;

  inline$java.lang.Boolean$valueOf$boolean$1$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$1$Return;

  inline$java.lang.Boolean$valueOf$boolean$1$Return:
    out_$r1 := inline$java.lang.Boolean$valueOf$boolean$1$$return;
    out_$exception := inline$java.lang.Boolean$valueOf$boolean$1$$exception;
    goto anon3$4;

  anon3$4:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__0 := out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1 := out_$r0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2 := out_$r1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$Return:
    out_$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$8$$exception;
    goto anon3$5;

  anon3$5:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto anon62_Then, anon62_Else;

  anon62_Else:
    assume {:partition} !(fixed.$heap[out_$r2, fixed.$type] <: fixed.java.lang.Boolean);
    call out_$fakelocal_0 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_0;
    out_$return, out_$exception, out_$fakelocal_7, out_$r23, out_$z3, out_i21, out_$r26, out_$l9, out_$r24, out_$r2, out_$fakelocal_16, out_$r21, out_$r5, out_z4, out_$r22, out_$r3, out_$r31, out_$r15, out_$i15, out_$r12, out_$fakelocal_4, out_$fakelocal_17, out_$r18, out_$r9, out_i20, out_z0, out_$fakelocal_5, out_$i7, out_i19, out_$r17, out_$r11, out_$r10, out_i24, out_$r14, out_$fakelocal_8, out_$r20, out_$fakelocal_9, out_$fakelocal_13, out_$i11, out_$l8, out_$r29, out_i18, out_z2, out_$fakelocal_6, out_$fakelocal_1, out_$fakelocal_2, out_$fakelocal_0, out_$r27, out_$l6, out_i17, out_z1, out_$r1, out_$fakelocal_11, out_$r7, out_i22, out_i23, out_$i12, out_$r28, out_$r8, out_$fakelocal_10, out_$i13, out_$r13, out_$fakelocal_12, out_$r4, out_$r25, out_$r0, out_$r6, out_$fakelocal_15, out_$i16, out_$i14, out_$l10, out_$r30, out_$r19, out_$r16, out_$fakelocal_14, out_$fakelocal_3 := in_$return, in_$exception, in_$fakelocal_7, in_$r23, in_$z3, in_i21, in_$r26, in_$l9, in_$r24, in_$r2, in_$fakelocal_16, in_$r21, in_$r5, in_z4, in_$r22, in_$r3, in_$r31, in_$r15, in_$i15, in_$r12, in_$fakelocal_4, in_$fakelocal_17, in_$r18, in_$r9, in_i20, in_z0, in_$fakelocal_5, in_$i7, in_i19, in_$r17, in_$r11, in_$r10, in_i24, in_$r14, in_$fakelocal_8, in_$r20, in_$fakelocal_9, in_$fakelocal_13, in_$i11, in_$l8, in_$r29, in_i18, in_z2, in_$fakelocal_6, in_$fakelocal_1, in_$fakelocal_2, in_$fakelocal_0, in_$r27, in_$l6, in_i17, in_z1, in_$r1, in_$fakelocal_11, in_$r7, in_i22, in_i23, in_$i12, in_$r28, in_$r8, in_$fakelocal_10, in_$i13, in_$r13, in_$fakelocal_12, in_$r4, in_$r25, in_$r0, in_$r6, in_$fakelocal_15, in_$i16, in_$i14, in_$l10, in_$r30, in_$r19, in_$r16, in_$fakelocal_14, in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon61_Else:
    assume {:partition} 0 < out_i21;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  block21_dummy:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return := out_$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception := out_$exception;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7 := out_$fakelocal_7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23 := out_$r23;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3 := out_$z3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21 := out_i21;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26 := out_$r26;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9 := out_$l9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24 := out_$r24;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2 := out_$r2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16 := out_$fakelocal_16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21 := out_$r21;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5 := out_$r5;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4 := out_z4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22 := out_$r22;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3 := out_$r3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31 := out_$r31;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15 := out_$r15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15 := out_$i15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12 := out_$r12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4 := out_$fakelocal_4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17 := out_$fakelocal_17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18 := out_$r18;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9 := out_$r9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20 := out_i20;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0 := out_z0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5 := out_$fakelocal_5;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7 := out_$i7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19 := out_i19;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17 := out_$r17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11 := out_$r11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10 := out_$r10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24 := out_i24;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14 := out_$r14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8 := out_$fakelocal_8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20 := out_$r20;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9 := out_$fakelocal_9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13 := out_$fakelocal_13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11 := out_$i11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8 := out_$l8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29 := out_$r29;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18 := out_i18;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2 := out_z2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6 := out_$fakelocal_6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1 := out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0 := out_$fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27 := out_$r27;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6 := out_$l6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17 := out_i17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1 := out_z1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1 := out_$r1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11 := out_$fakelocal_11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7 := out_$r7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22 := out_i22;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23 := out_i23;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12 := out_$i12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28 := out_$r28;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8 := out_$r8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10 := out_$fakelocal_10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13 := out_$i13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13 := out_$r13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12 := out_$fakelocal_12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4 := out_$r4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25 := out_$r25;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4 := in_i4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0 := out_$r0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1 := in_i1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6 := out_$r6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15 := out_$fakelocal_15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16 := out_$i16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14 := out_$i14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10 := out_$l10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30 := out_$r30;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19 := out_$r19;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16 := out_$r16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3 := in_i3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14 := out_$fakelocal_14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3 := out_$fakelocal_3;
    havoc inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex := fixed.$objIndex;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap := fixed.$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21
   + -1;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21
   <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21:
    assert {:sourceloc "SimplifiedRSA.java", 44, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21_dummy;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20
   != inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57:
    goto inline$java.lang.Integer$intValue$$6$Entry;

  inline$java.lang.Integer$intValue$$6$Entry:
    inline$java.lang.Integer$intValue$$6$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31;
    havoc inline$java.lang.Integer$intValue$$6$$i0, inline$java.lang.Integer$intValue$$6$r0, inline$java.lang.Integer$intValue$$6$$return, inline$java.lang.Integer$intValue$$6$$exception;
    goto inline$java.lang.Integer$intValue$$6$anon0;

  inline$java.lang.Integer$intValue$$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$6$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$6$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$6$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$6$r0 := inline$java.lang.Integer$intValue$$6$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$6$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$6$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$6$$return := inline$java.lang.Integer$intValue$$6$$i0;
    goto inline$java.lang.Integer$intValue$$6$block13;

  inline$java.lang.Integer$intValue$$6$block13:
    goto inline$java.lang.Integer$intValue$$6$Return;

  inline$java.lang.Integer$intValue$$6$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20 := inline$java.lang.Integer$intValue$$6$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$6$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57$1:
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon80_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20
   == inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon57;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon54:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon79_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon54;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51:
    goto inline$java.lang.Integer$intValue$$7$Entry;

  inline$java.lang.Integer$intValue$$7$Entry:
    inline$java.lang.Integer$intValue$$7$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27;
    havoc inline$java.lang.Integer$intValue$$7$$i0, inline$java.lang.Integer$intValue$$7$r0, inline$java.lang.Integer$intValue$$7$$return, inline$java.lang.Integer$intValue$$7$$exception;
    goto inline$java.lang.Integer$intValue$$7$anon0;

  inline$java.lang.Integer$intValue$$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$7$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$7$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$7$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$7$r0 := inline$java.lang.Integer$intValue$$7$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$7$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$7$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$7$$return := inline$java.lang.Integer$intValue$$7$$i0;
    goto inline$java.lang.Integer$intValue$$7$block13;

  inline$java.lang.Integer$intValue$$7$block13:
    goto inline$java.lang.Integer$intValue$$7$Return;

  inline$java.lang.Integer$intValue$$7$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17 := inline$java.lang.Integer$intValue$$7$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$7$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$1:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$14$Entry;

  inline$java.lang.Integer$valueOf$int$14$Entry:
    inline$java.lang.Integer$valueOf$int$14$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20;
    havoc inline$java.lang.Integer$valueOf$int$14$$fakelocal_0, inline$java.lang.Integer$valueOf$int$14$$r0, inline$java.lang.Integer$valueOf$int$14$i0, inline$java.lang.Integer$valueOf$int$14$$return, inline$java.lang.Integer$valueOf$int$14$$exception;
    inline$java.lang.Integer$valueOf$int$14$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$14$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$14$anon0;

  inline$java.lang.Integer$valueOf$int$14$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$14$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$14$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$14$i0 := inline$java.lang.Integer$valueOf$int$14$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$14$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$14$$r0 := inline$java.lang.Integer$valueOf$int$14$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$14$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$14$$this := inline$java.lang.Integer$valueOf$int$14$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$14$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$14$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$14$i0, inline$java.lang.Integer$$la$init$ra$$int$14$r0, inline$java.lang.Integer$$la$init$ra$$int$14$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$14$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$14$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$14$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$14$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$14$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$14$r0 := inline$java.lang.Integer$$la$init$ra$$int$14$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$14$i0 := inline$java.lang.Integer$$la$init$ra$$int$14$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$16$Entry;

  inline$java.lang.Object$$la$init$ra$$$16$Entry:
    inline$java.lang.Object$$la$init$ra$$$16$$this := inline$java.lang.Integer$$la$init$ra$$int$14$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$16$anon0;

  inline$java.lang.Object$$la$init$ra$$$16$anon0:
    inline$java.lang.Object$$la$init$ra$$$16$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$16$Return;

  inline$java.lang.Object$$la$init$ra$$$16$Return:
    inline$java.lang.Integer$$la$init$ra$$int$14$$exception := inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$14$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$14$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$14$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$14$block11;

  inline$java.lang.Integer$$la$init$ra$$int$14$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$14$Return;

  inline$java.lang.Integer$$la$init$ra$$int$14$Return:
    inline$java.lang.Integer$valueOf$int$14$$exception := inline$java.lang.Integer$$la$init$ra$$int$14$$exception;
    goto inline$java.lang.Integer$valueOf$int$14$anon0$1;

  inline$java.lang.Integer$valueOf$int$14$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$14$$return := inline$java.lang.Integer$valueOf$int$14$$r0;
    goto inline$java.lang.Integer$valueOf$int$14$block12;

  inline$java.lang.Integer$valueOf$int$14$block12:
    goto inline$java.lang.Integer$valueOf$int$14$Return;

  inline$java.lang.Integer$valueOf$int$14$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28 := inline$java.lang.Integer$valueOf$int$14$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$14$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$2:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20
   + 1;
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$15$Entry;

  inline$java.lang.Integer$valueOf$int$15$Entry:
    inline$java.lang.Integer$valueOf$int$15$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16;
    havoc inline$java.lang.Integer$valueOf$int$15$$fakelocal_0, inline$java.lang.Integer$valueOf$int$15$$r0, inline$java.lang.Integer$valueOf$int$15$i0, inline$java.lang.Integer$valueOf$int$15$$return, inline$java.lang.Integer$valueOf$int$15$$exception;
    inline$java.lang.Integer$valueOf$int$15$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$15$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$15$anon0;

  inline$java.lang.Integer$valueOf$int$15$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$15$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$15$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$15$i0 := inline$java.lang.Integer$valueOf$int$15$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$15$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$15$$r0 := inline$java.lang.Integer$valueOf$int$15$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$15$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$15$$this := inline$java.lang.Integer$valueOf$int$15$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$15$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$15$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$15$i0, inline$java.lang.Integer$$la$init$ra$$int$15$r0, inline$java.lang.Integer$$la$init$ra$$int$15$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$15$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$15$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$15$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$15$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$15$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$15$r0 := inline$java.lang.Integer$$la$init$ra$$int$15$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$15$i0 := inline$java.lang.Integer$$la$init$ra$$int$15$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$17$Entry;

  inline$java.lang.Object$$la$init$ra$$$17$Entry:
    inline$java.lang.Object$$la$init$ra$$$17$$this := inline$java.lang.Integer$$la$init$ra$$int$15$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$17$anon0;

  inline$java.lang.Object$$la$init$ra$$$17$anon0:
    inline$java.lang.Object$$la$init$ra$$$17$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$17$Return;

  inline$java.lang.Object$$la$init$ra$$$17$Return:
    inline$java.lang.Integer$$la$init$ra$$int$15$$exception := inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$15$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$15$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$15$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$15$block11;

  inline$java.lang.Integer$$la$init$ra$$int$15$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$15$Return;

  inline$java.lang.Integer$$la$init$ra$$int$15$Return:
    inline$java.lang.Integer$valueOf$int$15$$exception := inline$java.lang.Integer$$la$init$ra$$int$15$$exception;
    goto inline$java.lang.Integer$valueOf$int$15$anon0$1;

  inline$java.lang.Integer$valueOf$int$15$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$15$$return := inline$java.lang.Integer$valueOf$int$15$$r0;
    goto inline$java.lang.Integer$valueOf$int$15$block12;

  inline$java.lang.Integer$valueOf$int$15$block12:
    goto inline$java.lang.Integer$valueOf$int$15$Return;

  inline$java.lang.Integer$valueOf$int$15$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29 := inline$java.lang.Integer$valueOf$int$15$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$15$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$3:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$9$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51$4:
    assert {:sourceloc "SimplifiedRSA.java", 41, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon78_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon51;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon48:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26;
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon77_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon48;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15 := fixed.$divInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$16$Entry;

  inline$java.lang.Integer$valueOf$int$16$Entry:
    inline$java.lang.Integer$valueOf$int$16$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15;
    havoc inline$java.lang.Integer$valueOf$int$16$$fakelocal_0, inline$java.lang.Integer$valueOf$int$16$$r0, inline$java.lang.Integer$valueOf$int$16$i0, inline$java.lang.Integer$valueOf$int$16$$return, inline$java.lang.Integer$valueOf$int$16$$exception;
    inline$java.lang.Integer$valueOf$int$16$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$16$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$16$anon0;

  inline$java.lang.Integer$valueOf$int$16$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$16$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$16$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$16$i0 := inline$java.lang.Integer$valueOf$int$16$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$16$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$16$$r0 := inline$java.lang.Integer$valueOf$int$16$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$16$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$16$$this := inline$java.lang.Integer$valueOf$int$16$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$16$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$16$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$16$i0, inline$java.lang.Integer$$la$init$ra$$int$16$r0, inline$java.lang.Integer$$la$init$ra$$int$16$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$16$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$16$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$16$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$16$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$16$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$16$r0 := inline$java.lang.Integer$$la$init$ra$$int$16$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$16$i0 := inline$java.lang.Integer$$la$init$ra$$int$16$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$18$Entry;

  inline$java.lang.Object$$la$init$ra$$$18$Entry:
    inline$java.lang.Object$$la$init$ra$$$18$$this := inline$java.lang.Integer$$la$init$ra$$int$16$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$18$anon0;

  inline$java.lang.Object$$la$init$ra$$$18$anon0:
    inline$java.lang.Object$$la$init$ra$$$18$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$18$Return;

  inline$java.lang.Object$$la$init$ra$$$18$Return:
    inline$java.lang.Integer$$la$init$ra$$int$16$$exception := inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$16$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$16$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$16$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$16$block11;

  inline$java.lang.Integer$$la$init$ra$$int$16$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$16$Return;

  inline$java.lang.Integer$$la$init$ra$$int$16$Return:
    inline$java.lang.Integer$valueOf$int$16$$exception := inline$java.lang.Integer$$la$init$ra$$int$16$$exception;
    goto inline$java.lang.Integer$valueOf$int$16$anon0$1;

  inline$java.lang.Integer$valueOf$int$16$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$16$$return := inline$java.lang.Integer$valueOf$int$16$$r0;
    goto inline$java.lang.Integer$valueOf$int$16$block12;

  inline$java.lang.Integer$valueOf$int$16$block12:
    goto inline$java.lang.Integer$valueOf$int$16$Return;

  inline$java.lang.Integer$valueOf$int$16$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25 := inline$java.lang.Integer$valueOf$int$16$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$16$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$10$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon76_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon45;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42:
    goto inline$java.lang.Integer$intValue$$8$Entry;

  inline$java.lang.Integer$intValue$$8$Entry:
    inline$java.lang.Integer$intValue$$8$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23;
    havoc inline$java.lang.Integer$intValue$$8$$i0, inline$java.lang.Integer$intValue$$8$r0, inline$java.lang.Integer$intValue$$8$$return, inline$java.lang.Integer$intValue$$8$$exception;
    goto inline$java.lang.Integer$intValue$$8$anon0;

  inline$java.lang.Integer$intValue$$8$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$8$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$8$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$8$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$8$r0 := inline$java.lang.Integer$intValue$$8$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$8$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$8$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$8$$return := inline$java.lang.Integer$intValue$$8$$i0;
    goto inline$java.lang.Integer$intValue$$8$block13;

  inline$java.lang.Integer$intValue$$8$block13:
    goto inline$java.lang.Integer$intValue$$8$Return;

  inline$java.lang.Integer$intValue$$8$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18 := inline$java.lang.Integer$intValue$$8$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$8$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$1:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$17$Entry;

  inline$java.lang.Integer$valueOf$int$17$Entry:
    inline$java.lang.Integer$valueOf$int$17$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17;
    havoc inline$java.lang.Integer$valueOf$int$17$$fakelocal_0, inline$java.lang.Integer$valueOf$int$17$$r0, inline$java.lang.Integer$valueOf$int$17$i0, inline$java.lang.Integer$valueOf$int$17$$return, inline$java.lang.Integer$valueOf$int$17$$exception;
    inline$java.lang.Integer$valueOf$int$17$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$17$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$17$anon0;

  inline$java.lang.Integer$valueOf$int$17$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$17$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$17$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$17$i0 := inline$java.lang.Integer$valueOf$int$17$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$17$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$17$$r0 := inline$java.lang.Integer$valueOf$int$17$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$17$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$17$$this := inline$java.lang.Integer$valueOf$int$17$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$17$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$17$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$17$i0, inline$java.lang.Integer$$la$init$ra$$int$17$r0, inline$java.lang.Integer$$la$init$ra$$int$17$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$17$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$17$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$17$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$17$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$17$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$17$r0 := inline$java.lang.Integer$$la$init$ra$$int$17$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$17$i0 := inline$java.lang.Integer$$la$init$ra$$int$17$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$19$Entry;

  inline$java.lang.Object$$la$init$ra$$$19$Entry:
    inline$java.lang.Object$$la$init$ra$$$19$$this := inline$java.lang.Integer$$la$init$ra$$int$17$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$19$anon0;

  inline$java.lang.Object$$la$init$ra$$$19$anon0:
    inline$java.lang.Object$$la$init$ra$$$19$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$19$Return;

  inline$java.lang.Object$$la$init$ra$$$19$Return:
    inline$java.lang.Integer$$la$init$ra$$int$17$$exception := inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$17$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$17$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$17$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$17$block11;

  inline$java.lang.Integer$$la$init$ra$$int$17$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$17$Return;

  inline$java.lang.Integer$$la$init$ra$$int$17$Return:
    inline$java.lang.Integer$valueOf$int$17$$exception := inline$java.lang.Integer$$la$init$ra$$int$17$$exception;
    goto inline$java.lang.Integer$valueOf$int$17$anon0$1;

  inline$java.lang.Integer$valueOf$int$17$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$17$$return := inline$java.lang.Integer$valueOf$int$17$$r0;
    goto inline$java.lang.Integer$valueOf$int$17$block12;

  inline$java.lang.Integer$valueOf$int$17$block12:
    goto inline$java.lang.Integer$valueOf$int$17$Return;

  inline$java.lang.Integer$valueOf$int$17$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24 := inline$java.lang.Integer$valueOf$int$17$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$17$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42$2:
    assert {:sourceloc "SimplifiedRSA.java", 40, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon75_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon42;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon39:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22;
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon74_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon39;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$18$Entry;

  inline$java.lang.Integer$valueOf$int$18$Entry:
    inline$java.lang.Integer$valueOf$int$18$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14;
    havoc inline$java.lang.Integer$valueOf$int$18$$fakelocal_0, inline$java.lang.Integer$valueOf$int$18$$r0, inline$java.lang.Integer$valueOf$int$18$i0, inline$java.lang.Integer$valueOf$int$18$$return, inline$java.lang.Integer$valueOf$int$18$$exception;
    inline$java.lang.Integer$valueOf$int$18$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$18$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$18$anon0;

  inline$java.lang.Integer$valueOf$int$18$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$18$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$18$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$18$i0 := inline$java.lang.Integer$valueOf$int$18$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$18$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$18$$r0 := inline$java.lang.Integer$valueOf$int$18$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$18$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$18$$this := inline$java.lang.Integer$valueOf$int$18$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$18$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$18$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$18$i0, inline$java.lang.Integer$$la$init$ra$$int$18$r0, inline$java.lang.Integer$$la$init$ra$$int$18$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$18$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$18$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$18$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$18$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$18$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$18$r0 := inline$java.lang.Integer$$la$init$ra$$int$18$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$18$i0 := inline$java.lang.Integer$$la$init$ra$$int$18$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$20$Entry;

  inline$java.lang.Object$$la$init$ra$$$20$Entry:
    inline$java.lang.Object$$la$init$ra$$$20$$this := inline$java.lang.Integer$$la$init$ra$$int$18$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$20$anon0;

  inline$java.lang.Object$$la$init$ra$$$20$anon0:
    inline$java.lang.Object$$la$init$ra$$$20$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$20$Return;

  inline$java.lang.Object$$la$init$ra$$$20$Return:
    inline$java.lang.Integer$$la$init$ra$$int$18$$exception := inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$18$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$18$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$18$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$18$block11;

  inline$java.lang.Integer$$la$init$ra$$int$18$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$18$Return;

  inline$java.lang.Integer$$la$init$ra$$int$18$Return:
    inline$java.lang.Integer$valueOf$int$18$$exception := inline$java.lang.Integer$$la$init$ra$$int$18$$exception;
    goto inline$java.lang.Integer$valueOf$int$18$anon0$1;

  inline$java.lang.Integer$valueOf$int$18$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$18$$return := inline$java.lang.Integer$valueOf$int$18$$r0;
    goto inline$java.lang.Integer$valueOf$int$18$block12;

  inline$java.lang.Integer$valueOf$int$18$block12:
    goto inline$java.lang.Integer$valueOf$int$18$Return;

  inline$java.lang.Integer$valueOf$int$18$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21 := inline$java.lang.Integer$valueOf$int$18$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$18$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$11$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon73_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon36;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33:
    goto inline$java.lang.Integer$intValue$$9$Entry;

  inline$java.lang.Integer$intValue$$9$Entry:
    inline$java.lang.Integer$intValue$$9$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19;
    havoc inline$java.lang.Integer$intValue$$9$$i0, inline$java.lang.Integer$intValue$$9$r0, inline$java.lang.Integer$intValue$$9$$return, inline$java.lang.Integer$intValue$$9$$exception;
    goto inline$java.lang.Integer$intValue$$9$anon0;

  inline$java.lang.Integer$intValue$$9$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$9$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$9$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$9$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$9$r0 := inline$java.lang.Integer$intValue$$9$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$9$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$9$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$9$$return := inline$java.lang.Integer$intValue$$9$$i0;
    goto inline$java.lang.Integer$intValue$$9$block13;

  inline$java.lang.Integer$intValue$$9$block13:
    goto inline$java.lang.Integer$intValue$$9$Return;

  inline$java.lang.Integer$intValue$$9$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19 := inline$java.lang.Integer$intValue$$9$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$9$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$1:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$19$Entry;

  inline$java.lang.Integer$valueOf$int$19$Entry:
    inline$java.lang.Integer$valueOf$int$19$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18;
    havoc inline$java.lang.Integer$valueOf$int$19$$fakelocal_0, inline$java.lang.Integer$valueOf$int$19$$r0, inline$java.lang.Integer$valueOf$int$19$i0, inline$java.lang.Integer$valueOf$int$19$$return, inline$java.lang.Integer$valueOf$int$19$$exception;
    inline$java.lang.Integer$valueOf$int$19$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$19$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$19$anon0;

  inline$java.lang.Integer$valueOf$int$19$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$19$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$19$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$19$i0 := inline$java.lang.Integer$valueOf$int$19$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$19$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$19$$r0 := inline$java.lang.Integer$valueOf$int$19$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$19$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$19$$this := inline$java.lang.Integer$valueOf$int$19$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$19$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$19$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$19$i0, inline$java.lang.Integer$$la$init$ra$$int$19$r0, inline$java.lang.Integer$$la$init$ra$$int$19$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$19$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$19$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$19$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$19$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$19$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$19$r0 := inline$java.lang.Integer$$la$init$ra$$int$19$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$19$i0 := inline$java.lang.Integer$$la$init$ra$$int$19$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$21$Entry;

  inline$java.lang.Object$$la$init$ra$$$21$Entry:
    inline$java.lang.Object$$la$init$ra$$$21$$this := inline$java.lang.Integer$$la$init$ra$$int$19$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$21$anon0;

  inline$java.lang.Object$$la$init$ra$$$21$anon0:
    inline$java.lang.Object$$la$init$ra$$$21$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$21$Return;

  inline$java.lang.Object$$la$init$ra$$$21$Return:
    inline$java.lang.Integer$$la$init$ra$$int$19$$exception := inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$19$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$19$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$19$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$19$block11;

  inline$java.lang.Integer$$la$init$ra$$int$19$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$19$Return;

  inline$java.lang.Integer$$la$init$ra$$int$19$Return:
    inline$java.lang.Integer$valueOf$int$19$$exception := inline$java.lang.Integer$$la$init$ra$$int$19$$exception;
    goto inline$java.lang.Integer$valueOf$int$19$anon0$1;

  inline$java.lang.Integer$valueOf$int$19$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$19$$return := inline$java.lang.Integer$valueOf$int$19$$r0;
    goto inline$java.lang.Integer$valueOf$int$19$block12;

  inline$java.lang.Integer$valueOf$int$19$block12:
    goto inline$java.lang.Integer$valueOf$int$19$Return;

  inline$java.lang.Integer$valueOf$int$19$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20 := inline$java.lang.Integer$valueOf$int$19$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$19$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33$2:
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19);
    assert {:sourceloc "SimplifiedRSA.java", 39, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon72_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon33;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18;
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon71_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27:
    goto inline$java.lang.Integer$intValue$$10$Entry;

  inline$java.lang.Integer$intValue$$10$Entry:
    inline$java.lang.Integer$intValue$$10$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13;
    havoc inline$java.lang.Integer$intValue$$10$$i0, inline$java.lang.Integer$intValue$$10$r0, inline$java.lang.Integer$intValue$$10$$return, inline$java.lang.Integer$intValue$$10$$exception;
    goto inline$java.lang.Integer$intValue$$10$anon0;

  inline$java.lang.Integer$intValue$$10$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$10$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$10$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$10$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$10$r0 := inline$java.lang.Integer$intValue$$10$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$10$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$10$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$10$$return := inline$java.lang.Integer$intValue$$10$$i0;
    goto inline$java.lang.Integer$intValue$$10$block13;

  inline$java.lang.Integer$intValue$$10$block13:
    goto inline$java.lang.Integer$intValue$$10$Return;

  inline$java.lang.Integer$intValue$$10$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24 := inline$java.lang.Integer$intValue$$10$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$10$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$1:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$20$Entry;

  inline$java.lang.Integer$valueOf$int$20$Entry:
    inline$java.lang.Integer$valueOf$int$20$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24;
    havoc inline$java.lang.Integer$valueOf$int$20$$fakelocal_0, inline$java.lang.Integer$valueOf$int$20$$r0, inline$java.lang.Integer$valueOf$int$20$i0, inline$java.lang.Integer$valueOf$int$20$$return, inline$java.lang.Integer$valueOf$int$20$$exception;
    inline$java.lang.Integer$valueOf$int$20$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$20$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$20$anon0;

  inline$java.lang.Integer$valueOf$int$20$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$20$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$20$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$20$i0 := inline$java.lang.Integer$valueOf$int$20$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$20$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$20$$r0 := inline$java.lang.Integer$valueOf$int$20$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$20$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$20$$this := inline$java.lang.Integer$valueOf$int$20$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$20$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$20$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$20$i0, inline$java.lang.Integer$$la$init$ra$$int$20$r0, inline$java.lang.Integer$$la$init$ra$$int$20$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$20$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$20$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$20$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$20$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$20$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$20$r0 := inline$java.lang.Integer$$la$init$ra$$int$20$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$20$i0 := inline$java.lang.Integer$$la$init$ra$$int$20$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$22$Entry;

  inline$java.lang.Object$$la$init$ra$$$22$Entry:
    inline$java.lang.Object$$la$init$ra$$$22$$this := inline$java.lang.Integer$$la$init$ra$$int$20$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$22$anon0;

  inline$java.lang.Object$$la$init$ra$$$22$anon0:
    inline$java.lang.Object$$la$init$ra$$$22$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$22$Return;

  inline$java.lang.Object$$la$init$ra$$$22$Return:
    inline$java.lang.Integer$$la$init$ra$$int$20$$exception := inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$20$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$20$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$20$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$20$block11;

  inline$java.lang.Integer$$la$init$ra$$int$20$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$20$Return;

  inline$java.lang.Integer$$la$init$ra$$int$20$Return:
    inline$java.lang.Integer$valueOf$int$20$$exception := inline$java.lang.Integer$$la$init$ra$$int$20$$exception;
    goto inline$java.lang.Integer$valueOf$int$20$anon0$1;

  inline$java.lang.Integer$valueOf$int$20$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$20$$return := inline$java.lang.Integer$valueOf$int$20$$r0;
    goto inline$java.lang.Integer$valueOf$int$20$block12;

  inline$java.lang.Integer$valueOf$int$20$block12:
    goto inline$java.lang.Integer$valueOf$int$20$Return;

  inline$java.lang.Integer$valueOf$int$20$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14 := inline$java.lang.Integer$valueOf$int$20$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$20$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$2:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$21$Entry;

  inline$java.lang.Integer$valueOf$int$21$Entry:
    inline$java.lang.Integer$valueOf$int$21$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24;
    havoc inline$java.lang.Integer$valueOf$int$21$$fakelocal_0, inline$java.lang.Integer$valueOf$int$21$$r0, inline$java.lang.Integer$valueOf$int$21$i0, inline$java.lang.Integer$valueOf$int$21$$return, inline$java.lang.Integer$valueOf$int$21$$exception;
    inline$java.lang.Integer$valueOf$int$21$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$21$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$21$anon0;

  inline$java.lang.Integer$valueOf$int$21$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$21$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$21$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$21$i0 := inline$java.lang.Integer$valueOf$int$21$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$21$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$21$$r0 := inline$java.lang.Integer$valueOf$int$21$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$21$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$21$$this := inline$java.lang.Integer$valueOf$int$21$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$21$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$21$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$21$i0, inline$java.lang.Integer$$la$init$ra$$int$21$r0, inline$java.lang.Integer$$la$init$ra$$int$21$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$21$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$21$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$21$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$21$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$21$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$21$r0 := inline$java.lang.Integer$$la$init$ra$$int$21$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$21$i0 := inline$java.lang.Integer$$la$init$ra$$int$21$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$23$Entry;

  inline$java.lang.Object$$la$init$ra$$$23$Entry:
    inline$java.lang.Object$$la$init$ra$$$23$$this := inline$java.lang.Integer$$la$init$ra$$int$21$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$23$anon0;

  inline$java.lang.Object$$la$init$ra$$$23$anon0:
    inline$java.lang.Object$$la$init$ra$$$23$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$23$Return;

  inline$java.lang.Object$$la$init$ra$$$23$Return:
    inline$java.lang.Integer$$la$init$ra$$int$21$$exception := inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$21$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$21$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$21$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$21$block11;

  inline$java.lang.Integer$$la$init$ra$$int$21$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$21$Return;

  inline$java.lang.Integer$$la$init$ra$$int$21$Return:
    inline$java.lang.Integer$valueOf$int$21$$exception := inline$java.lang.Integer$$la$init$ra$$int$21$$exception;
    goto inline$java.lang.Integer$valueOf$int$21$anon0$1;

  inline$java.lang.Integer$valueOf$int$21$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$21$$return := inline$java.lang.Integer$valueOf$int$21$$r0;
    goto inline$java.lang.Integer$valueOf$int$21$block12;

  inline$java.lang.Integer$valueOf$int$21$block12:
    goto inline$java.lang.Integer$valueOf$int$21$Return;

  inline$java.lang.Integer$valueOf$int$21$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15 := inline$java.lang.Integer$valueOf$int$21$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$21$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$3:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$22$Entry;

  inline$java.lang.Integer$valueOf$int$22$Entry:
    inline$java.lang.Integer$valueOf$int$22$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18;
    havoc inline$java.lang.Integer$valueOf$int$22$$fakelocal_0, inline$java.lang.Integer$valueOf$int$22$$r0, inline$java.lang.Integer$valueOf$int$22$i0, inline$java.lang.Integer$valueOf$int$22$$return, inline$java.lang.Integer$valueOf$int$22$$exception;
    inline$java.lang.Integer$valueOf$int$22$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$22$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$22$anon0;

  inline$java.lang.Integer$valueOf$int$22$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$22$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$22$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$22$i0 := inline$java.lang.Integer$valueOf$int$22$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$22$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$22$$r0 := inline$java.lang.Integer$valueOf$int$22$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$22$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$22$$this := inline$java.lang.Integer$valueOf$int$22$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$22$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$22$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$22$i0, inline$java.lang.Integer$$la$init$ra$$int$22$r0, inline$java.lang.Integer$$la$init$ra$$int$22$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$22$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$22$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$22$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$22$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$22$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$22$r0 := inline$java.lang.Integer$$la$init$ra$$int$22$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$22$i0 := inline$java.lang.Integer$$la$init$ra$$int$22$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$24$Entry;

  inline$java.lang.Object$$la$init$ra$$$24$Entry:
    inline$java.lang.Object$$la$init$ra$$$24$$this := inline$java.lang.Integer$$la$init$ra$$int$22$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$24$anon0;

  inline$java.lang.Object$$la$init$ra$$$24$anon0:
    inline$java.lang.Object$$la$init$ra$$$24$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$24$Return;

  inline$java.lang.Object$$la$init$ra$$$24$Return:
    inline$java.lang.Integer$$la$init$ra$$int$22$$exception := inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$22$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$22$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$22$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$22$block11;

  inline$java.lang.Integer$$la$init$ra$$int$22$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$22$Return;

  inline$java.lang.Integer$$la$init$ra$$int$22$Return:
    inline$java.lang.Integer$valueOf$int$22$$exception := inline$java.lang.Integer$$la$init$ra$$int$22$$exception;
    goto inline$java.lang.Integer$valueOf$int$22$anon0$1;

  inline$java.lang.Integer$valueOf$int$22$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$22$$return := inline$java.lang.Integer$valueOf$int$22$$r0;
    goto inline$java.lang.Integer$valueOf$int$22$block12;

  inline$java.lang.Integer$valueOf$int$22$block12:
    goto inline$java.lang.Integer$valueOf$int$22$Return;

  inline$java.lang.Integer$valueOf$int$22$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16 := inline$java.lang.Integer$valueOf$int$22$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$22$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$4:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$12$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$5;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$5:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$13$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$6;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27$6:
    assert {:sourceloc "SimplifiedRSA.java", 37, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon70_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon24:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12;
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon69_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon24;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$23$Entry;

  inline$java.lang.Integer$valueOf$int$23$Entry:
    inline$java.lang.Integer$valueOf$int$23$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12;
    havoc inline$java.lang.Integer$valueOf$int$23$$fakelocal_0, inline$java.lang.Integer$valueOf$int$23$$r0, inline$java.lang.Integer$valueOf$int$23$i0, inline$java.lang.Integer$valueOf$int$23$$return, inline$java.lang.Integer$valueOf$int$23$$exception;
    inline$java.lang.Integer$valueOf$int$23$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$23$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$23$anon0;

  inline$java.lang.Integer$valueOf$int$23$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$23$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$23$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$23$i0 := inline$java.lang.Integer$valueOf$int$23$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$23$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$23$$r0 := inline$java.lang.Integer$valueOf$int$23$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$23$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$23$$this := inline$java.lang.Integer$valueOf$int$23$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$23$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$23$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$23$i0, inline$java.lang.Integer$$la$init$ra$$int$23$r0, inline$java.lang.Integer$$la$init$ra$$int$23$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$23$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$23$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$23$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$23$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$23$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$23$r0 := inline$java.lang.Integer$$la$init$ra$$int$23$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$23$i0 := inline$java.lang.Integer$$la$init$ra$$int$23$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$25$Entry;

  inline$java.lang.Object$$la$init$ra$$$25$Entry:
    inline$java.lang.Object$$la$init$ra$$$25$$this := inline$java.lang.Integer$$la$init$ra$$int$23$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$25$anon0;

  inline$java.lang.Object$$la$init$ra$$$25$anon0:
    inline$java.lang.Object$$la$init$ra$$$25$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$25$Return;

  inline$java.lang.Object$$la$init$ra$$$25$Return:
    inline$java.lang.Integer$$la$init$ra$$int$23$$exception := inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$23$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$23$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$23$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$23$block11;

  inline$java.lang.Integer$$la$init$ra$$int$23$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$23$Return;

  inline$java.lang.Integer$$la$init$ra$$int$23$Return:
    inline$java.lang.Integer$valueOf$int$23$$exception := inline$java.lang.Integer$$la$init$ra$$int$23$$exception;
    goto inline$java.lang.Integer$valueOf$int$23$anon0$1;

  inline$java.lang.Integer$valueOf$int$23$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$23$$return := inline$java.lang.Integer$valueOf$int$23$$r0;
    goto inline$java.lang.Integer$valueOf$int$23$block12;

  inline$java.lang.Integer$valueOf$int$23$block12:
    goto inline$java.lang.Integer$valueOf$int$23$Return;

  inline$java.lang.Integer$valueOf$int$23$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9 := inline$java.lang.Integer$valueOf$int$23$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$23$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$24$Entry;

  inline$java.lang.Integer$valueOf$int$24$Entry:
    inline$java.lang.Integer$valueOf$int$24$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19;
    havoc inline$java.lang.Integer$valueOf$int$24$$fakelocal_0, inline$java.lang.Integer$valueOf$int$24$$r0, inline$java.lang.Integer$valueOf$int$24$i0, inline$java.lang.Integer$valueOf$int$24$$return, inline$java.lang.Integer$valueOf$int$24$$exception;
    inline$java.lang.Integer$valueOf$int$24$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$24$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$24$anon0;

  inline$java.lang.Integer$valueOf$int$24$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$24$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$24$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$24$i0 := inline$java.lang.Integer$valueOf$int$24$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$24$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$24$$r0 := inline$java.lang.Integer$valueOf$int$24$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$24$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$24$$this := inline$java.lang.Integer$valueOf$int$24$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$24$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$24$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$24$i0, inline$java.lang.Integer$$la$init$ra$$int$24$r0, inline$java.lang.Integer$$la$init$ra$$int$24$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$24$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$24$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$24$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$24$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$24$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$24$r0 := inline$java.lang.Integer$$la$init$ra$$int$24$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$24$i0 := inline$java.lang.Integer$$la$init$ra$$int$24$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$26$Entry;

  inline$java.lang.Object$$la$init$ra$$$26$Entry:
    inline$java.lang.Object$$la$init$ra$$$26$$this := inline$java.lang.Integer$$la$init$ra$$int$24$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$26$anon0;

  inline$java.lang.Object$$la$init$ra$$$26$anon0:
    inline$java.lang.Object$$la$init$ra$$$26$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$26$Return;

  inline$java.lang.Object$$la$init$ra$$$26$Return:
    inline$java.lang.Integer$$la$init$ra$$int$24$$exception := inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$24$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$24$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$24$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$24$block11;

  inline$java.lang.Integer$$la$init$ra$$int$24$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$24$Return;

  inline$java.lang.Integer$$la$init$ra$$int$24$Return:
    inline$java.lang.Integer$valueOf$int$24$$exception := inline$java.lang.Integer$$la$init$ra$$int$24$$exception;
    goto inline$java.lang.Integer$valueOf$int$24$anon0$1;

  inline$java.lang.Integer$valueOf$int$24$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$24$$return := inline$java.lang.Integer$valueOf$int$24$$r0;
    goto inline$java.lang.Integer$valueOf$int$24$block12;

  inline$java.lang.Integer$valueOf$int$24$block12:
    goto inline$java.lang.Integer$valueOf$int$24$Return;

  inline$java.lang.Integer$valueOf$int$24$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10 := inline$java.lang.Integer$valueOf$int$24$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$24$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$14$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$3:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$15$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21$4:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon68_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18:
    goto inline$java.lang.Integer$intValue$$11$Entry;

  inline$java.lang.Integer$intValue$$11$Entry:
    inline$java.lang.Integer$intValue$$11$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7;
    havoc inline$java.lang.Integer$intValue$$11$$i0, inline$java.lang.Integer$intValue$$11$r0, inline$java.lang.Integer$intValue$$11$$return, inline$java.lang.Integer$intValue$$11$$exception;
    goto inline$java.lang.Integer$intValue$$11$anon0;

  inline$java.lang.Integer$intValue$$11$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$intValue$$11$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$intValue$$11$$this != fixed.$null;
    inline$java.lang.Integer$intValue$$11$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$11$r0 := inline$java.lang.Integer$intValue$$11$$this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$11$$i0 := fixed.$heap[inline$java.lang.Integer$intValue$$11$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    inline$java.lang.Integer$intValue$$11$$return := inline$java.lang.Integer$intValue$$11$$i0;
    goto inline$java.lang.Integer$intValue$$11$block13;

  inline$java.lang.Integer$intValue$$11$block13:
    goto inline$java.lang.Integer$intValue$$11$Return;

  inline$java.lang.Integer$intValue$$11$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23 := inline$java.lang.Integer$intValue$$11$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$intValue$$11$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$1:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$25$Entry;

  inline$java.lang.Integer$valueOf$int$25$Entry:
    inline$java.lang.Integer$valueOf$int$25$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19;
    havoc inline$java.lang.Integer$valueOf$int$25$$fakelocal_0, inline$java.lang.Integer$valueOf$int$25$$r0, inline$java.lang.Integer$valueOf$int$25$i0, inline$java.lang.Integer$valueOf$int$25$$return, inline$java.lang.Integer$valueOf$int$25$$exception;
    inline$java.lang.Integer$valueOf$int$25$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$25$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$25$anon0;

  inline$java.lang.Integer$valueOf$int$25$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$25$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$25$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$25$i0 := inline$java.lang.Integer$valueOf$int$25$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$25$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$25$$r0 := inline$java.lang.Integer$valueOf$int$25$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$25$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$25$$this := inline$java.lang.Integer$valueOf$int$25$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$25$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$25$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$25$i0, inline$java.lang.Integer$$la$init$ra$$int$25$r0, inline$java.lang.Integer$$la$init$ra$$int$25$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$25$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$25$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$25$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$25$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$25$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$25$r0 := inline$java.lang.Integer$$la$init$ra$$int$25$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$25$i0 := inline$java.lang.Integer$$la$init$ra$$int$25$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$27$Entry;

  inline$java.lang.Object$$la$init$ra$$$27$Entry:
    inline$java.lang.Object$$la$init$ra$$$27$$this := inline$java.lang.Integer$$la$init$ra$$int$25$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$27$anon0;

  inline$java.lang.Object$$la$init$ra$$$27$anon0:
    inline$java.lang.Object$$la$init$ra$$$27$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$27$Return;

  inline$java.lang.Object$$la$init$ra$$$27$Return:
    inline$java.lang.Integer$$la$init$ra$$int$25$$exception := inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$25$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$25$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$25$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$25$block11;

  inline$java.lang.Integer$$la$init$ra$$int$25$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$25$Return;

  inline$java.lang.Integer$$la$init$ra$$int$25$Return:
    inline$java.lang.Integer$valueOf$int$25$$exception := inline$java.lang.Integer$$la$init$ra$$int$25$$exception;
    goto inline$java.lang.Integer$valueOf$int$25$anon0$1;

  inline$java.lang.Integer$valueOf$int$25$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$25$$return := inline$java.lang.Integer$valueOf$int$25$$r0;
    goto inline$java.lang.Integer$valueOf$int$25$block12;

  inline$java.lang.Integer$valueOf$int$25$block12:
    goto inline$java.lang.Integer$valueOf$int$25$Return;

  inline$java.lang.Integer$valueOf$int$25$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8 := inline$java.lang.Integer$valueOf$int$25$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$25$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18$2:
    assert {:sourceloc "SimplifiedRSA.java", 36, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon67_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon66_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7;
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1 := 1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block41:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block42:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block43;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block43:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block42;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block41;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$1:
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3);
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$2$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$2:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22
   - inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$26$Entry;

  inline$java.lang.Integer$valueOf$int$26$Entry:
    inline$java.lang.Integer$valueOf$int$26$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11;
    havoc inline$java.lang.Integer$valueOf$int$26$$fakelocal_0, inline$java.lang.Integer$valueOf$int$26$$r0, inline$java.lang.Integer$valueOf$int$26$i0, inline$java.lang.Integer$valueOf$int$26$$return, inline$java.lang.Integer$valueOf$int$26$$exception;
    inline$java.lang.Integer$valueOf$int$26$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$26$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$26$anon0;

  inline$java.lang.Integer$valueOf$int$26$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$26$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$26$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$26$i0 := inline$java.lang.Integer$valueOf$int$26$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$26$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$26$$r0 := inline$java.lang.Integer$valueOf$int$26$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$26$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$26$$this := inline$java.lang.Integer$valueOf$int$26$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$26$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$26$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$26$i0, inline$java.lang.Integer$$la$init$ra$$int$26$r0, inline$java.lang.Integer$$la$init$ra$$int$26$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$26$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$26$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$26$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$26$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$26$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$26$r0 := inline$java.lang.Integer$$la$init$ra$$int$26$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$26$i0 := inline$java.lang.Integer$$la$init$ra$$int$26$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$28$Entry;

  inline$java.lang.Object$$la$init$ra$$$28$Entry:
    inline$java.lang.Object$$la$init$ra$$$28$$this := inline$java.lang.Integer$$la$init$ra$$int$26$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$28$anon0;

  inline$java.lang.Object$$la$init$ra$$$28$anon0:
    inline$java.lang.Object$$la$init$ra$$$28$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$28$Return;

  inline$java.lang.Object$$la$init$ra$$$28$Return:
    inline$java.lang.Integer$$la$init$ra$$int$26$$exception := inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$26$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$26$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$26$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$26$block11;

  inline$java.lang.Integer$$la$init$ra$$int$26$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$26$Return;

  inline$java.lang.Integer$$la$init$ra$$int$26$Return:
    inline$java.lang.Integer$valueOf$int$26$$exception := inline$java.lang.Integer$$la$init$ra$$int$26$$exception;
    goto inline$java.lang.Integer$valueOf$int$26$anon0$1;

  inline$java.lang.Integer$valueOf$int$26$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$26$$return := inline$java.lang.Integer$valueOf$int$26$$r0;
    goto inline$java.lang.Integer$valueOf$int$26$block12;

  inline$java.lang.Integer$valueOf$int$26$block12:
    goto inline$java.lang.Integer$valueOf$int$26$Return;

  inline$java.lang.Integer$valueOf$int$26$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4 := inline$java.lang.Integer$valueOf$int$26$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$26$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$3:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$java.lang.Integer$valueOf$int$27$Entry;

  inline$java.lang.Integer$valueOf$int$27$Entry:
    inline$java.lang.Integer$valueOf$int$27$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22;
    havoc inline$java.lang.Integer$valueOf$int$27$$fakelocal_0, inline$java.lang.Integer$valueOf$int$27$$r0, inline$java.lang.Integer$valueOf$int$27$i0, inline$java.lang.Integer$valueOf$int$27$$return, inline$java.lang.Integer$valueOf$int$27$$exception;
    inline$java.lang.Integer$valueOf$int$27$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$valueOf$int$27$$heap := fixed.$heap;
    goto inline$java.lang.Integer$valueOf$int$27$anon0;

  inline$java.lang.Integer$valueOf$int$27$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Integer$valueOf$int$27$$return, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$valueOf$int$27$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$27$i0 := inline$java.lang.Integer$valueOf$int$27$$in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call inline$java.lang.Integer$valueOf$int$27$$fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    inline$java.lang.Integer$valueOf$int$27$$r0 := inline$java.lang.Integer$valueOf$int$27$$fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$27$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$27$$this := inline$java.lang.Integer$valueOf$int$27$$r0;
    inline$java.lang.Integer$$la$init$ra$$int$27$$in_parameter__0 := inline$java.lang.Integer$valueOf$int$27$i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$27$i0, inline$java.lang.Integer$$la$init$ra$$int$27$r0, inline$java.lang.Integer$$la$init$ra$$int$27$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$27$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$27$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$27$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$27$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$27$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$27$r0 := inline$java.lang.Integer$$la$init$ra$$int$27$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$27$i0 := inline$java.lang.Integer$$la$init$ra$$int$27$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$29$Entry;

  inline$java.lang.Object$$la$init$ra$$$29$Entry:
    inline$java.lang.Object$$la$init$ra$$$29$$this := inline$java.lang.Integer$$la$init$ra$$int$27$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$29$anon0;

  inline$java.lang.Object$$la$init$ra$$$29$anon0:
    inline$java.lang.Object$$la$init$ra$$$29$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$29$Return;

  inline$java.lang.Object$$la$init$ra$$$29$Return:
    inline$java.lang.Integer$$la$init$ra$$int$27$$exception := inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$27$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$27$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$27$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$27$block11;

  inline$java.lang.Integer$$la$init$ra$$int$27$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$27$Return;

  inline$java.lang.Integer$$la$init$ra$$int$27$Return:
    inline$java.lang.Integer$valueOf$int$27$$exception := inline$java.lang.Integer$$la$init$ra$$int$27$$exception;
    goto inline$java.lang.Integer$valueOf$int$27$anon0$1;

  inline$java.lang.Integer$valueOf$int$27$anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    inline$java.lang.Integer$valueOf$int$27$$return := inline$java.lang.Integer$valueOf$int$27$$r0;
    goto inline$java.lang.Integer$valueOf$int$27$block12;

  inline$java.lang.Integer$valueOf$int$27$block12:
    goto inline$java.lang.Integer$valueOf$int$27$Return;

  inline$java.lang.Integer$valueOf$int$27$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5 := inline$java.lang.Integer$valueOf$int$27$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Integer$valueOf$int$27$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$4:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$16$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$5;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12$5:
    assert {:sourceloc "SimplifiedRSA.java", 34, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon65_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, fixed.$type]
   <: fixed.java.lang.Integer);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9:
    goto inline$java.lang.Boolean$booleanValue$$1$Entry;

  inline$java.lang.Boolean$booleanValue$$1$Entry:
    inline$java.lang.Boolean$booleanValue$$1$$this := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3;
    havoc inline$java.lang.Boolean$booleanValue$$1$r0, inline$java.lang.Boolean$booleanValue$$1$$z0, inline$java.lang.Boolean$booleanValue$$1$$return, inline$java.lang.Boolean$booleanValue$$1$$exception;
    goto inline$java.lang.Boolean$booleanValue$$1$anon0;

  inline$java.lang.Boolean$booleanValue$$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$booleanValue$$1$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$booleanValue$$1$$this != fixed.$null;
    inline$java.lang.Boolean$booleanValue$$1$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$r0 := inline$java.lang.Boolean$booleanValue$$1$$this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$$z0 := fixed.$heap[inline$java.lang.Boolean$booleanValue$$1$r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    inline$java.lang.Boolean$booleanValue$$1$$return := inline$java.lang.Boolean$booleanValue$$1$$z0;
    goto inline$java.lang.Boolean$booleanValue$$1$block10;

  inline$java.lang.Boolean$booleanValue$$1$block10:
    goto inline$java.lang.Boolean$booleanValue$$1$Return;

  inline$java.lang.Boolean$booleanValue$$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4 := inline$java.lang.Boolean$booleanValue$$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Boolean$booleanValue$$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9$1:
    assert {:sourceloc "SimplifiedRSA.java", 26, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon64_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3
   != fixed.$null;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2;
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon63_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3
   == fixed.$null;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Then:
    assume {:partition} fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17;
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__1 := 0;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Else:
    assume {:partition} 0 < inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block29:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Else:
    assume {:partition} 0 >= inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block30:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block31;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block31:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block30;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$block29;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3 := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long$3$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$1;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$1:
    assert {:sourceloc "SimplifiedRSA.java", 22, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block24:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block25:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block26;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block26:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block25;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block24;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$2;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$2:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$2$Entry;

  inline$java.lang.Boolean$valueOf$boolean$2$Entry:
    inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0 := 1;
    havoc inline$java.lang.Boolean$valueOf$boolean$2$z0, inline$java.lang.Boolean$valueOf$boolean$2$$r0, inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$2$$return, inline$java.lang.Boolean$valueOf$boolean$2$$exception;
    inline$java.lang.Boolean$valueOf$boolean$2$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$2$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$2$anon0;

  inline$java.lang.Boolean$valueOf$boolean$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$2$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$2$z0 := inline$java.lang.Boolean$valueOf$boolean$2$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$2$$r0 := inline$java.lang.Boolean$valueOf$boolean$2$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this := inline$java.lang.Boolean$valueOf$boolean$2$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$2$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$30$Entry;

  inline$java.lang.Object$$la$init$ra$$$30$Entry:
    inline$java.lang.Object$$la$init$ra$$$30$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$30$anon0;

  inline$java.lang.Object$$la$init$ra$$$30$anon0:
    inline$java.lang.Object$$la$init$ra$$$30$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$30$Return;

  inline$java.lang.Object$$la$init$ra$$$30$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception := inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$2$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$2$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$2$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$2$Return:
    inline$java.lang.Boolean$valueOf$boolean$2$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$2$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$2$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$2$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$2$$return := inline$java.lang.Boolean$valueOf$boolean$2$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$2$block9;

  inline$java.lang.Boolean$valueOf$boolean$2$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$2$Return;

  inline$java.lang.Boolean$valueOf$boolean$2$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0 := inline$java.lang.Boolean$valueOf$boolean$2$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Boolean$valueOf$boolean$2$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$3:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Boolean$valueOf$boolean$3$Entry;

  inline$java.lang.Boolean$valueOf$boolean$3$Entry:
    inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    havoc inline$java.lang.Boolean$valueOf$boolean$3$z0, inline$java.lang.Boolean$valueOf$boolean$3$$r0, inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0, inline$java.lang.Boolean$valueOf$boolean$3$$return, inline$java.lang.Boolean$valueOf$boolean$3$$exception;
    inline$java.lang.Boolean$valueOf$boolean$3$$objIndex := fixed.$objIndex;
    inline$java.lang.Boolean$valueOf$boolean$3$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$valueOf$boolean$3$anon0;

  inline$java.lang.Boolean$valueOf$boolean$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$java.lang.Boolean$valueOf$boolean$3$$return, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$java.lang.Boolean$valueOf$boolean$3$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$3$z0 := inline$java.lang.Boolean$valueOf$boolean$3$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    inline$java.lang.Boolean$valueOf$boolean$3$$r0 := inline$java.lang.Boolean$valueOf$boolean$3$$fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this := inline$java.lang.Boolean$valueOf$boolean$3$$r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0 := inline$java.lang.Boolean$valueOf$boolean$3$z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$31$Entry;

  inline$java.lang.Object$$la$init$ra$$$31$Entry:
    inline$java.lang.Object$$la$init$ra$$$31$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$31$anon0;

  inline$java.lang.Object$$la$init$ra$$$31$anon0:
    inline$java.lang.Object$$la$init$ra$$$31$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$31$Return;

  inline$java.lang.Object$$la$init$ra$$$31$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception := inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$3$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$3$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$3$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$3$Return:
    inline$java.lang.Boolean$valueOf$boolean$3$$exception := inline$java.lang.Boolean$$la$init$ra$$boolean$3$$exception;
    goto inline$java.lang.Boolean$valueOf$boolean$3$anon0$1;

  inline$java.lang.Boolean$valueOf$boolean$3$anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    inline$java.lang.Boolean$valueOf$boolean$3$$return := inline$java.lang.Boolean$valueOf$boolean$3$$r0;
    goto inline$java.lang.Boolean$valueOf$boolean$3$block9;

  inline$java.lang.Boolean$valueOf$boolean$3$block9:
    goto inline$java.lang.Boolean$valueOf$boolean$3$Return;

  inline$java.lang.Boolean$valueOf$boolean$3$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1 := inline$java.lang.Boolean$valueOf$boolean$3$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$java.lang.Boolean$valueOf$boolean$3$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$4;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$4:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block71:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block72:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block73;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block73:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block72;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$block71;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$Return:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$17$$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$5;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3$5:
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon62_Else:
    assume {:partition} !(fixed.$heap[inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$z3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r26, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r21, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r31, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_5, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i24, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r20, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r29, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i18, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r27, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i17, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_z1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r1, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i22, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i23, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r28, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r13, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r4, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r25, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_15, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$l10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r30, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r19, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$r16, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_14, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon61_Else:
    assume {:partition} 0
   < inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21;
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21_dummy:
    assume false;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$exit:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return:
    out_$return := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return;
    out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    out_$fakelocal_7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_7;
    out_$r23 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r23;
    out_$z3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$z3;
    out_i21 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i21;
    out_$r26 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r26;
    out_$l9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l9;
    out_$r24 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r24;
    out_$r2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r2;
    out_$fakelocal_16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_16;
    out_$r21 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r21;
    out_$r5 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r5;
    out_z4 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z4;
    out_$r22 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r22;
    out_$r3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r3;
    out_$r31 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r31;
    out_$r15 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r15;
    out_$i15 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i15;
    out_$r12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r12;
    out_$fakelocal_4 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_4;
    out_$fakelocal_17 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_17;
    out_$r18 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r18;
    out_$r9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r9;
    out_i20 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i20;
    out_z0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z0;
    out_$fakelocal_5 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_5;
    out_$i7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7;
    out_i19 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i19;
    out_$r17 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r17;
    out_$r11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r11;
    out_$r10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r10;
    out_i24 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i24;
    out_$r14 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r14;
    out_$fakelocal_8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_8;
    out_$r20 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r20;
    out_$fakelocal_9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_9;
    out_$fakelocal_13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_13;
    out_$i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i11;
    out_$l8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l8;
    out_$r29 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r29;
    out_i18 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i18;
    out_z2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z2;
    out_$fakelocal_6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_6;
    out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    out_$fakelocal_2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    out_$fakelocal_0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    out_$r27 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r27;
    out_$l6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l6;
    out_i17 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i17;
    out_z1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_z1;
    out_$r1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r1;
    out_$fakelocal_11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_11;
    out_$r7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r7;
    out_i22 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i22;
    out_i23 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i23;
    out_$i12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i12;
    out_$r28 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r28;
    out_$r8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r8;
    out_$fakelocal_10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_10;
    out_$i13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i13;
    out_$r13 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r13;
    out_$fakelocal_12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_12;
    out_$r4 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r4;
    out_$r25 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r25;
    out_$r0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r0;
    out_$r6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r6;
    out_$fakelocal_15 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_15;
    out_$i16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i16;
    out_$i14 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i14;
    out_$l10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$l10;
    out_$r30 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r30;
    out_$r19 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r19;
    out_$r16 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$r16;
    out_$fakelocal_14 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_14;
    out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    goto block21_dummy$1;

  block21_dummy$1:
    return;

  exit:
    return;
}



axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "unsafe"} unsafe.java.lang.Math$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception
   == _uf_fixed.java.lang.Math$$la$init$ra$$_$exception($this, old(fixed.$heap), old(fixed.$arrSizeHeap), old(fixed.$stringSizeHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:inline 1} unsafe.java.lang.Math$min$int_int($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);
  free ensures $return
   == _uf_fixed.java.lang.Math$min$int_int_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));
  free ensures $exception
   == _uf_fixed.java.lang.Math$min$int_int_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap));



procedure {:prefix "unsafe"} unsafe.java.lang.Math$log$double($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.String$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.Integer$$la$init$ra$$int($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Integer$valueOf$int($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Integer$intValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.Integer$compareTo$java.lang.Integer($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Integer$compareTo$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.modpow.SimplifiedRSA$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int($in_parameter__0: int, 
    $in_parameter__1: int, 
    $in_parameter__2: int, 
    $in_parameter__3: int)
   returns ($return: int, $exception: ref);
  free requires $in_parameter__2 == 834443;
  modifies fixed.$objIndex, fixed.$heap;



procedure {:prefix "unsafe"} unsafe.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19(in_$return: int, 
    in_$exception: ref, 
    in_i10: int, 
    in_$i6: int, 
    in_i11: int, 
    in_i8: int, 
    in_i12: int, 
    in_i9: int, 
    in_i3: int, 
    in_$i7: int, 
    in_$fakelocal_2: ref, 
    in_i4: int, 
    in_$fakelocal_3: ref, 
    in_$fakelocal_0: ref, 
    in_i1: int, 
    in_$fakelocal_1: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_i10: int, 
    out_$i6: int, 
    out_i11: int, 
    out_i8: int, 
    out_i12: int, 
    out_i9: int, 
    out_$i7: int, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref, 
    out_$fakelocal_0: ref, 
    out_$fakelocal_1: ref);
  modifies fixed.$objIndex, fixed.$heap;



implementation unsafe.java.lang.Math$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Math.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Math;
    assume {:sourceloc "Math.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Math.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Math.java", 3, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation {:inline 1} unsafe.java.lang.Math$min$int_int($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $i2: int;
  var i0: int;
  var i1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    i1 := $in_parameter__1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} i1 > i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    $i2 := i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto block3;

  block3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    $return := $i2;
    goto block4;

  block4:
    return;

  anon4_Then:
    assume {:partition} i0 >= i1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "thenblock"} true;
    goto block2;

  block2:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    $i2 := i1;
    goto block3;
}



implementation unsafe.java.lang.Math$log$double($in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var d0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Math.java", 10, -1, -1, -1} true;
    $return := fixed.$DoubleConst0;
    goto block5;

  block5:
    return;
}



implementation unsafe.java.lang.String$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "String.java", 3, -1, -1, -1} true;
    goto block6;

  block6:
    return;
}



implementation unsafe.java.lang.String$charAt$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var $c1: int;
  var r0: ref;
  var i0: int;
  var $fakelocal_0: ref;
  var $r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "String.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.String;
    assume {:sourceloc "String.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "String.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    $r1 := fixed.$heap[r0, fixed.char$lp$$rp$$java.lang.String$chars259];
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !(i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon4_Then:
    assume {:partition} i0 < fixed.$arrSizeHeap[$r1] && i0 >= 0;
    $exception := $exception;
    goto anon3;

  anon3:
    $c1 := fixed.$intArrHeap[$r1][i0];
    assert {:sourceloc "String.java", 7, -1, -1, -1} true;
    $return := $c1;
    goto block7;

  block7:
    return;
}



implementation unsafe.java.lang.Boolean$$la$init$ra$$boolean($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var z0: int;
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0 := z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto block8;

  block8:
    return;
}



implementation unsafe.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var z0: int;
  var $fakelocal_0: ref;
  var $r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0: int;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception: ref;
  var inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.Boolean);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Entry:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this := $r0;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0 := z0;
    havoc inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$heap := fixed.$heap;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this, fixed.$type]
   <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this != fixed.$null;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$this;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$in_parameter__0;
    assert {:sourceloc "Boolean.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$anon0$1:
    assert {:sourceloc "Boolean.java", 7, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Boolean$$la$init$ra$$boolean$0$r0, fixed.boolean$java.lang.Boolean$value0 := inline$java.lang.Boolean$$la$init$ra$$boolean$0$z0];
    assert {:sourceloc "Boolean.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$block8:
    goto inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return;

  inline$java.lang.Boolean$$la$init$ra$$boolean$0$Return:
    $exception := inline$java.lang.Boolean$$la$init$ra$$boolean$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Boolean.java", 11, -1, -1, -1} true;
    $return := $r0;
    goto block9;

  block9:
    return;
}



implementation unsafe.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref)
{
  var r0: ref;
  var $z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Boolean;
    assume {:sourceloc "Boolean.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Boolean.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $z0 := fixed.$heap[r0, fixed.boolean$java.lang.Boolean$value0];
    assert {:sourceloc "Boolean.java", 15, -1, -1, -1} true;
    $return := $z0;
    goto block10;

  block10:
    return;
}



implementation unsafe.java.lang.Integer$$la$init$ra$$int($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var i0: int;
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.int$java.lang.Integer$value0 := i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto block11;

  block11:
    return;
}



implementation unsafe.java.lang.Integer$valueOf$int($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var $r0: ref;
  var i0: int;
  var $fakelocal_0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$i0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$r0: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$this: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0: int;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$exception: ref;
  var inline$java.lang.Integer$$la$init$ra$$int$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Integer;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.Integer);
    $r0 := $fakelocal_0;
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Entry;

  inline$java.lang.Integer$$la$init$ra$$int$0$Entry:
    inline$java.lang.Integer$$la$init$ra$$int$0$$this := $r0;
    inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0 := i0;
    havoc inline$java.lang.Integer$$la$init$ra$$int$0$i0, inline$java.lang.Integer$$la$init$ra$$int$0$r0, inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    inline$java.lang.Integer$$la$init$ra$$int$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$$la$init$ra$$int$0$$this != fixed.$null;
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$r0 := inline$java.lang.Integer$$la$init$ra$$int$0$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$$la$init$ra$$int$0$i0 := inline$java.lang.Integer$$la$init$ra$$int$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.lang.Integer$$la$init$ra$$int$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.lang.Integer$$la$init$ra$$int$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1;

  inline$java.lang.Integer$$la$init$ra$$int$0$anon0$1:
    assert {:sourceloc "Integer.java", 9, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[inline$java.lang.Integer$$la$init$ra$$int$0$r0, fixed.int$java.lang.Integer$value0 := inline$java.lang.Integer$$la$init$ra$$int$0$i0];
    assert {:sourceloc "Integer.java", 10, -1, -1, -1} true;
    goto inline$java.lang.Integer$$la$init$ra$$int$0$block11;

  inline$java.lang.Integer$$la$init$ra$$int$0$block11:
    goto inline$java.lang.Integer$$la$init$ra$$int$0$Return;

  inline$java.lang.Integer$$la$init$ra$$int$0$Return:
    $exception := inline$java.lang.Integer$$la$init$ra$$int$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Integer.java", 13, -1, -1, -1} true;
    $return := $r0;
    goto block12;

  block12:
    return;
}



implementation unsafe.java.lang.Integer$intValue$($this: ref) returns ($return: int, $exception: ref)
{
  var $i0: int;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    $i0 := fixed.$heap[r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 17, -1, -1, -1} true;
    $return := $i0;
    goto block13;

  block13:
    return;
}



implementation unsafe.java.lang.Integer$compareTo$java.lang.Integer($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref)
{
  var r0: ref;
  var $i2: int;
  var $i0: int;
  var r1: ref;
  var $i3: int;
  var $fakelocal_0: ref;
  var $i1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Integer;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    $i1 := fixed.$heap[r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto anon10_Then, anon10_Else;

  anon10_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon10_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon3;

  anon3:
    $i0 := fixed.$heap[r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto anon11_Then, anon11_Else;

  anon11_Else:
    assume {:partition} $i0 < $i1;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Integer.java", 23, -1, -1, -1} true;
    $return := 1;
    goto block16;

  block16:
    return;

  anon11_Then:
    assume {:partition} $i1 <= $i0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto block14;

  block14:
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    $i3 := fixed.$heap[r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    $i2 := fixed.$heap[r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Else:
    assume {:partition} $i2 > $i3;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "Integer.java", 25, -1, -1, -1} true;
    $return := -1;
    goto block16;

  anon12_Then:
    assume {:partition} $i3 >= $i2;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "thenblock"} true;
    goto block15;

  block15:
    assert {:sourceloc "Integer.java", 27, -1, -1, -1} true;
    $return := 0;
    goto block16;
}



implementation unsafe.java.lang.Integer$compareTo$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref)
{
  var r1: ref;
  var r0: ref;
  var $i0: int;
  var $r2: ref;
  var $fakelocal_0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception: ref;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$objIndex: int;
  var inline$java.lang.Integer$compareTo$java.lang.Integer$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} $this != fixed.$null;
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "Integer.java", 5, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Else:
    assume {:partition} !(fixed.$heap[r1, fixed.$type] <: fixed.java.lang.Integer);
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon4_Then:
    assume {:partition} fixed.$heap[r1, fixed.$type] <: fixed.java.lang.Integer;
    $exception := $exception;
    goto anon3;

  anon3:
    $r2 := r1;
    assert {:sourceloc "Integer.java", 5, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$Entry;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$Entry:
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this := r0;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0 := $r2;
    havoc inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0, inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return, inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$objIndex := fixed.$objIndex;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$heap := fixed.$heap;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon0;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this, fixed.$type]
   <: fixed.java.lang.Integer;
    assume {:sourceloc "Integer.java", -1, -1, -1, -1} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this != fixed.$null;
    assume fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0, fixed.$type]
   <: fixed.java.lang.Integer;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception := fixed.$null;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0 := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$this;
    assert {:sourceloc "Integer.java", -1, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1 := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$in_parameter__0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Then, inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Else;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Else:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1 == fixed.$null;
    call inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := 0;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$fakelocal_0;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$Return;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon10_Then:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1 != fixed.$null;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon3;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon3:
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Then, inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Else;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Else:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0
   < inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon6;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon6:
    assert {:sourceloc "Integer.java", 23, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := 1;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16:
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$Return;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon11_Then:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i1
   <= inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i0;
    assert {:sourceloc "Integer.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block14;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$block14:
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r0, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2 := fixed.$heap[inline$java.lang.Integer$compareTo$java.lang.Integer$0$r1, fixed.int$java.lang.Integer$value0];
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Then, inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Else;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Else:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2
   > inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon9;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon9:
    assert {:sourceloc "Integer.java", 25, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := -1;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$anon12_Then:
    assume {:partition} inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i3
   >= inline$java.lang.Integer$compareTo$java.lang.Integer$0$$i2;
    assert {:sourceloc "Integer.java", 24, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block15;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$block15:
    assert {:sourceloc "Integer.java", 27, -1, -1, -1} true;
    inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return := 0;
    goto inline$java.lang.Integer$compareTo$java.lang.Integer$0$block16;

  inline$java.lang.Integer$compareTo$java.lang.Integer$0$Return:
    $i0 := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$return;
    $exception := inline$java.lang.Integer$compareTo$java.lang.Integer$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "Integer.java", 5, -1, -1, -1} true;
    $return := $i0;
    goto block17;

  block17:
    return;
}



implementation unsafe.modpow.SimplifiedRSA$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.modpow.SimplifiedRSA;
    assume {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "SimplifiedRSA.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "SimplifiedRSA.java", 3, -1, -1, -1} true;
    goto block18;

  block18:
    return;
}



implementation unsafe.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int($in_parameter__0: int, 
    $in_parameter__1: int, 
    $in_parameter__2: int, 
    $in_parameter__3: int)
   returns ($return: int, $exception: ref)
{
  var $d2: int;
  var i0: int;
  var i10: int;
  var $i6: int;
  var $d1: int;
  var i11: int;
  var i8: int;
  var i12: int;
  var i9: int;
  var i3: int;
  var $i7: int;
  var $fakelocal_2: ref;
  var i4: int;
  var $fakelocal_3: ref;
  var $i5: int;
  var $d3: int;
  var $fakelocal_0: ref;
  var $d0: int;
  var i2: int;
  var i1: int;
  var $fakelocal_1: ref;
  var inline$java.lang.Math$log$double$0$d0: int;
  var inline$java.lang.Math$log$double$0$$in_parameter__0: int;
  var inline$java.lang.Math$log$double$0$$return: int;
  var inline$java.lang.Math$log$double$0$$exception: ref;
  var inline$java.lang.Math$log$double$1$d0: int;
  var inline$java.lang.Math$log$double$1$$in_parameter__0: int;
  var inline$java.lang.Math$log$double$1$$return: int;
  var inline$java.lang.Math$log$double$1$$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap: $heap_type;

  anon0:
    assume $in_parameter__2 == 834443;
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i8 := $in_parameter__1;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i1 := $in_parameter__2;
    assert {:sourceloc "SimplifiedRSA.java", -1, -1, -1, -1} true;
    i2 := $in_parameter__3;
    assert {:sourceloc "SimplifiedRSA.java", 8, -1, -1, -1} true;
    i9 := 1;
    assert {:sourceloc "SimplifiedRSA.java", 9, -1, -1, -1} true;
    i3 := i0;
    assert {:sourceloc "SimplifiedRSA.java", 10, -1, -1, -1} true;
    i10 := 0;
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    $i5 := i2 + 1;
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    $d0 := $i5;
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    goto inline$java.lang.Math$log$double$0$Entry;

  inline$java.lang.Math$log$double$0$Entry:
    inline$java.lang.Math$log$double$0$$in_parameter__0 := $d0;
    havoc inline$java.lang.Math$log$double$0$d0, inline$java.lang.Math$log$double$0$$return, inline$java.lang.Math$log$double$0$$exception;
    goto inline$java.lang.Math$log$double$0$anon0;

  inline$java.lang.Math$log$double$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$java.lang.Math$log$double$0$$exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$java.lang.Math$log$double$0$d0 := inline$java.lang.Math$log$double$0$$in_parameter__0;
    assert {:sourceloc "Math.java", 10, -1, -1, -1} true;
    inline$java.lang.Math$log$double$0$$return := fixed.$DoubleConst0;
    goto inline$java.lang.Math$log$double$0$block5;

  inline$java.lang.Math$log$double$0$block5:
    goto inline$java.lang.Math$log$double$0$Return;

  inline$java.lang.Math$log$double$0$Return:
    $d1 := inline$java.lang.Math$log$double$0$$return;
    $exception := inline$java.lang.Math$log$double$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    goto inline$java.lang.Math$log$double$1$Entry;

  inline$java.lang.Math$log$double$1$Entry:
    inline$java.lang.Math$log$double$1$$in_parameter__0 := fixed.$DoubleConst1;
    havoc inline$java.lang.Math$log$double$1$d0, inline$java.lang.Math$log$double$1$$return, inline$java.lang.Math$log$double$1$$exception;
    goto inline$java.lang.Math$log$double$1$anon0;

  inline$java.lang.Math$log$double$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$java.lang.Math$log$double$1$$exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$java.lang.Math$log$double$1$d0 := inline$java.lang.Math$log$double$1$$in_parameter__0;
    assert {:sourceloc "Math.java", 10, -1, -1, -1} true;
    inline$java.lang.Math$log$double$1$$return := fixed.$DoubleConst0;
    goto inline$java.lang.Math$log$double$1$block5;

  inline$java.lang.Math$log$double$1$block5:
    goto inline$java.lang.Math$log$double$1$Return;

  inline$java.lang.Math$log$double$1$Return:
    $d2 := inline$java.lang.Math$log$double$1$$return;
    $exception := inline$java.lang.Math$log$double$1$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    $d3 := fixed.$realOp32241($d1, $d2);
    assert {:sourceloc "SimplifiedRSA.java", 12, -1, -1, -1} true;
    i4 := $d3;
    assert {:sourceloc "SimplifiedRSA.java", 14, -1, -1, -1} true;
    i11 := 0;
    goto block19;

  block19:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return := $return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception := $exception;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10 := i10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6 := $i6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11 := i11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8 := i8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12 := i12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9 := i9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3 := i3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7 := $i7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2 := $fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4 := i4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3 := $fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0 := $fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1 := i1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1 := $fakelocal_1;
    havoc inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex := fixed.$objIndex;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap := fixed.$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19:
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8
   <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "thenblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11
   != inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then_dummy;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8 := fixed.$divInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 29, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11
   + 1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11
   == inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block23:
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10);
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block23;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21:
    assert {:sourceloc "SimplifiedRSA.java", 25, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block23;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6
   != 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3:
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Else:
    assume {:partition} 0
   < inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block22:
    assert {:sourceloc "SimplifiedRSA.java", 23, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12
   - inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block22;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12
   <= inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block22;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9:
    assert {:sourceloc "SimplifiedRSA.java", 19, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3);
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6
   == 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   < inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then_dummy:
    assume false;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$exit:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return:
    $return := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return;
    $exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    i10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10;
    $i6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6;
    i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11;
    i8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8;
    i12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12;
    i9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9;
    $i7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7;
    $fakelocal_2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    $fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    $fakelocal_0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    $fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    goto block19$1;

  block19$1:
    goto block19_last;

  anon25_Else:
    assume {:partition} 0 < i8;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon26_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon6;

  anon6:
    $i6 := fixed.$modInt(i8, 2);
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto anon27_Then, anon27_Else;

  anon27_Else:
    assume {:partition} $i6 == 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "SimplifiedRSA.java", 19, -1, -1, -1} true;
    i12 := fixed.$mulInt(i9, i3);
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} true;
    goto anon28_Then, anon28_Else;

  anon28_Else:
    assume {:partition} i1 < i12;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "elseblock"} true;
    goto anon12;

  anon12:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    i12 := i12 - i1;
    goto block22;

  block22:
    assert {:sourceloc "SimplifiedRSA.java", 23, -1, -1, -1} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} i1 == 0;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_1;
    return;

  anon29_Then:
    assume {:partition} i1 != 0;
    $exception := $exception;
    goto anon15;

  anon15:
    i10 := fixed.$modInt(i12, i1);
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto block23;

  block23:
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    $i7 := fixed.$mulInt(i10, i10);
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} i1 == 0;
    call $fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_2;
    return;

  anon30_Then:
    assume {:partition} i1 != 0;
    $exception := $exception;
    goto anon18;

  anon18:
    i9 := fixed.$modInt($i7, i1);
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_3 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_3;
    return;

  anon31_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon21;

  anon21:
    i8 := fixed.$divInt(i8, 2);
    assert {:sourceloc "SimplifiedRSA.java", 29, -1, -1, -1} true;
    i11 := i11 + 1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} i11 == i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    goto anon24;

  anon24:
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} true;
    goto block20;

  block20:
    assert {:sourceloc "SimplifiedRSA.java", 33, -1, -1, -1} true;
    $return := i10;
    goto block24;

  block24:
    return;

  anon32_Then:
    assume {:partition} i11 != i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto anon32_Then_dummy;

  anon28_Then:
    assume {:partition} i12 <= i1;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "thenblock"} true;
    goto block22;

  anon27_Then:
    assume {:partition} $i6 != 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;

  block21:
    assert {:sourceloc "SimplifiedRSA.java", 25, -1, -1, -1} true;
    i10 := i9;
    goto block23;

  anon25_Then:
    assume {:partition} i8 <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  anon32_Then_dummy:
    assume false;
    return;

  block19_last:
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;
}



implementation unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation unsafe.modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19(in_$return: int, 
    in_$exception: ref, 
    in_i10: int, 
    in_$i6: int, 
    in_i11: int, 
    in_i8: int, 
    in_i12: int, 
    in_i9: int, 
    in_i3: int, 
    in_$i7: int, 
    in_$fakelocal_2: ref, 
    in_i4: int, 
    in_$fakelocal_3: ref, 
    in_$fakelocal_0: ref, 
    in_i1: int, 
    in_$fakelocal_1: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_i10: int, 
    out_$i6: int, 
    out_i11: int, 
    out_i8: int, 
    out_i12: int, 
    out_i9: int, 
    out_$i7: int, 
    out_$fakelocal_2: ref, 
    out_$fakelocal_3: ref, 
    out_$fakelocal_0: ref, 
    out_$fakelocal_1: ref)
{
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1: ref;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex: int;
  var inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    goto block19;

  block19:
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} true;
    goto anon25_Then, anon25_Else;

  anon25_Then:
    assume {:partition} out_i8 <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon32_Then:
    assume {:partition} out_i11 != in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto anon32_Then_dummy;

  anon21:
    out_i8 := fixed.$divInt(out_i8, 2);
    assert {:sourceloc "SimplifiedRSA.java", 29, -1, -1, -1} true;
    out_i11 := out_i11 + 1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto anon32_Then, anon32_Else;

  anon32_Else:
    assume {:partition} out_i11 == in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon31_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon21;

  anon18:
    out_i9 := fixed.$modInt(out_$i7, in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    goto anon31_Then, anon31_Else;

  anon31_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_3;
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon30_Then:
    assume {:partition} in_i1 != 0;
    out_$exception := out_$exception;
    goto anon18;

  block23:
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    out_$i7 := fixed.$mulInt(out_i10, out_i10);
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    goto anon30_Then, anon30_Else;

  anon30_Else:
    assume {:partition} in_i1 == 0;
    call out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_2;
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon15:
    out_i10 := fixed.$modInt(out_i12, in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto block23;

  block21:
    assert {:sourceloc "SimplifiedRSA.java", 25, -1, -1, -1} true;
    out_i10 := out_i9;
    goto block23;

  anon27_Then:
    assume {:partition} out_$i6 != 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;

  anon6:
    out_$i6 := fixed.$modInt(out_i8, 2);
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto anon27_Then, anon27_Else;

  anon26_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon6;

  anon3:
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto anon26_Then, anon26_Else;

  anon26_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_0 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_0;
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon25_Else:
    assume {:partition} 0 < out_i8;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon29_Then:
    assume {:partition} in_i1 != 0;
    out_$exception := out_$exception;
    goto anon15;

  block22:
    assert {:sourceloc "SimplifiedRSA.java", 23, -1, -1, -1} true;
    goto anon29_Then, anon29_Else;

  anon29_Else:
    assume {:partition} in_i1 == 0;
    call out_$fakelocal_1 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_1;
    out_$return, out_$exception, out_i10, out_$i6, out_i11, out_i8, out_i12, out_i9, out_$i7, out_$fakelocal_2, out_$fakelocal_3, out_$fakelocal_0, out_$fakelocal_1 := in_$return, in_$exception, in_i10, in_$i6, in_i11, in_i8, in_i12, in_i9, in_$i7, in_$fakelocal_2, in_$fakelocal_3, in_$fakelocal_0, in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon12:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    out_i12 := out_i12 - in_i1;
    goto block22;

  anon28_Then:
    assume {:partition} out_i12 <= in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "thenblock"} true;
    goto block22;

  anon9:
    assert {:sourceloc "SimplifiedRSA.java", 19, -1, -1, -1} true;
    out_i12 := fixed.$mulInt(out_i9, in_i3);
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} true;
    goto anon28_Then, anon28_Else;

  anon27_Else:
    assume {:partition} out_$i6 == 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon28_Else:
    assume {:partition} in_i1 < out_i12;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "elseblock"} true;
    goto anon12;

  anon32_Then_dummy:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return := out_$return;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception := out_$exception;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10 := out_i10;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6 := out_$i6;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11 := out_i11;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8 := out_i8;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12 := out_i12;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9 := out_i9;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3 := in_i3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7 := out_$i7;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2 := out_$fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4 := in_i4;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3 := out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0 := out_$fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1 := in_i1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1 := out_$fakelocal_1;
    havoc inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex := fixed.$objIndex;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap := fixed.$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$entry:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block19:
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8
   <= 0;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "thenblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11
   != inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then_dummy;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8 := fixed.$divInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 29, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11
   + 1;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11
   == inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i4;
    assert {:sourceloc "SimplifiedRSA.java", 31, -1, -1, -1} {:comment "elseblock"} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 28, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon31_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon18;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block23:
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10);
    assert {:sourceloc "SimplifiedRSA.java", 27, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon30_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1);
    assert {:sourceloc "SimplifiedRSA.java", 24, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block23;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21:
    assert {:sourceloc "SimplifiedRSA.java", 25, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block23;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6
   != 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block21;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6:
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6 := fixed.$modInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, 
  2);
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Then:
    assume {:partition} 2 != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon6;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3:
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon26_Else:
    assume {:partition} 2 == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon25_Else:
    assume {:partition} 0
   < inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8;
    assert {:sourceloc "SimplifiedRSA.java", 15, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon3;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   != 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon15;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block22:
    assert {:sourceloc "SimplifiedRSA.java", 23, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon29_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   == 0;
    call inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return := 0;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$return, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$exception, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i10, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i6, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i11, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i8, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i12, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i9, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$i7, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_2, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_3, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_0, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_$fakelocal_1;
    fixed.$objIndex, fixed.$heap := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$objIndex, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$$heap;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12:
    assert {:sourceloc "SimplifiedRSA.java", 21, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12
   - inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block22;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Then:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12
   <= inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$block22;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9:
    assert {:sourceloc "SimplifiedRSA.java", 19, -1, -1, -1} true;
    inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12 := fixed.$mulInt(inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9, 
  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i3);
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Then, inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Else;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon27_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6
   == 1;
    assert {:sourceloc "SimplifiedRSA.java", 16, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon9;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon28_Else:
    assume {:partition} inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$in_i1
   < inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12;
    assert {:sourceloc "SimplifiedRSA.java", 20, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon12;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$anon32_Then_dummy:
    assume false;
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$exit:
    goto inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return;

  inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$Return:
    out_$return := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$return;
    out_$exception := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$exception;
    out_i10 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i10;
    out_$i6 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i6;
    out_i11 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i11;
    out_i8 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i8;
    out_i12 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i12;
    out_i9 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_i9;
    out_$i7 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$i7;
    out_$fakelocal_2 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_2;
    out_$fakelocal_3 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_3;
    out_$fakelocal_0 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_0;
    out_$fakelocal_1 := inline$modpow.SimplifiedRSA$modPowFastKocherReduction$int_int_int_int_loop_block19$0$out_$fakelocal_1;
    goto anon32_Then_dummy$1;

  anon32_Then_dummy$1:
    return;

  exit:
    return;
}



type ref;

type javaType;

type Field _;

type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;

type boolArrHeap_type = [ref][int]bool;

type refArrHeap_type = [ref][int]ref;

type realArrHeap_type = [ref][int]int;

type intArrHeap_type = [ref][int]int;

function _uf_fixed.java.lang.Math$$la$init$ra$$_$exception(arg_0: ref, arg_1: $heap_type, arg_2: [ref]int, arg_3: [ref]int) : ref;

function _uf_unsafe.java.lang.Math$$la$init$ra$$_$exception(arg_0: ref, arg_1: $heap_type, arg_2: [ref]int, arg_3: [ref]int) : ref;

var Output_of_unsafe.java.lang.Math$$la$init$ra$$_$exception: ref;

var Output_of_fixed.java.lang.Math$$la$init$ra$$_$exception: ref;

function _uf_fixed.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_unsafe.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_fixed.java.lang.Math$min$int_int_$return(arg_0: int, arg_1: int, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : int;

function _uf_fixed.java.lang.Math$min$int_int_$exception(arg_0: int, arg_1: int, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

function _uf_unsafe.java.lang.Math$min$int_int_$return(arg_0: int, arg_1: int, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : int;

function _uf_unsafe.java.lang.Math$min$int_int_$exception(arg_0: int, arg_1: int, arg_2: $heap_type, arg_3: [ref]int, arg_4: [ref]int)
   : ref;

var Output_of_unsafe.java.lang.Math$min$int_int_$return: int;

var Output_of_fixed.java.lang.Math$min$int_int_$return: int;

var Output_of_unsafe.java.lang.Math$min$int_int_$exception: ref;

var Output_of_fixed.java.lang.Math$min$int_int_$exception: ref;

procedure PROC_.java.lang.Math$min$int_int_EQ_unsafe__xx__fixed($in_parameter__0: int, $in_parameter__1: int)
   returns (AA_TEMP80: bool, AA_TEMP81: bool);
  modifies Output_of_unsafe.java.lang.Math$min$int_int_$return, Output_of_fixed.java.lang.Math$min$int_int_$return, Output_of_unsafe.java.lang.Math$min$int_int_$exception, Output_of_fixed.java.lang.Math$min$int_int_$exception;
  ensures AA_TEMP81 && AA_TEMP80;



implementation PROC_.java.lang.Math$min$int_int_EQ_unsafe__xx__fixed($in_parameter__0: int, $in_parameter__1: int)
   returns (AA_TEMP80: bool, AA_TEMP81: bool)
{
  var AA_TEMP70: int;
  var AA_TEMP71: ref;
  var $return: int;
  var $exception: ref;
  var inline$unsafe.java.lang.Math$min$int_int$0$$i2: int;
  var inline$unsafe.java.lang.Math$min$int_int$0$i0: int;
  var inline$unsafe.java.lang.Math$min$int_int$0$i1: int;
  var inline$unsafe.java.lang.Math$min$int_int$0$$in_parameter__0: int;
  var inline$unsafe.java.lang.Math$min$int_int$0$$in_parameter__1: int;
  var inline$unsafe.java.lang.Math$min$int_int$0$$return: int;
  var inline$unsafe.java.lang.Math$min$int_int$0$$exception: ref;
  var inline$fixed.java.lang.Math$min$int_int$0$i1: int;
  var inline$fixed.java.lang.Math$min$int_int$0$i0: int;
  var inline$fixed.java.lang.Math$min$int_int$0$$i2: int;
  var inline$fixed.java.lang.Math$min$int_int$0$$in_parameter__0: int;
  var inline$fixed.java.lang.Math$min$int_int$0$$in_parameter__1: int;
  var inline$fixed.java.lang.Math$min$int_int$0$$return: int;
  var inline$fixed.java.lang.Math$min$int_int$0$$exception: ref;

  AA_INSTR_EQ_BODY:
    goto inline$unsafe.java.lang.Math$min$int_int$0$Entry;

  inline$unsafe.java.lang.Math$min$int_int$0$Entry:
    inline$unsafe.java.lang.Math$min$int_int$0$$in_parameter__0 := $in_parameter__0;
    inline$unsafe.java.lang.Math$min$int_int$0$$in_parameter__1 := $in_parameter__1;
    havoc inline$unsafe.java.lang.Math$min$int_int$0$$i2, inline$unsafe.java.lang.Math$min$int_int$0$i0, inline$unsafe.java.lang.Math$min$int_int$0$i1, inline$unsafe.java.lang.Math$min$int_int$0$$return, inline$unsafe.java.lang.Math$min$int_int$0$$exception;
    goto inline$unsafe.java.lang.Math$min$int_int$0$anon0;

  inline$unsafe.java.lang.Math$min$int_int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$unsafe.java.lang.Math$min$int_int$0$$exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$unsafe.java.lang.Math$min$int_int$0$i0 := inline$unsafe.java.lang.Math$min$int_int$0$$in_parameter__0;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$unsafe.java.lang.Math$min$int_int$0$i1 := inline$unsafe.java.lang.Math$min$int_int$0$$in_parameter__1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto inline$unsafe.java.lang.Math$min$int_int$0$anon4_Then, inline$unsafe.java.lang.Math$min$int_int$0$anon4_Else;

  inline$unsafe.java.lang.Math$min$int_int$0$anon4_Else:
    assume {:partition} inline$unsafe.java.lang.Math$min$int_int$0$i1
   > inline$unsafe.java.lang.Math$min$int_int$0$i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.java.lang.Math$min$int_int$0$anon3;

  inline$unsafe.java.lang.Math$min$int_int$0$anon3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    inline$unsafe.java.lang.Math$min$int_int$0$$i2 := inline$unsafe.java.lang.Math$min$int_int$0$i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto inline$unsafe.java.lang.Math$min$int_int$0$block3;

  inline$unsafe.java.lang.Math$min$int_int$0$block3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    inline$unsafe.java.lang.Math$min$int_int$0$$return := inline$unsafe.java.lang.Math$min$int_int$0$$i2;
    goto inline$unsafe.java.lang.Math$min$int_int$0$block4;

  inline$unsafe.java.lang.Math$min$int_int$0$block4:
    goto inline$unsafe.java.lang.Math$min$int_int$0$Return;

  inline$unsafe.java.lang.Math$min$int_int$0$anon4_Then:
    assume {:partition} inline$unsafe.java.lang.Math$min$int_int$0$i0
   >= inline$unsafe.java.lang.Math$min$int_int$0$i1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$unsafe.java.lang.Math$min$int_int$0$block2;

  inline$unsafe.java.lang.Math$min$int_int$0$block2:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    inline$unsafe.java.lang.Math$min$int_int$0$$i2 := inline$unsafe.java.lang.Math$min$int_int$0$i1;
    goto inline$unsafe.java.lang.Math$min$int_int$0$block3;

  inline$unsafe.java.lang.Math$min$int_int$0$Return:
    assume true;
    assume true;
    $return := inline$unsafe.java.lang.Math$min$int_int$0$$return;
    $exception := inline$unsafe.java.lang.Math$min$int_int$0$$exception;
    goto AA_INSTR_EQ_BODY$1;

  AA_INSTR_EQ_BODY$1:
    AA_TEMP70 := $return;
    AA_TEMP71 := $exception;
    goto inline$fixed.java.lang.Math$min$int_int$0$Entry;

  inline$fixed.java.lang.Math$min$int_int$0$Entry:
    inline$fixed.java.lang.Math$min$int_int$0$$in_parameter__0 := $in_parameter__0;
    inline$fixed.java.lang.Math$min$int_int$0$$in_parameter__1 := $in_parameter__1;
    havoc inline$fixed.java.lang.Math$min$int_int$0$i1, inline$fixed.java.lang.Math$min$int_int$0$i0, inline$fixed.java.lang.Math$min$int_int$0$$i2, inline$fixed.java.lang.Math$min$int_int$0$$return, inline$fixed.java.lang.Math$min$int_int$0$$exception;
    goto inline$fixed.java.lang.Math$min$int_int$0$anon0;

  inline$fixed.java.lang.Math$min$int_int$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.java.lang.Math$min$int_int$0$$exception := fixed.$null;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$fixed.java.lang.Math$min$int_int$0$i0 := inline$fixed.java.lang.Math$min$int_int$0$$in_parameter__0;
    assert {:sourceloc "Math.java", -1, -1, -1, -1} true;
    inline$fixed.java.lang.Math$min$int_int$0$i1 := inline$fixed.java.lang.Math$min$int_int$0$$in_parameter__1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto inline$fixed.java.lang.Math$min$int_int$0$anon4_Then, inline$fixed.java.lang.Math$min$int_int$0$anon4_Else;

  inline$fixed.java.lang.Math$min$int_int$0$anon4_Else:
    assume {:partition} inline$fixed.java.lang.Math$min$int_int$0$i1
   > inline$fixed.java.lang.Math$min$int_int$0$i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.java.lang.Math$min$int_int$0$anon3;

  inline$fixed.java.lang.Math$min$int_int$0$anon3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    inline$fixed.java.lang.Math$min$int_int$0$$i2 := inline$fixed.java.lang.Math$min$int_int$0$i0;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    goto inline$fixed.java.lang.Math$min$int_int$0$block3;

  inline$fixed.java.lang.Math$min$int_int$0$block3:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    inline$fixed.java.lang.Math$min$int_int$0$$return := inline$fixed.java.lang.Math$min$int_int$0$$i2;
    goto inline$fixed.java.lang.Math$min$int_int$0$block4;

  inline$fixed.java.lang.Math$min$int_int$0$block4:
    goto inline$fixed.java.lang.Math$min$int_int$0$Return;

  inline$fixed.java.lang.Math$min$int_int$0$anon4_Then:
    assume {:partition} inline$fixed.java.lang.Math$min$int_int$0$i0
   >= inline$fixed.java.lang.Math$min$int_int$0$i1;
    assert {:sourceloc "Math.java", 5, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.java.lang.Math$min$int_int$0$block2;

  inline$fixed.java.lang.Math$min$int_int$0$block2:
    assert {:sourceloc "Math.java", 5, -1, -1, -1} true;
    inline$fixed.java.lang.Math$min$int_int$0$$i2 := inline$fixed.java.lang.Math$min$int_int$0$i1;
    goto inline$fixed.java.lang.Math$min$int_int$0$block3;

  inline$fixed.java.lang.Math$min$int_int$0$Return:
    assume true;
    assume true;
    $return := inline$fixed.java.lang.Math$min$int_int$0$$return;
    $exception := inline$fixed.java.lang.Math$min$int_int$0$$exception;
    goto AA_INSTR_EQ_BODY$2;

  AA_INSTR_EQ_BODY$2:
    Output_of_unsafe.java.lang.Math$min$int_int_$return := AA_TEMP70;
    Output_of_fixed.java.lang.Math$min$int_int_$return := $return;
    Output_of_unsafe.java.lang.Math$min$int_int_$exception := AA_TEMP71;
    Output_of_fixed.java.lang.Math$min$int_int_$exception := $exception;
    havoc AA_TEMP80, AA_TEMP81;
    AA_TEMP80, AA_TEMP81 := AA_TEMP80 || AA_TEMP70 == $return, AA_TEMP81 || AA_TEMP71 == $exception;
    return;
}


