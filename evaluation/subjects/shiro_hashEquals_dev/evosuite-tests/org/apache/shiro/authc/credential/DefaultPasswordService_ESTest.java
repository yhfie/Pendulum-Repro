/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:15:16 GMT 2022
 */

package org.apache.shiro.authc.credential;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.apache.shiro.authc.credential.DefaultPasswordService;
import org.apache.shiro.crypto.hash.DefaultHashService;
import org.apache.shiro.crypto.hash.Hash;
import org.apache.shiro.crypto.hash.HashRequest;
import org.apache.shiro.crypto.hash.Md2Hash;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.apache.shiro.crypto.hash.format.HashFormat;
import org.apache.shiro.crypto.hash.format.HashFormatFactory;
import org.apache.shiro.crypto.hash.format.Shiro1CryptFormat;
import org.apache.shiro.util.ByteSource;
import org.apache.shiro.util.SimpleByteSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DefaultPasswordService_ESTest extends DefaultPasswordService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      defaultPasswordService0.setHashFormatFactory((HashFormatFactory) null);
      HashFormatFactory hashFormatFactory0 = defaultPasswordService0.getHashFormatFactory();
      assertNull(hashFormatFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      defaultPasswordService0.setHashFormat((HashFormat) null);
      HashFormat hashFormat0 = defaultPasswordService0.getHashFormat();
      assertNull(hashFormat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      String string0 = defaultPasswordService0.encryptPassword("The configured hashFormat instance [");
      assertEquals("$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$iGNy6WXiIOlx/fp9SRWsSw69wIkgX2cvsTAbk4DOFZE=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      ByteSource byteSource0 = defaultPasswordService0.createByteSource((Object) null);
      assertNull(byteSource0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      ByteSource byteSource0 = defaultPasswordService0.createByteSource("");
      assertTrue(byteSource0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      SimpleByteSource simpleByteSource0 = new SimpleByteSource("SHA-256");
      ByteSource byteSource0 = defaultPasswordService0.createByteSource(simpleByteSource0);
      assertSame(byteSource0, simpleByteSource0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      SimpleHash simpleHash0 = new SimpleHash("$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexcQHveJR+EylbhM4Jw=");
      byte[] byteArray0 = new byte[6];
      simpleHash0.setBytes(byteArray0);
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch_unsafe("$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexcQHveJR+EylbhM4Jw=", simpleHash0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No native '$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexcQHveJR+EylbhM4Jw=' MessageDigest instance available on the current JVM.
         //
         verifyException("org.apache.shiro.crypto.hash.SimpleHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2801);
      SimpleHash simpleHash0 = new SimpleHash("SHA-256");
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch_unsafe(pushbackInputStream0, simpleHash0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.shiro.codec.CodecSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Shiro1CryptFormat shiro1CryptFormat0 = new Shiro1CryptFormat();
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch_unsafe(shiro1CryptFormat0, (Hash) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to heuristically acquire bytes for object of type [org.apache.shiro.crypto.hash.format.Shiro1CryptFormat].  If this type is indeed a byte-backed data type, you might want to write your own ByteSource implementation to extract its bytes explicitly.
         //
         verifyException("org.apache.shiro.util.ByteSource$Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch((Object) pushbackInputStream0, "$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$l6DsUVODhHzPoPdpRMjzrwt9csMVRQX62wdHd6blFYs=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.shiro.codec.CodecSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      defaultPasswordService0.setHashFormatFactory((HashFormatFactory) null);
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch((Object) "$shiro1$SH_-256$500$AAAAAAEAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexQHeJR+EylbhM4Jw=", "KsEn)Z]lDM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.shiro.authc.credential.DefaultPasswordService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch((Object) defaultPasswordService0, "$shiro1$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to heuristically acquire bytes for object of type [org.apache.shiro.authc.credential.DefaultPasswordService].  If this type is indeed a byte-backed data type, you might want to write your own ByteSource implementation to extract its bytes explicitly.
         //
         verifyException("org.apache.shiro.util.ByteSource$Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      // Undeclared exception!
      try { 
        defaultPasswordService0.passwordsMatch((Object) "$shiro1$SHA-256$500$AAAAAAEAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexQHeJR+EylbhM4Jw=", "$shiro1$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.shiro.crypto.hash.format.Shiro1CryptFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        DefaultPasswordService.jdkStringEquals(object0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.shiro.authc.credential.DefaultPasswordService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        defaultPasswordService0.hashPassword(pushbackInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.shiro.codec.CodecSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultPasswordService0.hashPassword(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to heuristically acquire bytes for object of type [java.lang.Object].  If this type is indeed a byte-backed data type, you might want to write your own ByteSource implementation to extract its bytes explicitly.
         //
         verifyException("org.apache.shiro.util.ByteSource$Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)24);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 8);
      // Undeclared exception!
      try { 
        defaultPasswordService0.hashPassword(pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 5);
      // Undeclared exception!
      try { 
        defaultPasswordService0.encryptPassword(pushbackInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.shiro.codec.CodecSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      defaultPasswordService0.setHashFormat((HashFormat) null);
      // Undeclared exception!
      try { 
        defaultPasswordService0.encryptPassword((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.shiro.authc.credential.DefaultPasswordService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultPasswordService0.encryptPassword(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to heuristically acquire bytes for object of type [java.lang.Object].  If this type is indeed a byte-backed data type, you might want to write your own ByteSource implementation to extract its bytes explicitly.
         //
         verifyException("org.apache.shiro.util.ByteSource$Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), 3824);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        defaultPasswordService0.encryptPassword(pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      // Undeclared exception!
      try { 
        defaultPasswordService0.createHashRequest((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source argument cannot be null
         //
         verifyException("org.apache.shiro.crypto.hash.SimpleHashRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultPasswordService0.createByteSource(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to heuristically acquire bytes for object of type [java.lang.Object].  If this type is indeed a byte-backed data type, you might want to write your own ByteSource implementation to extract its bytes explicitly.
         //
         verifyException("org.apache.shiro.util.ByteSource$Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      // Undeclared exception!
      try { 
        defaultPasswordService0.buildHashRequest((ByteSource) null, (Hash) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.shiro.authc.credential.DefaultPasswordService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Md2Hash md2Hash0 = Md2Hash.fromBase64String("\t-base64\t\tPrints the hash value as a base64 String instead of the default hex.");
      // Undeclared exception!
      try { 
        defaultPasswordService0.buildHashRequest((ByteSource) null, md2Hash0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source argument cannot be null
         //
         verifyException("org.apache.shiro.crypto.hash.SimpleHashRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DefaultPasswordService.jdkStringEquals((Object) null, "%=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.shiro.authc.credential.DefaultPasswordService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Hash hash0 = defaultPasswordService0.hashPassword((Object) null);
      assertNull(hash0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) "", (Hash) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) "SHA-256", "SHA-256");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) "", "$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$DxGpnXUo6QwY9/LuXGSaLnY0hR/1j1K3v56jr3TejW8=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) null, "UTF-8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) "SHA-256", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      defaultPasswordService0.setHashFormat((HashFormat) null);
      defaultPasswordService0.checkHashFormatDurability();
      assertEquals(500, DefaultPasswordService.DEFAULT_HASH_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Hash hash0 = defaultPasswordService0.hashPassword("SHA-256");
      assertNotNull(hash0);
      
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe("SHA-256", hash0);
      assertEquals(500, hash0.getIterations());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = DefaultPasswordService.jdkStringEquals(defaultPasswordService0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = DefaultPasswordService.jdkStringEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Md2Hash md2Hash0 = Md2Hash.fromBase64String("SHA-256");
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe("", md2Hash0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Md2Hash md2Hash0 = Md2Hash.fromBase64String("a)jlO h&E2vVZx9TI}");
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe((Object) null, md2Hash0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe((Object) null, (Hash) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Md2Hash md2Hash0 = new Md2Hash();
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe(md2Hash0, md2Hash0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Md2Hash md2Hash0 = Md2Hash.fromBase64String("SHA-256");
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe(md2Hash0, md2Hash0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch_unsafe("nM&#", (Hash) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Hash hash0 = defaultPasswordService0.hashPassword("");
      assertNull(hash0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Md2Hash md2Hash0 = new Md2Hash();
      HashRequest hashRequest0 = defaultPasswordService0.buildHashRequest(md2Hash0, md2Hash0);
      assertEquals(1, hashRequest0.getIterations());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      SimpleByteSource simpleByteSource0 = new SimpleByteSource("SHA-256");
      HashRequest hashRequest0 = defaultPasswordService0.createHashRequest(simpleByteSource0);
      assertNull(hashRequest0.getAlgorithmName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      Shiro1CryptFormat shiro1CryptFormat0 = (Shiro1CryptFormat)defaultPasswordService0.getHashFormat();
      assertEquals("shiro1", shiro1CryptFormat0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      DefaultHashService defaultHashService0 = (DefaultHashService)defaultPasswordService0.getHashService();
      assertEquals("SHA-256", defaultHashService0.getHashAlgorithmName());
      assertEquals(500, defaultHashService0.getHashIterations());
      assertTrue(defaultHashService0.isGeneratePublicSalt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      HashFormatFactory hashFormatFactory0 = defaultPasswordService0.getHashFormatFactory();
      defaultPasswordService0.setHashFormatFactory(hashFormatFactory0);
      assertEquals(500, DefaultPasswordService.DEFAULT_HASH_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      String string0 = defaultPasswordService0.encryptPassword((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      DefaultHashService defaultHashService0 = new DefaultHashService();
      defaultPasswordService0.setHashService(defaultHashService0);
      assertFalse(defaultHashService0.isGeneratePublicSalt());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultPasswordService defaultPasswordService0 = new DefaultPasswordService();
      boolean boolean0 = defaultPasswordService0.passwordsMatch((Object) "$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexcQHveJR+EylbhM4Jw=", "$shiro1$SHA-256$500$AAAAAAEAAAACAAAAAwAAAA==$ZsPZPYSAb2YmRBzkd+hCzwGUexcQHveJR+EylbhM4Jw=");
      assertFalse(boolean0);
  }
}
