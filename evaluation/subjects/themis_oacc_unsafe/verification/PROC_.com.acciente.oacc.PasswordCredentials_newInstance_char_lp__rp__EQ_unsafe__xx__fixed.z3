(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.com.acciente.oacc.Credentials () T@U)
(declare-fun fixed.com.acciente.oacc.PasswordCredentials () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.com.acciente.oacc.PasswordCredentials$Impl () T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.reflect.AnnotatedElement () T@U)
(declare-fun fixed.java.lang.reflect.GenericDeclaration () T@U)
(declare-fun fixed.java.lang.reflect.Type () T@U)
(declare-fun fixed.java.lang.Class () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.util.Arrays () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun call3formal@$obj@0 () T@U)
(declare-fun call3formal@$obj@0@@0 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap@3 () T@U)
(declare-fun fixed.$heap@1 () T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun fixed.$heap@2 () T@U)
(declare-fun fixed.char$lp$$rp$$com.acciente.oacc.PasswordCredentials$Impl$password259 () T@U)
(declare-fun $in_parameter__0 () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$$return@0 () T@U)
(declare-fun fixed.$heap@0 () T@U)
(declare-fun inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$$return@0 () T@U)
(declare-fun %lbl%+320108 () Bool)
(declare-fun AA_TEMP230@1 () Bool)
(declare-fun AA_TEMP230@0 () Bool)
(declare-fun AA_TEMP231@1 () Bool)
(declare-fun AA_TEMP231@0 () Bool)
(declare-fun AA_TEMP232@1 () Bool)
(declare-fun AA_TEMP232@0 () Bool)
(declare-fun fixed.$objIndex@1 () Int)
(declare-fun AA_TEMP233@1 () Bool)
(declare-fun AA_TEMP233@0 () Bool)
(declare-fun %lbl%@325463 () Bool)
(declare-fun %lbl%+320107 () Bool)
(declare-fun %lbl%+320106 () Bool)
(declare-fun %lbl%+320105 () Bool)
(declare-fun %lbl%+320104 () Bool)
(declare-fun %lbl%+320103 () Bool)
(declare-fun %lbl%+320102 () Bool)
(declare-fun %lbl%+320101 () Bool)
(declare-fun %lbl%+320100 () Bool)
(declare-fun %lbl%+320099 () Bool)
(declare-fun %lbl%+320098 () Bool)
(declare-fun %lbl%+320097 () Bool)
(declare-fun %lbl%+320096 () Bool)
(declare-fun %lbl%+320095 () Bool)
(declare-fun %lbl%+320094 () Bool)
(declare-fun %lbl%+320093 () Bool)
(declare-fun %lbl%+320092 () Bool)
(declare-fun %lbl%+320091 () Bool)
(declare-fun fixed.$objIndex () Int)
(declare-fun %lbl%+320090 () Bool)
(declare-fun %lbl%+320089 () Bool)
(declare-fun %lbl%+320088 () Bool)
(declare-fun %lbl%+320087 () Bool)
(declare-fun %lbl%+320086 () Bool)
(declare-fun %lbl%+320085 () Bool)
(declare-fun %lbl%+320084 () Bool)
(declare-fun %lbl%+320083 () Bool)
(declare-fun %lbl%+320082 () Bool)
(declare-fun %lbl%+320081 () Bool)
(declare-fun %lbl%+320080 () Bool)
(declare-fun %lbl%+320079 () Bool)
(declare-fun %lbl%+320078 () Bool)
(declare-fun %lbl%+320077 () Bool)
(declare-fun %lbl%+320076 () Bool)
(declare-fun %lbl%+320075 () Bool)
(declare-fun %lbl%+320074 () Bool)
(declare-fun %lbl%+320073 () Bool)
(declare-fun %lbl%+320072 () Bool)
(declare-fun fixed.$objIndex@0 () Int)
(declare-fun %lbl%+320071 () Bool)
(declare-fun %lbl%+320070 () Bool)
(declare-fun %lbl%+324260 () Bool)
(declare-fun %lbl%+324267 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.com.acciente.oacc.Credentials) javaTypeType))
(assert (forall ((w@@0 T@U) ) (!  (=> (and (= (type w@@0) javaTypeType) (UOrdering2 fixed.com.acciente.oacc.Credentials w@@0)) (= fixed.com.acciente.oacc.Credentials w@@0))
 :pattern ( (UOrdering2 fixed.com.acciente.oacc.Credentials w@@0))
)))
(assert (= (type fixed.com.acciente.oacc.PasswordCredentials) javaTypeType))
(assert (not (= fixed.com.acciente.oacc.PasswordCredentials fixed.java.lang.Object)))
(assert (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials fixed.java.lang.Object))
(assert (not (= fixed.com.acciente.oacc.PasswordCredentials fixed.com.acciente.oacc.Credentials)))
(assert (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials fixed.com.acciente.oacc.Credentials))
(assert (forall ((w@@1 T@U) ) (!  (=> (= (type w@@1) javaTypeType) (=> (and (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@1) (UOrdering2 w@@1 fixed.java.lang.Object)) (or (= fixed.com.acciente.oacc.PasswordCredentials w@@1) (= fixed.java.lang.Object w@@1))))
 :pattern ( (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@1) (UOrdering2 w@@1 fixed.java.lang.Object))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (= (type w@@2) javaTypeType) (=> (and (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@2) (UOrdering2 w@@2 fixed.com.acciente.oacc.Credentials)) (or (= fixed.com.acciente.oacc.PasswordCredentials w@@2) (= fixed.com.acciente.oacc.Credentials w@@2))))
 :pattern ( (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@2) (UOrdering2 w@@2 fixed.com.acciente.oacc.Credentials))
)))
(assert (forall ((w@@3 T@U) ) (!  (=> (and (= (type w@@3) javaTypeType) (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@3)) (or (or (= fixed.com.acciente.oacc.PasswordCredentials w@@3) (UOrdering2 fixed.java.lang.Object w@@3)) (UOrdering2 fixed.com.acciente.oacc.Credentials w@@3)))
 :pattern ( (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@3))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 w@@4 fixed.com.acciente.oacc.PasswordCredentials)) (= (oneStep fixed.java.lang.Object w@@4) fixed.com.acciente.oacc.PasswordCredentials))
 :pattern ( (UOrdering2 w@@4 fixed.com.acciente.oacc.PasswordCredentials))
)))
(assert (= (type fixed.com.acciente.oacc.PasswordCredentials$Impl) javaTypeType))
(assert (not (= fixed.com.acciente.oacc.PasswordCredentials$Impl fixed.com.acciente.oacc.PasswordCredentials)))
(assert (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials$Impl fixed.com.acciente.oacc.PasswordCredentials))
(assert (forall ((w@@5 T@U) ) (!  (=> (= (type w@@5) javaTypeType) (=> (and (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials$Impl w@@5) (UOrdering2 w@@5 fixed.com.acciente.oacc.PasswordCredentials)) (or (= fixed.com.acciente.oacc.PasswordCredentials$Impl w@@5) (= fixed.com.acciente.oacc.PasswordCredentials w@@5))))
 :pattern ( (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials$Impl w@@5) (UOrdering2 w@@5 fixed.com.acciente.oacc.PasswordCredentials))
)))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials$Impl w@@6)) (or (= fixed.com.acciente.oacc.PasswordCredentials$Impl w@@6) (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials w@@6)))
 :pattern ( (UOrdering2 fixed.com.acciente.oacc.PasswordCredentials$Impl w@@6))
)))
(assert (forall ((w@@7 T@U) ) (!  (=> (and (= (type w@@7) javaTypeType) (UOrdering2 w@@7 fixed.com.acciente.oacc.PasswordCredentials$Impl)) (= (oneStep fixed.com.acciente.oacc.PasswordCredentials w@@7) fixed.com.acciente.oacc.PasswordCredentials$Impl))
 :pattern ( (UOrdering2 w@@7 fixed.com.acciente.oacc.PasswordCredentials$Impl))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@8 T@U) ) (!  (=> (and (= (type w@@8) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@8)) (= fixed.java.io.Serializable w@@8))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@8))
)))
(assert (= (type fixed.java.lang.reflect.AnnotatedElement) javaTypeType))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@9)) (= fixed.java.lang.reflect.AnnotatedElement w@@9))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@9))
)))
(assert (= (type fixed.java.lang.reflect.GenericDeclaration) javaTypeType))
(assert (not (= fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@10 T@U) ) (!  (=> (= (type w@@10) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@10) (UOrdering2 w@@10 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@10) (= fixed.java.lang.reflect.AnnotatedElement w@@10))))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@10) (UOrdering2 w@@10 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@11 T@U) ) (!  (=> (and (= (type w@@11) javaTypeType) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@11)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@11) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@11)))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@11))
)))
(assert (= (type fixed.java.lang.reflect.Type) javaTypeType))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.reflect.Type w@@12)) (= fixed.java.lang.reflect.Type w@@12))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.Type w@@12))
)))
(assert (= (type fixed.java.lang.Class) javaTypeType))
(assert (not (= fixed.java.lang.Class fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Class fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.GenericDeclaration)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.GenericDeclaration))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.Type)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.Type))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@13 T@U) ) (!  (=> (= (type w@@13) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@13) (UOrdering2 w@@13 fixed.java.lang.Object)) (or (= fixed.java.lang.Class w@@13) (= fixed.java.lang.Object w@@13))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@13) (UOrdering2 w@@13 fixed.java.lang.Object))
)))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@14) (UOrdering2 w@@14 fixed.java.io.Serializable)) (or (= fixed.java.lang.Class w@@14) (= fixed.java.io.Serializable w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@14) (UOrdering2 w@@14 fixed.java.io.Serializable))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (= (type w@@15) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@15) (UOrdering2 w@@15 fixed.java.lang.reflect.GenericDeclaration)) (or (= fixed.java.lang.Class w@@15) (= fixed.java.lang.reflect.GenericDeclaration w@@15))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@15) (UOrdering2 w@@15 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (= (type w@@16) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@16) (UOrdering2 w@@16 fixed.java.lang.reflect.Type)) (or (= fixed.java.lang.Class w@@16) (= fixed.java.lang.reflect.Type w@@16))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@16) (UOrdering2 w@@16 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@17) (UOrdering2 w@@17 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.Class w@@17) (= fixed.java.lang.reflect.AnnotatedElement w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@17) (UOrdering2 w@@17 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.Class w@@18)) (or (or (or (or (or (= fixed.java.lang.Class w@@18) (UOrdering2 fixed.java.lang.Object w@@18)) (UOrdering2 fixed.java.io.Serializable w@@18)) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@18)) (UOrdering2 fixed.java.lang.reflect.Type w@@18)) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.Class)) (= (oneStep fixed.java.lang.Object w@@19) fixed.java.lang.Class))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.Class))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@20 T@U) ) (!  (=> (= (type w@@20) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@20) (UOrdering2 w@@20 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@20) (= fixed.java.lang.Object w@@20))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@20) (UOrdering2 w@@20 fixed.java.lang.Object))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (= (type w@@21) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@21) (UOrdering2 w@@21 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@21) (= fixed.java.io.Serializable w@@21))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@21) (UOrdering2 w@@21 fixed.java.io.Serializable))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@22)) (or (or (= fixed.java.lang.Throwable w@@22) (UOrdering2 fixed.java.lang.Object w@@22)) (UOrdering2 fixed.java.io.Serializable w@@22)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@22))
)))
(assert (forall ((w@@23 T@U) ) (!  (=> (and (= (type w@@23) javaTypeType) (UOrdering2 w@@23 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@23) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@23 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@24 T@U) ) (!  (=> (= (type w@@24) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@24) (UOrdering2 w@@24 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@24) (= fixed.java.lang.Throwable w@@24))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@24) (UOrdering2 w@@24 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (and (= (type w@@25) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@25)) (or (= fixed.java.lang.Exception w@@25) (UOrdering2 fixed.java.lang.Throwable w@@25)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@25))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (and (= (type w@@26) javaTypeType) (UOrdering2 w@@26 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@26) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@26 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@27 T@U) ) (!  (=> (= (type w@@27) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@27) (UOrdering2 w@@27 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@27) (= fixed.java.lang.Exception w@@27))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@27) (UOrdering2 w@@27 fixed.java.lang.Exception))
)))
(assert (forall ((w@@28 T@U) ) (!  (=> (and (= (type w@@28) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@28)) (or (= fixed.java.lang.RuntimeException w@@28) (UOrdering2 fixed.java.lang.Exception w@@28)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@28))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 w@@29 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@29) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@29 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@30 T@U) ) (!  (=> (= (type w@@30) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@30) (UOrdering2 w@@30 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@30) (= fixed.java.lang.RuntimeException w@@30))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@30) (UOrdering2 w@@30 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@31)) (or (= fixed.java.lang.ClassCastException w@@31) (UOrdering2 fixed.java.lang.RuntimeException w@@31)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@31))
)))
(assert (forall ((w@@32 T@U) ) (!  (=> (and (= (type w@@32) javaTypeType) (UOrdering2 w@@32 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@32) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@32 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@33 T@U) ) (!  (=> (= (type w@@33) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@33) (UOrdering2 w@@33 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@33) (= fixed.java.lang.RuntimeException w@@33))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@33) (UOrdering2 w@@33 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@34)) (or (= fixed.java.lang.NullPointerException w@@34) (UOrdering2 fixed.java.lang.RuntimeException w@@34)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@34))
)))
(assert (forall ((w@@35 T@U) ) (!  (=> (and (= (type w@@35) javaTypeType) (UOrdering2 w@@35 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@35) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@35 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@36 T@U) ) (!  (=> (= (type w@@36) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@36) (UOrdering2 w@@36 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@36) (= fixed.java.lang.RuntimeException w@@36))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@36) (UOrdering2 w@@36 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@37)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@37) (UOrdering2 fixed.java.lang.RuntimeException w@@37)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@37))
)))
(assert (forall ((w@@38 T@U) ) (!  (=> (and (= (type w@@38) javaTypeType) (UOrdering2 w@@38 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@38) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@38 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@39 T@U) ) (!  (=> (= (type w@@39) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@39) (UOrdering2 w@@39 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@39) (= fixed.java.lang.IndexOutOfBoundsException w@@39))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@39) (UOrdering2 w@@39 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@40)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@40) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@40)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@40))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 w@@41 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@41) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@41 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@42 T@U) ) (!  (=> (= (type w@@42) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@42) (UOrdering2 w@@42 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@42) (= fixed.java.lang.Object w@@42))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@42) (UOrdering2 w@@42 fixed.java.lang.Object))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (and (= (type w@@43) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43) (UOrdering2 fixed.java.lang.Object w@@43)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 w@@44 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@44) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@44 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@45)) (= fixed.java.lang.Comparable w@@45))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@45))
)))
(assert (= (type fixed.java.util.Arrays) javaTypeType))
(assert (not (= fixed.java.util.Arrays fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Arrays fixed.java.lang.Object))
(assert (forall ((w@@46 T@U) ) (!  (=> (= (type w@@46) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Arrays w@@46) (UOrdering2 w@@46 fixed.java.lang.Object)) (or (= fixed.java.util.Arrays w@@46) (= fixed.java.lang.Object w@@46))))
 :pattern ( (UOrdering2 fixed.java.util.Arrays w@@46) (UOrdering2 w@@46 fixed.java.lang.Object))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) javaTypeType) (UOrdering2 fixed.java.util.Arrays w@@47)) (or (= fixed.java.util.Arrays w@@47) (UOrdering2 fixed.java.lang.Object w@@47)))
 :pattern ( (UOrdering2 fixed.java.util.Arrays w@@47))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 w@@48 fixed.java.util.Arrays)) (= (oneStep fixed.java.lang.Object w@@48) fixed.java.util.Arrays))
 :pattern ( (UOrdering2 w@@48 fixed.java.util.Arrays))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (forall ((w@@49 T@U) ) (!  (=> (= (type w@@49) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@49) (UOrdering2 w@@49 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@49) (= fixed.java.lang.Object w@@49))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@49) (UOrdering2 w@@49 fixed.java.lang.Object))
)))
(assert (forall ((w@@50 T@U) ) (!  (=> (and (= (type w@@50) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@50)) (or (= fixed.java.lang.Boolean w@@50) (UOrdering2 fixed.java.lang.Object w@@50)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@50))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 w@@51 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@51) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@51 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 w@@52 fixed.java.lang.Object)) (or (or (or (or (or (or (= fixed.java.lang.Object w@@52) (UOrdering2 w@@52 fixed.com.acciente.oacc.PasswordCredentials)) (UOrdering2 w@@52 fixed.java.lang.Class)) (UOrdering2 w@@52 fixed.java.lang.Throwable)) (UOrdering2 w@@52 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@52 fixed.java.util.Arrays)) (UOrdering2 w@@52 fixed.java.lang.Boolean)))
 :pattern ( (UOrdering2 w@@52 fixed.java.lang.Object))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (and (= (type w@@53) javaTypeType) (UOrdering2 w@@53 fixed.com.acciente.oacc.Credentials)) (or (= fixed.com.acciente.oacc.Credentials w@@53) (UOrdering2 w@@53 fixed.com.acciente.oacc.PasswordCredentials)))
 :pattern ( (UOrdering2 w@@53 fixed.com.acciente.oacc.Credentials))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) javaTypeType) (UOrdering2 w@@54 fixed.com.acciente.oacc.PasswordCredentials)) (or (= fixed.com.acciente.oacc.PasswordCredentials w@@54) (UOrdering2 w@@54 fixed.com.acciente.oacc.PasswordCredentials$Impl)))
 :pattern ( (UOrdering2 w@@54 fixed.com.acciente.oacc.PasswordCredentials))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 w@@55 fixed.com.acciente.oacc.PasswordCredentials$Impl)) (= fixed.com.acciente.oacc.PasswordCredentials$Impl w@@55))
 :pattern ( (UOrdering2 w@@55 fixed.com.acciente.oacc.PasswordCredentials$Impl))
)))
(assert (forall ((w@@56 T@U) ) (!  (=> (and (= (type w@@56) javaTypeType) (UOrdering2 w@@56 fixed.java.io.Serializable)) (or (or (= fixed.java.io.Serializable w@@56) (UOrdering2 w@@56 fixed.java.lang.Class)) (UOrdering2 w@@56 fixed.java.lang.Throwable)))
 :pattern ( (UOrdering2 w@@56 fixed.java.io.Serializable))
)))
(assert (forall ((w@@57 T@U) ) (!  (=> (and (= (type w@@57) javaTypeType) (UOrdering2 w@@57 fixed.java.lang.reflect.AnnotatedElement)) (or (or (= fixed.java.lang.reflect.AnnotatedElement w@@57) (UOrdering2 w@@57 fixed.java.lang.reflect.GenericDeclaration)) (UOrdering2 w@@57 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@57 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@58 T@U) ) (!  (=> (and (= (type w@@58) javaTypeType) (UOrdering2 w@@58 fixed.java.lang.reflect.GenericDeclaration)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@58) (UOrdering2 w@@58 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@58 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@59 T@U) ) (!  (=> (and (= (type w@@59) javaTypeType) (UOrdering2 w@@59 fixed.java.lang.reflect.Type)) (or (= fixed.java.lang.reflect.Type w@@59) (UOrdering2 w@@59 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@59 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@60 T@U) ) (!  (=> (and (= (type w@@60) javaTypeType) (UOrdering2 w@@60 fixed.java.lang.Class)) (= fixed.java.lang.Class w@@60))
 :pattern ( (UOrdering2 w@@60 fixed.java.lang.Class))
)))
(assert (forall ((w@@61 T@U) ) (!  (=> (and (= (type w@@61) javaTypeType) (UOrdering2 w@@61 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@61) (UOrdering2 w@@61 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@61 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@62 T@U) ) (!  (=> (and (= (type w@@62) javaTypeType) (UOrdering2 w@@62 fixed.java.lang.Exception)) (or (= fixed.java.lang.Exception w@@62) (UOrdering2 w@@62 fixed.java.lang.RuntimeException)))
 :pattern ( (UOrdering2 w@@62 fixed.java.lang.Exception))
)))
(assert (forall ((w@@63 T@U) ) (!  (=> (and (= (type w@@63) javaTypeType) (UOrdering2 w@@63 fixed.java.lang.RuntimeException)) (or (or (or (= fixed.java.lang.RuntimeException w@@63) (UOrdering2 w@@63 fixed.java.lang.ClassCastException)) (UOrdering2 w@@63 fixed.java.lang.NullPointerException)) (UOrdering2 w@@63 fixed.java.lang.IndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@63 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@64 T@U) ) (!  (=> (and (= (type w@@64) javaTypeType) (UOrdering2 w@@64 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@64))
 :pattern ( (UOrdering2 w@@64 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@65 T@U) ) (!  (=> (and (= (type w@@65) javaTypeType) (UOrdering2 w@@65 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@65))
 :pattern ( (UOrdering2 w@@65 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@66 T@U) ) (!  (=> (and (= (type w@@66) javaTypeType) (UOrdering2 w@@66 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@66) (UOrdering2 w@@66 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@66 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@67 T@U) ) (!  (=> (and (= (type w@@67) javaTypeType) (UOrdering2 w@@67 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@67))
 :pattern ( (UOrdering2 w@@67 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (and (= (type w@@68) javaTypeType) (UOrdering2 w@@68 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@68))
 :pattern ( (UOrdering2 w@@68 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@69 T@U) ) (!  (=> (and (= (type w@@69) javaTypeType) (UOrdering2 w@@69 fixed.java.lang.Comparable)) (= fixed.java.lang.Comparable w@@69))
 :pattern ( (UOrdering2 w@@69 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@70 T@U) ) (!  (=> (and (= (type w@@70) javaTypeType) (UOrdering2 w@@70 fixed.java.util.Arrays)) (= fixed.java.util.Arrays w@@70))
 :pattern ( (UOrdering2 w@@70 fixed.java.util.Arrays))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 w@@71 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@71))
 :pattern ( (UOrdering2 w@@71 fixed.java.lang.Boolean))
)))
(assert  (and (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 4)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (Ctor refType) 5)) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.com.acciente.oacc.Credentials fixed.com.acciente.oacc.PasswordCredentials fixed.com.acciente.oacc.PasswordCredentials$Impl fixed.java.io.Serializable fixed.java.lang.reflect.AnnotatedElement fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.Type fixed.java.lang.Class fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.ClassCastException fixed.java.lang.NullPointerException fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Comparable fixed.java.util.Arrays fixed.java.lang.Boolean)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCco.115:15|
 :skolemid |2056|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCco.119:15|
 :skolemid |2057|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCco.123:15|
 :skolemid |2058|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCco.127:15|
 :skolemid |2059|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCco.131:15|
 :skolemid |2060|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCco.135:15|
 :skolemid |2061|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCco.137:15|
 :skolemid |2062|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCco.5568:15|
 :skolemid |2297|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCco.5572:15|
 :skolemid |2298|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCco.5576:15|
 :skolemid |2299|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCco.5580:15|
 :skolemid |2300|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCco.5584:15|
 :skolemid |2301|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCco.5588:15|
 :skolemid |2302|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCco.5590:15|
 :skolemid |2303|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type call3formal@$obj@0) refType) (= (type call3formal@$obj@0@@0) refType)) (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap@3) (MapType0Type refType))) (= (type fixed.$heap@1) (MapType0Type refType))) (= (type fixed.$heap) (MapType0Type refType))) (= (type fixed.$heap@2) (MapType0Type refType))) (= (type fixed.char$lp$$rp$$com.acciente.oacc.PasswordCredentials$Impl$password259) (FieldType refType))) (= (type $in_parameter__0) refType)) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$$return@0) refType)) (= (type fixed.$heap@0) (MapType0Type refType))) (= (type inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$$return@0) refType)))
(push 1)
(set-info :boogie-vc-id PROC_.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$_EQ_unsafe__xx__fixed)
(assert (not
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+320108 true) :lblpos +320108) (=> (and (and (and (and (=> AA_TEMP230@1 (or AA_TEMP230@0 (= call3formal@$obj@0 call3formal@$obj@0@@0))) (=> (or AA_TEMP230@0 (= call3formal@$obj@0 call3formal@$obj@0@@0)) AA_TEMP230@1)) (and (=> AA_TEMP231@1 (or AA_TEMP231@0 (= fixed.$null fixed.$null))) (=> (or AA_TEMP231@0 (= fixed.$null fixed.$null)) AA_TEMP231@1))) (and (=> AA_TEMP232@1 (or AA_TEMP232@0 (= fixed.$objIndex@1 fixed.$objIndex@1))) (=> (or AA_TEMP232@0 (= fixed.$objIndex@1 fixed.$objIndex@1)) AA_TEMP232@1))) (and (=> AA_TEMP233@1 (or AA_TEMP233@0 (forall ((r T@U) (f T@U) ) (! (let ((_ty (FieldTypeInv0 (type f))))
 (=> (and (= (type r) refType) (= (type f) (FieldType _ty))) (or (= (MapType0Select fixed.$heap@3 r f) (MapType0Select fixed.$heap@1 r f)) (not (U_2_bool (MapType0Select fixed.$heap r fixed.$alloc))))))
 :qid |RSPROCco.7575:20|
 :skolemid |2367|
 :no-pattern (type r)
 :no-pattern (type f)
 :no-pattern (U_2_int r)
 :no-pattern (U_2_bool r)
 :no-pattern (U_2_int f)
 :no-pattern (U_2_bool f)
)))) (=> (or AA_TEMP233@0 (forall ((r@@0 T@U) (f@@0 T@U) ) (! (let ((_ty@@0 (FieldTypeInv0 (type f@@0))))
 (=> (and (= (type r@@0) refType) (= (type f@@0) (FieldType _ty@@0))) (or (= (MapType0Select fixed.$heap@3 r@@0 f@@0) (MapType0Select fixed.$heap@1 r@@0 f@@0)) (not (U_2_bool (MapType0Select fixed.$heap r@@0 fixed.$alloc))))))
 :qid |RSPROCco.7575:20|
 :skolemid |2367|
 :no-pattern (type r@@0)
 :no-pattern (type f@@0)
 :no-pattern (U_2_int r@@0)
 :no-pattern (U_2_bool r@@0)
 :no-pattern (U_2_int f@@0)
 :no-pattern (U_2_bool f@@0)
))) AA_TEMP233@1))) (! (or %lbl%@325463  (and (and (and AA_TEMP233@1 AA_TEMP232@1) AA_TEMP231@1) AA_TEMP230@1)) :lblneg @325463)))))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+320107 true) :lblpos +320107) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$block16_correct  (=> (! (and %lbl%+320106 true) :lblpos +320106) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Return_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0$1_correct  (=> (! (and %lbl%+320105 true) :lblpos +320105) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$block16_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+320104 true) :lblpos +320104) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0$1_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$block1_correct  (=> (! (and %lbl%+320103 true) :lblpos +320103) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Return_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0$1_correct  (=> (! (and %lbl%+320102 true) :lblpos +320102) (=> (= fixed.$heap@3 (MapType0Store fixed.$heap@2 call3formal@$obj@0@@0 fixed.char$lp$$rp$$com.acciente.oacc.PasswordCredentials$Impl$password259 $in_parameter__0)) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$block1_correct))))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+320101 true) :lblpos +320101) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0$1_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$block15_correct  (=> (! (and %lbl%+320100 true) :lblpos +320100) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0$1_correct  (=> (! (and %lbl%+320099 true) :lblpos +320099) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$block15_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+320098 true) :lblpos +320098) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0$1_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+320097 true) :lblpos +320097) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+320096 true) :lblpos +320096) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+320095 true) :lblpos +320095) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@2 fixed.$null fixed.$type) T))
 :qid |RSPROCco.7497:20|
 :skolemid |2364|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCco.7498:20|
 :skolemid |2365|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCco.7499:20|
 :skolemid |2366|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and (UOrdering2 (MapType0Select fixed.$heap@2 call3formal@$obj@0@@0 fixed.$type) fixed.com.acciente.oacc.PasswordCredentials) (not (= call3formal@$obj@0@@0 fixed.$null)))) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+320094 true) :lblpos +320094) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+320093 true) :lblpos +320093) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@2 fixed.$null fixed.$type) T@@0))
 :qid |RSPROCco.7476:20|
 :skolemid |2361|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCco.7477:20|
 :skolemid |2362|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCco.7478:20|
 :skolemid |2363|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and (UOrdering2 (MapType0Select fixed.$heap@2 call3formal@$obj@0@@0 fixed.$type) fixed.com.acciente.oacc.PasswordCredentials$Impl) (not (= call3formal@$obj@0@@0 fixed.$null)))) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+320092 true) :lblpos +320092) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0_correct)))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+320091 true) :lblpos +320091) (=> (forall ((T@@1 T@U) ) (!  (=> (= (type T@@1) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@1))
 :qid |RSPROCco.7454:20|
 :skolemid |2358|
 :no-pattern (type T@@1)
 :no-pattern (U_2_int T@@1)
 :no-pattern (U_2_bool T@@1)
)) (=> (and (and (and (forall ((_r@@3 T@U) ) (!  (=> (= (type _r@@3) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@3)) 0))
 :qid |RSPROCco.7455:20|
 :skolemid |2359|
 :no-pattern (type _r@@3)
 :no-pattern (U_2_int _r@@3)
 :no-pattern (U_2_bool _r@@3)
)) (forall ((_r@@4 T@U) ) (!  (=> (= (type _r@@4) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@4)) 0))
 :qid |RSPROCco.7456:20|
 :skolemid |2360|
 :no-pattern (type _r@@4)
 :no-pattern (U_2_int _r@@4)
 :no-pattern (U_2_bool _r@@4)
))) (and (UOrdering2 (MapType0Select fixed.$heap inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$$return@0 fixed.$type) fixed.com.acciente.oacc.PasswordCredentials) (= fixed.$objIndex@1 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@2 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@0 fixed.$type fixed.com.acciente.oacc.PasswordCredentials$Impl)) (not (= call3formal@$obj@0@@0 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@0 fixed.$alloc))) (= call3formal@$obj@0@@0 (fixed.$intToRef fixed.$objIndex))))) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Entry_correct)))))
(let ((inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+320090 true) :lblpos +320090) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+320089 true) :lblpos +320089) inline$fixed.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Entry_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+320088 true) :lblpos +320088) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$block17_correct  (=> (! (and %lbl%+320087 true) :lblpos +320087) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Return_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0$1_correct  (=> (! (and %lbl%+320086 true) :lblpos +320086) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$block17_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+320085 true) :lblpos +320085) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0$1_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$block1_correct  (=> (! (and %lbl%+320084 true) :lblpos +320084) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Return_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0$1_correct  (=> (! (and %lbl%+320083 true) :lblpos +320083) (=> (= fixed.$heap@1 (MapType0Store fixed.$heap@0 call3formal@$obj@0 fixed.char$lp$$rp$$com.acciente.oacc.PasswordCredentials$Impl$password259 $in_parameter__0)) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$block1_correct))))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+320082 true) :lblpos +320082) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0$1_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$block16_correct  (=> (! (and %lbl%+320081 true) :lblpos +320081) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0$1_correct  (=> (! (and %lbl%+320080 true) :lblpos +320080) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$block16_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+320079 true) :lblpos +320079) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0$1_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+320078 true) :lblpos +320078) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+320077 true) :lblpos +320077) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+320076 true) :lblpos +320076) (=> (forall ((T@@2 T@U) ) (!  (=> (= (type T@@2) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@0 fixed.$null fixed.$type) T@@2))
 :qid |RSPROCco.7370:20|
 :skolemid |2355|
 :no-pattern (type T@@2)
 :no-pattern (U_2_int T@@2)
 :no-pattern (U_2_bool T@@2)
)) (=> (and (and (forall ((_r@@5 T@U) ) (!  (=> (= (type _r@@5) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@5)) 0))
 :qid |RSPROCco.7371:20|
 :skolemid |2356|
 :no-pattern (type _r@@5)
 :no-pattern (U_2_int _r@@5)
 :no-pattern (U_2_bool _r@@5)
)) (forall ((_r@@6 T@U) ) (!  (=> (= (type _r@@6) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@6)) 0))
 :qid |RSPROCco.7372:20|
 :skolemid |2357|
 :no-pattern (type _r@@6)
 :no-pattern (U_2_int _r@@6)
 :no-pattern (U_2_bool _r@@6)
))) (and (UOrdering2 (MapType0Select fixed.$heap@0 call3formal@$obj@0 fixed.$type) fixed.com.acciente.oacc.PasswordCredentials) (not (= call3formal@$obj@0 fixed.$null)))) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+320075 true) :lblpos +320075) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$anon0_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+320074 true) :lblpos +320074) (=> (forall ((T@@3 T@U) ) (!  (=> (= (type T@@3) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap@0 fixed.$null fixed.$type) T@@3))
 :qid |RSPROCco.7349:20|
 :skolemid |2352|
 :no-pattern (type T@@3)
 :no-pattern (U_2_int T@@3)
 :no-pattern (U_2_bool T@@3)
)) (=> (and (and (forall ((_r@@7 T@U) ) (!  (=> (= (type _r@@7) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@7)) 0))
 :qid |RSPROCco.7350:20|
 :skolemid |2353|
 :no-pattern (type _r@@7)
 :no-pattern (U_2_int _r@@7)
 :no-pattern (U_2_bool _r@@7)
)) (forall ((_r@@8 T@U) ) (!  (=> (= (type _r@@8) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@8)) 0))
 :qid |RSPROCco.7351:20|
 :skolemid |2354|
 :no-pattern (type _r@@8)
 :no-pattern (U_2_int _r@@8)
 :no-pattern (U_2_bool _r@@8)
))) (and (UOrdering2 (MapType0Select fixed.$heap@0 call3formal@$obj@0 fixed.$type) fixed.com.acciente.oacc.PasswordCredentials$Impl) (not (= call3formal@$obj@0 fixed.$null)))) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+320073 true) :lblpos +320073) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$anon0_correct)))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+320072 true) :lblpos +320072) (=> (forall ((T@@4 T@U) ) (!  (=> (= (type T@@4) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@4))
 :qid |RSPROCco.7327:20|
 :skolemid |2349|
 :no-pattern (type T@@4)
 :no-pattern (U_2_int T@@4)
 :no-pattern (U_2_bool T@@4)
)) (=> (and (and (and (forall ((_r@@9 T@U) ) (!  (=> (= (type _r@@9) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@9)) 0))
 :qid |RSPROCco.7328:20|
 :skolemid |2350|
 :no-pattern (type _r@@9)
 :no-pattern (U_2_int _r@@9)
 :no-pattern (U_2_bool _r@@9)
)) (forall ((_r@@10 T@U) ) (!  (=> (= (type _r@@10) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@10)) 0))
 :qid |RSPROCco.7329:20|
 :skolemid |2351|
 :no-pattern (type _r@@10)
 :no-pattern (U_2_int _r@@10)
 :no-pattern (U_2_bool _r@@10)
))) (and (UOrdering2 (MapType0Select fixed.$heap inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$$return@0 fixed.$type) fixed.com.acciente.oacc.PasswordCredentials) (= fixed.$objIndex@0 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@0 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0 fixed.$type fixed.com.acciente.oacc.PasswordCredentials$Impl)) (not (= call3formal@$obj@0 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0 fixed.$alloc))) (= call3formal@$obj@0 (fixed.$intToRef fixed.$objIndex))))) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$inline$com.acciente.oacc.PasswordCredentials$Impl$$la$init$ra$$char$lp$$rp$$0$Entry_correct)))))
(let ((inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+320071 true) :lblpos +320071) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+320070 true) :lblpos +320070) inline$unsafe.com.acciente.oacc.PasswordCredentials$newInstance$char$lp$$rp$$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+324260 true) :lblpos +324260) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+324267 true) :lblpos +324267) q@0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
