/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 29 03:14:02 GMT 2022
 */

package com.acciente.oacc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.acciente.oacc.PasswordCredentials;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PasswordCredentials$Impl_ESTest extends PasswordCredentials$Impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[4];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals(charArray1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      char[] charArray1 = new char[2];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals(charArray1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = new char[2];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals(charArray0, charArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      PasswordCredentials.Impl passwordCredentials_Impl0 = new PasswordCredentials.Impl(charArray0);
      char[] charArray1 = new char[3];
      PasswordCredentials passwordCredentials0 = PasswordCredentials.newInstance(charArray1);
      boolean boolean0 = passwordCredentials_Impl0.equals(passwordCredentials0);
      assertFalse(boolean0);
      assertFalse(passwordCredentials0.equals((Object)passwordCredentials_Impl0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[4];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals(charArray0, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = PasswordCredentials.Impl.ArraysIsEquals((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      PasswordCredentials.Impl passwordCredentials_Impl0 = new PasswordCredentials.Impl(charArray0);
      Object object0 = new Object();
      boolean boolean0 = passwordCredentials_Impl0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PasswordCredentials.Impl passwordCredentials_Impl0 = new PasswordCredentials.Impl((char[]) null);
      boolean boolean0 = passwordCredentials_Impl0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PasswordCredentials.Impl passwordCredentials_Impl0 = new PasswordCredentials.Impl((char[]) null);
      boolean boolean0 = passwordCredentials_Impl0.equals(passwordCredentials_Impl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[3];
      PasswordCredentials.Impl passwordCredentials_Impl0 = new PasswordCredentials.Impl(charArray0);
      char[] charArray1 = passwordCredentials_Impl0.getPassword();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[3];
      PasswordCredentials.Impl passwordCredentials_Impl0 = new PasswordCredentials.Impl(charArray0);
      passwordCredentials_Impl0.hashCode();
  }
}
