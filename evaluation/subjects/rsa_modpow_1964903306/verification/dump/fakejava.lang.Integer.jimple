public class fakejava.lang.Integer extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
    private int value;

    public void <init>(int)
    {
        fakejava.lang.Integer r0;
        int i0;

        r0 := @this: fakejava.lang.Integer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<fakejava.lang.Integer: int value> = i0;

        return;
    }

    public static fakejava.lang.Integer valueOf(int)
    {
        int i0;
        fakejava.lang.Integer $r0;

        i0 := @parameter0: int;

        $r0 = new fakejava.lang.Integer;

        specialinvoke $r0.<fakejava.lang.Integer: void <init>(int)>(i0);

        return $r0;
    }

    public int intValue()
    {
        fakejava.lang.Integer r0;
        int $i0;

        r0 := @this: fakejava.lang.Integer;

        $i0 = r0.<fakejava.lang.Integer: int value>;

        return $i0;
    }

    public int compareTo(fakejava.lang.Integer)
    {
        fakejava.lang.Integer r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: fakejava.lang.Integer;

        r1 := @parameter0: fakejava.lang.Integer;

        $i1 = r0.<fakejava.lang.Integer: int value>;

        $i0 = r1.<fakejava.lang.Integer: int value>;

        if $i1 <= $i0 goto label1;

        return 1;

     label1:
        $i3 = r0.<fakejava.lang.Integer: int value>;

        $i2 = r1.<fakejava.lang.Integer: int value>;

        if $i3 >= $i2 goto label2;

        return -1;

     label2:
        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        fakejava.lang.Integer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: fakejava.lang.Integer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (fakejava.lang.Integer) r1;

        $i0 = virtualinvoke r0.<fakejava.lang.Integer: int compareTo(fakejava.lang.Integer)>($r2);

        return $i0;
    }
}
