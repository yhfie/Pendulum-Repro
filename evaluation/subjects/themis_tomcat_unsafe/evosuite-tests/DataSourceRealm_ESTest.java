/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 13:28:23 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.mysql.jdbc.LoadBalancedConnectionProxy;
import com.mysql.jdbc.LoadBalancedMySQLConnection;
import com.mysql.jdbc.MultiHostConnectionProxy;
import com.mysql.jdbc.ReplicationMySQLConnection;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DataSourceRealm_ESTest extends DataSourceRealm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(true, 0, "Exception committing connection before closing:", 0, (-74), "Exception committing connection before closing:");
      assertTrue(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.matches("Exception committing connection before closing:", " = ?");
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.open();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.mutate("QUERY", (byte[]) null, 2002);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      byte[] byteArray0 = new byte[3];
      dataSourceRealm0.mutate("", byteArray0, (int) (byte) (-17));
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.userRoleTable = "DataSourceRealm";
      dataSourceRealm0.getUserRoleTable();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setUserNameCol("l:n8*dK,333cQ:esI)");
      dataSourceRealm0.getUserNameCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setUserCredCol("`[U");
      dataSourceRealm0.getUserCredCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setRoleNameCol("org.h2.result.RowFactory$DefaultRowFactory");
      dataSourceRealm0.getRoleNameCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setRoleNameCol("");
      dataSourceRealm0.getRoleNameCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      try { 
        dataSourceRealm0.setAlgorithm("7o9w8b_");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.regionMatches(true, (-1272), (String) null, (-1272), (-1272), "`Oph1YwB\"aLj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataSourceRealm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.matches("{SSHA}U/nv1BeA7", "{SSHA}U/nv1BeA7");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.getRoles((Connection) null, "SELECT ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataSourceRealm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.getPassword((Connection) null, "{MD5}}(-L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataSourceRealm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        dataSourceRealm0.getPassword(replicationMySQLConnection0, "{SHA}(4URA5XvSl*YLzeVZ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$711059237 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      LoadBalancedMySQLConnection loadBalancedMySQLConnection0 = new LoadBalancedMySQLConnection((LoadBalancedConnectionProxy) null);
      // Undeclared exception!
      try { 
        dataSourceRealm0.close(loadBalancedMySQLConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.mysql.jdbc.MultiHostMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.authenticate_unsafe((Connection) null, "')je7", "')je7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataSourceRealm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      byte[] byteArray0 = new byte[2];
      dataSourceRealm0.mutate((String) null, byteArray0, 20000);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(true, 10, ",Ol((^b*NO*o[1%", 6, 6, "endp#zoint.err.close");
      assertFalse(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(false, 1, " = ?", 1, 1, " = ?");
      assertTrue(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.equalsIgnoreCase("%i7i4(go9(vr./&BO", "User not found ...");
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.equalsIgnoreCase("u+gu$5Z", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataSourceRealm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getAlgorithm();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getPrincipal((String) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getPassword("seconds");
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.close((Connection) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        dataSourceRealm0.close(replicationMySQLConnection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$711059237 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.authenticate_unsafe((Connection) null, "{SSHAv s|g_.", (String) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        dataSourceRealm0.authenticate_unsafe(replicationMySQLConnection0, "{SHA}1X'9", "{SHA}1X'9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$711059237 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.authenticate_unsafe((Connection) null, (String) null, (String) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(false, 0, "Exception committing connection before closing:", 3, 36, "Exception committing connection before closing:");
      assertFalse(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(true, 36, "#nbW?N", 4519, (-1185), "Exception committing connection before closing:");
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(false, 20000, "SELECT ", 20000, 20000, "SELECT ");
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(false, (-21), "9kixSf<:z~K#6$;W", 3, 36, "9kixSf<:z~K#6$;W");
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.regionMatches(true, (-3880), "2LnyQ", (-3880), (-3880), "{93b");
      assertFalse(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.equalsIgnoreCase((String) null, "s?conds");
      assertFalse(boolean0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.matches("{SSHA} FROM ", "{SSHAw \"|g_.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.matches("(M)", "(M)");
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.matches("{SHA}l5J|6:J!7%", "{SHA}l5J|6:J!7%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Must call init() first
         //
         verifyException("ConcurrentMessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.matches("{MD5}a?]J3Gq<?bb", "{MD5}a?]J3Gq<?bb");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Must call init() first
         //
         verifyException("ConcurrentMessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.matches("rSS'A}CHARACTER_MAXIRUM_L7NGTHmINT", (String) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.matches((String) null, (String) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.mutate((String) null);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      String string0 = dataSourceRealm0.mutate("(M)");
      assertNotNull(string0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
      assertEquals("0000000001000000020000000300000004000000050000000600000007000000$20000$(M)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getDataSourceName();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getUserNameCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getUserRoleTable();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setUserTable(" = ?");
      dataSourceRealm0.getUserTable();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getUserTable();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      String string0 = dataSourceRealm0.getName();
      assertEquals("DataSourceRealm", string0);
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setDataSourceName("(M)");
      dataSourceRealm0.getDataSourceName();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      MultiHostConnectionProxy multiHostConnectionProxy0 = mock(MultiHostConnectionProxy.class, new ViolatedAssumptionAnswer());
      ReplicationMySQLConnection replicationMySQLConnection0 = new ReplicationMySQLConnection(multiHostConnectionProxy0);
      // Undeclared exception!
      try { 
        dataSourceRealm0.getRoles((Connection) replicationMySQLConnection0, "(F!zHXYd^GBZ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.mysql.jdbc.MultiHostConnectionProxy$MockitoMock$711059237 cannot be cast to com.mysql.jdbc.ReplicationConnectionProxy
         //
         verifyException("com.mysql.jdbc.ReplicationMySQLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      boolean boolean0 = dataSourceRealm0.getLocalDataSource();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      try { 
        dataSourceRealm0.startInternal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // An invalid Lifecycle transition was attempted ([STARTING]) for component [DataSourceRealm@0000000001] in state [NEW]
         //
         verifyException("org.apache.catalina.util.LifecycleBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getUserCredCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.setUserRoleTable("b");
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.matches("{SHA}uSHA}Zoad|a|+nEeBlac0listTimeou3", "{SSHA}org.apache.catalina.valves.AbstractAccessLogValve$ThreadNameElement");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Must call init() first
         //
         verifyException("ConcurrentMessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getRoleNameCol();
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      assertTrue(dataSourceRealm0.getLocalDataSource());
      
      dataSourceRealm0.setLocalDataSource(false);
      boolean boolean0 = dataSourceRealm0.getLocalDataSource();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      // Undeclared exception!
      try { 
        dataSourceRealm0.setAlgorithm((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Provider$ServiceKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DataSourceRealm dataSourceRealm0 = new DataSourceRealm();
      dataSourceRealm0.getRoles(" = ?");
      assertTrue(dataSourceRealm0.getLocalDataSource());
  }
}
