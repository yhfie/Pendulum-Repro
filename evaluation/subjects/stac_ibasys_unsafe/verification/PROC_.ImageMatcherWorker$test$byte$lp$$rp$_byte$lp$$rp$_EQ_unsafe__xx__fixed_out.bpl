var fixed.$heap: $heap_type;

var fixed.$intArrayType: javaType;

var fixed.$charArrayType: javaType;

var fixed.$boolArrayType: javaType;

var fixed.$byteArrayType: javaType;

var fixed.$longArrayType: javaType;

var fixed.$arrSizeHeap: [ref]int;

var fixed.$stringSizeHeap: [ref]int;

var fixed.$boolArrHeap: boolArrHeap_type;

var fixed.$refArrHeap: refArrHeap_type;

var fixed.$realArrHeap: realArrHeap_type;

var fixed.$intArrHeap: intArrHeap_type;

var fixed.$objIndex: int;

var fixed.java.lang.String$ImageMatcherWorker$errorcode263: Field ref;

var fixed.java.lang.StringBuffer$ImageMatcherWorker$error264: Field ref;

var fixed.boolean$ImageMatcherWorker$success0: Field int;

var fixed.java.io.PrintStream$java.lang.System$out271: ref;

const unique fixed.$type: Field javaType;

const unique fixed.$alloc: Field bool;

const unique fixed.$null: ref;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Object: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.ImageMatcherWorker: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.Serializable: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Comparable: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.CharSequence: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.String: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable, fixed.java.lang.Comparable, fixed.java.lang.CharSequence complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Appendable: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.AbstractStringBuilder: javaType extends unique fixed.java.lang.Object, fixed.java.lang.Appendable, fixed.java.lang.CharSequence complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.StringBuffer: javaType extends unique fixed.java.lang.AbstractStringBuilder, fixed.java.io.Serializable, fixed.java.lang.CharSequence complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.ScalrApplyTest: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Throwable: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Exception: javaType extends unique fixed.java.lang.Throwable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.awt.Image: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.awt.image.RenderedImage: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.awt.image.WritableRenderedImage: javaType extends fixed.java.awt.image.RenderedImage complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.awt.Transparency: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.awt.image.BufferedImage: javaType extends unique fixed.java.awt.Image, fixed.java.awt.image.WritableRenderedImage, fixed.java.awt.Transparency complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.RuntimeException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.ClassCastException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.NullPointerException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.nio.Buffer: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.nio.ByteBuffer: javaType extends unique fixed.java.nio.Buffer, fixed.java.lang.Comparable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.nio.IntBuffer: javaType extends unique fixed.java.nio.Buffer, fixed.java.lang.Comparable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.AutoCloseable: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.Closeable: javaType extends fixed.java.lang.AutoCloseable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.Flushable: javaType extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.OutputStream: javaType extends unique fixed.java.lang.Object, fixed.java.io.Closeable, fixed.java.io.Flushable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.ByteArrayOutputStream: javaType extends unique fixed.java.io.OutputStream complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.IOException: javaType extends unique fixed.java.lang.Exception complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.ArithmeticException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.IndexOutOfBoundsException: javaType extends unique fixed.java.lang.RuntimeException complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.ArrayIndexOutOfBoundsException: javaType extends unique fixed.java.lang.IndexOutOfBoundsException complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.StringBuilder: javaType extends unique fixed.java.lang.AbstractStringBuilder, fixed.java.io.Serializable, fixed.java.lang.CharSequence complete;

const unique fixed.$StringConst0: ref extends complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.FilterOutputStream: javaType extends unique fixed.java.io.OutputStream complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.io.PrintStream: javaType extends unique fixed.java.io.FilterOutputStream, fixed.java.lang.Appendable, fixed.java.io.Closeable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Math: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.sg.edu.nus.comp.tsunami.safe.Safe: javaType extends unique fixed.java.lang.Object complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Boolean: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable, fixed.java.lang.Comparable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Number: javaType extends unique fixed.java.lang.Object, fixed.java.io.Serializable complete;

const {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} unique fixed.java.lang.Byte: javaType extends unique fixed.java.lang.Number, fixed.java.lang.Comparable complete;

function fixed.$arrayType(t: javaType) : javaType;

function fixed.$intToReal(x: int) : real;

function fixed.$intToBool(x: int) : bool;

function fixed.$refToBool(x: ref) : bool;

function fixed.$boolToInt(x: bool) : int;

function fixed.$cmpBool(x: bool, y: bool) : int;

function fixed.$cmpRef(x: ref, y: ref) : int;

function fixed.$cmpReal(x: real, y: real) : int;

function fixed.$cmpInt(x: int, y: int) : int;

function fixed.$bitOr(x: int, y: int) : int;

function fixed.$bitAnd(x: int, y: int) : int;

function fixed.$xorInt(x: int, y: int) : int;

function fixed.$shlInt(x: int, y: int) : int;

function fixed.$ushrInt(x: int, y: int) : int;

function fixed.$shrInt(x: int, y: int) : int;

function fixed.$mulInt(x: int, y: int) : int;

function fixed.$divInt(x: int, y: int) : int;

function fixed.$modInt(x: int, y: int) : int;

function fixed.$intToRef(id: int) : ref;

axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "fixed"} fixed.$new(obj_type: javaType) returns ($obj: ref);
  modifies fixed.$objIndex, fixed.$heap;
  free ensures !old(fixed.$heap[$obj, fixed.$alloc]);
  free ensures fixed.$heap
   == old(fixed.$heap)[$obj, fixed.$alloc := true][$obj, fixed.$type := obj_type];
  free ensures fixed.$objIndex == old(fixed.$objIndex) + 1;
  free ensures $obj == fixed.$intToRef(old(fixed.$objIndex));
  free ensures $obj != fixed.$null;



procedure {:prefix "fixed"} fixed.java.lang.Object$java.lang.Object$clone$43($this: ref) returns ($other: ref);
  free ensures fixed.$heap[$other, fixed.$alloc] <==> true;
  free ensures fixed.$heap[$other, fixed.$type] == fixed.$heap[$this, fixed.$type];
  free ensures $other != fixed.$null;



procedure {:prefix "fixed"} fixed.int$java.lang.String$compareTo$87($this: ref, $other: ref) returns ($return: int);



procedure {:prefix "fixed"} fixed.ImageMatcherWorker$$la$init$ra$$($this: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$stringSizeHeap;
  free ensures $exception
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));
  free ensures fixed.$objIndex
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));
  free ensures fixed.$heap
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));
  free ensures fixed.$stringSizeHeap
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$stringSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));



procedure {:prefix "fixed"} fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:prefix "fixed"} fixed.java.lang.StringBuffer$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:inline 1} fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap, fixed.$arrSizeHeap;
  free ensures $return
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures $exception
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$objIndex
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$heap
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$intArrHeap
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));



procedure {:prefix "fixed"} fixed.ScalrApplyTest$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.ScalrApplyTest$setup$byte$lp$$rp$($in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.ScalrApplyTest$testApply1$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.awt.image.BufferedImage$getWidth$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.awt.image.BufferedImage$getHeight$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.awt.image.BufferedImage$getRGB$int_int_int_int_int$lp$$rp$_int_int($this: ref, 
    $in_parameter__0: int, 
    $in_parameter__1: int, 
    $in_parameter__2: int, 
    $in_parameter__3: int, 
    $in_parameter__4: ref, 
    $in_parameter__5: int, 
    $in_parameter__6: int)
   returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.nio.ByteBuffer$allocate$int($in_parameter__0: int) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.nio.ByteBuffer$asIntBuffer$($this: ref) returns ($return: ref, $exception: ref);
  modifies fixed.$heap;



procedure {:prefix "fixed"} fixed.java.nio.IntBuffer$put$int$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.io.ByteArrayOutputStream$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.nio.ByteBuffer$array$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.io.OutputStream$write$byte$lp$$rp$($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.io.OutputStream$flush$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.io.ByteArrayOutputStream$close$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.ScalrApplyTest$tearDown$() returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$append$java.lang.String($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Throwable$getMessage$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.StringBuilder$toString$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.io.PrintStream$println$java.lang.String($this: ref, $in_parameter__0: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Math$abs$int($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Boolean$valueOf$boolean($in_parameter__0: int) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Boolean$booleanValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Byte$valueOf$byte($in_parameter__0: int) returns ($return: ref, $exception: ref);



procedure {:prefix "fixed"} fixed.java.lang.Byte$byteValue$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);



procedure {:prefix "fixed"} fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9(in_$return: int, 
    in_$exception: ref, 
    in_$fakelocal_12: ref, 
    in_$r14: ref, 
    in_$fakelocal_18: ref, 
    in_$fakelocal_14: ref, 
    in_$fakelocal_11: ref, 
    in_$fakelocal_13: ref, 
    in_$r11: ref, 
    in_$fakelocal_15: ref, 
    in_$fakelocal_10: ref, 
    in_$r21: ref, 
    in_$b8: int, 
    in_$z6: int, 
    in_$r15: ref, 
    in_$fakelocal_9: ref, 
    in_r1: ref, 
    in_$fakelocal_21: ref, 
    in_$fakelocal_17: ref, 
    in_$i5: int, 
    in_$i9: int, 
    in_z5: int, 
    in_$r17: ref, 
    in_$i10: int, 
    in_$r13: ref, 
    in_z2: int, 
    in_$fakelocal_8: ref, 
    in_$r12: ref, 
    in_$b13: int, 
    in_$r16: ref, 
    in_r31: ref, 
    in_$r20: ref, 
    in_$l12: int, 
    in_$b7: int, 
    in_$i6: int, 
    in_i24: int, 
    in_$r19: ref, 
    in_z4: int, 
    in_i23: int, 
    in_z3: int, 
    in_$fakelocal_20: ref, 
    in_$l11: int, 
    in_$r10: ref, 
    in_$b14: int, 
    in_$b15: int, 
    in_$r18: ref, 
    in_$r22: ref, 
    in_$fakelocal_16: ref, 
    in_$r23: ref, 
    in_i25: int, 
    in_$fakelocal_19: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$fakelocal_12: ref, 
    out_$r14: ref, 
    out_$fakelocal_18: ref, 
    out_$fakelocal_14: ref, 
    out_$fakelocal_11: ref, 
    out_$fakelocal_13: ref, 
    out_$r11: ref, 
    out_$fakelocal_15: ref, 
    out_$fakelocal_10: ref, 
    out_$r21: ref, 
    out_$b8: int, 
    out_$z6: int, 
    out_$r15: ref, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_21: ref, 
    out_$fakelocal_17: ref, 
    out_$i5: int, 
    out_$i9: int, 
    out_z5: int, 
    out_$r17: ref, 
    out_$i10: int, 
    out_$r13: ref, 
    out_z2: int, 
    out_$fakelocal_8: ref, 
    out_$r12: ref, 
    out_$b13: int, 
    out_$r16: ref, 
    out_$r20: ref, 
    out_$l12: int, 
    out_$b7: int, 
    out_$i6: int, 
    out_i24: int, 
    out_$r19: ref, 
    out_z4: int, 
    out_i23: int, 
    out_z3: int, 
    out_$fakelocal_20: ref, 
    out_$l11: int, 
    out_$r10: ref, 
    out_$b14: int, 
    out_$b15: int, 
    out_$r18: ref, 
    out_$r22: ref, 
    out_$fakelocal_16: ref, 
    out_$r23: ref, 
    out_i25: int, 
    out_$fakelocal_19: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "fixed"} fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4(in_$return: int, 
    in_$exception: ref, 
    in_$b18: int, 
    in_r4: ref, 
    in_$i16: int, 
    in_r34: ref, 
    in_i22: int, 
    in_i21: int, 
    in_$i4: int, 
    in_i0: int, 
    in_$i17: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b18: int, 
    out_$i16: int, 
    out_i22: int, 
    out_i21: int, 
    out_$i4: int, 
    out_$i17: int);
  modifies fixed.$intArrHeap, fixed.$objIndex, fixed.$heap;



implementation fixed.ImageMatcherWorker$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var $fakelocal_0: ref;
  var r0: ref;
  var $fakelocal_1: ref;
  var $r1: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.ImageMatcherWorker;
    assume {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "ImageMatcherWorker.java", 8, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "ImageMatcherWorker.java", 14, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.String);
    fixed.$stringSizeHeap := fixed.$stringSizeHeap[$fakelocal_0 := 0];
    fixed.$heap := fixed.$heap[r0, fixed.java.lang.String$ImageMatcherWorker$errorcode263 := $fakelocal_0];
    assert {:sourceloc "ImageMatcherWorker.java", 15, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.StringBuffer);
    $r1 := $fakelocal_1;
    assert {:sourceloc "ImageMatcherWorker.java", 15, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuffer$$la$init$ra$$($r1);
    assert {:sourceloc "ImageMatcherWorker.java", 15, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.java.lang.StringBuffer$ImageMatcherWorker$error264 := $r1];
    assert {:sourceloc "ImageMatcherWorker.java", 16, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$ImageMatcherWorker$success0 := 0];
    assert {:sourceloc "ImageMatcherWorker.java", 16, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation {:inline 1} fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var $fakelocal_12: ref;
  var $r14: ref;
  var $r29: ref;
  var $fakelocal_18: ref;
  var $i1: int;
  var r32: ref;
  var $r25: ref;
  var r0: ref;
  var $fakelocal_14: ref;
  var $r9: ref;
  var $b18: int;
  var $fakelocal_3: ref;
  var $fakelocal_11: ref;
  var $fakelocal_2: ref;
  var $fakelocal_13: ref;
  var $r30: ref;
  var $r11: ref;
  var $r28: ref;
  var $fakelocal_15: ref;
  var $fakelocal_10: ref;
  var $r21: ref;
  var $b8: int;
  var $z6: int;
  var $r15: ref;
  var $fakelocal_9: ref;
  var $r24: ref;
  var r1: ref;
  var $fakelocal_21: ref;
  var $fakelocal_17: ref;
  var $i5: int;
  var $r26: ref;
  var $r8: ref;
  var r3: ref;
  var $i2: int;
  var r4: ref;
  var $i9: int;
  var r33: ref;
  var z5: int;
  var $r17: ref;
  var $r6: ref;
  var $i10: int;
  var $r13: ref;
  var z2: int;
  var $fakelocal_8: ref;
  var $r12: ref;
  var $fakelocal_5: ref;
  var $i16: int;
  var $r27: ref;
  var r34: ref;
  var $b13: int;
  var $r16: ref;
  var r31: ref;
  var $r20: ref;
  var $l12: int;
  var $fakelocal_4: ref;
  var i22: int;
  var $b7: int;
  var i21: int;
  var z1: int;
  var $i6: int;
  var i24: int;
  var $r19: ref;
  var z4: int;
  var i23: int;
  var z3: int;
  var $i4: int;
  var r35: ref;
  var $fakelocal_20: ref;
  var $l11: int;
  var $fakelocal_0: ref;
  var $r10: ref;
  var r2: ref;
  var $i3: int;
  var $b14: int;
  var $b15: int;
  var $r18: ref;
  var i19: int;
  var $r22: ref;
  var i20: int;
  var $fakelocal_16: ref;
  var $r23: ref;
  var r36: ref;
  var $r5: ref;
  var i0: int;
  var $fakelocal_7: ref;
  var i25: int;
  var $i17: int;
  var $fakelocal_1: ref;
  var $fakelocal_6: ref;
  var $fakelocal_19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ImageMatcherWorker.java", 19, -1, -1, -1} true;
    r31 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 21, -1, -1, -1} true;
    z1 := 0;
    goto block2;

  block2:
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.ScalrApplyTest);
    $r5 := $fakelocal_0;
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    call $exception := fixed.ScalrApplyTest$$la$init$ra$$($r5);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    r32 := $r5;
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    call $exception := fixed.ScalrApplyTest$setup$byte$lp$$rp$(r0);
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon8;

  anon8:
    assert {:sourceloc "ImageMatcherWorker.java", 26, -1, -1, -1} true;
    call r33, $exception := fixed.ScalrApplyTest$testApply1$(r32);
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon12;

  anon12:
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} r33 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto block3;

  block3:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r24 := $exception;
    assert {:sourceloc "ImageMatcherWorker.java", 50, -1, -1, -1} true;
    r36 := $r24;
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    $r26 := fixed.java.io.PrintStream$java.lang.System$out271;
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.StringBuilder);
    $r25 := $fakelocal_4;
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuilder$$la$init$ra$$($r25);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call $r27, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r25, fixed.$StringConst0);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call $r28, $exception := fixed.java.lang.Throwable$getMessage$(r36);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:partition} $r27 == fixed.$null;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_5;
    return;

  anon198_Then:
    assume {:partition} $r27 != fixed.$null;
    $exception := $exception;
    goto anon96;

  anon96:
    call $r29, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r27, $r28);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    goto anon199_Then, anon199_Else;

  anon199_Else:
    assume {:partition} $r29 == fixed.$null;
    call $fakelocal_6 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_6;
    return;

  anon199_Then:
    assume {:partition} $r29 != fixed.$null;
    $exception := $exception;
    goto anon99;

  anon99:
    call $r30, $exception := fixed.java.lang.StringBuilder$toString$($r29);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    goto anon200_Then, anon200_Else;

  anon200_Else:
    assume {:partition} $r26 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_7;
    return;

  anon200_Then:
    assume {:partition} $r26 != fixed.$null;
    $exception := $exception;
    goto anon102;

  anon102:
    call $exception := fixed.java.io.PrintStream$println$java.lang.String($r26, $r30);
    goto block7;

  block7:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon201_Then, anon201_Else;

  anon201_Else:
    assume {:partition} z1 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto anon105;

  anon105:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    z2 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    z3 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    i23 := 0;
    goto block9;

  block9:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return := $return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception := $exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12 := $fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14 := $r14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18 := $fakelocal_18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14 := $fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11 := $fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13 := $fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11 := $r11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15 := $fakelocal_15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10 := $fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21 := $r21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8 := $b8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6 := $z6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15 := $r15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9 := $fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1 := r1;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21 := $fakelocal_21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17 := $fakelocal_17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5 := $i5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9 := $i9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5 := z5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17 := $r17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10 := $i10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13 := $r13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2 := z2;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8 := $fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12 := $r12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13 := $b13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16 := $r16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31 := r31;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20 := $r20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12 := $l12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7 := $b7;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6 := $i6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24 := i24;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19 := $r19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4 := z4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23 := i23;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3 := z3;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20 := $fakelocal_20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11 := $l11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10 := $r10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14 := $b14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15 := $b15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18 := $r18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22 := $r22;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16 := $fakelocal_16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23 := $r23;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25 := i25;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19 := $fakelocal_19;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15]];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon153:
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$byteValue$(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon153;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon150:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Then:
    assume {:partition} fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Byte;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon150;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$valueOf$byte(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12$1;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12$1:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Else:
    assume {:partition} !(fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Byte);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon147:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6 := 0;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon144:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$valueOf$byte(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon144;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141:
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18;
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Then:
    assume {:partition} fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135:
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135$1;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135$1:
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Else:
    assume {:partition} !(fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14;
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Then:
    assume {:partition} fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block35;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block35:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$1;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$1:
    assert {:sourceloc "ImageMatcherWorker.java", 64, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block18;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block18:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$2;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$2:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$3;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$3:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$4;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$4:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Else:
    assume {:partition} !(fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon147;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return:
    $return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return;
    $exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    $fakelocal_12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    $r14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14;
    $fakelocal_18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18;
    $fakelocal_14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    $fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    $fakelocal_13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    $r11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11;
    $fakelocal_15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15;
    $fakelocal_10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    $r21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21;
    $b8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8;
    $z6 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6;
    $r15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15;
    $fakelocal_9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    $fakelocal_21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21;
    $fakelocal_17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17;
    $i5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    $i9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    z5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    $r17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17;
    $i10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    $r13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13;
    z2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2;
    $fakelocal_8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    $r12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12;
    $b13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13;
    $r16 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16;
    $r20 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20;
    $l12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12;
    $b7 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7;
    $i6 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    i24 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24;
    $r19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19;
    z4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    i23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    z3 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    $fakelocal_20 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20;
    $l11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11;
    $r10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10;
    $b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14;
    $b15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15;
    $r18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18;
    $r22 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22;
    $fakelocal_16 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16;
    $r23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23;
    i25 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25;
    $fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    goto block9$1;

  block9$1:
    goto block9_last;

  anon202_Else:
    assume {:partition} r31 == fixed.$null;
    call $fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_8;
    return;

  anon202_Then:
    assume {:partition} r31 != fixed.$null;
    $exception := $exception;
    goto anon108;

  anon108:
    $i5 := fixed.$arrSizeHeap[r31];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto anon203_Then, anon203_Else;

  anon203_Else:
    assume {:partition} $i5 > i23;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto anon111;

  anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_9;
    return;

  anon204_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon114;

  anon114:
    $i6 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto anon205_Then, anon205_Else;

  anon205_Else:
    assume {:partition} $i6 > i23;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon117;

  anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} !(i23 < fixed.$arrSizeHeap[r31] && i23 >= 0);
    call $fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_10;
    return;

  anon206_Then:
    assume {:partition} i23 < fixed.$arrSizeHeap[r31] && i23 >= 0;
    $exception := $exception;
    goto anon120;

  anon120:
    $b7 := fixed.$intArrHeap[r31][i23];
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    call i24, $exception := fixed.java.lang.Math$abs$int($b7);
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} !(i23 < fixed.$arrSizeHeap[r1] && i23 >= 0);
    call $fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_11;
    return;

  anon207_Then:
    assume {:partition} i23 < fixed.$arrSizeHeap[r1] && i23 >= 0;
    $exception := $exception;
    goto anon123;

  anon123:
    $b8 := fixed.$intArrHeap[r1][i23];
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    call i25, $exception := fixed.java.lang.Math$abs$int($b8);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_12;
    return;

  anon208_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon126;

  anon126:
    $i9 := fixed.$modInt(i25, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    $l12 := $i9;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_13;
    return;

  anon209_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon129;

  anon129:
    $i10 := fixed.$modInt(i24, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    $l11 := $i10;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0 := $l12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1 := $l11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block35;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block35:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return:
    z4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto anon129$1;

  anon129$1:
    assert {:sourceloc "ImageMatcherWorker.java", 64, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0 := z4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block18;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block18:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return:
    z5 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto anon129$2;

  anon129$2:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call $r10, $exception := fixed.java.lang.Boolean$valueOf$boolean(z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call $r11, $exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := $r10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := $r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    $r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto anon129$3;

  anon129$3:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call $r13, $exception := fixed.java.lang.Boolean$valueOf$boolean(z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := $r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := $r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    $r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto anon129$4;

  anon129$4:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} !(fixed.$heap[$r14, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_14;
    return;

  anon210_Then:
    assume {:partition} fixed.$heap[$r14, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon132;

  anon132:
    $r15 := $r14;
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} $r15 == fixed.$null;
    call $fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_15;
    return;

  anon211_Then:
    assume {:partition} $r15 != fixed.$null;
    $exception := $exception;
    goto anon135;

  anon135:
    call z2, $exception := fixed.java.lang.Boolean$booleanValue$($r15);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call $r16, $exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call $r17, $exception := fixed.java.lang.Boolean$valueOf$boolean(z3);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := $r16;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := $r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    $r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto anon135$1;

  anon135$1:
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:partition} !(fixed.$heap[$r18, fixed.$type] <: fixed.java.lang.Boolean);
    call $fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_16;
    return;

  anon212_Then:
    assume {:partition} fixed.$heap[$r18, fixed.$type] <: fixed.java.lang.Boolean;
    $exception := $exception;
    goto anon138;

  anon138:
    $r19 := $r18;
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} $r19 == fixed.$null;
    call $fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_17;
    return;

  anon213_Then:
    assume {:partition} $r19 != fixed.$null;
    $exception := $exception;
    goto anon141;

  anon141:
    call z3, $exception := fixed.java.lang.Boolean$booleanValue$($r19);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} !(i23 < fixed.$arrSizeHeap[r31] && i23 >= 0);
    call $fakelocal_18 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_18;
    return;

  anon214_Then:
    assume {:partition} i23 < fixed.$arrSizeHeap[r31] && i23 >= 0;
    $exception := $exception;
    goto anon144;

  anon144:
    $b13 := fixed.$intArrHeap[r31][i23];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call $r20, $exception := fixed.java.lang.Byte$valueOf$byte($b13);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon215_Then, anon215_Else;

  anon215_Else:
    assume {:partition} z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon147;

  anon147:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    $z6 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto block12;

  block12:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    $b14 := $z6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call $r21, $exception := fixed.java.lang.Byte$valueOf$byte($b14);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0 := z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1 := $r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2 := $r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return:
    $r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return;
    $exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto block12$1;

  block12$1:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} !(fixed.$heap[$r22, fixed.$type] <: fixed.java.lang.Byte);
    call $fakelocal_19 := fixed.$new(fixed.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_19;
    return;

  anon216_Then:
    assume {:partition} fixed.$heap[$r22, fixed.$type] <: fixed.java.lang.Byte;
    $exception := $exception;
    goto anon150;

  anon150:
    $r23 := $r22;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} $r23 == fixed.$null;
    call $fakelocal_20 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_20;
    return;

  anon217_Then:
    assume {:partition} $r23 != fixed.$null;
    $exception := $exception;
    goto anon153;

  anon153:
    call $b15, $exception := fixed.java.lang.Byte$byteValue$($r23);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} !(i23 < fixed.$arrSizeHeap[r31] && i23 >= 0);
    call $fakelocal_21 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_21;
    return;

  anon218_Then:
    assume {:partition} i23 < fixed.$arrSizeHeap[r31] && i23 >= 0;
    $exception := $exception;
    goto anon156;

  anon156:
    fixed.$intArrHeap := fixed.$intArrHeap[r31 := fixed.$intArrHeap[r31][i23 := $b15]];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    i23 := i23 + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto anon156_dummy;

  anon215_Then:
    assume {:partition} z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block11;

  block11:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    $z6 := 0;
    goto block12;

  anon205_Then:
    assume {:partition} i23 >= $i6;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block10;

  block10:
    assert {:sourceloc "ImageMatcherWorker.java", 74, -1, -1, -1} true;
    goto block13;

  block13:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    $return := z2;
    goto block14;

  block14:
    return;

  anon203_Then:
    assume {:partition} i23 >= $i5;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto block10;

  anon201_Then:
    assume {:partition} z1 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto block8;

  block8:
    assert {:sourceloc "ImageMatcherWorker.java", 75, -1, -1, -1} true;
    z2 := 0;
    goto block13;

  anon163_Then:
    assume {:partition} r33 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto anon15;

  anon15:
    call i19, $exception := fixed.java.awt.image.BufferedImage$getWidth$(r33);
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon19;

  anon19:
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    call i20, $exception := fixed.java.awt.image.BufferedImage$getHeight$(r33);
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon23;

  anon23:
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} !(fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType);
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ClassCastException);
    goto block3;

  anon168_Then:
    assume {:partition} fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto anon26;

  anon26:
    $r6 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    call r34, $exception := fixed.java.awt.image.BufferedImage$getRGB$int_int_int_int_int$lp$$rp$_int_int(r33, 0, 0, i19, i20, $r6, 0, i19);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon30;

  anon30:
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} r34 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto block3;

  anon171_Then:
    assume {:partition} r34 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto anon33;

  anon33:
    $i1 := fixed.$arrSizeHeap[r34];
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    $i2 := fixed.$mulInt($i1, 4);
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    call r35, $exception := fixed.java.nio.ByteBuffer$allocate$int($i2);
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon37;

  anon37:
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} r35 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto block3;

  anon174_Then:
    assume {:partition} r35 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    goto anon40;

  anon40:
    call r2, $exception := fixed.java.nio.ByteBuffer$asIntBuffer$(r35);
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon44;

  anon44:
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} r2 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto block3;

  anon177_Then:
    assume {:partition} r2 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    goto anon47;

  anon47:
    call $fakelocal_1, $exception := fixed.java.nio.IntBuffer$put$int$lp$$rp$(r2, r34);
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon51;

  anon51:
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    call $fakelocal_2 := fixed.$new(fixed.java.io.ByteArrayOutputStream);
    $r8 := $fakelocal_2;
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    call $exception := fixed.java.io.ByteArrayOutputStream$$la$init$ra$$($r8);
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon55;

  anon55:
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    r3 := $r8;
    assert {:sourceloc "ImageMatcherWorker.java", 34, -1, -1, -1} true;
    call $r9, $exception := fixed.java.nio.ByteBuffer$array$(r35);
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon59;

  anon59:
    assert {:sourceloc "ImageMatcherWorker.java", 34, -1, -1, -1} true;
    call $exception := fixed.java.io.OutputStream$write$byte$lp$$rp$(r3, $r9);
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon63;

  anon63:
    assert {:sourceloc "ImageMatcherWorker.java", 35, -1, -1, -1} true;
    call $exception := fixed.java.io.OutputStream$flush$(r3);
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon67;

  anon67:
    assert {:sourceloc "ImageMatcherWorker.java", 36, -1, -1, -1} true;
    call $exception := fixed.java.io.ByteArrayOutputStream$close$(r3);
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon71;

  anon71:
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    call $exception := fixed.ScalrApplyTest$tearDown$();
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon75;

  anon75:
    assert {:sourceloc "ImageMatcherWorker.java", 39, -1, -1, -1} true;
    call $fakelocal_3 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_3 := 128];
    r4 := $fakelocal_3;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} r34 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto block3;

  anon192_Then:
    assume {:partition} r34 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto anon78;

  anon78:
    $i3 := fixed.$arrSizeHeap[r34];
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:partition} 128 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto block3;

  anon193_Then:
    assume {:partition} 128 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto anon81;

  anon81:
    i0 := fixed.$divInt($i3, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    i21 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    i22 := 0;
    goto block4;

  block4:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return := $return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception := $exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18 := $b18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4 := r4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16 := $i16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34 := r34;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22 := i22;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21 := i21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4 := $i4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0 := i0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17 := $i17;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4 := fixed.$mulInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, 
  128);
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18]];
    assert {:sourceloc "ImageMatcherWorker.java", 45, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
   + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
   + inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22];
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return:
    $return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return;
    $exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception;
    $b18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18;
    $i16 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16;
    i22 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22;
    i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21;
    $i4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    $i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    goto block4$1;

  block4$1:
    goto block4_last;

  anon194_Else:
    assume {:partition} $i4 > i22;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon84;

  anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} !(i22 < fixed.$arrSizeHeap[r34] && i22 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto block3;

  anon195_Then:
    assume {:partition} i22 < fixed.$arrSizeHeap[r34] && i22 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon87;

  anon87:
    $i16 := fixed.$intArrHeap[r34][i22];
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto block3;

  anon196_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon90;

  anon90:
    $i17 := fixed.$modInt($i16, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    $b18 := $i17;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} !(i21 < fixed.$arrSizeHeap[r4] && i21 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto block3;

  anon197_Then:
    assume {:partition} i21 < fixed.$arrSizeHeap[r4] && i21 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon93;

  anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[r4 := fixed.$intArrHeap[r4][i21 := $b18]];
    assert {:sourceloc "ImageMatcherWorker.java", 45, -1, -1, -1} true;
    i21 := i21 + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    i22 := i22 + i0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto anon93_dummy;

  anon194_Then:
    assume {:partition} i22 >= $i4;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block5;

  block5:
    assert {:sourceloc "ImageMatcherWorker.java", 48, -1, -1, -1} true;
    r31 := r4;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    z1 := 1;
    goto block6;

  block6:
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} true;
    goto block7;

  anon190_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon75;

  anon191_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon188_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException);
    assert {:clone} true;
    goto anon71;

  anon189_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException;
    $return := 0;
    goto block3;

  anon186_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException);
    assert {:clone} true;
    goto anon67;

  anon187_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException;
    $return := 0;
    goto block3;

  anon184_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException);
    assert {:clone} true;
    goto anon63;

  anon185_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException;
    $return := 0;
    goto block3;

  anon182_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon59;

  anon183_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon180_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon55;

  anon181_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    $r8 := fixed.$null;
    goto block3;

  anon178_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon179_Then, anon179_Else;

  anon179_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon51;

  anon179_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon175_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon44;

  anon176_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon172_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon37;

  anon173_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon169_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon30;

  anon170_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon166_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon23;

  anon167_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon164_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon19;

  anon165_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon161_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon12;

  anon162_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon159_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon8;

  anon160_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon157_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon4;

  anon158_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    $r5 := fixed.$null;
    goto block3;

  anon156_dummy:
    assume false;
    return;

  block9_last:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto anon202_Then, anon202_Else;

  anon93_dummy:
    assume false;
    return;

  block4_last:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    $i4 := fixed.$mulInt(i0, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto anon194_Then, anon194_Else;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.sg.edu.nus.comp.tsunami.safe.Safe;
    assume {:sourceloc "Safe.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "Safe.java", 3, -1, -1, -1} true;
    goto block15;

  block15:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$not$boolean($in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var z0: int;
  var z1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 0;
    goto block16;

  block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    z1 := 1;
    goto block17;

  block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    $return := z1;
    goto block18;

  block18:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block17;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block16;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$and$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z1: int;
  var $z2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $z2 := fixed.$bitAnd(z0, z1);
    assert {:sourceloc "Safe.java", 12, -1, -1, -1} true;
    $return := $z2;
    goto block19;

  block19:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$or$boolean_boolean($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z1: int;
  var $z2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $z2 := fixed.$bitOr(z0, z1);
    assert {:sourceloc "Safe.java", 16, -1, -1, -1} true;
    $return := $z2;
    goto block20;

  block20:
    return;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var l1: int;
  var z0: int;
  var $b2: int;
  var $b3: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 20, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b2;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 1;
    goto block21;

  block21:
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b3;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    z0 := 0;
    goto block22;

  block22:
    assert {:sourceloc "Safe.java", 23, -1, -1, -1} true;
    $return := z0;
    goto block23;

  block23:
    return;

  anon8_Then:
    assume {:partition} $b3 > 0;
    assert {:sourceloc "Safe.java", 22, -1, -1, -1} {:comment "thenblock"} true;
    goto block22;

  anon7_Then:
    assume {:partition} $b2 <= 0;
    assert {:sourceloc "Safe.java", 21, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var l1: int;
  var z0: int;
  var $b3: int;
  var $b2: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 27, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b2;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 1;
    goto block24;

  block24:
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b3;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    z0 := 0;
    goto block25;

  block25:
    assert {:sourceloc "Safe.java", 30, -1, -1, -1} true;
    $return := z0;
    goto block26;

  block26:
    return;

  anon8_Then:
    assume {:partition} $b3 < 0;
    assert {:sourceloc "Safe.java", 29, -1, -1, -1} {:comment "thenblock"} true;
    goto block25;

  anon7_Then:
    assume {:partition} $b2 >= 0;
    assert {:sourceloc "Safe.java", 28, -1, -1, -1} {:comment "thenblock"} true;
    goto block24;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l1: int;
  var l0: int;
  var $b3: int;
  var $b2: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 34, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b2;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 1;
    goto block27;

  block27:
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b3;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    z0 := 0;
    goto block28;

  block28:
    assert {:sourceloc "Safe.java", 37, -1, -1, -1} true;
    $return := z0;
    goto block29;

  block29:
    return;

  anon8_Then:
    assume {:partition} $b3 >= 0;
    assert {:sourceloc "Safe.java", 36, -1, -1, -1} {:comment "thenblock"} true;
    goto block28;

  anon7_Then:
    assume {:partition} $b2 < 0;
    assert {:sourceloc "Safe.java", 35, -1, -1, -1} {:comment "thenblock"} true;
    goto block27;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var l0: int;
  var l1: int;
  var z0: int;
  var $b2: int;
  var $b3: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 41, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b2;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 1;
    goto block30;

  block30:
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b3;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    z0 := 0;
    goto block31;

  block31:
    assert {:sourceloc "Safe.java", 44, -1, -1, -1} true;
    $return := z0;
    goto block32;

  block32:
    return;

  anon8_Then:
    assume {:partition} $b3 <= 0;
    assert {:sourceloc "Safe.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto block31;

  anon7_Then:
    assume {:partition} $b2 > 0;
    assert {:sourceloc "Safe.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto block30;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b2: int;
  var l1: int;
  var $b3: int;
  var l0: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 1;
    goto block33;

  block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    z0 := 0;
    goto block34;

  block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    $return := z0;
    goto block35;

  block35:
    return;

  anon8_Then:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto block34;

  anon7_Then:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto block33;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$long_long($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b3: int;
  var z0: int;
  var $b2: int;
  var l1: int;
  var l0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    l1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 55, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    $b2 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 1;
    goto block36;

  block36:
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    $b3 := fixed.$cmpInt(l0, l1);
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b3 == 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    z0 := 0;
    goto block37;

  block37:
    assert {:sourceloc "Safe.java", 58, -1, -1, -1} true;
    $return := z0;
    goto block38;

  block38:
    return;

  anon8_Then:
    assume {:partition} $b3 != 0;
    assert {:sourceloc "Safe.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto block37;

  anon7_Then:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "Safe.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto block36;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$gt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d0: int;
  var $b1: int;
  var $b0: int;
  var d1: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 62, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 < $b0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 1;
    goto block39;

  block39:
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 >= $b1;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    z0 := 0;
    goto block40;

  block40:
    assert {:sourceloc "Safe.java", 65, -1, -1, -1} true;
    $return := z0;
    goto block41;

  block41:
    return;

  anon8_Then:
    assume {:partition} $b1 > 0;
    assert {:sourceloc "Safe.java", 64, -1, -1, -1} {:comment "thenblock"} true;
    goto block40;

  anon7_Then:
    assume {:partition} $b0 <= 0;
    assert {:sourceloc "Safe.java", 63, -1, -1, -1} {:comment "thenblock"} true;
    goto block39;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$lt$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b1: int;
  var d0: int;
  var $b0: int;
  var z0: int;
  var d1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 69, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 > $b0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 1;
    goto block42;

  block42:
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 <= $b1;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    z0 := 0;
    goto block43;

  block43:
    assert {:sourceloc "Safe.java", 72, -1, -1, -1} true;
    $return := z0;
    goto block44;

  block44:
    return;

  anon8_Then:
    assume {:partition} $b1 < 0;
    assert {:sourceloc "Safe.java", 71, -1, -1, -1} {:comment "thenblock"} true;
    goto block43;

  anon7_Then:
    assume {:partition} $b0 >= 0;
    assert {:sourceloc "Safe.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block42;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$ge$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b1: int;
  var d0: int;
  var d1: int;
  var $b0: int;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 76, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 <= $b0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 1;
    goto block45;

  block45:
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 > $b1;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    z0 := 0;
    goto block46;

  block46:
    assert {:sourceloc "Safe.java", 79, -1, -1, -1} true;
    $return := z0;
    goto block47;

  block47:
    return;

  anon8_Then:
    assume {:partition} $b1 >= 0;
    assert {:sourceloc "Safe.java", 78, -1, -1, -1} {:comment "thenblock"} true;
    goto block46;

  anon7_Then:
    assume {:partition} $b0 < 0;
    assert {:sourceloc "Safe.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block45;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$le$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var d1: int;
  var d0: int;
  var z0: int;
  var $b1: int;
  var $b0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 83, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} 0 >= $b0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 1;
    goto block48;

  block48:
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} 0 < $b1;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    z0 := 0;
    goto block49;

  block49:
    assert {:sourceloc "Safe.java", 86, -1, -1, -1} true;
    $return := z0;
    goto block50;

  block50:
    return;

  anon8_Then:
    assume {:partition} $b1 <= 0;
    assert {:sourceloc "Safe.java", 85, -1, -1, -1} {:comment "thenblock"} true;
    goto block49;

  anon7_Then:
    assume {:partition} $b0 > 0;
    assert {:sourceloc "Safe.java", 84, -1, -1, -1} {:comment "thenblock"} true;
    goto block48;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var z0: int;
  var $b1: int;
  var $b0: int;
  var d0: int;
  var d1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 90, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 1;
    goto block51;

  block51:
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    z0 := 0;
    goto block52;

  block52:
    assert {:sourceloc "Safe.java", 93, -1, -1, -1} true;
    $return := z0;
    goto block53;

  block53:
    return;

  anon8_Then:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 92, -1, -1, -1} {:comment "thenblock"} true;
    goto block52;

  anon7_Then:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 91, -1, -1, -1} {:comment "thenblock"} true;
    goto block51;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$double_double($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref)
{
  var $b0: int;
  var d0: int;
  var z0: int;
  var $b1: int;
  var d1: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    d1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 97, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    $b0 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} $b0 != 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 1;
    goto block54;

  block54:
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    $b1 := fixed.$cmpInt(d0, d1);
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    z0 := 0;
    goto block55;

  block55:
    assert {:sourceloc "Safe.java", 100, -1, -1, -1} true;
    $return := z0;
    goto block56;

  block56:
    return;

  anon8_Then:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "Safe.java", 99, -1, -1, -1} {:comment "thenblock"} true;
    goto block55;

  anon7_Then:
    assume {:partition} $b0 == 0;
    assert {:sourceloc "Safe.java", 98, -1, -1, -1} {:comment "thenblock"} true;
    goto block54;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$eq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var r0: ref;
  var z0: int;
  var r1: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 104, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 1;
    goto block57;

  block57:
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    z0 := 0;
    goto block58;

  block58:
    assert {:sourceloc "Safe.java", 107, -1, -1, -1} true;
    $return := z0;
    goto block59;

  block59:
    return;

  anon8_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 106, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block58;

  anon7_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 105, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block57;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$neq$java.lang.Object_java.lang.Object($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var r1: ref;
  var r0: ref;
  var z0: int;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__0, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "Safe.java", 111, -1, -1, -1} true;
    z0 := 0;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 1;
    goto block60;

  block60:
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    z0 := 0;
    goto block61;

  block61:
    assert {:sourceloc "Safe.java", 114, -1, -1, -1} true;
    $return := z0;
    goto block62;

  block62:
    return;

  anon8_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "Safe.java", 113, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block61;

  anon7_Then:
    assume {:partition} r0 == r1;
    assert {:sourceloc "Safe.java", 112, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block60;
}



implementation fixed.sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object($in_parameter__0: int, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var z0: int;
  var r2: ref;
  var r1: ref;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[$in_parameter__2, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$in_parameter__1, fixed.$type] <: fixed.java.lang.Object;
    assume fixed.$heap[$return, fixed.$type] <: fixed.java.lang.Object;
    $exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    z0 := $in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto anon7_Then, anon7_Else;

  anon7_Else:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r0;
    goto block63;

  block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto anon8_Then, anon8_Else;

  anon8_Else:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    r2 := r1;
    goto block64;

  block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    $return := r2;
    goto block65;

  block65:
    return;

  anon8_Then:
    assume {:partition} z0 != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block64;

  anon7_Then:
    assume {:partition} z0 == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block63;
}



implementation fixed.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9(in_$return: int, 
    in_$exception: ref, 
    in_$fakelocal_12: ref, 
    in_$r14: ref, 
    in_$fakelocal_18: ref, 
    in_$fakelocal_14: ref, 
    in_$fakelocal_11: ref, 
    in_$fakelocal_13: ref, 
    in_$r11: ref, 
    in_$fakelocal_15: ref, 
    in_$fakelocal_10: ref, 
    in_$r21: ref, 
    in_$b8: int, 
    in_$z6: int, 
    in_$r15: ref, 
    in_$fakelocal_9: ref, 
    in_r1: ref, 
    in_$fakelocal_21: ref, 
    in_$fakelocal_17: ref, 
    in_$i5: int, 
    in_$i9: int, 
    in_z5: int, 
    in_$r17: ref, 
    in_$i10: int, 
    in_$r13: ref, 
    in_z2: int, 
    in_$fakelocal_8: ref, 
    in_$r12: ref, 
    in_$b13: int, 
    in_$r16: ref, 
    in_r31: ref, 
    in_$r20: ref, 
    in_$l12: int, 
    in_$b7: int, 
    in_$i6: int, 
    in_i24: int, 
    in_$r19: ref, 
    in_z4: int, 
    in_i23: int, 
    in_z3: int, 
    in_$fakelocal_20: ref, 
    in_$l11: int, 
    in_$r10: ref, 
    in_$b14: int, 
    in_$b15: int, 
    in_$r18: ref, 
    in_$r22: ref, 
    in_$fakelocal_16: ref, 
    in_$r23: ref, 
    in_i25: int, 
    in_$fakelocal_19: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$fakelocal_12: ref, 
    out_$r14: ref, 
    out_$fakelocal_18: ref, 
    out_$fakelocal_14: ref, 
    out_$fakelocal_11: ref, 
    out_$fakelocal_13: ref, 
    out_$r11: ref, 
    out_$fakelocal_15: ref, 
    out_$fakelocal_10: ref, 
    out_$r21: ref, 
    out_$b8: int, 
    out_$z6: int, 
    out_$r15: ref, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_21: ref, 
    out_$fakelocal_17: ref, 
    out_$i5: int, 
    out_$i9: int, 
    out_z5: int, 
    out_$r17: ref, 
    out_$i10: int, 
    out_$r13: ref, 
    out_z2: int, 
    out_$fakelocal_8: ref, 
    out_$r12: ref, 
    out_$b13: int, 
    out_$r16: ref, 
    out_$r20: ref, 
    out_$l12: int, 
    out_$b7: int, 
    out_$i6: int, 
    out_i24: int, 
    out_$r19: ref, 
    out_z4: int, 
    out_i23: int, 
    out_z3: int, 
    out_$fakelocal_20: ref, 
    out_$l11: int, 
    out_$r10: ref, 
    out_$b14: int, 
    out_$b15: int, 
    out_$r18: ref, 
    out_$r22: ref, 
    out_$fakelocal_16: ref, 
    out_$r23: ref, 
    out_i25: int, 
    out_$fakelocal_19: ref)
{
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap: $heap_type;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0: int;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return: ref;
  var inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception: ref;

  entry:
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    goto block9;

  block9:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto anon202_Then, anon202_Else;

  anon202_Else:
    assume {:partition} in_r31 == fixed.$null;
    call out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := 0;
    out_$exception := out_$fakelocal_8;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon156:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r31 := fixed.$intArrHeap[in_r31][out_i23 := out_$b15]];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    out_i23 := out_i23 + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto anon156_dummy;

  anon218_Then:
    assume {:partition} out_i23 < fixed.$arrSizeHeap[in_r31] && out_i23 >= 0;
    out_$exception := out_$exception;
    goto anon156;

  anon153:
    call out_$b15, out_$exception := fixed.java.lang.Byte$byteValue$(out_$r23);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon218_Then, anon218_Else;

  anon218_Else:
    assume {:partition} !(out_i23 < fixed.$arrSizeHeap[in_r31] && out_i23 >= 0);
    call out_$fakelocal_21 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_21;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon217_Then:
    assume {:partition} out_$r23 != fixed.$null;
    out_$exception := out_$exception;
    goto anon153;

  anon150:
    out_$r23 := out_$r22;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon217_Then, anon217_Else;

  anon217_Else:
    assume {:partition} out_$r23 == fixed.$null;
    call out_$fakelocal_20 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_20;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon216_Then:
    assume {:partition} fixed.$heap[out_$r22, fixed.$type] <: fixed.java.lang.Byte;
    out_$exception := out_$exception;
    goto anon150;

  block12:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    out_$b14 := out_$z6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call out_$r21, out_$exception := fixed.java.lang.Byte$valueOf$byte(out_$b14);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := out_$r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := out_$r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    out_$r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto block12$1;

  block12$1:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon216_Then, anon216_Else;

  anon216_Else:
    assume {:partition} !(fixed.$heap[out_$r22, fixed.$type] <: fixed.java.lang.Byte);
    call out_$fakelocal_19 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_19;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon147:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    out_$z6 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto block12;

  block11:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    out_$z6 := 0;
    goto block12;

  anon215_Then:
    assume {:partition} out_z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block11;

  anon144:
    out_$b13 := fixed.$intArrHeap[in_r31][out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call out_$r20, out_$exception := fixed.java.lang.Byte$valueOf$byte(out_$b13);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon215_Then, anon215_Else;

  anon214_Then:
    assume {:partition} out_i23 < fixed.$arrSizeHeap[in_r31] && out_i23 >= 0;
    out_$exception := out_$exception;
    goto anon144;

  anon141:
    call out_z3, out_$exception := fixed.java.lang.Boolean$booleanValue$(out_$r19);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon214_Then, anon214_Else;

  anon214_Else:
    assume {:partition} !(out_i23 < fixed.$arrSizeHeap[in_r31] && out_i23 >= 0);
    call out_$fakelocal_18 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_18;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon213_Then:
    assume {:partition} out_$r19 != fixed.$null;
    out_$exception := out_$exception;
    goto anon141;

  anon138:
    out_$r19 := out_$r18;
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto anon213_Then, anon213_Else;

  anon213_Else:
    assume {:partition} out_$r19 == fixed.$null;
    call out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_17;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon212_Then:
    assume {:partition} fixed.$heap[out_$r18, fixed.$type] <: fixed.java.lang.Boolean;
    out_$exception := out_$exception;
    goto anon138;

  anon135:
    call out_z2, out_$exception := fixed.java.lang.Boolean$booleanValue$(out_$r15);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call out_$r16, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call out_$r17, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(out_z3);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := out_z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := out_$r16;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := out_$r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    out_$r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto anon135$1;

  anon135$1:
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto anon212_Then, anon212_Else;

  anon212_Else:
    assume {:partition} !(fixed.$heap[out_$r18, fixed.$type] <: fixed.java.lang.Boolean);
    call out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_16;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon211_Then:
    assume {:partition} out_$r15 != fixed.$null;
    out_$exception := out_$exception;
    goto anon135;

  anon132:
    out_$r15 := out_$r14;
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto anon211_Then, anon211_Else;

  anon211_Else:
    assume {:partition} out_$r15 == fixed.$null;
    call out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    out_$return := 0;
    out_$exception := out_$fakelocal_15;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon210_Then:
    assume {:partition} fixed.$heap[out_$r14, fixed.$type] <: fixed.java.lang.Boolean;
    out_$exception := out_$exception;
    goto anon132;

  anon129:
    out_$i10 := fixed.$modInt(out_i24, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    out_$l11 := out_$i10;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0 := out_$l12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1 := out_$l11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block35;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block35:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return:
    out_z4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto anon129$1;

  anon129$1:
    assert {:sourceloc "ImageMatcherWorker.java", 64, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0 := out_z4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block18;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block18:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return:
    out_z5 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto anon129$2;

  anon129$2:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call out_$r10, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call out_$r11, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := out_$r10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := out_$r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    out_$r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto anon129$3;

  anon129$3:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call out_$r13, out_$exception := fixed.java.lang.Boolean$valueOf$boolean(out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := out_z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto anon129$4;

  anon129$4:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto anon210_Then, anon210_Else;

  anon210_Else:
    assume {:partition} !(fixed.$heap[out_$r14, fixed.$type] <: fixed.java.lang.Boolean);
    call out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    out_$return := 0;
    out_$exception := out_$fakelocal_14;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon209_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon129;

  anon126:
    out_$i9 := fixed.$modInt(out_i25, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    out_$l12 := out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto anon209_Then, anon209_Else;

  anon209_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_13;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon208_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon126;

  anon123:
    out_$b8 := fixed.$intArrHeap[in_r1][out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    call out_i25, out_$exception := fixed.java.lang.Math$abs$int(out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto anon208_Then, anon208_Else;

  anon208_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_12;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon207_Then:
    assume {:partition} out_i23 < fixed.$arrSizeHeap[in_r1] && out_i23 >= 0;
    out_$exception := out_$exception;
    goto anon123;

  anon120:
    out_$b7 := fixed.$intArrHeap[in_r31][out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    call out_i24, out_$exception := fixed.java.lang.Math$abs$int(out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    goto anon207_Then, anon207_Else;

  anon207_Else:
    assume {:partition} !(out_i23 < fixed.$arrSizeHeap[in_r1] && out_i23 >= 0);
    call out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_11;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon206_Then:
    assume {:partition} out_i23 < fixed.$arrSizeHeap[in_r31] && out_i23 >= 0;
    out_$exception := out_$exception;
    goto anon120;

  anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto anon206_Then, anon206_Else;

  anon206_Else:
    assume {:partition} !(out_i23 < fixed.$arrSizeHeap[in_r31] && out_i23 >= 0);
    call out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_10;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon205_Else:
    assume {:partition} out_$i6 > out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon117;

  anon114:
    out_$i6 := fixed.$arrSizeHeap[in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto anon205_Then, anon205_Else;

  anon205_Then:
    assume {:partition} out_i23 >= out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon204_Then:
    assume {:partition} in_r1 != fixed.$null;
    out_$exception := out_$exception;
    goto anon114;

  anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto anon204_Then, anon204_Else;

  anon204_Else:
    assume {:partition} in_r1 == fixed.$null;
    call out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := 0;
    out_$exception := out_$fakelocal_9;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon203_Else:
    assume {:partition} out_$i5 > out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto anon111;

  anon108:
    out_$i5 := fixed.$arrSizeHeap[in_r31];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto anon203_Then, anon203_Else;

  anon203_Then:
    assume {:partition} out_i23 >= out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$fakelocal_12, out_$r14, out_$fakelocal_18, out_$fakelocal_14, out_$fakelocal_11, out_$fakelocal_13, out_$r11, out_$fakelocal_15, out_$fakelocal_10, out_$r21, out_$b8, out_$z6, out_$r15, out_$fakelocal_9, out_$fakelocal_21, out_$fakelocal_17, out_$i5, out_$i9, out_z5, out_$r17, out_$i10, out_$r13, out_z2, out_$fakelocal_8, out_$r12, out_$b13, out_$r16, out_$r20, out_$l12, out_$b7, out_$i6, out_i24, out_$r19, out_z4, out_i23, out_z3, out_$fakelocal_20, out_$l11, out_$r10, out_$b14, out_$b15, out_$r18, out_$r22, out_$fakelocal_16, out_$r23, out_i25, out_$fakelocal_19 := in_$return, in_$exception, in_$fakelocal_12, in_$r14, in_$fakelocal_18, in_$fakelocal_14, in_$fakelocal_11, in_$fakelocal_13, in_$r11, in_$fakelocal_15, in_$fakelocal_10, in_$r21, in_$b8, in_$z6, in_$r15, in_$fakelocal_9, in_$fakelocal_21, in_$fakelocal_17, in_$i5, in_$i9, in_z5, in_$r17, in_$i10, in_$r13, in_z2, in_$fakelocal_8, in_$r12, in_$b13, in_$r16, in_$r20, in_$l12, in_$b7, in_$i6, in_i24, in_$r19, in_z4, in_i23, in_z3, in_$fakelocal_20, in_$l11, in_$r10, in_$b14, in_$b15, in_$r18, in_$r22, in_$fakelocal_16, in_$r23, in_i25, in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon202_Then:
    assume {:partition} in_r31 != fixed.$null;
    out_$exception := out_$exception;
    goto anon108;

  anon215_Else:
    assume {:partition} out_z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon147;

  anon156_dummy:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return := out_$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception := out_$exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12 := out_$fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14 := out_$r14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18 := out_$fakelocal_18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14 := out_$fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11 := out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13 := out_$fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11 := out_$r11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15 := out_$fakelocal_15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10 := out_$fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21 := out_$r21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8 := out_$b8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6 := out_$z6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15 := out_$r15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9 := out_$fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1 := in_r1;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21 := out_$fakelocal_21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17 := out_$fakelocal_17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5 := out_$i5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9 := out_$i9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5 := out_z5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17 := out_$r17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10 := out_$i10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13 := out_$r13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2 := out_z2;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8 := out_$fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12 := out_$r12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13 := out_$b13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16 := out_$r16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31 := in_r31;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20 := out_$r20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12 := out_$l12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7 := out_$b7;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6 := out_$i6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24 := out_i24;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19 := out_$r19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4 := out_z4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23 := out_i23;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3 := out_z3;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20 := out_$fakelocal_20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11 := out_$l11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10 := out_$r10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14 := out_$b14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15 := out_$b15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18 := out_$r18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22 := out_$r22;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16 := out_$fakelocal_16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23 := out_$r23;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25 := out_i25;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19 := out_$fakelocal_19;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15]];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon153:
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$byteValue$(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon153;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon150:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Then:
    assume {:partition} fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Byte;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon150;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$valueOf$byte(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12$1;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12$1:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Else:
    assume {:partition} !(fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Byte);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon147:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6 := 0;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon144:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$valueOf$byte(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon144;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141:
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18;
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Then:
    assume {:partition} fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135:
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135$1;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135$1:
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Else:
    assume {:partition} !(fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14;
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Then:
    assume {:partition} fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 := fixed.$cmpInt(inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block35;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block35:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4 := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$1;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$1:
    assert {:sourceloc "ImageMatcherWorker.java", 64, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block18;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block18:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5 := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$2;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$2:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$3;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$3:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry:
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13;
    havoc inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then, inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block65;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block65:
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then:
    assume {:partition} inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63;

  inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14 := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$4;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$4:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Else:
    assume {:partition} !(fixed.$heap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon147;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return:
    out_$return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return;
    out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    out_$fakelocal_12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    out_$r14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14;
    out_$fakelocal_18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18;
    out_$fakelocal_14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    out_$fakelocal_13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    out_$r11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11;
    out_$fakelocal_15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15;
    out_$fakelocal_10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    out_$r21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21;
    out_$b8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8;
    out_$z6 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6;
    out_$r15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15;
    out_$fakelocal_9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    out_$fakelocal_21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21;
    out_$fakelocal_17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17;
    out_$i5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    out_$i9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    out_z5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    out_$r17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17;
    out_$i10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    out_$r13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13;
    out_z2 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2;
    out_$fakelocal_8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    out_$r12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12;
    out_$b13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13;
    out_$r16 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16;
    out_$r20 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20;
    out_$l12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12;
    out_$b7 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7;
    out_$i6 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    out_i24 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24;
    out_$r19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19;
    out_z4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    out_i23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    out_z3 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    out_$fakelocal_20 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20;
    out_$l11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11;
    out_$r10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10;
    out_$b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14;
    out_$b15 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15;
    out_$r18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18;
    out_$r22 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22;
    out_$fakelocal_16 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16;
    out_$r23 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23;
    out_i25 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25;
    out_$fakelocal_19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    goto anon156_dummy$1;

  anon156_dummy$1:
    return;

  exit:
    return;
}



implementation fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4(in_$return: int, 
    in_$exception: ref, 
    in_$b18: int, 
    in_r4: ref, 
    in_$i16: int, 
    in_r34: ref, 
    in_i22: int, 
    in_i21: int, 
    in_$i4: int, 
    in_i0: int, 
    in_$i17: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_$b18: int, 
    out_$i16: int, 
    out_i22: int, 
    out_i21: int, 
    out_$i4: int, 
    out_$i17: int)
{
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_$b18, out_$i16, out_i22, out_i21, out_$i4, out_$i17 := in_$return, in_$exception, in_$b18, in_$i16, in_i22, in_i21, in_$i4, in_$i17;
    goto block4;

  block4:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    out_$i4 := fixed.$mulInt(in_i0, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto anon194_Then, anon194_Else;

  anon194_Then:
    assume {:partition} out_i22 >= out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_$b18, out_$i16, out_i22, out_i21, out_$i4, out_$i17 := in_$return, in_$exception, in_$b18, in_$i16, in_i22, in_i21, in_$i4, in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r4 := fixed.$intArrHeap[in_r4][out_i21 := out_$b18]];
    assert {:sourceloc "ImageMatcherWorker.java", 45, -1, -1, -1} true;
    out_i21 := out_i21 + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    out_i22 := out_i22 + in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto anon93_dummy;

  anon197_Then:
    assume {:partition} out_i21 < fixed.$arrSizeHeap[in_r4] && out_i21 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon93;

  anon90:
    out_$i17 := fixed.$modInt(out_$i16, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    out_$b18 := out_$i17;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} !(out_i21 < fixed.$arrSizeHeap[in_r4] && out_i21 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    out_$return := 0;
    call out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return, out_$exception, out_$b18, out_$i16, out_i22, out_i21, out_$i4, out_$i17 := in_$return, in_$exception, in_$b18, in_$i16, in_i22, in_i21, in_$i4, in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon196_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon90;

  anon87:
    out_$i16 := fixed.$intArrHeap[in_r34][out_i22];
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    out_$return := 0;
    call out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return, out_$exception, out_$b18, out_$i16, out_i22, out_i21, out_$i4, out_$i17 := in_$return, in_$exception, in_$b18, in_$i16, in_i22, in_i21, in_$i4, in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon195_Then:
    assume {:partition} out_i22 < fixed.$arrSizeHeap[in_r34] && out_i22 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon87;

  anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} !(out_i22 < fixed.$arrSizeHeap[in_r34] && out_i22 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    out_$return := 0;
    call out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return, out_$exception, out_$b18, out_$i16, out_i22, out_i21, out_$i4, out_$i17 := in_$return, in_$exception, in_$b18, in_$i16, in_i22, in_i21, in_$i4, in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon194_Else:
    assume {:partition} out_$i4 > out_i22;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto anon84;

  anon93_dummy:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return := out_$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception := out_$exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18 := out_$b18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4 := in_r4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16 := out_$i16;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34 := in_r34;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22 := out_i22;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21 := out_i21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4 := out_$i4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0 := in_i0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17 := out_$i17;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4 := fixed.$mulInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, 
  128);
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18]];
    assert {:sourceloc "ImageMatcherWorker.java", 45, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
   + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
   + inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22];
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return:
    out_$return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return;
    out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception;
    out_$b18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18;
    out_$i16 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16;
    out_i22 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22;
    out_i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21;
    out_$i4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    out_$i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    goto anon93_dummy$1;

  anon93_dummy$1:
    return;

  exit:
    return;
}



axiom (forall x: int :: 
  { fixed.$intToBool(x): bool } 
  fixed.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { fixed.$refToBool(x): bool } 
  fixed.$refToBool(x): bool <==> (if x == fixed.$null then false else true));

axiom (forall x: bool :: 
  { fixed.$boolToInt(x): int } 
  fixed.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { fixed.$cmpReal(x, y): int } 
  fixed.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { fixed.$cmpInt(x, y): int } 
  fixed.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: fixed.$intToRef(index) != fixed.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> fixed.$intToRef(i1) == fixed.$intToRef(i2));

procedure {:prefix "unsafe"} unsafe.ImageMatcherWorker$$la$init$ra$$($this: ref) returns ($exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$stringSizeHeap;
  free ensures $exception
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_$exception($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));
  free ensures fixed.$objIndex
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$objIndex($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));
  free ensures fixed.$heap
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$heap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));
  free ensures fixed.$stringSizeHeap
   == _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$stringSizeHeap($this, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.lang.String$ImageMatcherWorker$errorcode263), 
    old(fixed.java.lang.StringBuffer$ImageMatcherWorker$error264), 
    old(fixed.boolean$ImageMatcherWorker$success0));



procedure {:prefix "unsafe"} unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);
  free ensures $exception == _uf_fixed.java.lang.Object$$la$init$ra$$_$exception($this);



procedure {:inline 1} unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap, fixed.$arrSizeHeap;
  free ensures $return
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures $exception
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$objIndex
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$heap
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$intArrHeap
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));
  free ensures fixed.$arrSizeHeap
   == _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap($in_parameter__0, 
    $in_parameter__1, 
    old(fixed.$heap), 
    old(fixed.$arrSizeHeap), 
    old(fixed.$stringSizeHeap), 
    old(fixed.$objIndex), 
    old(fixed.java.io.PrintStream$java.lang.System$out271), 
    old(fixed.$intArrHeap), 
    old(fixed.$intArrayType));



procedure {:prefix "unsafe"} unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9(in_$return: int, 
    in_$exception: ref, 
    in_z4: int, 
    in_i19: int, 
    in_$b8: int, 
    in_$i10: int, 
    in_i20: int, 
    in_$fakelocal_14: ref, 
    in_$b11: int, 
    in_$fakelocal_13: ref, 
    in_$fakelocal_12: ref, 
    in_$fakelocal_8: ref, 
    in_$i9: int, 
    in_i21: int, 
    in_$z3: int, 
    in_$i5: int, 
    in_$b7: int, 
    in_r19: ref, 
    in_$fakelocal_10: ref, 
    in_$i6: int, 
    in_r1: ref, 
    in_$z5: int, 
    in_$fakelocal_9: ref, 
    in_$fakelocal_11: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_z4: int, 
    out_i19: int, 
    out_$b8: int, 
    out_$i10: int, 
    out_i20: int, 
    out_$fakelocal_14: ref, 
    out_$b11: int, 
    out_$fakelocal_13: ref, 
    out_$fakelocal_12: ref, 
    out_$fakelocal_8: ref, 
    out_$i9: int, 
    out_i21: int, 
    out_$z3: int, 
    out_$i5: int, 
    out_$b7: int, 
    out_$fakelocal_10: ref, 
    out_$i6: int, 
    out_$z5: int, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_11: ref);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap;



procedure {:prefix "unsafe"} unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4(in_$return: int, 
    in_$exception: ref, 
    in_i18: int, 
    in_i0: int, 
    in_r2: ref, 
    in_i17: int, 
    in_r6: ref, 
    in_$b14: int, 
    in_$i12: int, 
    in_$i4: int, 
    in_$i13: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_i18: int, 
    out_i17: int, 
    out_$b14: int, 
    out_$i12: int, 
    out_$i4: int, 
    out_$i13: int);
  modifies fixed.$intArrHeap, fixed.$objIndex, fixed.$heap;



implementation unsafe.ImageMatcherWorker$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var $fakelocal_0: ref;
  var $r1: ref;
  var $fakelocal_1: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} fixed.$heap[$this, fixed.$type] <: fixed.ImageMatcherWorker;
    assume {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} $this != fixed.$null;
    $exception := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "ImageMatcherWorker.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := fixed.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "ImageMatcherWorker.java", 12, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.java.lang.String);
    fixed.$stringSizeHeap := fixed.$stringSizeHeap[$fakelocal_0 := 0];
    fixed.$heap := fixed.$heap[r0, fixed.java.lang.String$ImageMatcherWorker$errorcode263 := $fakelocal_0];
    assert {:sourceloc "ImageMatcherWorker.java", 13, -1, -1, -1} true;
    call $fakelocal_1 := fixed.$new(fixed.java.lang.StringBuffer);
    $r1 := $fakelocal_1;
    assert {:sourceloc "ImageMatcherWorker.java", 13, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuffer$$la$init$ra$$($r1);
    assert {:sourceloc "ImageMatcherWorker.java", 13, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.java.lang.StringBuffer$ImageMatcherWorker$error264 := $r1];
    assert {:sourceloc "ImageMatcherWorker.java", 14, -1, -1, -1} true;
    fixed.$heap := fixed.$heap[r0, fixed.boolean$ImageMatcherWorker$success0 := 0];
    assert {:sourceloc "ImageMatcherWorker.java", 14, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation {:inline 1} unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: int, $exception: ref)
{
  var z4: int;
  var $fakelocal_6: ref;
  var i19: int;
  var $r18: ref;
  var $b8: int;
  var $i10: int;
  var $fakelocal_1: ref;
  var i20: int;
  var r4: ref;
  var z2: int;
  var $fakelocal_14: ref;
  var $r13: ref;
  var $fakelocal_4: ref;
  var $b11: int;
  var $r16: ref;
  var i18: int;
  var $r14: ref;
  var $r10: ref;
  var $r15: ref;
  var r5: ref;
  var i0: int;
  var r2: ref;
  var $i1: int;
  var $fakelocal_13: ref;
  var i17: int;
  var $fakelocal_12: ref;
  var $fakelocal_8: ref;
  var r6: ref;
  var r0: ref;
  var $r8: ref;
  var $r12: ref;
  var $i9: int;
  var $r11: ref;
  var i21: int;
  var $b14: int;
  var r3: ref;
  var $i3: int;
  var $z3: int;
  var $i5: int;
  var $fakelocal_3: ref;
  var $fakelocal_5: ref;
  var $fakelocal_7: ref;
  var r20: ref;
  var $r17: ref;
  var $b7: int;
  var $i2: int;
  var $r7: ref;
  var $i12: int;
  var r19: ref;
  var z1: int;
  var $fakelocal_10: ref;
  var $fakelocal_0: ref;
  var $fakelocal_2: ref;
  var $i6: int;
  var i16: int;
  var r1: ref;
  var $z5: int;
  var $fakelocal_9: ref;
  var r21: ref;
  var i15: int;
  var r22: ref;
  var $i4: int;
  var $i13: int;
  var $fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap: $heap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap: $heap_type;

  anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    $exception := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ImageMatcherWorker.java", 17, -1, -1, -1} true;
    r19 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 19, -1, -1, -1} true;
    z1 := 0;
    goto block2;

  block2:
    assert {:sourceloc "ImageMatcherWorker.java", 22, -1, -1, -1} true;
    call $fakelocal_0 := fixed.$new(fixed.ScalrApplyTest);
    $r7 := $fakelocal_0;
    assert {:sourceloc "ImageMatcherWorker.java", 22, -1, -1, -1} true;
    call $exception := fixed.ScalrApplyTest$$la$init$ra$$($r7);
    goto anon142_Then, anon142_Else;

  anon142_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon4;

  anon4:
    assert {:sourceloc "ImageMatcherWorker.java", 22, -1, -1, -1} true;
    r20 := $r7;
    assert {:sourceloc "ImageMatcherWorker.java", 23, -1, -1, -1} true;
    call $exception := fixed.ScalrApplyTest$setup$byte$lp$$rp$(r0);
    goto anon144_Then, anon144_Else;

  anon144_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon8;

  anon8:
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    call r21, $exception := fixed.ScalrApplyTest$testApply1$(r20);
    goto anon146_Then, anon146_Else;

  anon146_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon12;

  anon12:
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    goto anon148_Then, anon148_Else;

  anon148_Else:
    assume {:partition} r21 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto block3;

  block3:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    assume fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Throwable;
    $r12 := $exception;
    assert {:sourceloc "ImageMatcherWorker.java", 48, -1, -1, -1} true;
    r22 := $r12;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    $r14 := fixed.java.io.PrintStream$java.lang.System$out271;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call $fakelocal_4 := fixed.$new(fixed.java.lang.StringBuilder);
    $r13 := $fakelocal_4;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call $exception := fixed.java.lang.StringBuilder$$la$init$ra$$($r13);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call $r15, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r13, fixed.$StringConst0);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call $r16, $exception := fixed.java.lang.Throwable$getMessage$(r22);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    goto anon183_Then, anon183_Else;

  anon183_Else:
    assume {:partition} $r15 == fixed.$null;
    call $fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_5;
    return;

  anon183_Then:
    assume {:partition} $r15 != fixed.$null;
    $exception := $exception;
    goto anon96;

  anon96:
    call $r17, $exception := fixed.java.lang.StringBuilder$append$java.lang.String($r15, $r16);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    goto anon184_Then, anon184_Else;

  anon184_Else:
    assume {:partition} $r17 == fixed.$null;
    call $fakelocal_6 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_6;
    return;

  anon184_Then:
    assume {:partition} $r17 != fixed.$null;
    $exception := $exception;
    goto anon99;

  anon99:
    call $r18, $exception := fixed.java.lang.StringBuilder$toString$($r17);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    goto anon185_Then, anon185_Else;

  anon185_Else:
    assume {:partition} $r14 == fixed.$null;
    call $fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    $return := 0;
    $exception := $fakelocal_7;
    return;

  anon185_Then:
    assume {:partition} $r14 != fixed.$null;
    $exception := $exception;
    goto anon102;

  anon102:
    call $exception := fixed.java.io.PrintStream$println$java.lang.String($r14, $r18);
    goto block7;

  block7:
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} true;
    goto anon186_Then, anon186_Else;

  anon186_Else:
    assume {:partition} z1 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} {:comment "elseblock"} true;
    goto anon105;

  anon105:
    assert {:sourceloc "ImageMatcherWorker.java", 53, -1, -1, -1} true;
    z2 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    i19 := 0;
    goto block9;

  block9:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return := $return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception := $exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4 := z4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19 := i19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8 := $b8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10 := $i10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20 := i20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14 := $fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11 := $b11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13 := $fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12 := $fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8 := $fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9 := $i9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21 := i21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3 := $z3;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5 := $i5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7 := $b7;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19 := r19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10 := $fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6 := $i6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1 := r1;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5 := $z5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9 := $fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11 := $fakelocal_11;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11]];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block14:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5 := 0;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block14;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block13:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block13;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3 := 0;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10
   != inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10
   == inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return:
    $return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return;
    $exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    z4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    i19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    $b8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8;
    $i10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    i20 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20;
    $fakelocal_14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    $b11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11;
    $fakelocal_13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    $fakelocal_12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    $fakelocal_8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    $i9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21;
    $z3 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3;
    $i5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    $b7 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7;
    $fakelocal_10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    $i6 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    $z5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5;
    $fakelocal_9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    $fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    goto block9$1;

  block9$1:
    goto block9_last;

  anon187_Else:
    assume {:partition} r19 == fixed.$null;
    call $fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_8;
    return;

  anon187_Then:
    assume {:partition} r19 != fixed.$null;
    $exception := $exception;
    goto anon108;

  anon108:
    $i5 := fixed.$arrSizeHeap[r19];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon188_Then, anon188_Else;

  anon188_Else:
    assume {:partition} $i5 > i19;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto anon111;

  anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} r1 == fixed.$null;
    call $fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    $return := 0;
    $exception := $fakelocal_9;
    return;

  anon189_Then:
    assume {:partition} r1 != fixed.$null;
    $exception := $exception;
    goto anon114;

  anon114:
    $i6 := fixed.$arrSizeHeap[r1];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon190_Then, anon190_Else;

  anon190_Else:
    assume {:partition} $i6 > i19;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon117;

  anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} !(i19 < fixed.$arrSizeHeap[r19] && i19 >= 0);
    call $fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_10;
    return;

  anon191_Then:
    assume {:partition} i19 < fixed.$arrSizeHeap[r19] && i19 >= 0;
    $exception := $exception;
    goto anon120;

  anon120:
    $b7 := fixed.$intArrHeap[r19][i19];
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    call i20, $exception := fixed.java.lang.Math$abs$int($b7);
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} !(i19 < fixed.$arrSizeHeap[r1] && i19 >= 0);
    call $fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_11;
    return;

  anon192_Then:
    assume {:partition} i19 < fixed.$arrSizeHeap[r1] && i19 >= 0;
    $exception := $exception;
    goto anon123;

  anon123:
    $b8 := fixed.$intArrHeap[r1][i19];
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    call i21, $exception := fixed.java.lang.Math$abs$int($b8);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_12;
    return;

  anon193_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon126;

  anon126:
    $i10 := fixed.$modInt(i21, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    $return := 0;
    $exception := $fakelocal_13;
    return;

  anon194_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon129;

  anon129:
    $i9 := fixed.$modInt(i20, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto anon195_Then, anon195_Else;

  anon195_Else:
    assume {:partition} $i10 == $i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon132;

  anon132:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    $z3 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto block12;

  block12:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    z4 := $z3;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon135;

  anon135:
    assert {:sourceloc "ImageMatcherWorker.java", 59, -1, -1, -1} true;
    z2 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto block10;

  block10:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto block16;

  block16:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    $return := z2;
    goto block17;

  block17:
    return;

  anon196_Then:
    assume {:partition} z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block13;

  block13:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto anon197_Then, anon197_Else;

  anon197_Else:
    assume {:partition} z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon138;

  anon138:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    $z5 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto block15;

  block15:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    $b11 := $z5;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:partition} !(i19 < fixed.$arrSizeHeap[r19] && i19 >= 0);
    call $fakelocal_14 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    $return := 0;
    $exception := $fakelocal_14;
    return;

  anon198_Then:
    assume {:partition} i19 < fixed.$arrSizeHeap[r19] && i19 >= 0;
    $exception := $exception;
    goto anon141;

  anon141:
    fixed.$intArrHeap := fixed.$intArrHeap[r19 := fixed.$intArrHeap[r19][i19 := $b11]];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    i19 := i19 + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon141_dummy;

  anon197_Then:
    assume {:partition} z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block14;

  block14:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    $z5 := 0;
    goto block15;

  anon195_Then:
    assume {:partition} $i10 != $i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block11;

  block11:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    $z3 := 0;
    goto block12;

  anon190_Then:
    assume {:partition} i19 >= $i6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block10;

  anon188_Then:
    assume {:partition} i19 >= $i5;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto block10;

  anon186_Then:
    assume {:partition} z1 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} {:comment "thenblock"} true;
    goto block8;

  block8:
    assert {:sourceloc "ImageMatcherWorker.java", 68, -1, -1, -1} true;
    z2 := 0;
    goto block16;

  anon148_Then:
    assume {:partition} r21 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    goto anon15;

  anon15:
    call i15, $exception := fixed.java.awt.image.BufferedImage$getWidth$(r21);
    goto anon149_Then, anon149_Else;

  anon149_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon19;

  anon19:
    assert {:sourceloc "ImageMatcherWorker.java", 26, -1, -1, -1} true;
    call i16, $exception := fixed.java.awt.image.BufferedImage$getHeight$(r21);
    goto anon151_Then, anon151_Else;

  anon151_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon23;

  anon23:
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto anon153_Then, anon153_Else;

  anon153_Else:
    assume {:partition} !(fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType);
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ClassCastException);
    goto block3;

  anon153_Then:
    assume {:partition} fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto anon26;

  anon26:
    $r8 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    call r2, $exception := fixed.java.awt.image.BufferedImage$getRGB$int_int_int_int_int$lp$$rp$_int_int(r21, 0, 0, i15, i16, $r8, 0, i15);
    goto anon154_Then, anon154_Else;

  anon154_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon30;

  anon30:
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    goto anon156_Then, anon156_Else;

  anon156_Else:
    assume {:partition} r2 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto block3;

  anon156_Then:
    assume {:partition} r2 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    goto anon33;

  anon33:
    $i1 := fixed.$arrSizeHeap[r2];
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    $i2 := fixed.$mulInt($i1, 4);
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    call r3, $exception := fixed.java.nio.ByteBuffer$allocate$int($i2);
    goto anon157_Then, anon157_Else;

  anon157_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon37;

  anon37:
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto anon159_Then, anon159_Else;

  anon159_Else:
    assume {:partition} r3 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto block3;

  anon159_Then:
    assume {:partition} r3 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto anon40;

  anon40:
    call r4, $exception := fixed.java.nio.ByteBuffer$asIntBuffer$(r3);
    goto anon160_Then, anon160_Else;

  anon160_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon44;

  anon44:
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto anon162_Then, anon162_Else;

  anon162_Else:
    assume {:partition} r4 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto block3;

  anon162_Then:
    assume {:partition} r4 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto anon47;

  anon47:
    call $fakelocal_1, $exception := fixed.java.nio.IntBuffer$put$int$lp$$rp$(r4, r2);
    goto anon163_Then, anon163_Else;

  anon163_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon51;

  anon51:
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    call $fakelocal_2 := fixed.$new(fixed.java.io.ByteArrayOutputStream);
    $r10 := $fakelocal_2;
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    call $exception := fixed.java.io.ByteArrayOutputStream$$la$init$ra$$($r10);
    goto anon165_Then, anon165_Else;

  anon165_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon55;

  anon55:
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    r5 := $r10;
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    call $r11, $exception := fixed.java.nio.ByteBuffer$array$(r3);
    goto anon167_Then, anon167_Else;

  anon167_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon59;

  anon59:
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    call $exception := fixed.java.io.OutputStream$write$byte$lp$$rp$(r5, $r11);
    goto anon169_Then, anon169_Else;

  anon169_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon63;

  anon63:
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    call $exception := fixed.java.io.OutputStream$flush$(r5);
    goto anon171_Then, anon171_Else;

  anon171_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon67;

  anon67:
    assert {:sourceloc "ImageMatcherWorker.java", 34, -1, -1, -1} true;
    call $exception := fixed.java.io.ByteArrayOutputStream$close$(r5);
    goto anon173_Then, anon173_Else;

  anon173_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon71;

  anon71:
    assert {:sourceloc "ImageMatcherWorker.java", 36, -1, -1, -1} true;
    call $exception := fixed.ScalrApplyTest$tearDown$();
    goto anon175_Then, anon175_Else;

  anon175_Else:
    assume {:partition} $exception == fixed.$null;
    goto anon75;

  anon75:
    assert {:sourceloc "ImageMatcherWorker.java", 37, -1, -1, -1} true;
    call $fakelocal_3 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[$fakelocal_3 := 128];
    r6 := $fakelocal_3;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto anon177_Then, anon177_Else;

  anon177_Else:
    assume {:partition} r2 == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto block3;

  anon177_Then:
    assume {:partition} r2 != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto anon78;

  anon78:
    $i3 := fixed.$arrSizeHeap[r2];
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto anon178_Then, anon178_Else;

  anon178_Else:
    assume {:partition} 128 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto block3;

  anon178_Then:
    assume {:partition} 128 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto anon81;

  anon81:
    i0 := fixed.$divInt($i3, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 39, -1, -1, -1} true;
    i17 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    i18 := 0;
    goto block4;

  block4:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return := $return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception := $exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18 := i18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0 := i0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2 := r2;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17 := i17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6 := r6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14 := $b14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12 := $i12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4 := $i4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13 := $i13;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4 := fixed.$mulInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, 
  128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14]];
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
   + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
   + inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18];
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return:
    $return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return;
    $exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception;
    i18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18;
    i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17;
    $b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14;
    $i12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12;
    $i4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    $i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    goto block4$1;

  block4$1:
    goto block4_last;

  anon179_Else:
    assume {:partition} $i4 > i18;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto anon84;

  anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} !(i18 < fixed.$arrSizeHeap[r2] && i18 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto block3;

  anon180_Then:
    assume {:partition} i18 < fixed.$arrSizeHeap[r2] && i18 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon87;

  anon87:
    $i12 := fixed.$intArrHeap[r2][i18];
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto block3;

  anon181_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon90;

  anon90:
    $i13 := fixed.$modInt($i12, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    $b14 := $i13;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} !(i17 < fixed.$arrSizeHeap[r6] && i17 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    $return := 0;
    call $exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto block3;

  anon182_Then:
    assume {:partition} i17 < fixed.$arrSizeHeap[r6] && i17 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon93;

  anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[r6 := fixed.$intArrHeap[r6][i17 := $b14]];
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    i17 := i17 + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    i18 := i18 + i0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto anon93_dummy;

  anon179_Then:
    assume {:partition} i18 >= $i4;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto block5;

  block5:
    assert {:sourceloc "ImageMatcherWorker.java", 46, -1, -1, -1} true;
    r19 := r6;
    assert {:sourceloc "ImageMatcherWorker.java", 47, -1, -1, -1} true;
    z1 := 1;
    goto block6;

  block6:
    assert {:sourceloc "ImageMatcherWorker.java", 50, -1, -1, -1} true;
    goto block7;

  anon175_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon176_Then, anon176_Else;

  anon176_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon75;

  anon176_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon173_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon174_Then, anon174_Else;

  anon174_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException);
    assert {:clone} true;
    goto anon71;

  anon174_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException;
    $return := 0;
    goto block3;

  anon171_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon172_Then, anon172_Else;

  anon172_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException);
    assert {:clone} true;
    goto anon67;

  anon172_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException;
    $return := 0;
    goto block3;

  anon169_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon170_Then, anon170_Else;

  anon170_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException);
    assert {:clone} true;
    goto anon63;

  anon170_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.io.IOException;
    $return := 0;
    goto block3;

  anon167_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon168_Then, anon168_Else;

  anon168_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon59;

  anon168_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon165_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon166_Then, anon166_Else;

  anon166_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon55;

  anon166_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    $r10 := fixed.$null;
    goto block3;

  anon163_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon164_Then, anon164_Else;

  anon164_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon51;

  anon164_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon160_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon161_Then, anon161_Else;

  anon161_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon44;

  anon161_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon157_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon158_Then, anon158_Else;

  anon158_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon37;

  anon158_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon154_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon155_Then, anon155_Else;

  anon155_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon30;

  anon155_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon151_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon152_Then, anon152_Else;

  anon152_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon23;

  anon152_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon149_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon150_Then, anon150_Else;

  anon150_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon19;

  anon150_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon146_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon147_Then, anon147_Else;

  anon147_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon12;

  anon147_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon144_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon145_Then, anon145_Else;

  anon145_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon8;

  anon145_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto block3;

  anon142_Then:
    assume {:partition} $exception != fixed.$null;
    goto anon143_Then, anon143_Else;

  anon143_Else:
    assume {:partition} !(fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto anon4;

  anon143_Then:
    assume {:partition} fixed.$heap[$exception, fixed.$type] <: fixed.java.lang.Exception;
    assert {:clone} true;
    $r7 := fixed.$null;
    goto block3;

  anon141_dummy:
    assume false;
    return;

  block9_last:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon187_Then, anon187_Else;

  anon93_dummy:
    assume false;
    return;

  block4_last:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    $i4 := fixed.$mulInt(i0, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto anon179_Then, anon179_Else;
}



implementation unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := fixed.$null;
    return;
}



implementation unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9(in_$return: int, 
    in_$exception: ref, 
    in_z4: int, 
    in_i19: int, 
    in_$b8: int, 
    in_$i10: int, 
    in_i20: int, 
    in_$fakelocal_14: ref, 
    in_$b11: int, 
    in_$fakelocal_13: ref, 
    in_$fakelocal_12: ref, 
    in_$fakelocal_8: ref, 
    in_$i9: int, 
    in_i21: int, 
    in_$z3: int, 
    in_$i5: int, 
    in_$b7: int, 
    in_r19: ref, 
    in_$fakelocal_10: ref, 
    in_$i6: int, 
    in_r1: ref, 
    in_$z5: int, 
    in_$fakelocal_9: ref, 
    in_$fakelocal_11: ref)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_z4: int, 
    out_i19: int, 
    out_$b8: int, 
    out_$i10: int, 
    out_i20: int, 
    out_$fakelocal_14: ref, 
    out_$b11: int, 
    out_$fakelocal_13: ref, 
    out_$fakelocal_12: ref, 
    out_$fakelocal_8: ref, 
    out_$i9: int, 
    out_i21: int, 
    out_$z3: int, 
    out_$i5: int, 
    out_$b7: int, 
    out_$fakelocal_10: ref, 
    out_$i6: int, 
    out_$z5: int, 
    out_$fakelocal_9: ref, 
    out_$fakelocal_11: ref)
{
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    goto block9;

  block9:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon187_Then, anon187_Else;

  anon187_Else:
    assume {:partition} in_r19 == fixed.$null;
    call out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := 0;
    out_$exception := out_$fakelocal_8;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon141:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r19 := fixed.$intArrHeap[in_r19][out_i19 := out_$b11]];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    out_i19 := out_i19 + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon141_dummy;

  anon198_Then:
    assume {:partition} out_i19 < fixed.$arrSizeHeap[in_r19] && out_i19 >= 0;
    out_$exception := out_$exception;
    goto anon141;

  block15:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    out_$b11 := out_$z5;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto anon198_Then, anon198_Else;

  anon198_Else:
    assume {:partition} !(out_i19 < fixed.$arrSizeHeap[in_r19] && out_i19 >= 0);
    call out_$fakelocal_14 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_14;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon138:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    out_$z5 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto block15;

  block14:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    out_$z5 := 0;
    goto block15;

  anon197_Then:
    assume {:partition} out_z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block14;

  block13:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto anon197_Then, anon197_Else;

  anon196_Then:
    assume {:partition} out_z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block13;

  block12:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    out_z4 := out_$z3;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto anon196_Then, anon196_Else;

  anon196_Else:
    assume {:partition} out_z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon132:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    out_$z3 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto block12;

  block11:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    out_$z3 := 0;
    goto block12;

  anon195_Then:
    assume {:partition} out_$i10 != out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto block11;

  anon129:
    out_$i9 := fixed.$modInt(out_i20, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto anon195_Then, anon195_Else;

  anon194_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon129;

  anon126:
    out_$i10 := fixed.$modInt(out_i21, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto anon194_Then, anon194_Else;

  anon194_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_13;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon193_Then:
    assume {:partition} 2 != 0;
    out_$exception := out_$exception;
    goto anon126;

  anon123:
    out_$b8 := fixed.$intArrHeap[in_r1][out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    call out_i21, out_$exception := fixed.java.lang.Math$abs$int(out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto anon193_Then, anon193_Else;

  anon193_Else:
    assume {:partition} 2 == 0;
    call out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return := 0;
    out_$exception := out_$fakelocal_12;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon192_Then:
    assume {:partition} out_i19 < fixed.$arrSizeHeap[in_r1] && out_i19 >= 0;
    out_$exception := out_$exception;
    goto anon123;

  anon120:
    out_$b7 := fixed.$intArrHeap[in_r19][out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    call out_i20, out_$exception := fixed.java.lang.Math$abs$int(out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    goto anon192_Then, anon192_Else;

  anon192_Else:
    assume {:partition} !(out_i19 < fixed.$arrSizeHeap[in_r1] && out_i19 >= 0);
    call out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_11;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon191_Then:
    assume {:partition} out_i19 < fixed.$arrSizeHeap[in_r19] && out_i19 >= 0;
    out_$exception := out_$exception;
    goto anon120;

  anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    goto anon191_Then, anon191_Else;

  anon191_Else:
    assume {:partition} !(out_i19 < fixed.$arrSizeHeap[in_r19] && out_i19 >= 0);
    call out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return := 0;
    out_$exception := out_$fakelocal_10;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon190_Else:
    assume {:partition} out_$i6 > out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon117;

  anon114:
    out_$i6 := fixed.$arrSizeHeap[in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon190_Then, anon190_Else;

  anon190_Then:
    assume {:partition} out_i19 >= out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon189_Then:
    assume {:partition} in_r1 != fixed.$null;
    out_$exception := out_$exception;
    goto anon114;

  anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto anon189_Then, anon189_Else;

  anon189_Else:
    assume {:partition} in_r1 == fixed.$null;
    call out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    out_$return := 0;
    out_$exception := out_$fakelocal_9;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon188_Else:
    assume {:partition} out_$i5 > out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto anon111;

  anon108:
    out_$i5 := fixed.$arrSizeHeap[in_r19];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto anon188_Then, anon188_Else;

  anon188_Then:
    assume {:partition} out_i19 >= out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_z4, out_i19, out_$b8, out_$i10, out_i20, out_$fakelocal_14, out_$b11, out_$fakelocal_13, out_$fakelocal_12, out_$fakelocal_8, out_$i9, out_i21, out_$z3, out_$i5, out_$b7, out_$fakelocal_10, out_$i6, out_$z5, out_$fakelocal_9, out_$fakelocal_11 := in_$return, in_$exception, in_z4, in_i19, in_$b8, in_$i10, in_i20, in_$fakelocal_14, in_$b11, in_$fakelocal_13, in_$fakelocal_12, in_$fakelocal_8, in_$i9, in_i21, in_$z3, in_$i5, in_$b7, in_$fakelocal_10, in_$i6, in_$z5, in_$fakelocal_9, in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon187_Then:
    assume {:partition} in_r19 != fixed.$null;
    out_$exception := out_$exception;
    goto anon108;

  anon195_Else:
    assume {:partition} out_$i10 == out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon132;

  anon197_Else:
    assume {:partition} out_z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto anon138;

  anon141_dummy:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return := out_$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception := out_$exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4 := out_z4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19 := out_i19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8 := out_$b8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10 := out_$i10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20 := out_i20;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14 := out_$fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11 := out_$b11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13 := out_$fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12 := out_$fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8 := out_$fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9 := out_$i9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21 := out_i21;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3 := out_$z3;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5 := out_$i5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7 := out_$b7;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19 := in_r19;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10 := out_$fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6 := out_$i6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1 := in_r1;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5 := out_$z5;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9 := out_$fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11 := out_$fakelocal_11;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11]];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block14:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5 := 0;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block14;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block13:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block13;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3 := 0;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10
   != inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Then:
    assume {:partition} 2 != 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Else:
    assume {:partition} 2 == 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   == fixed.$null;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5 := fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19
   != fixed.$null;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10
   == inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return:
    out_$return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return;
    out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    out_z4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    out_i19 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    out_$b8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8;
    out_$i10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    out_i20 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20;
    out_$fakelocal_14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    out_$b11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11;
    out_$fakelocal_13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    out_$fakelocal_12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    out_$fakelocal_8 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    out_$i9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    out_i21 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21;
    out_$z3 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3;
    out_$i5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    out_$b7 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7;
    out_$fakelocal_10 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    out_$i6 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    out_$z5 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5;
    out_$fakelocal_9 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    out_$fakelocal_11 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    goto anon141_dummy$1;

  anon141_dummy$1:
    return;

  exit:
    return;
}



implementation unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4(in_$return: int, 
    in_$exception: ref, 
    in_i18: int, 
    in_i0: int, 
    in_r2: ref, 
    in_i17: int, 
    in_r6: ref, 
    in_$b14: int, 
    in_$i12: int, 
    in_$i4: int, 
    in_$i13: int)
   returns (out_$return: int, 
    out_$exception: ref, 
    out_i18: int, 
    out_i17: int, 
    out_$b14: int, 
    out_$i12: int, 
    out_$i4: int, 
    out_$i13: int)
{
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception: ref;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap: intArrHeap_type;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex: int;
  var inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap: $heap_type;

  entry:
    out_$return, out_$exception, out_i18, out_i17, out_$b14, out_$i12, out_$i4, out_$i13 := in_$return, in_$exception, in_i18, in_i17, in_$b14, in_$i12, in_$i4, in_$i13;
    goto block4;

  block4:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    out_$i4 := fixed.$mulInt(in_i0, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto anon179_Then, anon179_Else;

  anon179_Then:
    assume {:partition} out_i18 >= out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    out_$return, out_$exception, out_i18, out_i17, out_$b14, out_$i12, out_$i4, out_$i13 := in_$return, in_$exception, in_i18, in_i17, in_$b14, in_$i12, in_$i4, in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[in_r6 := fixed.$intArrHeap[in_r6][out_i17 := out_$b14]];
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    out_i17 := out_i17 + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    out_i18 := out_i18 + in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto anon93_dummy;

  anon182_Then:
    assume {:partition} out_i17 < fixed.$arrSizeHeap[in_r6] && out_i17 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon93;

  anon90:
    out_$i13 := fixed.$modInt(out_$i12, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    out_$b14 := out_$i13;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon182_Then, anon182_Else;

  anon182_Else:
    assume {:partition} !(out_i17 < fixed.$arrSizeHeap[in_r6] && out_i17 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    out_$return := 0;
    call out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return, out_$exception, out_i18, out_i17, out_$b14, out_$i12, out_$i4, out_$i13 := in_$return, in_$exception, in_i18, in_i17, in_$b14, in_$i12, in_$i4, in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon181_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon90;

  anon87:
    out_$i12 := fixed.$intArrHeap[in_r2][out_i18];
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon181_Then, anon181_Else;

  anon181_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    out_$return := 0;
    call out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    out_$return, out_$exception, out_i18, out_i17, out_$b14, out_$i12, out_$i4, out_$i13 := in_$return, in_$exception, in_i18, in_i17, in_$b14, in_$i12, in_$i4, in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon180_Then:
    assume {:partition} out_i18 < fixed.$arrSizeHeap[in_r2] && out_i18 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon87;

  anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto anon180_Then, anon180_Else;

  anon180_Else:
    assume {:partition} !(out_i18 < fixed.$arrSizeHeap[in_r2] && out_i18 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    out_$return := 0;
    call out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    out_$return, out_$exception, out_i18, out_i17, out_$b14, out_$i12, out_$i4, out_$i13 := in_$return, in_$exception, in_i18, in_i17, in_$b14, in_$i12, in_$i4, in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := old(fixed.$intArrHeap), old(fixed.$objIndex), old(fixed.$heap);
    return;

  anon179_Else:
    assume {:partition} out_$i4 > out_i18;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto anon84;

  anon93_dummy:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return := out_$return;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception := out_$exception;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18 := out_i18;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0 := in_i0;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2 := in_r2;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17 := out_i17;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6 := in_r6;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14 := out_$b14;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12 := out_$i12;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4 := out_$i4;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13 := out_$i13;
    havoc inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap := fixed.$intArrHeap;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex := fixed.$objIndex;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap := fixed.$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4 := fixed.$mulInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, 
  128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
   >= inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14]];
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
   + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
   + inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := fixed.$modInt(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87:
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12 := fixed.$intArrHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2][inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18];
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Then:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Then, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Else;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Else:
    assume {:partition} !(inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     < fixed.$arrSizeHeap[inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2]
   && inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Else:
    assume {:partition} inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4
   > inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy:
    assume false;
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$exit:
    goto inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return:
    out_$return := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return;
    out_$exception := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception;
    out_i18 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18;
    out_i17 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17;
    out_$b14 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14;
    out_$i12 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12;
    out_$i4 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    out_$i13 := inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    goto anon93_dummy$1;

  anon93_dummy$1:
    return;

  exit:
    return;
}



type ref;

type javaType;

type Field _;

type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;

type boolArrHeap_type = [ref][int]bool;

type refArrHeap_type = [ref][int]ref;

type realArrHeap_type = [ref][int]int;

type intArrHeap_type = [ref][int]int;

function _uf_fixed.ImageMatcherWorker$$la$init$ra$$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : ref;

function _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : int;

function _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : $heap_type;

function _uf_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$stringSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : [ref]int;

function _uf_unsafe.ImageMatcherWorker$$la$init$ra$$_$exception(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : ref;

function _uf_unsafe.ImageMatcherWorker$$la$init$ra$$_fixed.$objIndex(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : int;

function _uf_unsafe.ImageMatcherWorker$$la$init$ra$$_fixed.$heap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : $heap_type;

function _uf_unsafe.ImageMatcherWorker$$la$init$ra$$_fixed.$stringSizeHeap(arg_0: ref, 
    arg_1: $heap_type, 
    arg_2: [ref]int, 
    arg_3: [ref]int, 
    arg_4: int, 
    arg_5: Field ref, 
    arg_6: Field ref, 
    arg_7: Field int)
   : [ref]int;

var Output_of_unsafe.ImageMatcherWorker$$la$init$ra$$_$exception: ref;

var Output_of_fixed.ImageMatcherWorker$$la$init$ra$$_$exception: ref;

var Output_of_unsafe.ImageMatcherWorker$$la$init$ra$$_fixed.$objIndex: int;

var Output_of_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$objIndex: int;

var Output_of_unsafe.ImageMatcherWorker$$la$init$ra$$_fixed.$heap: $heap_type;

var Output_of_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$heap: $heap_type;

var Output_of_unsafe.ImageMatcherWorker$$la$init$ra$$_fixed.$stringSizeHeap: [ref]int;

var Output_of_fixed.ImageMatcherWorker$$la$init$ra$$_fixed.$stringSizeHeap: [ref]int;

function _uf_fixed.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_unsafe.java.lang.Object$$la$init$ra$$_$exception(arg_0: ref) : ref;

function _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : int;

function _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : ref;

function _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : int;

function _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : $heap_type;

function _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : intArrHeap_type;

function _uf_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : [ref]int;

function _uf_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : int;

function _uf_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : ref;

function _uf_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : int;

function _uf_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : $heap_type;

function _uf_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : intArrHeap_type;

function _uf_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap(arg_0: ref, 
    arg_1: ref, 
    arg_2: $heap_type, 
    arg_3: [ref]int, 
    arg_4: [ref]int, 
    arg_5: int, 
    arg_6: ref, 
    arg_7: intArrHeap_type, 
    arg_8: javaType)
   : [ref]int;

var Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return: int;

var Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return: int;

var Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception: ref;

var Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception: ref;

var Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex: int;

var Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex: int;

var Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap: $heap_type;

var Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap: $heap_type;

var Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap: intArrHeap_type;

var Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap: intArrHeap_type;

var Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap: [ref]int;

var Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap: [ref]int;

procedure PROC_.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_EQ_unsafe__xx__fixed($in_parameter__0: ref, $in_parameter__1: ref)
   returns (AA_TEMP80: bool, 
    AA_TEMP81: bool, 
    AA_TEMP82: bool, 
    AA_TEMP83: bool, 
    AA_TEMP84: bool, 
    AA_TEMP85: bool);
  modifies fixed.$objIndex, fixed.$heap, fixed.$intArrHeap, fixed.$arrSizeHeap, Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return, Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return, Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception, Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception, Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex, Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex, Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap, Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap, Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap, Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap, Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap, Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap;
  ensures AA_TEMP85 && AA_TEMP84 && AA_TEMP83 && AA_TEMP82 && AA_TEMP81 && AA_TEMP80;



implementation PROC_.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_EQ_unsafe__xx__fixed($in_parameter__0: ref, $in_parameter__1: ref)
   returns (AA_TEMP80: bool, 
    AA_TEMP81: bool, 
    AA_TEMP82: bool, 
    AA_TEMP83: bool, 
    AA_TEMP84: bool, 
    AA_TEMP85: bool)
{
  var AA_TEMP70: int;
  var AA_TEMP71: ref;
  var AA_TEMP60: int;
  var AA_TEMP61: $heap_type;
  var AA_TEMP62: intArrHeap_type;
  var AA_TEMP63: [ref]int;
  var AA_TEMP50: int;
  var AA_TEMP51: $heap_type;
  var AA_TEMP52: intArrHeap_type;
  var AA_TEMP53: [ref]int;
  var $return: int;
  var $exception: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b11: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r5: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r20: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r7: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i12: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i16: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i15: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r22: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i13: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap: intArrHeap_type;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap: $heap_type;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap: intArrHeap_type;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap: $heap_type;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$objIndex: int;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$heap: $heap_type;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$intArrHeap: intArrHeap_type;
  var inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$arrSizeHeap: [ref]int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r29: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_18: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r32: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r25: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r9: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b18: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r30: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r28: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_15: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r21: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r24: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_21: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_17: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r26: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r6: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i16: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r27: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b13: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r20: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l12: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i24: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_20: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l11: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b15: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_16: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r36: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r5: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i25: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i17: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_19: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap: intArrHeap_type;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap: $heap_type;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap: intArrHeap_type;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap: $heap_type;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception: ref;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$objIndex: int;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$heap: $heap_type;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$intArrHeap: intArrHeap_type;
  var inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$arrSizeHeap: [ref]int;

  AA_INSTR_EQ_BODY:
    AA_TEMP50 := fixed.$objIndex;
    AA_TEMP51 := fixed.$heap;
    AA_TEMP52 := fixed.$intArrHeap;
    AA_TEMP53 := fixed.$arrSizeHeap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := $in_parameter__0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := $in_parameter__1;
    havoc inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i16, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i15, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r22, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$objIndex := fixed.$objIndex;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$heap := fixed.$heap;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$intArrHeap := fixed.$intArrHeap;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$arrSizeHeap := fixed.$arrSizeHeap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "ImageMatcherWorker.java", 17, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 19, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block2;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block2:
    assert {:sourceloc "ImageMatcherWorker.java", 22, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.ScalrApplyTest);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r7 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "ImageMatcherWorker.java", 22, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$$la$init$ra$$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r7);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon142_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon142_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon142_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon4:
    assert {:sourceloc "ImageMatcherWorker.java", 22, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r20 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r7;
    assert {:sourceloc "ImageMatcherWorker.java", 23, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$setup$byte$lp$$rp$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon144_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon144_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon144_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon8;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon8:
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$testApply1$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r20);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon146_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon146_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon146_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon12;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon12:
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon148_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon148_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon148_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    assume fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    assert {:sourceloc "ImageMatcherWorker.java", 48, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r22 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := fixed.java.io.PrintStream$java.lang.System$out271;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.StringBuilder);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$$la$init$ra$$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$append$java.lang.String(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13, fixed.$StringConst0);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Throwable$getMessage$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r22);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon96;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon96:
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$append$java.lang.String(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon99;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon99:
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$toString$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17);
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon102;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon102:
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.PrintStream$println$java.lang.String(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block7;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block7:
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon105;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon105:
    assert {:sourceloc "ImageMatcherWorker.java", 53, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b11;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11;
    havoc inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap := fixed.$intArrHeap;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex := fixed.$objIndex;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap := fixed.$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11]];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141_dummy;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon198_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block14:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block15;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block14;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block13:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block13;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon196_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10
   != inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9 := fixed.$modInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Then:
    assume {:partition} 2 != 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10 := fixed.$modInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon194_Else:
    assume {:partition} 2 == 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Then:
    assume {:partition} 2 != 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon193_Else:
    assume {:partition} 2 == 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19];
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon192_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon191_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
     >= 0);
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6
   > inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6 := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon190_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   >= inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon189_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5
   > inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5 := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon188_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19
   >= inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i19, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon187_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r19
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon195_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10
   == inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon197_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141_dummy:
    assume false;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$exit:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i19;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i20;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b11;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i21;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z3;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z5;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9$1;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9$1:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9_last;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon108;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon108:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5 := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5
   > inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon111;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1
   == fixed.$null;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1
   != fixed.$null;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon114;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon114:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6 := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6
   > inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon117;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 >= 0);
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 >= 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon120;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon120:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19];
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Math$abs$int(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 >= 0);
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 >= 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon123;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon123:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19];
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Math$abs$int(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Else:
    assume {:partition} 2 == 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Then:
    assume {:partition} 2 != 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon126;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon126:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10 := fixed.$modInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Else:
    assume {:partition} 2 == 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Then:
    assume {:partition} 2 != 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9 := fixed.$modInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10
   == inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon132;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon132:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon135;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon135:
    assert {:sourceloc "ImageMatcherWorker.java", 59, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block16;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block16:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block17;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block17:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block13;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block13:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon138;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon138:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block15:
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b11 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 >= 0);
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 >= 0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon141;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon141:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b11]];
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19 + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon141_dummy;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 63, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block14;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block14:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z5 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block15;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10
   != inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block11;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z3 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
   >= inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19
   >= inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block8;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block8:
    assert {:sourceloc "ImageMatcherWorker.java", 68, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block16;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon148_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon15;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon15:
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i15, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.awt.image.BufferedImage$getWidth$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon149_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon149_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon149_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon19;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon19:
    assert {:sourceloc "ImageMatcherWorker.java", 26, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i16, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.awt.image.BufferedImage$getHeight$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon151_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon151_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon151_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon23:
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon153_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon153_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon153_Else:
    assume {:partition} !(fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType);
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ClassCastException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon153_Then:
    assume {:partition} fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.awt.image.BufferedImage$getRGB$int_int_int_int_int$lp$$rp$_int_int(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r21, 0, 0, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i15, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i16, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8, 0, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i15);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon154_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon154_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon154_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon30;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon30:
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon33;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon33:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2];
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2 := fixed.$mulInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1, 4);
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.ByteBuffer$allocate$int(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon37;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon37:
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon40;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon40:
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.ByteBuffer$asIntBuffer$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon44;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon44:
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon47;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon47:
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.IntBuffer$put$int$lp$$rp$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon51;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon51:
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.io.ByteArrayOutputStream);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.ByteArrayOutputStream$$la$init$ra$$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon55;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon55:
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r5 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.ByteBuffer$array$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon59;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon59:
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.OutputStream$write$byte$lp$$rp$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r5, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon63;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon63:
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.OutputStream$flush$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r5);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon67;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon67:
    assert {:sourceloc "ImageMatcherWorker.java", 34, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.ByteArrayOutputStream$close$(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r5);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon71;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon71:
    assert {:sourceloc "ImageMatcherWorker.java", 36, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$tearDown$();
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon75;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon75:
    assert {:sourceloc "ImageMatcherWorker.java", 37, -1, -1, -1} true;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := 128];
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon78;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon78:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3 := fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2];
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Else:
    assume {:partition} 128 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Then:
    assume {:partition} 128 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon81;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon81:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0 := fixed.$divInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 39, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18 := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i12;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i13;
    havoc inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap := fixed.$intArrHeap;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex := fixed.$objIndex;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap := fixed.$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4 := fixed.$mulInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, 
  128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
   >= inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14]];
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
   + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
   + inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := fixed.$modInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon182_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r6]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18];
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon181_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon180_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r2]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i18, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i17, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b14, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i12, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i13;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon179_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4
   > inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy:
    assume false;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$exit:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i18;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i17;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b14;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i12 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i12;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i13 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i13;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4$1;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4$1:
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4_last;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Else:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4
   > inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon84;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon87;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon87:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i12 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18];
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon90;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon90:
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i13 := fixed.$modInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i12, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i13;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Else:
    assume {:partition} !(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    assert {:noverify} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17
     < fixed.$arrSizeHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6]
   && inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 42, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6 := fixed.$intArrHeap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6][inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14]];
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i17 + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18
   + inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93_dummy;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i18
   >= inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block5;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block5:
    assert {:sourceloc "ImageMatcherWorker.java", 46, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r19 := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r6;
    assert {:sourceloc "ImageMatcherWorker.java", 47, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 := 1;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block6;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block6:
    assert {:sourceloc "ImageMatcherWorker.java", 50, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block7;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon75;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon71;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon67;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon63;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon59;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon55;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon51;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon44;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon37;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon154_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon155_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon155_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon155_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon30;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon155_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon151_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon152_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon152_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon152_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon152_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon149_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon150_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon150_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon150_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon19;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon150_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon146_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon147_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon147_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon147_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon12;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon147_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon144_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon145_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon145_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon145_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon8;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon145_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon142_Then:
    assume {:partition} inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon143_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon143_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon143_Else:
    assume {:partition} !(fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon143_Then:
    assume {:partition} fixed.$heap[inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r7 := fixed.$null;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon141_dummy:
    assume false;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9_last:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93_dummy:
    assume false;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4_last:
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4 := fixed.$mulInt(inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    goto inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Then, inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Else;

  inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    $return := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    $exception := inline$unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto AA_INSTR_EQ_BODY$1;

  AA_INSTR_EQ_BODY$1:
    AA_TEMP60 := fixed.$objIndex;
    AA_TEMP61 := fixed.$heap;
    AA_TEMP62 := fixed.$intArrHeap;
    AA_TEMP63 := fixed.$arrSizeHeap;
    fixed.$objIndex := AA_TEMP50;
    fixed.$heap := AA_TEMP51;
    fixed.$intArrHeap := AA_TEMP52;
    fixed.$arrSizeHeap := AA_TEMP53;
    AA_TEMP70 := $return;
    AA_TEMP71 := $exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0 := $in_parameter__0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1 := $in_parameter__1;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r29, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r32, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r30, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r28, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r26, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r27, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r36, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$objIndex := fixed.$objIndex;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$heap := fixed.$heap;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$intArrHeap := fixed.$intArrHeap;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$fixed.$arrSizeHeap := fixed.$arrSizeHeap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__0;
    assert {:sourceloc "ImageMatcherWorker.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$in_parameter__1;
    assert {:sourceloc "ImageMatcherWorker.java", 19, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 21, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block2;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block2:
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0 := fixed.$new(fixed.ScalrApplyTest);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_0;
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$$la$init$ra$$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r5);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon4:
    assert {:sourceloc "ImageMatcherWorker.java", 24, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r32 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r5;
    assert {:sourceloc "ImageMatcherWorker.java", 25, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$setup$byte$lp$$rp$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r0);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon8;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon8:
    assert {:sourceloc "ImageMatcherWorker.java", 26, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$testApply1$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r32);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon12;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon12:
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Throwable;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r24 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    assert {:sourceloc "ImageMatcherWorker.java", 50, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r36 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r24;
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r26 := fixed.java.io.PrintStream$java.lang.System$out271;
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4 := fixed.$new(fixed.java.lang.StringBuilder);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r25 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_4;
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$$la$init$ra$$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r25);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r27, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$append$java.lang.String(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r25, fixed.$StringConst0);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r28, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Throwable$getMessage$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r36);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r27
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_5;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon198_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r27
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon96;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon96:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r29, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$append$java.lang.String(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r27, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r28);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon199_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon199_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon199_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r29
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_6;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon199_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r29
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon99;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon99:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r30, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.StringBuilder$toString$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r29);
    assert {:sourceloc "ImageMatcherWorker.java", 51, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon200_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon200_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon200_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r26
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_7;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon200_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r26
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon102;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon102:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.PrintStream$println$java.lang.String(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r26, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r30);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block7;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block7:
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon201_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon201_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon201_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon105;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon105:
    assert {:sourceloc "ImageMatcherWorker.java", 55, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 56, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_17;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i24;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i25;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_19;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap := fixed.$intArrHeap;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex := fixed.$objIndex;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap := fixed.$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block9:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15]];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156_dummy;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon153:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$byteValue$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon218_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon153;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon150:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon217_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Byte;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon150;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$valueOf$byte(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12$1:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon216_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, fixed.$type]
   <: fixed.java.lang.Byte);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon147:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block12;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$block11;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon144:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Byte$valueOf$byte(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon144;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon214_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon141;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18;
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon213_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon138;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$booleanValue$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$1$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135$1:
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon212_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon135;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14;
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon211_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon132;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10 := fixed.$modInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2 := fixed.$cmpInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2
   == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3 := fixed.$cmpInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l0, 
  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3
   != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$z0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block35;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block35:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b3
   == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block34;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$b2
   != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$block33;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$1:
    assert {:sourceloc "ImageMatcherWorker.java", 64, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1 := 1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block18;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block18:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0
   != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block17;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$z0
   == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$block16;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$2;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$2:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$2$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$3:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$3$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$4;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129$4:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon210_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Then:
    assume {:partition} 2 != 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon129;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9 := fixed.$modInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon209_Else:
    assume {:partition} 2 == 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Then:
    assume {:partition} 2 != 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon126;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon208_Else:
    assume {:partition} 2 == 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon123;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23];
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := fixed.java.lang.Math$abs$int(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon207_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon120;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon206_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
     >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6
   > inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon117;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6 := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1];
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon205_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   >= inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon114;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon204_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r1
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5
   > inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon111;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5 := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon203_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23
   >= inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$z6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z5, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_8, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l12, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b7, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$i6, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$l11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b14, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$r23, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_$fakelocal_19;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon202_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$in_r31
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon108;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon215_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4
   != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon147;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$anon156_dummy:
    assume false;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$exit:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$exception;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b8;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$z6;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_9;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_17;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i9;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r17;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z2;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_8;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b13 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b13;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r20 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b7;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$i6;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i24 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i24;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r19;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z4;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i23;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_z3;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_20 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$l11;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b14;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$b15;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r22;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_16 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$r23;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i25 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_i25;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block9$0$out_$fakelocal_19;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9$1:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9_last;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon202_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_8;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon202_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon108;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon108:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5 := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon203_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon203_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon203_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5
   > inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon111;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon111:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon204_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon204_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon204_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9 := fixed.$new(fixed.java.lang.NullPointerException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_9;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon204_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon114;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon114:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6 := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1];
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon205_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon205_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon205_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6
   > inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon117;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon117:
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon206_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon206_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon206_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_10;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon206_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon120;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon120:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23];
    assert {:sourceloc "ImageMatcherWorker.java", 58, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i24, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Math$abs$int(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b7);
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon207_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon207_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon207_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_11;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon207_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon123;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon123:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r1][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23];
    assert {:sourceloc "ImageMatcherWorker.java", 60, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i25, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Math$abs$int(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b8);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon208_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon208_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon208_Else:
    assume {:partition} 2 == 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_12;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon208_Then:
    assume {:partition} 2 != 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon126;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon126:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9 := fixed.$modInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i25, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i9;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon209_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon209_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon209_Else:
    assume {:partition} 2 == 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13 := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_13;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon209_Then:
    assume {:partition} 2 != 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10 := fixed.$modInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i24, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l11 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i10;
    assert {:sourceloc "ImageMatcherWorker.java", 62, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$l11;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$in_parameter__1;
    assert {:sourceloc "Safe.java", 48, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2 := fixed.$cmpInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2
   == 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon3:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33:
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3 := fixed.$cmpInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l0, 
  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$l1);
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3
   != 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon6:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34:
    assert {:sourceloc "Safe.java", 51, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$z0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block35;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block35:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b3
   == 0;
    assert {:sourceloc "Safe.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block34;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$b2
   != 0;
    assert {:sourceloc "Safe.java", 49, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$block33;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$eq$long_long$1$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$1:
    assert {:sourceloc "ImageMatcherWorker.java", 64, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$in_parameter__0;
    assert {:sourceloc "Safe.java", 5, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon3:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16:
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon6:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1 := 1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17:
    assert {:sourceloc "Safe.java", 8, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block18;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block18:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0
   != 0;
    assert {:sourceloc "Safe.java", 7, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block17;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$z0
   == 0;
    assert {:sourceloc "Safe.java", 6, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$block16;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$not$boolean$1$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$2;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$2:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(0);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r10;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r11;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$4$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$3:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2);
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r12;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r13;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$5$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$4;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon129$4:
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon210_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon210_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon210_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_14;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon210_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon132;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon132:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r14;
    assert {:sourceloc "ImageMatcherWorker.java", 66, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon211_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon211_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon211_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_15 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_15;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon211_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon135;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon135:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r15);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(1);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$valueOf$boolean(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3);
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z5;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r17;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$6$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon135$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon135$1:
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon212_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon212_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon212_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18, fixed.$type]
   <: fixed.java.lang.Boolean);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_16 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_16;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon212_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18, fixed.$type]
   <: fixed.java.lang.Boolean;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon138;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon138:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r18;
    assert {:sourceloc "ImageMatcherWorker.java", 67, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon213_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon213_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon213_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_17 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_17;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon213_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon141;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon141:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Boolean$booleanValue$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r19);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon214_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon214_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon214_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_18 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_18;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon214_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon144;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon144:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b13 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23];
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Byte$valueOf$byte(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b13);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon215_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon215_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon215_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon147;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon147:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6 := 1;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Byte$valueOf$byte(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b14);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z3;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r20;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r21;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon0:
    assume (forall T: javaType :: fixed.$heap[fixed.$null, fixed.$type] <: T);
    assume (forall _r: ref :: fixed.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: fixed.$stringSizeHeap[_r] >= 0);
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1, fixed.$type]
   <: fixed.java.lang.Object;
    assume fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return, fixed.$type]
   <: fixed.java.lang.Object;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception := fixed.$null;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__1;
    assert {:sourceloc "Safe.java", -1, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$in_parameter__2;
    assert {:sourceloc "Safe.java", 117, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := fixed.$null;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon3:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63:
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon6:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64:
    assert {:sourceloc "Safe.java", 120, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$r2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block65;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block65:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon8_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   != 0;
    assert {:sourceloc "Safe.java", 119, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block64;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$anon7_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$z0
   == 0;
    assert {:sourceloc "Safe.java", 118, -1, -1, -1} {:clone} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$block63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$sg.edu.nus.comp.tsunami.safe.Safe$cond$boolean_java.lang.Object_java.lang.Object$7$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12$1:
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon216_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon216_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon216_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22, fixed.$type]
   <: fixed.java.lang.Byte);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_19 := fixed.$new(fixed.java.lang.ClassCastException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_19;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon216_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22, fixed.$type]
   <: fixed.java.lang.Byte;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon150;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon150:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r22;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon217_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon217_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon217_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23
   == fixed.$null;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_20 := fixed.$new(fixed.java.lang.RuntimeException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_20;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon217_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23
   != fixed.$null;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon153;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon153:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b15, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.lang.Byte$byteValue$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r23);
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon218_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon218_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon218_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0);
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_21 := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_21;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon218_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 >= 0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b15]];
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23 + 4;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156_dummy;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon215_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z4 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block11;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block11:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$z6 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block12;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon205_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
   >= inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i6;
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10:
    assert {:sourceloc "ImageMatcherWorker.java", 74, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block13;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block13:
    assert {:sourceloc "ImageMatcherWorker.java", 77, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block14;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block14:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon203_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i23
   >= inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i5;
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block10;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon201_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block8;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block8:
    assert {:sourceloc "ImageMatcherWorker.java", 75, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z2 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block13;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon163_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 27, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon15;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon15:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.awt.image.BufferedImage$getWidth$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon19;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon19:
    assert {:sourceloc "ImageMatcherWorker.java", 28, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.awt.image.BufferedImage$getHeight$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon23:
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Else:
    assume {:partition} !(fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType);
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ClassCastException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon168_Then:
    assume {:partition} fixed.$heap[fixed.$null, fixed.$type] <: fixed.$intArrayType;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon26;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon26:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r6 := fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 29, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.awt.image.BufferedImage$getRGB$int_int_int_int_int$lp$$rp$_int_int(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r33, 0, 0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i20, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r6, 0, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i19);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon30;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon30:
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon171_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon33;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon33:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1 := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34];
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2 := fixed.$mulInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i1, 4);
    assert {:sourceloc "ImageMatcherWorker.java", 30, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.ByteBuffer$allocate$int(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i2);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon37;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon37:
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon174_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 31, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon40;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon40:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.ByteBuffer$asIntBuffer$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon44;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon44:
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.RuntimeException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon177_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 32, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon47;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon47:
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_1, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.IntBuffer$put$int$lp$$rp$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r2, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon51;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon51:
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2 := fixed.$new(fixed.java.io.ByteArrayOutputStream);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_2;
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.ByteArrayOutputStream$$la$init$ra$$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon55;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon55:
    assert {:sourceloc "ImageMatcherWorker.java", 33, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8;
    assert {:sourceloc "ImageMatcherWorker.java", 34, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r9, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.nio.ByteBuffer$array$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r35);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon59;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon59:
    assert {:sourceloc "ImageMatcherWorker.java", 34, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.OutputStream$write$byte$lp$$rp$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r9);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon63:
    assert {:sourceloc "ImageMatcherWorker.java", 35, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.OutputStream$flush$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon67;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon67:
    assert {:sourceloc "ImageMatcherWorker.java", 36, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.java.io.ByteArrayOutputStream$close$(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r3);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon71;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon71:
    assert {:sourceloc "ImageMatcherWorker.java", 38, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.ScalrApplyTest$tearDown$();
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   == fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon75;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon75:
    assert {:sourceloc "ImageMatcherWorker.java", 39, -1, -1, -1} true;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := fixed.$new(fixed.$intArrayType);
    fixed.$arrSizeHeap := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3 := 128];
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$fakelocal_3;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34
   == fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.NullPointerException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon192_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34
   != fixed.$null;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon78;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon78:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3 := fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34];
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Else:
    assume {:partition} 128 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon193_Then:
    assume {:partition} 128 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 40, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon81;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon81:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0 := fixed.$divInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i3, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 41, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 := 0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22 := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i17;
    havoc inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap := fixed.$intArrHeap;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex := fixed.$objIndex;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap := fixed.$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$entry:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$block4:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4 := fixed.$mulInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0, 
  128);
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
   >= inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18]];
    assert {:sourceloc "ImageMatcherWorker.java", 45, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
   + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
   + inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := fixed.$modInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, 
  2);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon197_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r4]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon90;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22];
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon196_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon87;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon195_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_r34]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22
     >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$return, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$exception, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$b18, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i16, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i22, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_i21, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i4, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$in_$i17;
    fixed.$intArrHeap, fixed.$objIndex, fixed.$heap := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$intArrHeap, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$objIndex, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$$heap;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon194_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4
   > inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon84;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$anon93_dummy:
    assume false;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$exit:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$Return:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$return;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$exception;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$b18;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i16 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i16;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i22;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_i21;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i4;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i17 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$inline$ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_loop_block4$0$out_$i17;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4$1;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4$1:
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4_last;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Else:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4
   > inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon84;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon84:
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon195_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon87;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon87:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i16 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r34][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22];
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Else:
    assume {:partition} 2 == 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArithmeticException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon196_Then:
    assume {:partition} 2 != 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon90;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon90:
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i17 := fixed.$modInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i16, 2);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b18 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i17;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Else:
    assume {:partition} !(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 >= 0);
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    assert {:noverify} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    call inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception := fixed.$new(fixed.java.lang.ArrayIndexOutOfBoundsException);
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon197_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21
     < fixed.$arrSizeHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4]
   && inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 >= 0;
    assert {:sourceloc "ImageMatcherWorker.java", 44, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93:
    fixed.$intArrHeap := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4 := fixed.$intArrHeap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4][inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$b18]];
    assert {:sourceloc "ImageMatcherWorker.java", 45, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i21 + 1;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22
   + inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93_dummy;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i22
   >= inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4;
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block5;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block5:
    assert {:sourceloc "ImageMatcherWorker.java", 48, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r31 := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$r4;
    assert {:sourceloc "ImageMatcherWorker.java", 49, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$z1 := 1;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block6;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block6:
    assert {:sourceloc "ImageMatcherWorker.java", 52, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block7;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon190_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon75;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon191_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon188_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon71;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon189_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon186_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon67;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon187_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon184_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon63;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon185_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.io.IOException;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return := 0;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon182_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon59;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon183_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon180_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon55;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon181_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r8 := fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon178_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon51;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon179_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon175_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon44;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon176_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon172_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon37;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon173_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon169_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon30;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon170_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon166_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon23;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon167_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon164_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon19;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon165_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon161_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon12;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon162_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon159_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon8;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon160_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon157_Then:
    assume {:partition} inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception
   != fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Else:
    assume {:partition} !(fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception);
    assert {:clone} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon4;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon158_Then:
    assume {:partition} fixed.$heap[inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception, fixed.$type]
   <: fixed.java.lang.Exception;
    assert {:clone} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$r5 := fixed.$null;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block3;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon156_dummy:
    assume false;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block9_last:
    assert {:sourceloc "ImageMatcherWorker.java", 57, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon202_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon202_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon93_dummy:
    assume false;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$block4_last:
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$i4 := fixed.$mulInt(inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$i0, 128);
    assert {:sourceloc "ImageMatcherWorker.java", 43, -1, -1, -1} true;
    goto inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Then, inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$anon194_Else;

  inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$Return:
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    assume true;
    $return := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$return;
    $exception := inline$fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$$0$$exception;
    goto AA_INSTR_EQ_BODY$2;

  AA_INSTR_EQ_BODY$2:
    Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return := AA_TEMP70;
    Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$return := $return;
    Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception := AA_TEMP71;
    Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_$exception := $exception;
    Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex := AA_TEMP60;
    Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$objIndex := fixed.$objIndex;
    Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap := AA_TEMP61;
    Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$heap := fixed.$heap;
    Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap := AA_TEMP62;
    Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$intArrHeap := fixed.$intArrHeap;
    Output_of_unsafe.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap := AA_TEMP63;
    Output_of_fixed.ImageMatcherWorker$test$byte$lp$$rp$_byte$lp$$rp$_fixed.$arrSizeHeap := fixed.$arrSizeHeap;
    havoc AA_TEMP80, AA_TEMP81, AA_TEMP82, AA_TEMP83, AA_TEMP84, AA_TEMP85;
    AA_TEMP80, AA_TEMP81, AA_TEMP82, AA_TEMP83, AA_TEMP84, AA_TEMP85 := AA_TEMP80 || AA_TEMP70 == $return, AA_TEMP81 || AA_TEMP71 == $exception, AA_TEMP82 || fixed.$objIndex == fixed.$objIndex, AA_TEMP83
   || (forall<_ty> r: ref, f: Field _ty :: 
    fixed.$heap[r, f] == AA_TEMP61[r, f] || !old(fixed.$heap[r, fixed.$alloc])), AA_TEMP84 || AA_TEMP62 == fixed.$intArrHeap, AA_TEMP85
   || 
  AA_TEMP63 == fixed.$arrSizeHeap
   || (forall _x0: ref :: AA_TEMP63[_x0] == fixed.$arrSizeHeap[_x0]);
    return;
}


