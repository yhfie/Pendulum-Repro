(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.ImageMatcherWorker () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.CharSequence () T@U)
(declare-fun fixed.java.lang.String () T@U)
(declare-fun fixed.java.lang.Appendable () T@U)
(declare-fun fixed.java.lang.AbstractStringBuilder () T@U)
(declare-fun fixed.java.lang.StringBuffer () T@U)
(declare-fun fixed.ScalrApplyTest () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.awt.Image () T@U)
(declare-fun fixed.java.awt.image.RenderedImage () T@U)
(declare-fun fixed.java.awt.image.WritableRenderedImage () T@U)
(declare-fun fixed.java.awt.Transparency () T@U)
(declare-fun fixed.java.awt.image.BufferedImage () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.nio.Buffer () T@U)
(declare-fun fixed.java.nio.ByteBuffer () T@U)
(declare-fun fixed.java.nio.IntBuffer () T@U)
(declare-fun fixed.java.lang.AutoCloseable () T@U)
(declare-fun fixed.java.io.Closeable () T@U)
(declare-fun fixed.java.io.Flushable () T@U)
(declare-fun fixed.java.io.OutputStream () T@U)
(declare-fun fixed.java.io.ByteArrayOutputStream () T@U)
(declare-fun fixed.java.io.IOException () T@U)
(declare-fun fixed.java.lang.ArithmeticException () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.StringBuilder () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$StringConst0 () T@U)
(declare-fun fixed.java.io.FilterOutputStream () T@U)
(declare-fun fixed.java.io.PrintStream () T@U)
(declare-fun fixed.java.lang.Math () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.Byte () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun call1formal@$exception@0 () T@U)
(declare-fun call1formal@$exception@0@@0 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap@9 () T@U)
(declare-fun fixed.$heap@4 () T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$stringSizeHeap@0 () T@U)
(declare-fun fixed.$stringSizeHeap@1 () T@U)
(declare-fun call3formal@$obj@0 () T@U)
(declare-fun fixed.$heap@5 () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun fixed.$heap@6 () T@U)
(declare-fun $this () T@U)
(declare-fun fixed.java.lang.String$ImageMatcherWorker$errorcode263 () T@U)
(declare-fun call3formal@$obj@0@@0 () T@U)
(declare-fun fixed.$heap@7 () T@U)
(declare-fun fixed.$heap@8 () T@U)
(declare-fun fixed.java.lang.StringBuffer$ImageMatcherWorker$error264 () T@U)
(declare-fun fixed.boolean$ImageMatcherWorker$success0 () T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun call3formal@$obj@0@@1 () T@U)
(declare-fun fixed.$heap@0 () T@U)
(declare-fun fixed.$heap@1 () T@U)
(declare-fun call3formal@$obj@0@@2 () T@U)
(declare-fun fixed.$heap@2 () T@U)
(declare-fun fixed.$heap@3 () T@U)
(declare-fun %lbl%+224805 () Bool)
(declare-fun AA_TEMP30@1 () Bool)
(declare-fun AA_TEMP30@0 () Bool)
(declare-fun AA_TEMP31@1 () Bool)
(declare-fun AA_TEMP31@0 () Bool)
(declare-fun fixed.$objIndex@3 () Int)
(declare-fun AA_TEMP32@1 () Bool)
(declare-fun AA_TEMP32@0 () Bool)
(declare-fun AA_TEMP33@1 () Bool)
(declare-fun AA_TEMP33@0 () Bool)
(declare-fun %lbl%@229695 () Bool)
(declare-fun %lbl%+224804 () Bool)
(declare-fun %lbl%+224803 () Bool)
(declare-fun %lbl%+224802 () Bool)
(declare-fun fixed.$objIndex@2 () Int)
(declare-fun fixed.$objIndex () Int)
(declare-fun %lbl%+224801 () Bool)
(declare-fun %lbl%+224800 () Bool)
(declare-fun %lbl%+224799 () Bool)
(declare-fun %lbl%+224798 () Bool)
(declare-fun %lbl%+224797 () Bool)
(declare-fun %lbl%+224796 () Bool)
(declare-fun %lbl%+224795 () Bool)
(declare-fun %lbl%+224794 () Bool)
(declare-fun %lbl%+224793 () Bool)
(declare-fun fixed.$objIndex@0 () Int)
(declare-fun fixed.$objIndex@1 () Int)
(declare-fun %lbl%+224792 () Bool)
(declare-fun %lbl%+224791 () Bool)
(declare-fun %lbl%+224790 () Bool)
(declare-fun %lbl%+224789 () Bool)
(declare-fun %lbl%+224788 () Bool)
(declare-fun %lbl%+224787 () Bool)
(declare-fun %lbl%+228446 () Bool)
(declare-fun %lbl%+228453 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.ImageMatcherWorker) javaTypeType))
(assert (not (= fixed.ImageMatcherWorker fixed.java.lang.Object)))
(assert (UOrdering2 fixed.ImageMatcherWorker fixed.java.lang.Object))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) javaTypeType) (=> (and (UOrdering2 fixed.ImageMatcherWorker w@@0) (UOrdering2 w@@0 fixed.java.lang.Object)) (or (= fixed.ImageMatcherWorker w@@0) (= fixed.java.lang.Object w@@0))))
 :pattern ( (UOrdering2 fixed.ImageMatcherWorker w@@0) (UOrdering2 w@@0 fixed.java.lang.Object))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.ImageMatcherWorker w@@1)) (or (= fixed.ImageMatcherWorker w@@1) (UOrdering2 fixed.java.lang.Object w@@1)))
 :pattern ( (UOrdering2 fixed.ImageMatcherWorker w@@1))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) javaTypeType) (UOrdering2 w@@2 fixed.ImageMatcherWorker)) (= (oneStep fixed.java.lang.Object w@@2) fixed.ImageMatcherWorker))
 :pattern ( (UOrdering2 w@@2 fixed.ImageMatcherWorker))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@3 T@U) ) (!  (=> (and (= (type w@@3) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@3)) (= fixed.java.io.Serializable w@@3))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@3))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@4)) (= fixed.java.lang.Comparable w@@4))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@4))
)))
(assert (= (type fixed.java.lang.CharSequence) javaTypeType))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 fixed.java.lang.CharSequence w@@5)) (= fixed.java.lang.CharSequence w@@5))
 :pattern ( (UOrdering2 fixed.java.lang.CharSequence w@@5))
)))
(assert (= (type fixed.java.lang.String) javaTypeType))
(assert (not (= fixed.java.lang.String fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Object))
(assert (not (= fixed.java.lang.String fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.String fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Comparable))
(assert (not (= fixed.java.lang.String fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.CharSequence))
(assert (forall ((w@@6 T@U) ) (!  (=> (= (type w@@6) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@6) (UOrdering2 w@@6 fixed.java.lang.Object)) (or (= fixed.java.lang.String w@@6) (= fixed.java.lang.Object w@@6))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@6) (UOrdering2 w@@6 fixed.java.lang.Object))
)))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@7) (UOrdering2 w@@7 fixed.java.io.Serializable)) (or (= fixed.java.lang.String w@@7) (= fixed.java.io.Serializable w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@7) (UOrdering2 w@@7 fixed.java.io.Serializable))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@8) (UOrdering2 w@@8 fixed.java.lang.Comparable)) (or (= fixed.java.lang.String w@@8) (= fixed.java.lang.Comparable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@8) (UOrdering2 w@@8 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (= (type w@@9) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@9) (UOrdering2 w@@9 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.String w@@9) (= fixed.java.lang.CharSequence w@@9))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@9) (UOrdering2 w@@9 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 fixed.java.lang.String w@@10)) (or (or (or (or (= fixed.java.lang.String w@@10) (UOrdering2 fixed.java.lang.Object w@@10)) (UOrdering2 fixed.java.io.Serializable w@@10)) (UOrdering2 fixed.java.lang.Comparable w@@10)) (UOrdering2 fixed.java.lang.CharSequence w@@10)))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@10))
)))
(assert (forall ((w@@11 T@U) ) (!  (=> (and (= (type w@@11) javaTypeType) (UOrdering2 w@@11 fixed.java.lang.String)) (= (oneStep fixed.java.lang.Object w@@11) fixed.java.lang.String))
 :pattern ( (UOrdering2 w@@11 fixed.java.lang.String))
)))
(assert (= (type fixed.java.lang.Appendable) javaTypeType))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.Appendable w@@12)) (= fixed.java.lang.Appendable w@@12))
 :pattern ( (UOrdering2 fixed.java.lang.Appendable w@@12))
)))
(assert (= (type fixed.java.lang.AbstractStringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@13 T@U) ) (!  (=> (= (type w@@13) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@13) (UOrdering2 w@@13 fixed.java.lang.Object)) (or (= fixed.java.lang.AbstractStringBuilder w@@13) (= fixed.java.lang.Object w@@13))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@13) (UOrdering2 w@@13 fixed.java.lang.Object))
)))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@14) (UOrdering2 w@@14 fixed.java.lang.Appendable)) (or (= fixed.java.lang.AbstractStringBuilder w@@14) (= fixed.java.lang.Appendable w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@14) (UOrdering2 w@@14 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (= (type w@@15) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@15) (UOrdering2 w@@15 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.AbstractStringBuilder w@@15) (= fixed.java.lang.CharSequence w@@15))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@15) (UOrdering2 w@@15 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@16)) (or (or (or (= fixed.java.lang.AbstractStringBuilder w@@16) (UOrdering2 fixed.java.lang.Object w@@16)) (UOrdering2 fixed.java.lang.Appendable w@@16)) (UOrdering2 fixed.java.lang.CharSequence w@@16)))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@16))
)))
(assert (forall ((w@@17 T@U) ) (!  (=> (and (= (type w@@17) javaTypeType) (UOrdering2 w@@17 fixed.java.lang.AbstractStringBuilder)) (= (oneStep fixed.java.lang.Object w@@17) fixed.java.lang.AbstractStringBuilder))
 :pattern ( (UOrdering2 w@@17 fixed.java.lang.AbstractStringBuilder))
)))
(assert (= (type fixed.java.lang.StringBuffer) javaTypeType))
(assert (not (= fixed.java.lang.StringBuffer fixed.java.lang.AbstractStringBuilder)))
(assert (UOrdering2 fixed.java.lang.StringBuffer fixed.java.lang.AbstractStringBuilder))
(assert (not (= fixed.java.lang.StringBuffer fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.StringBuffer fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.StringBuffer fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.StringBuffer fixed.java.lang.CharSequence))
(assert (forall ((w@@18 T@U) ) (!  (=> (= (type w@@18) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuffer w@@18) (UOrdering2 w@@18 fixed.java.lang.AbstractStringBuilder)) (or (= fixed.java.lang.StringBuffer w@@18) (= fixed.java.lang.AbstractStringBuilder w@@18))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuffer w@@18) (UOrdering2 w@@18 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (= (type w@@19) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuffer w@@19) (UOrdering2 w@@19 fixed.java.io.Serializable)) (or (= fixed.java.lang.StringBuffer w@@19) (= fixed.java.io.Serializable w@@19))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuffer w@@19) (UOrdering2 w@@19 fixed.java.io.Serializable))
)))
(assert (forall ((w@@20 T@U) ) (!  (=> (= (type w@@20) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuffer w@@20) (UOrdering2 w@@20 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.StringBuffer w@@20) (= fixed.java.lang.CharSequence w@@20))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuffer w@@20) (UOrdering2 w@@20 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (and (= (type w@@21) javaTypeType) (UOrdering2 fixed.java.lang.StringBuffer w@@21)) (or (or (or (= fixed.java.lang.StringBuffer w@@21) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@21)) (UOrdering2 fixed.java.io.Serializable w@@21)) (UOrdering2 fixed.java.lang.CharSequence w@@21)))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuffer w@@21))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 w@@22 fixed.java.lang.StringBuffer)) (= (oneStep fixed.java.lang.AbstractStringBuilder w@@22) fixed.java.lang.StringBuffer))
 :pattern ( (UOrdering2 w@@22 fixed.java.lang.StringBuffer))
)))
(assert (= (type fixed.ScalrApplyTest) javaTypeType))
(assert (forall ((w@@23 T@U) ) (!  (=> (and (= (type w@@23) javaTypeType) (UOrdering2 fixed.ScalrApplyTest w@@23)) (= fixed.ScalrApplyTest w@@23))
 :pattern ( (UOrdering2 fixed.ScalrApplyTest w@@23))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@24 T@U) ) (!  (=> (= (type w@@24) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@24) (UOrdering2 w@@24 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@24) (= fixed.java.lang.Object w@@24))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@24) (UOrdering2 w@@24 fixed.java.lang.Object))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (= (type w@@25) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@25) (UOrdering2 w@@25 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@25) (= fixed.java.io.Serializable w@@25))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@25) (UOrdering2 w@@25 fixed.java.io.Serializable))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (and (= (type w@@26) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@26)) (or (or (= fixed.java.lang.Throwable w@@26) (UOrdering2 fixed.java.lang.Object w@@26)) (UOrdering2 fixed.java.io.Serializable w@@26)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@26))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 w@@27 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@27) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@27 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@28 T@U) ) (!  (=> (= (type w@@28) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@28) (UOrdering2 w@@28 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@28) (= fixed.java.lang.Throwable w@@28))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@28) (UOrdering2 w@@28 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@29)) (or (= fixed.java.lang.Exception w@@29) (UOrdering2 fixed.java.lang.Throwable w@@29)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@29))
)))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) javaTypeType) (UOrdering2 w@@30 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@30) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@30 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.awt.Image) javaTypeType))
(assert (not (= fixed.java.awt.Image fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.awt.Image fixed.java.lang.Object))
(assert (forall ((w@@31 T@U) ) (!  (=> (= (type w@@31) javaTypeType) (=> (and (UOrdering2 fixed.java.awt.Image w@@31) (UOrdering2 w@@31 fixed.java.lang.Object)) (or (= fixed.java.awt.Image w@@31) (= fixed.java.lang.Object w@@31))))
 :pattern ( (UOrdering2 fixed.java.awt.Image w@@31) (UOrdering2 w@@31 fixed.java.lang.Object))
)))
(assert (forall ((w@@32 T@U) ) (!  (=> (and (= (type w@@32) javaTypeType) (UOrdering2 fixed.java.awt.Image w@@32)) (or (= fixed.java.awt.Image w@@32) (UOrdering2 fixed.java.lang.Object w@@32)))
 :pattern ( (UOrdering2 fixed.java.awt.Image w@@32))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 w@@33 fixed.java.awt.Image)) (= (oneStep fixed.java.lang.Object w@@33) fixed.java.awt.Image))
 :pattern ( (UOrdering2 w@@33 fixed.java.awt.Image))
)))
(assert (= (type fixed.java.awt.image.RenderedImage) javaTypeType))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 fixed.java.awt.image.RenderedImage w@@34)) (= fixed.java.awt.image.RenderedImage w@@34))
 :pattern ( (UOrdering2 fixed.java.awt.image.RenderedImage w@@34))
)))
(assert (= (type fixed.java.awt.image.WritableRenderedImage) javaTypeType))
(assert (not (= fixed.java.awt.image.WritableRenderedImage fixed.java.awt.image.RenderedImage)))
(assert (UOrdering2 fixed.java.awt.image.WritableRenderedImage fixed.java.awt.image.RenderedImage))
(assert (forall ((w@@35 T@U) ) (!  (=> (= (type w@@35) javaTypeType) (=> (and (UOrdering2 fixed.java.awt.image.WritableRenderedImage w@@35) (UOrdering2 w@@35 fixed.java.awt.image.RenderedImage)) (or (= fixed.java.awt.image.WritableRenderedImage w@@35) (= fixed.java.awt.image.RenderedImage w@@35))))
 :pattern ( (UOrdering2 fixed.java.awt.image.WritableRenderedImage w@@35) (UOrdering2 w@@35 fixed.java.awt.image.RenderedImage))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 fixed.java.awt.image.WritableRenderedImage w@@36)) (or (= fixed.java.awt.image.WritableRenderedImage w@@36) (UOrdering2 fixed.java.awt.image.RenderedImage w@@36)))
 :pattern ( (UOrdering2 fixed.java.awt.image.WritableRenderedImage w@@36))
)))
(assert (= (type fixed.java.awt.Transparency) javaTypeType))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 fixed.java.awt.Transparency w@@37)) (= fixed.java.awt.Transparency w@@37))
 :pattern ( (UOrdering2 fixed.java.awt.Transparency w@@37))
)))
(assert (= (type fixed.java.awt.image.BufferedImage) javaTypeType))
(assert (not (= fixed.java.awt.image.BufferedImage fixed.java.awt.Image)))
(assert (UOrdering2 fixed.java.awt.image.BufferedImage fixed.java.awt.Image))
(assert (not (= fixed.java.awt.image.BufferedImage fixed.java.awt.image.WritableRenderedImage)))
(assert (UOrdering2 fixed.java.awt.image.BufferedImage fixed.java.awt.image.WritableRenderedImage))
(assert (not (= fixed.java.awt.image.BufferedImage fixed.java.awt.Transparency)))
(assert (UOrdering2 fixed.java.awt.image.BufferedImage fixed.java.awt.Transparency))
(assert (forall ((w@@38 T@U) ) (!  (=> (= (type w@@38) javaTypeType) (=> (and (UOrdering2 fixed.java.awt.image.BufferedImage w@@38) (UOrdering2 w@@38 fixed.java.awt.Image)) (or (= fixed.java.awt.image.BufferedImage w@@38) (= fixed.java.awt.Image w@@38))))
 :pattern ( (UOrdering2 fixed.java.awt.image.BufferedImage w@@38) (UOrdering2 w@@38 fixed.java.awt.Image))
)))
(assert (forall ((w@@39 T@U) ) (!  (=> (= (type w@@39) javaTypeType) (=> (and (UOrdering2 fixed.java.awt.image.BufferedImage w@@39) (UOrdering2 w@@39 fixed.java.awt.image.WritableRenderedImage)) (or (= fixed.java.awt.image.BufferedImage w@@39) (= fixed.java.awt.image.WritableRenderedImage w@@39))))
 :pattern ( (UOrdering2 fixed.java.awt.image.BufferedImage w@@39) (UOrdering2 w@@39 fixed.java.awt.image.WritableRenderedImage))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (= (type w@@40) javaTypeType) (=> (and (UOrdering2 fixed.java.awt.image.BufferedImage w@@40) (UOrdering2 w@@40 fixed.java.awt.Transparency)) (or (= fixed.java.awt.image.BufferedImage w@@40) (= fixed.java.awt.Transparency w@@40))))
 :pattern ( (UOrdering2 fixed.java.awt.image.BufferedImage w@@40) (UOrdering2 w@@40 fixed.java.awt.Transparency))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 fixed.java.awt.image.BufferedImage w@@41)) (or (or (or (= fixed.java.awt.image.BufferedImage w@@41) (UOrdering2 fixed.java.awt.Image w@@41)) (UOrdering2 fixed.java.awt.image.WritableRenderedImage w@@41)) (UOrdering2 fixed.java.awt.Transparency w@@41)))
 :pattern ( (UOrdering2 fixed.java.awt.image.BufferedImage w@@41))
)))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 w@@42 fixed.java.awt.image.BufferedImage)) (= (oneStep fixed.java.awt.Image w@@42) fixed.java.awt.image.BufferedImage))
 :pattern ( (UOrdering2 w@@42 fixed.java.awt.image.BufferedImage))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@43 T@U) ) (!  (=> (= (type w@@43) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@43) (UOrdering2 w@@43 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@43) (= fixed.java.lang.Exception w@@43))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@43) (UOrdering2 w@@43 fixed.java.lang.Exception))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@44)) (or (= fixed.java.lang.RuntimeException w@@44) (UOrdering2 fixed.java.lang.Exception w@@44)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@44))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 w@@45 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@45) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@45 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@46 T@U) ) (!  (=> (= (type w@@46) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@46) (UOrdering2 w@@46 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@46) (= fixed.java.lang.RuntimeException w@@46))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@46) (UOrdering2 w@@46 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@47 T@U) ) (!  (=> (and (= (type w@@47) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@47)) (or (= fixed.java.lang.ClassCastException w@@47) (UOrdering2 fixed.java.lang.RuntimeException w@@47)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@47))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 w@@48 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@48) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@48 fixed.java.lang.ClassCastException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@49 T@U) ) (!  (=> (= (type w@@49) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@49) (UOrdering2 w@@49 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@49) (= fixed.java.lang.RuntimeException w@@49))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@49) (UOrdering2 w@@49 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@50 T@U) ) (!  (=> (and (= (type w@@50) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@50)) (or (= fixed.java.lang.NullPointerException w@@50) (UOrdering2 fixed.java.lang.RuntimeException w@@50)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@50))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 w@@51 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@51) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@51 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.nio.Buffer) javaTypeType))
(assert (not (= fixed.java.nio.Buffer fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.nio.Buffer fixed.java.lang.Object))
(assert (forall ((w@@52 T@U) ) (!  (=> (= (type w@@52) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.Buffer w@@52) (UOrdering2 w@@52 fixed.java.lang.Object)) (or (= fixed.java.nio.Buffer w@@52) (= fixed.java.lang.Object w@@52))))
 :pattern ( (UOrdering2 fixed.java.nio.Buffer w@@52) (UOrdering2 w@@52 fixed.java.lang.Object))
)))
(assert (forall ((w@@53 T@U) ) (!  (=> (and (= (type w@@53) javaTypeType) (UOrdering2 fixed.java.nio.Buffer w@@53)) (or (= fixed.java.nio.Buffer w@@53) (UOrdering2 fixed.java.lang.Object w@@53)))
 :pattern ( (UOrdering2 fixed.java.nio.Buffer w@@53))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) javaTypeType) (UOrdering2 w@@54 fixed.java.nio.Buffer)) (= (oneStep fixed.java.lang.Object w@@54) fixed.java.nio.Buffer))
 :pattern ( (UOrdering2 w@@54 fixed.java.nio.Buffer))
)))
(assert (= (type fixed.java.nio.ByteBuffer) javaTypeType))
(assert (not (= fixed.java.nio.ByteBuffer fixed.java.nio.Buffer)))
(assert (UOrdering2 fixed.java.nio.ByteBuffer fixed.java.nio.Buffer))
(assert (not (= fixed.java.nio.ByteBuffer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.nio.ByteBuffer fixed.java.lang.Comparable))
(assert (forall ((w@@55 T@U) ) (!  (=> (= (type w@@55) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.ByteBuffer w@@55) (UOrdering2 w@@55 fixed.java.nio.Buffer)) (or (= fixed.java.nio.ByteBuffer w@@55) (= fixed.java.nio.Buffer w@@55))))
 :pattern ( (UOrdering2 fixed.java.nio.ByteBuffer w@@55) (UOrdering2 w@@55 fixed.java.nio.Buffer))
)))
(assert (forall ((w@@56 T@U) ) (!  (=> (= (type w@@56) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.ByteBuffer w@@56) (UOrdering2 w@@56 fixed.java.lang.Comparable)) (or (= fixed.java.nio.ByteBuffer w@@56) (= fixed.java.lang.Comparable w@@56))))
 :pattern ( (UOrdering2 fixed.java.nio.ByteBuffer w@@56) (UOrdering2 w@@56 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@57 T@U) ) (!  (=> (and (= (type w@@57) javaTypeType) (UOrdering2 fixed.java.nio.ByteBuffer w@@57)) (or (or (= fixed.java.nio.ByteBuffer w@@57) (UOrdering2 fixed.java.nio.Buffer w@@57)) (UOrdering2 fixed.java.lang.Comparable w@@57)))
 :pattern ( (UOrdering2 fixed.java.nio.ByteBuffer w@@57))
)))
(assert (forall ((w@@58 T@U) ) (!  (=> (and (= (type w@@58) javaTypeType) (UOrdering2 w@@58 fixed.java.nio.ByteBuffer)) (= (oneStep fixed.java.nio.Buffer w@@58) fixed.java.nio.ByteBuffer))
 :pattern ( (UOrdering2 w@@58 fixed.java.nio.ByteBuffer))
)))
(assert (= (type fixed.java.nio.IntBuffer) javaTypeType))
(assert (not (= fixed.java.nio.IntBuffer fixed.java.nio.Buffer)))
(assert (UOrdering2 fixed.java.nio.IntBuffer fixed.java.nio.Buffer))
(assert (not (= fixed.java.nio.IntBuffer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.nio.IntBuffer fixed.java.lang.Comparable))
(assert (forall ((w@@59 T@U) ) (!  (=> (= (type w@@59) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.IntBuffer w@@59) (UOrdering2 w@@59 fixed.java.nio.Buffer)) (or (= fixed.java.nio.IntBuffer w@@59) (= fixed.java.nio.Buffer w@@59))))
 :pattern ( (UOrdering2 fixed.java.nio.IntBuffer w@@59) (UOrdering2 w@@59 fixed.java.nio.Buffer))
)))
(assert (forall ((w@@60 T@U) ) (!  (=> (= (type w@@60) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.IntBuffer w@@60) (UOrdering2 w@@60 fixed.java.lang.Comparable)) (or (= fixed.java.nio.IntBuffer w@@60) (= fixed.java.lang.Comparable w@@60))))
 :pattern ( (UOrdering2 fixed.java.nio.IntBuffer w@@60) (UOrdering2 w@@60 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@61 T@U) ) (!  (=> (and (= (type w@@61) javaTypeType) (UOrdering2 fixed.java.nio.IntBuffer w@@61)) (or (or (= fixed.java.nio.IntBuffer w@@61) (UOrdering2 fixed.java.nio.Buffer w@@61)) (UOrdering2 fixed.java.lang.Comparable w@@61)))
 :pattern ( (UOrdering2 fixed.java.nio.IntBuffer w@@61))
)))
(assert (forall ((w@@62 T@U) ) (!  (=> (and (= (type w@@62) javaTypeType) (UOrdering2 w@@62 fixed.java.nio.IntBuffer)) (= (oneStep fixed.java.nio.Buffer w@@62) fixed.java.nio.IntBuffer))
 :pattern ( (UOrdering2 w@@62 fixed.java.nio.IntBuffer))
)))
(assert (= (type fixed.java.lang.AutoCloseable) javaTypeType))
(assert (forall ((w@@63 T@U) ) (!  (=> (and (= (type w@@63) javaTypeType) (UOrdering2 fixed.java.lang.AutoCloseable w@@63)) (= fixed.java.lang.AutoCloseable w@@63))
 :pattern ( (UOrdering2 fixed.java.lang.AutoCloseable w@@63))
)))
(assert (= (type fixed.java.io.Closeable) javaTypeType))
(assert (not (= fixed.java.io.Closeable fixed.java.lang.AutoCloseable)))
(assert (UOrdering2 fixed.java.io.Closeable fixed.java.lang.AutoCloseable))
(assert (forall ((w@@64 T@U) ) (!  (=> (= (type w@@64) javaTypeType) (=> (and (UOrdering2 fixed.java.io.Closeable w@@64) (UOrdering2 w@@64 fixed.java.lang.AutoCloseable)) (or (= fixed.java.io.Closeable w@@64) (= fixed.java.lang.AutoCloseable w@@64))))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@64) (UOrdering2 w@@64 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@65 T@U) ) (!  (=> (and (= (type w@@65) javaTypeType) (UOrdering2 fixed.java.io.Closeable w@@65)) (or (= fixed.java.io.Closeable w@@65) (UOrdering2 fixed.java.lang.AutoCloseable w@@65)))
 :pattern ( (UOrdering2 fixed.java.io.Closeable w@@65))
)))
(assert (= (type fixed.java.io.Flushable) javaTypeType))
(assert (forall ((w@@66 T@U) ) (!  (=> (and (= (type w@@66) javaTypeType) (UOrdering2 fixed.java.io.Flushable w@@66)) (= fixed.java.io.Flushable w@@66))
 :pattern ( (UOrdering2 fixed.java.io.Flushable w@@66))
)))
(assert (= (type fixed.java.io.OutputStream) javaTypeType))
(assert (not (= fixed.java.io.OutputStream fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.lang.Object))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Closeable))
(assert (not (= fixed.java.io.OutputStream fixed.java.io.Flushable)))
(assert (UOrdering2 fixed.java.io.OutputStream fixed.java.io.Flushable))
(assert (forall ((w@@67 T@U) ) (!  (=> (= (type w@@67) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@67) (UOrdering2 w@@67 fixed.java.lang.Object)) (or (= fixed.java.io.OutputStream w@@67) (= fixed.java.lang.Object w@@67))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@67) (UOrdering2 w@@67 fixed.java.lang.Object))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (= (type w@@68) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@68) (UOrdering2 w@@68 fixed.java.io.Closeable)) (or (= fixed.java.io.OutputStream w@@68) (= fixed.java.io.Closeable w@@68))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@68) (UOrdering2 w@@68 fixed.java.io.Closeable))
)))
(assert (forall ((w@@69 T@U) ) (!  (=> (= (type w@@69) javaTypeType) (=> (and (UOrdering2 fixed.java.io.OutputStream w@@69) (UOrdering2 w@@69 fixed.java.io.Flushable)) (or (= fixed.java.io.OutputStream w@@69) (= fixed.java.io.Flushable w@@69))))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@69) (UOrdering2 w@@69 fixed.java.io.Flushable))
)))
(assert (forall ((w@@70 T@U) ) (!  (=> (and (= (type w@@70) javaTypeType) (UOrdering2 fixed.java.io.OutputStream w@@70)) (or (or (or (= fixed.java.io.OutputStream w@@70) (UOrdering2 fixed.java.lang.Object w@@70)) (UOrdering2 fixed.java.io.Closeable w@@70)) (UOrdering2 fixed.java.io.Flushable w@@70)))
 :pattern ( (UOrdering2 fixed.java.io.OutputStream w@@70))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 w@@71 fixed.java.io.OutputStream)) (= (oneStep fixed.java.lang.Object w@@71) fixed.java.io.OutputStream))
 :pattern ( (UOrdering2 w@@71 fixed.java.io.OutputStream))
)))
(assert (= (type fixed.java.io.ByteArrayOutputStream) javaTypeType))
(assert (not (= fixed.java.io.ByteArrayOutputStream fixed.java.io.OutputStream)))
(assert (UOrdering2 fixed.java.io.ByteArrayOutputStream fixed.java.io.OutputStream))
(assert (forall ((w@@72 T@U) ) (!  (=> (= (type w@@72) javaTypeType) (=> (and (UOrdering2 fixed.java.io.ByteArrayOutputStream w@@72) (UOrdering2 w@@72 fixed.java.io.OutputStream)) (or (= fixed.java.io.ByteArrayOutputStream w@@72) (= fixed.java.io.OutputStream w@@72))))
 :pattern ( (UOrdering2 fixed.java.io.ByteArrayOutputStream w@@72) (UOrdering2 w@@72 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@73 T@U) ) (!  (=> (and (= (type w@@73) javaTypeType) (UOrdering2 fixed.java.io.ByteArrayOutputStream w@@73)) (or (= fixed.java.io.ByteArrayOutputStream w@@73) (UOrdering2 fixed.java.io.OutputStream w@@73)))
 :pattern ( (UOrdering2 fixed.java.io.ByteArrayOutputStream w@@73))
)))
(assert (forall ((w@@74 T@U) ) (!  (=> (and (= (type w@@74) javaTypeType) (UOrdering2 w@@74 fixed.java.io.ByteArrayOutputStream)) (= (oneStep fixed.java.io.OutputStream w@@74) fixed.java.io.ByteArrayOutputStream))
 :pattern ( (UOrdering2 w@@74 fixed.java.io.ByteArrayOutputStream))
)))
(assert (= (type fixed.java.io.IOException) javaTypeType))
(assert (not (= fixed.java.io.IOException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.io.IOException fixed.java.lang.Exception))
(assert (forall ((w@@75 T@U) ) (!  (=> (= (type w@@75) javaTypeType) (=> (and (UOrdering2 fixed.java.io.IOException w@@75) (UOrdering2 w@@75 fixed.java.lang.Exception)) (or (= fixed.java.io.IOException w@@75) (= fixed.java.lang.Exception w@@75))))
 :pattern ( (UOrdering2 fixed.java.io.IOException w@@75) (UOrdering2 w@@75 fixed.java.lang.Exception))
)))
(assert (forall ((w@@76 T@U) ) (!  (=> (and (= (type w@@76) javaTypeType) (UOrdering2 fixed.java.io.IOException w@@76)) (or (= fixed.java.io.IOException w@@76) (UOrdering2 fixed.java.lang.Exception w@@76)))
 :pattern ( (UOrdering2 fixed.java.io.IOException w@@76))
)))
(assert (forall ((w@@77 T@U) ) (!  (=> (and (= (type w@@77) javaTypeType) (UOrdering2 w@@77 fixed.java.io.IOException)) (= (oneStep fixed.java.lang.Exception w@@77) fixed.java.io.IOException))
 :pattern ( (UOrdering2 w@@77 fixed.java.io.IOException))
)))
(assert (= (type fixed.java.lang.ArithmeticException) javaTypeType))
(assert (not (= fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ArithmeticException fixed.java.lang.RuntimeException))
(assert (forall ((w@@78 T@U) ) (!  (=> (= (type w@@78) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArithmeticException w@@78) (UOrdering2 w@@78 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ArithmeticException w@@78) (= fixed.java.lang.RuntimeException w@@78))))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@78) (UOrdering2 w@@78 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@79 T@U) ) (!  (=> (and (= (type w@@79) javaTypeType) (UOrdering2 fixed.java.lang.ArithmeticException w@@79)) (or (= fixed.java.lang.ArithmeticException w@@79) (UOrdering2 fixed.java.lang.RuntimeException w@@79)))
 :pattern ( (UOrdering2 fixed.java.lang.ArithmeticException w@@79))
)))
(assert (forall ((w@@80 T@U) ) (!  (=> (and (= (type w@@80) javaTypeType) (UOrdering2 w@@80 fixed.java.lang.ArithmeticException)) (= (oneStep fixed.java.lang.RuntimeException w@@80) fixed.java.lang.ArithmeticException))
 :pattern ( (UOrdering2 w@@80 fixed.java.lang.ArithmeticException))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@81 T@U) ) (!  (=> (= (type w@@81) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@81) (UOrdering2 w@@81 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@81) (= fixed.java.lang.RuntimeException w@@81))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@81) (UOrdering2 w@@81 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@82 T@U) ) (!  (=> (and (= (type w@@82) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@82)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@82) (UOrdering2 fixed.java.lang.RuntimeException w@@82)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@82))
)))
(assert (forall ((w@@83 T@U) ) (!  (=> (and (= (type w@@83) javaTypeType) (UOrdering2 w@@83 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@83) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@83 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@84 T@U) ) (!  (=> (= (type w@@84) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@84) (UOrdering2 w@@84 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@84) (= fixed.java.lang.IndexOutOfBoundsException w@@84))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@84) (UOrdering2 w@@84 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@85 T@U) ) (!  (=> (and (= (type w@@85) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@85)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@85) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@85)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@85))
)))
(assert (forall ((w@@86 T@U) ) (!  (=> (and (= (type w@@86) javaTypeType) (UOrdering2 w@@86 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@86) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@86 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.StringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.AbstractStringBuilder)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.AbstractStringBuilder))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@87 T@U) ) (!  (=> (= (type w@@87) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@87) (UOrdering2 w@@87 fixed.java.lang.AbstractStringBuilder)) (or (= fixed.java.lang.StringBuilder w@@87) (= fixed.java.lang.AbstractStringBuilder w@@87))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@87) (UOrdering2 w@@87 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@88 T@U) ) (!  (=> (= (type w@@88) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@88) (UOrdering2 w@@88 fixed.java.io.Serializable)) (or (= fixed.java.lang.StringBuilder w@@88) (= fixed.java.io.Serializable w@@88))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@88) (UOrdering2 w@@88 fixed.java.io.Serializable))
)))
(assert (forall ((w@@89 T@U) ) (!  (=> (= (type w@@89) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@89) (UOrdering2 w@@89 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.StringBuilder w@@89) (= fixed.java.lang.CharSequence w@@89))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@89) (UOrdering2 w@@89 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@90 T@U) ) (!  (=> (and (= (type w@@90) javaTypeType) (UOrdering2 fixed.java.lang.StringBuilder w@@90)) (or (or (or (= fixed.java.lang.StringBuilder w@@90) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@90)) (UOrdering2 fixed.java.io.Serializable w@@90)) (UOrdering2 fixed.java.lang.CharSequence w@@90)))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@90))
)))
(assert (forall ((w@@91 T@U) ) (!  (=> (and (= (type w@@91) javaTypeType) (UOrdering2 w@@91 fixed.java.lang.StringBuilder)) (= (oneStep fixed.java.lang.AbstractStringBuilder w@@91) fixed.java.lang.StringBuilder))
 :pattern ( (UOrdering2 w@@91 fixed.java.lang.StringBuilder))
)))
(assert  (and (= (Ctor refType) 4) (= (type fixed.$StringConst0) refType)))
(assert (forall ((w@@92 T@U) ) (!  (=> (and (= (type w@@92) refType) (UOrdering2 fixed.$StringConst0 w@@92)) (= fixed.$StringConst0 w@@92))
 :pattern ( (UOrdering2 fixed.$StringConst0 w@@92))
)))
(assert (= (type fixed.java.io.FilterOutputStream) javaTypeType))
(assert (not (= fixed.java.io.FilterOutputStream fixed.java.io.OutputStream)))
(assert (UOrdering2 fixed.java.io.FilterOutputStream fixed.java.io.OutputStream))
(assert (forall ((w@@93 T@U) ) (!  (=> (= (type w@@93) javaTypeType) (=> (and (UOrdering2 fixed.java.io.FilterOutputStream w@@93) (UOrdering2 w@@93 fixed.java.io.OutputStream)) (or (= fixed.java.io.FilterOutputStream w@@93) (= fixed.java.io.OutputStream w@@93))))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@93) (UOrdering2 w@@93 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@94 T@U) ) (!  (=> (and (= (type w@@94) javaTypeType) (UOrdering2 fixed.java.io.FilterOutputStream w@@94)) (or (= fixed.java.io.FilterOutputStream w@@94) (UOrdering2 fixed.java.io.OutputStream w@@94)))
 :pattern ( (UOrdering2 fixed.java.io.FilterOutputStream w@@94))
)))
(assert (forall ((w@@95 T@U) ) (!  (=> (and (= (type w@@95) javaTypeType) (UOrdering2 w@@95 fixed.java.io.FilterOutputStream)) (= (oneStep fixed.java.io.OutputStream w@@95) fixed.java.io.FilterOutputStream))
 :pattern ( (UOrdering2 w@@95 fixed.java.io.FilterOutputStream))
)))
(assert (= (type fixed.java.io.PrintStream) javaTypeType))
(assert (not (= fixed.java.io.PrintStream fixed.java.io.FilterOutputStream)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.io.FilterOutputStream))
(assert (not (= fixed.java.io.PrintStream fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.lang.Appendable))
(assert (not (= fixed.java.io.PrintStream fixed.java.io.Closeable)))
(assert (UOrdering2 fixed.java.io.PrintStream fixed.java.io.Closeable))
(assert (forall ((w@@96 T@U) ) (!  (=> (= (type w@@96) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@96) (UOrdering2 w@@96 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.PrintStream w@@96) (= fixed.java.io.FilterOutputStream w@@96))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@96) (UOrdering2 w@@96 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@97 T@U) ) (!  (=> (= (type w@@97) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@97) (UOrdering2 w@@97 fixed.java.lang.Appendable)) (or (= fixed.java.io.PrintStream w@@97) (= fixed.java.lang.Appendable w@@97))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@97) (UOrdering2 w@@97 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@98 T@U) ) (!  (=> (= (type w@@98) javaTypeType) (=> (and (UOrdering2 fixed.java.io.PrintStream w@@98) (UOrdering2 w@@98 fixed.java.io.Closeable)) (or (= fixed.java.io.PrintStream w@@98) (= fixed.java.io.Closeable w@@98))))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@98) (UOrdering2 w@@98 fixed.java.io.Closeable))
)))
(assert (forall ((w@@99 T@U) ) (!  (=> (and (= (type w@@99) javaTypeType) (UOrdering2 fixed.java.io.PrintStream w@@99)) (or (or (or (= fixed.java.io.PrintStream w@@99) (UOrdering2 fixed.java.io.FilterOutputStream w@@99)) (UOrdering2 fixed.java.lang.Appendable w@@99)) (UOrdering2 fixed.java.io.Closeable w@@99)))
 :pattern ( (UOrdering2 fixed.java.io.PrintStream w@@99))
)))
(assert (forall ((w@@100 T@U) ) (!  (=> (and (= (type w@@100) javaTypeType) (UOrdering2 w@@100 fixed.java.io.PrintStream)) (= (oneStep fixed.java.io.FilterOutputStream w@@100) fixed.java.io.PrintStream))
 :pattern ( (UOrdering2 w@@100 fixed.java.io.PrintStream))
)))
(assert (= (type fixed.java.lang.Math) javaTypeType))
(assert (not (= fixed.java.lang.Math fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Math fixed.java.lang.Object))
(assert (forall ((w@@101 T@U) ) (!  (=> (= (type w@@101) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Math w@@101) (UOrdering2 w@@101 fixed.java.lang.Object)) (or (= fixed.java.lang.Math w@@101) (= fixed.java.lang.Object w@@101))))
 :pattern ( (UOrdering2 fixed.java.lang.Math w@@101) (UOrdering2 w@@101 fixed.java.lang.Object))
)))
(assert (forall ((w@@102 T@U) ) (!  (=> (and (= (type w@@102) javaTypeType) (UOrdering2 fixed.java.lang.Math w@@102)) (or (= fixed.java.lang.Math w@@102) (UOrdering2 fixed.java.lang.Object w@@102)))
 :pattern ( (UOrdering2 fixed.java.lang.Math w@@102))
)))
(assert (forall ((w@@103 T@U) ) (!  (=> (and (= (type w@@103) javaTypeType) (UOrdering2 w@@103 fixed.java.lang.Math)) (= (oneStep fixed.java.lang.Object w@@103) fixed.java.lang.Math))
 :pattern ( (UOrdering2 w@@103 fixed.java.lang.Math))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@104 T@U) ) (!  (=> (= (type w@@104) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@104) (UOrdering2 w@@104 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@104) (= fixed.java.lang.Object w@@104))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@104) (UOrdering2 w@@104 fixed.java.lang.Object))
)))
(assert (forall ((w@@105 T@U) ) (!  (=> (and (= (type w@@105) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@105)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@105) (UOrdering2 fixed.java.lang.Object w@@105)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@105))
)))
(assert (forall ((w@@106 T@U) ) (!  (=> (and (= (type w@@106) javaTypeType) (UOrdering2 w@@106 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@106) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@106 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Boolean fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Comparable))
(assert (forall ((w@@107 T@U) ) (!  (=> (= (type w@@107) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@107) (UOrdering2 w@@107 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@107) (= fixed.java.lang.Object w@@107))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@107) (UOrdering2 w@@107 fixed.java.lang.Object))
)))
(assert (forall ((w@@108 T@U) ) (!  (=> (= (type w@@108) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@108) (UOrdering2 w@@108 fixed.java.io.Serializable)) (or (= fixed.java.lang.Boolean w@@108) (= fixed.java.io.Serializable w@@108))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@108) (UOrdering2 w@@108 fixed.java.io.Serializable))
)))
(assert (forall ((w@@109 T@U) ) (!  (=> (= (type w@@109) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@109) (UOrdering2 w@@109 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Boolean w@@109) (= fixed.java.lang.Comparable w@@109))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@109) (UOrdering2 w@@109 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@110 T@U) ) (!  (=> (and (= (type w@@110) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@110)) (or (or (or (= fixed.java.lang.Boolean w@@110) (UOrdering2 fixed.java.lang.Object w@@110)) (UOrdering2 fixed.java.io.Serializable w@@110)) (UOrdering2 fixed.java.lang.Comparable w@@110)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@110))
)))
(assert (forall ((w@@111 T@U) ) (!  (=> (and (= (type w@@111) javaTypeType) (UOrdering2 w@@111 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@111) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@111 fixed.java.lang.Boolean))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@112 T@U) ) (!  (=> (= (type w@@112) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@112) (UOrdering2 w@@112 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@112) (= fixed.java.lang.Object w@@112))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@112) (UOrdering2 w@@112 fixed.java.lang.Object))
)))
(assert (forall ((w@@113 T@U) ) (!  (=> (= (type w@@113) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@113) (UOrdering2 w@@113 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@113) (= fixed.java.io.Serializable w@@113))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@113) (UOrdering2 w@@113 fixed.java.io.Serializable))
)))
(assert (forall ((w@@114 T@U) ) (!  (=> (and (= (type w@@114) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@114)) (or (or (= fixed.java.lang.Number w@@114) (UOrdering2 fixed.java.lang.Object w@@114)) (UOrdering2 fixed.java.io.Serializable w@@114)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@114))
)))
(assert (forall ((w@@115 T@U) ) (!  (=> (and (= (type w@@115) javaTypeType) (UOrdering2 w@@115 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@115) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@115 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.Byte) javaTypeType))
(assert (not (= fixed.java.lang.Byte fixed.java.lang.Number)))
(assert (UOrdering2 fixed.java.lang.Byte fixed.java.lang.Number))
(assert (not (= fixed.java.lang.Byte fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Byte fixed.java.lang.Comparable))
(assert (forall ((w@@116 T@U) ) (!  (=> (= (type w@@116) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Byte w@@116) (UOrdering2 w@@116 fixed.java.lang.Number)) (or (= fixed.java.lang.Byte w@@116) (= fixed.java.lang.Number w@@116))))
 :pattern ( (UOrdering2 fixed.java.lang.Byte w@@116) (UOrdering2 w@@116 fixed.java.lang.Number))
)))
(assert (forall ((w@@117 T@U) ) (!  (=> (= (type w@@117) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Byte w@@117) (UOrdering2 w@@117 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Byte w@@117) (= fixed.java.lang.Comparable w@@117))))
 :pattern ( (UOrdering2 fixed.java.lang.Byte w@@117) (UOrdering2 w@@117 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@118 T@U) ) (!  (=> (and (= (type w@@118) javaTypeType) (UOrdering2 fixed.java.lang.Byte w@@118)) (or (or (= fixed.java.lang.Byte w@@118) (UOrdering2 fixed.java.lang.Number w@@118)) (UOrdering2 fixed.java.lang.Comparable w@@118)))
 :pattern ( (UOrdering2 fixed.java.lang.Byte w@@118))
)))
(assert (forall ((w@@119 T@U) ) (!  (=> (and (= (type w@@119) javaTypeType) (UOrdering2 w@@119 fixed.java.lang.Byte)) (= (oneStep fixed.java.lang.Number w@@119) fixed.java.lang.Byte))
 :pattern ( (UOrdering2 w@@119 fixed.java.lang.Byte))
)))
(assert (forall ((w@@120 T@U) ) (!  (=> (and (= (type w@@120) javaTypeType) (UOrdering2 w@@120 fixed.java.lang.Object)) (or (or (or (or (or (or (or (or (or (or (or (= fixed.java.lang.Object w@@120) (UOrdering2 w@@120 fixed.ImageMatcherWorker)) (UOrdering2 w@@120 fixed.java.lang.String)) (UOrdering2 w@@120 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@120 fixed.java.lang.Throwable)) (UOrdering2 w@@120 fixed.java.awt.Image)) (UOrdering2 w@@120 fixed.java.nio.Buffer)) (UOrdering2 w@@120 fixed.java.io.OutputStream)) (UOrdering2 w@@120 fixed.java.lang.Math)) (UOrdering2 w@@120 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@120 fixed.java.lang.Boolean)) (UOrdering2 w@@120 fixed.java.lang.Number)))
 :pattern ( (UOrdering2 w@@120 fixed.java.lang.Object))
)))
(assert (forall ((w@@121 T@U) ) (!  (=> (and (= (type w@@121) javaTypeType) (UOrdering2 w@@121 fixed.ImageMatcherWorker)) (= fixed.ImageMatcherWorker w@@121))
 :pattern ( (UOrdering2 w@@121 fixed.ImageMatcherWorker))
)))
(assert (forall ((w@@122 T@U) ) (!  (=> (and (= (type w@@122) javaTypeType) (UOrdering2 w@@122 fixed.java.io.Serializable)) (or (or (or (or (or (or (= fixed.java.io.Serializable w@@122) (UOrdering2 w@@122 fixed.java.lang.String)) (UOrdering2 w@@122 fixed.java.lang.StringBuffer)) (UOrdering2 w@@122 fixed.java.lang.Throwable)) (UOrdering2 w@@122 fixed.java.lang.StringBuilder)) (UOrdering2 w@@122 fixed.java.lang.Boolean)) (UOrdering2 w@@122 fixed.java.lang.Number)))
 :pattern ( (UOrdering2 w@@122 fixed.java.io.Serializable))
)))
(assert (forall ((w@@123 T@U) ) (!  (=> (and (= (type w@@123) javaTypeType) (UOrdering2 w@@123 fixed.java.lang.Comparable)) (or (or (or (or (or (= fixed.java.lang.Comparable w@@123) (UOrdering2 w@@123 fixed.java.lang.String)) (UOrdering2 w@@123 fixed.java.nio.ByteBuffer)) (UOrdering2 w@@123 fixed.java.nio.IntBuffer)) (UOrdering2 w@@123 fixed.java.lang.Boolean)) (UOrdering2 w@@123 fixed.java.lang.Byte)))
 :pattern ( (UOrdering2 w@@123 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@124 T@U) ) (!  (=> (and (= (type w@@124) javaTypeType) (UOrdering2 w@@124 fixed.java.lang.CharSequence)) (or (or (or (or (= fixed.java.lang.CharSequence w@@124) (UOrdering2 w@@124 fixed.java.lang.String)) (UOrdering2 w@@124 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@124 fixed.java.lang.StringBuffer)) (UOrdering2 w@@124 fixed.java.lang.StringBuilder)))
 :pattern ( (UOrdering2 w@@124 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@125 T@U) ) (!  (=> (and (= (type w@@125) javaTypeType) (UOrdering2 w@@125 fixed.java.lang.String)) (= fixed.java.lang.String w@@125))
 :pattern ( (UOrdering2 w@@125 fixed.java.lang.String))
)))
(assert (forall ((w@@126 T@U) ) (!  (=> (and (= (type w@@126) javaTypeType) (UOrdering2 w@@126 fixed.java.lang.Appendable)) (or (or (= fixed.java.lang.Appendable w@@126) (UOrdering2 w@@126 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@126 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@126 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@127 T@U) ) (!  (=> (and (= (type w@@127) javaTypeType) (UOrdering2 w@@127 fixed.java.lang.AbstractStringBuilder)) (or (or (= fixed.java.lang.AbstractStringBuilder w@@127) (UOrdering2 w@@127 fixed.java.lang.StringBuffer)) (UOrdering2 w@@127 fixed.java.lang.StringBuilder)))
 :pattern ( (UOrdering2 w@@127 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@128 T@U) ) (!  (=> (and (= (type w@@128) javaTypeType) (UOrdering2 w@@128 fixed.java.lang.StringBuffer)) (= fixed.java.lang.StringBuffer w@@128))
 :pattern ( (UOrdering2 w@@128 fixed.java.lang.StringBuffer))
)))
(assert (forall ((w@@129 T@U) ) (!  (=> (and (= (type w@@129) javaTypeType) (UOrdering2 w@@129 fixed.ScalrApplyTest)) (= fixed.ScalrApplyTest w@@129))
 :pattern ( (UOrdering2 w@@129 fixed.ScalrApplyTest))
)))
(assert (forall ((w@@130 T@U) ) (!  (=> (and (= (type w@@130) javaTypeType) (UOrdering2 w@@130 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@130) (UOrdering2 w@@130 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@130 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@131 T@U) ) (!  (=> (and (= (type w@@131) javaTypeType) (UOrdering2 w@@131 fixed.java.lang.Exception)) (or (or (= fixed.java.lang.Exception w@@131) (UOrdering2 w@@131 fixed.java.lang.RuntimeException)) (UOrdering2 w@@131 fixed.java.io.IOException)))
 :pattern ( (UOrdering2 w@@131 fixed.java.lang.Exception))
)))
(assert (forall ((w@@132 T@U) ) (!  (=> (and (= (type w@@132) javaTypeType) (UOrdering2 w@@132 fixed.java.awt.Image)) (or (= fixed.java.awt.Image w@@132) (UOrdering2 w@@132 fixed.java.awt.image.BufferedImage)))
 :pattern ( (UOrdering2 w@@132 fixed.java.awt.Image))
)))
(assert (forall ((w@@133 T@U) ) (!  (=> (and (= (type w@@133) javaTypeType) (UOrdering2 w@@133 fixed.java.awt.image.RenderedImage)) (or (= fixed.java.awt.image.RenderedImage w@@133) (UOrdering2 w@@133 fixed.java.awt.image.WritableRenderedImage)))
 :pattern ( (UOrdering2 w@@133 fixed.java.awt.image.RenderedImage))
)))
(assert (forall ((w@@134 T@U) ) (!  (=> (and (= (type w@@134) javaTypeType) (UOrdering2 w@@134 fixed.java.awt.image.WritableRenderedImage)) (or (= fixed.java.awt.image.WritableRenderedImage w@@134) (UOrdering2 w@@134 fixed.java.awt.image.BufferedImage)))
 :pattern ( (UOrdering2 w@@134 fixed.java.awt.image.WritableRenderedImage))
)))
(assert (forall ((w@@135 T@U) ) (!  (=> (and (= (type w@@135) javaTypeType) (UOrdering2 w@@135 fixed.java.awt.Transparency)) (or (= fixed.java.awt.Transparency w@@135) (UOrdering2 w@@135 fixed.java.awt.image.BufferedImage)))
 :pattern ( (UOrdering2 w@@135 fixed.java.awt.Transparency))
)))
(assert (forall ((w@@136 T@U) ) (!  (=> (and (= (type w@@136) javaTypeType) (UOrdering2 w@@136 fixed.java.awt.image.BufferedImage)) (= fixed.java.awt.image.BufferedImage w@@136))
 :pattern ( (UOrdering2 w@@136 fixed.java.awt.image.BufferedImage))
)))
(assert (forall ((w@@137 T@U) ) (!  (=> (and (= (type w@@137) javaTypeType) (UOrdering2 w@@137 fixed.java.lang.RuntimeException)) (or (or (or (or (= fixed.java.lang.RuntimeException w@@137) (UOrdering2 w@@137 fixed.java.lang.ClassCastException)) (UOrdering2 w@@137 fixed.java.lang.NullPointerException)) (UOrdering2 w@@137 fixed.java.lang.ArithmeticException)) (UOrdering2 w@@137 fixed.java.lang.IndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@137 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@138 T@U) ) (!  (=> (and (= (type w@@138) javaTypeType) (UOrdering2 w@@138 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@138))
 :pattern ( (UOrdering2 w@@138 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@139 T@U) ) (!  (=> (and (= (type w@@139) javaTypeType) (UOrdering2 w@@139 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@139))
 :pattern ( (UOrdering2 w@@139 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@140 T@U) ) (!  (=> (and (= (type w@@140) javaTypeType) (UOrdering2 w@@140 fixed.java.nio.Buffer)) (or (or (= fixed.java.nio.Buffer w@@140) (UOrdering2 w@@140 fixed.java.nio.ByteBuffer)) (UOrdering2 w@@140 fixed.java.nio.IntBuffer)))
 :pattern ( (UOrdering2 w@@140 fixed.java.nio.Buffer))
)))
(assert (forall ((w@@141 T@U) ) (!  (=> (and (= (type w@@141) javaTypeType) (UOrdering2 w@@141 fixed.java.nio.ByteBuffer)) (= fixed.java.nio.ByteBuffer w@@141))
 :pattern ( (UOrdering2 w@@141 fixed.java.nio.ByteBuffer))
)))
(assert (forall ((w@@142 T@U) ) (!  (=> (and (= (type w@@142) javaTypeType) (UOrdering2 w@@142 fixed.java.nio.IntBuffer)) (= fixed.java.nio.IntBuffer w@@142))
 :pattern ( (UOrdering2 w@@142 fixed.java.nio.IntBuffer))
)))
(assert (forall ((w@@143 T@U) ) (!  (=> (and (= (type w@@143) javaTypeType) (UOrdering2 w@@143 fixed.java.lang.AutoCloseable)) (or (= fixed.java.lang.AutoCloseable w@@143) (UOrdering2 w@@143 fixed.java.io.Closeable)))
 :pattern ( (UOrdering2 w@@143 fixed.java.lang.AutoCloseable))
)))
(assert (forall ((w@@144 T@U) ) (!  (=> (and (= (type w@@144) javaTypeType) (UOrdering2 w@@144 fixed.java.io.Closeable)) (or (or (= fixed.java.io.Closeable w@@144) (UOrdering2 w@@144 fixed.java.io.OutputStream)) (UOrdering2 w@@144 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@144 fixed.java.io.Closeable))
)))
(assert (forall ((w@@145 T@U) ) (!  (=> (and (= (type w@@145) javaTypeType) (UOrdering2 w@@145 fixed.java.io.Flushable)) (or (= fixed.java.io.Flushable w@@145) (UOrdering2 w@@145 fixed.java.io.OutputStream)))
 :pattern ( (UOrdering2 w@@145 fixed.java.io.Flushable))
)))
(assert (forall ((w@@146 T@U) ) (!  (=> (and (= (type w@@146) javaTypeType) (UOrdering2 w@@146 fixed.java.io.OutputStream)) (or (or (= fixed.java.io.OutputStream w@@146) (UOrdering2 w@@146 fixed.java.io.ByteArrayOutputStream)) (UOrdering2 w@@146 fixed.java.io.FilterOutputStream)))
 :pattern ( (UOrdering2 w@@146 fixed.java.io.OutputStream))
)))
(assert (forall ((w@@147 T@U) ) (!  (=> (and (= (type w@@147) javaTypeType) (UOrdering2 w@@147 fixed.java.io.ByteArrayOutputStream)) (= fixed.java.io.ByteArrayOutputStream w@@147))
 :pattern ( (UOrdering2 w@@147 fixed.java.io.ByteArrayOutputStream))
)))
(assert (forall ((w@@148 T@U) ) (!  (=> (and (= (type w@@148) javaTypeType) (UOrdering2 w@@148 fixed.java.io.IOException)) (= fixed.java.io.IOException w@@148))
 :pattern ( (UOrdering2 w@@148 fixed.java.io.IOException))
)))
(assert (forall ((w@@149 T@U) ) (!  (=> (and (= (type w@@149) javaTypeType) (UOrdering2 w@@149 fixed.java.lang.ArithmeticException)) (= fixed.java.lang.ArithmeticException w@@149))
 :pattern ( (UOrdering2 w@@149 fixed.java.lang.ArithmeticException))
)))
(assert (forall ((w@@150 T@U) ) (!  (=> (and (= (type w@@150) javaTypeType) (UOrdering2 w@@150 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@150) (UOrdering2 w@@150 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@150 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@151 T@U) ) (!  (=> (and (= (type w@@151) javaTypeType) (UOrdering2 w@@151 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@151))
 :pattern ( (UOrdering2 w@@151 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@152 T@U) ) (!  (=> (and (= (type w@@152) javaTypeType) (UOrdering2 w@@152 fixed.java.lang.StringBuilder)) (= fixed.java.lang.StringBuilder w@@152))
 :pattern ( (UOrdering2 w@@152 fixed.java.lang.StringBuilder))
)))
(assert (forall ((w@@153 T@U) ) (!  (=> (and (= (type w@@153) refType) (UOrdering2 w@@153 fixed.$StringConst0)) (= fixed.$StringConst0 w@@153))
 :pattern ( (UOrdering2 w@@153 fixed.$StringConst0))
)))
(assert (forall ((w@@154 T@U) ) (!  (=> (and (= (type w@@154) javaTypeType) (UOrdering2 w@@154 fixed.java.io.FilterOutputStream)) (or (= fixed.java.io.FilterOutputStream w@@154) (UOrdering2 w@@154 fixed.java.io.PrintStream)))
 :pattern ( (UOrdering2 w@@154 fixed.java.io.FilterOutputStream))
)))
(assert (forall ((w@@155 T@U) ) (!  (=> (and (= (type w@@155) javaTypeType) (UOrdering2 w@@155 fixed.java.io.PrintStream)) (= fixed.java.io.PrintStream w@@155))
 :pattern ( (UOrdering2 w@@155 fixed.java.io.PrintStream))
)))
(assert (forall ((w@@156 T@U) ) (!  (=> (and (= (type w@@156) javaTypeType) (UOrdering2 w@@156 fixed.java.lang.Math)) (= fixed.java.lang.Math w@@156))
 :pattern ( (UOrdering2 w@@156 fixed.java.lang.Math))
)))
(assert (forall ((w@@157 T@U) ) (!  (=> (and (= (type w@@157) javaTypeType) (UOrdering2 w@@157 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@157))
 :pattern ( (UOrdering2 w@@157 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@158 T@U) ) (!  (=> (and (= (type w@@158) javaTypeType) (UOrdering2 w@@158 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@158))
 :pattern ( (UOrdering2 w@@158 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@159 T@U) ) (!  (=> (and (= (type w@@159) javaTypeType) (UOrdering2 w@@159 fixed.java.lang.Number)) (or (= fixed.java.lang.Number w@@159) (UOrdering2 w@@159 fixed.java.lang.Byte)))
 :pattern ( (UOrdering2 w@@159 fixed.java.lang.Number))
)))
(assert (forall ((w@@160 T@U) ) (!  (=> (and (= (type w@@160) javaTypeType) (UOrdering2 w@@160 fixed.java.lang.Byte)) (= fixed.java.lang.Byte w@@160))
 :pattern ( (UOrdering2 w@@160 fixed.java.lang.Byte))
)))
(assert  (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 5)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.ImageMatcherWorker fixed.java.io.Serializable fixed.java.lang.Comparable fixed.java.lang.CharSequence fixed.java.lang.String fixed.java.lang.Appendable fixed.java.lang.AbstractStringBuilder fixed.java.lang.StringBuffer fixed.ScalrApplyTest fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.awt.Image fixed.java.awt.image.RenderedImage fixed.java.awt.image.WritableRenderedImage fixed.java.awt.Transparency fixed.java.awt.image.BufferedImage fixed.java.lang.RuntimeException fixed.java.lang.ClassCastException fixed.java.lang.NullPointerException fixed.java.nio.Buffer fixed.java.nio.ByteBuffer fixed.java.nio.IntBuffer fixed.java.lang.AutoCloseable fixed.java.io.Closeable fixed.java.io.Flushable fixed.java.io.OutputStream fixed.java.io.ByteArrayOutputStream fixed.java.io.IOException fixed.java.lang.ArithmeticException fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.StringBuilder fixed.$StringConst0 fixed.java.io.FilterOutputStream fixed.java.io.PrintStream fixed.java.lang.Math fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Boolean fixed.java.lang.Number fixed.java.lang.Byte)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCIm.161:15|
 :skolemid |395|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCIm.165:15|
 :skolemid |396|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCIm.169:15|
 :skolemid |397|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCIm.173:15|
 :skolemid |398|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCIm.177:15|
 :skolemid |399|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCIm.181:15|
 :skolemid |400|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCIm.183:15|
 :skolemid |401|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCIm.7342:15|
 :skolemid |537|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCIm.7346:15|
 :skolemid |538|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCIm.7350:15|
 :skolemid |539|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCIm.7354:15|
 :skolemid |540|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCIm.7358:15|
 :skolemid |541|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCIm.7362:15|
 :skolemid |542|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCIm.7364:15|
 :skolemid |543|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type call1formal@$exception@0) refType) (= (type call1formal@$exception@0@@0) refType)) (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap@9) (MapType0Type refType))) (= (type fixed.$heap@4) (MapType0Type refType))) (= (type fixed.$heap) (MapType0Type refType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$stringSizeHeap@0) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap@1) (MapType1Type refType intType))) (= (type call3formal@$obj@0) refType)) (= (type fixed.$heap@5) (MapType0Type refType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type fixed.$heap@6) (MapType0Type refType))) (= (type $this) refType)) (= (type fixed.java.lang.String$ImageMatcherWorker$errorcode263) (FieldType refType))) (= (type call3formal@$obj@0@@0) refType)) (= (type fixed.$heap@7) (MapType0Type refType))) (= (type fixed.$heap@8) (MapType0Type refType))) (= (type fixed.java.lang.StringBuffer$ImageMatcherWorker$error264) (FieldType refType))) (= (type fixed.boolean$ImageMatcherWorker$success0) (FieldType intType))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type call3formal@$obj@0@@1) refType)) (= (type fixed.$heap@0) (MapType0Type refType))) (= (type fixed.$heap@1) (MapType0Type refType))) (= (type call3formal@$obj@0@@2) refType)) (= (type fixed.$heap@2) (MapType0Type refType))) (= (type fixed.$heap@3) (MapType0Type refType))))
(push 1)
(set-info :boogie-vc-id PROC_.ImageMatcherWorker$$la$init$ra$$_EQ_unsafe__xx__fixed)
(assert (not
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+224805 true) :lblpos +224805) (=> (and (and (and (and (=> AA_TEMP30@1 (or AA_TEMP30@0 (= call1formal@$exception@0 call1formal@$exception@0@@0))) (=> (or AA_TEMP30@0 (= call1formal@$exception@0 call1formal@$exception@0@@0)) AA_TEMP30@1)) (and (=> AA_TEMP31@1 (or AA_TEMP31@0 (= fixed.$objIndex@3 fixed.$objIndex@3))) (=> (or AA_TEMP31@0 (= fixed.$objIndex@3 fixed.$objIndex@3)) AA_TEMP31@1))) (and (=> AA_TEMP32@1 (or AA_TEMP32@0 (forall ((r T@U) (f T@U) ) (! (let ((_ty (FieldTypeInv0 (type f))))
 (=> (and (= (type r) refType) (= (type f) (FieldType _ty))) (or (= (MapType0Select fixed.$heap@9 r f) (MapType0Select fixed.$heap@4 r f)) (not (U_2_bool (MapType0Select fixed.$heap r fixed.$alloc))))))
 :qid |RSPROCIm.10450:20|
 :skolemid |556|
 :no-pattern (type r)
 :no-pattern (type f)
 :no-pattern (U_2_int r)
 :no-pattern (U_2_bool r)
 :no-pattern (U_2_int f)
 :no-pattern (U_2_bool f)
)))) (=> (or AA_TEMP32@0 (forall ((r@@0 T@U) (f@@0 T@U) ) (! (let ((_ty@@0 (FieldTypeInv0 (type f@@0))))
 (=> (and (= (type r@@0) refType) (= (type f@@0) (FieldType _ty@@0))) (or (= (MapType0Select fixed.$heap@9 r@@0 f@@0) (MapType0Select fixed.$heap@4 r@@0 f@@0)) (not (U_2_bool (MapType0Select fixed.$heap r@@0 fixed.$alloc))))))
 :qid |RSPROCIm.10450:20|
 :skolemid |556|
 :no-pattern (type r@@0)
 :no-pattern (type f@@0)
 :no-pattern (U_2_int r@@0)
 :no-pattern (U_2_bool r@@0)
 :no-pattern (U_2_int f@@0)
 :no-pattern (U_2_bool f@@0)
))) AA_TEMP32@1))) (and (=> AA_TEMP33@1 (or (or AA_TEMP33@0 (= fixed.$stringSizeHeap@0 fixed.$stringSizeHeap@1)) (forall ((_x0 T@U) ) (!  (=> (= (type _x0) refType) (= (U_2_int (MapType1Select fixed.$stringSizeHeap@0 _x0)) (U_2_int (MapType1Select fixed.$stringSizeHeap@1 _x0))))
 :qid |RSPROCIm.10454:15|
 :skolemid |557|
 :no-pattern (type _x0)
 :no-pattern (U_2_int _x0)
 :no-pattern (U_2_bool _x0)
)))) (=> (or (or AA_TEMP33@0 (= fixed.$stringSizeHeap@0 fixed.$stringSizeHeap@1)) (forall ((_x0@@0 T@U) ) (!  (=> (= (type _x0@@0) refType) (= (U_2_int (MapType1Select fixed.$stringSizeHeap@0 _x0@@0)) (U_2_int (MapType1Select fixed.$stringSizeHeap@1 _x0@@0))))
 :qid |RSPROCIm.10454:15|
 :skolemid |557|
 :no-pattern (type _x0@@0)
 :no-pattern (U_2_int _x0@@0)
 :no-pattern (U_2_bool _x0@@0)
))) AA_TEMP33@1))) (! (or %lbl%@229695  (and (and (and AA_TEMP33@1 AA_TEMP32@1) AA_TEMP31@1) AA_TEMP30@1)) :lblneg @229695)))))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+224804 true) :lblpos +224804) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$block1_correct  (=> (! (and %lbl%+224803 true) :lblpos +224803) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$anon0$1_correct  (=> (! (and %lbl%+224802 true) :lblpos +224802) (=> (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0 fixed.$alloc))) (= fixed.$heap@5 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0 fixed.$type fixed.java.lang.String))) (=> (and (and (= fixed.$objIndex@2 (+ fixed.$objIndex 1)) (= call3formal@$obj@0 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0 fixed.$null)) (= fixed.$stringSizeHeap@1 (MapType1Store fixed.$stringSizeHeap call3formal@$obj@0 (int_2_U 0))))) (=> (and (and (and (= fixed.$heap@6 (MapType0Store fixed.$heap@5 $this fixed.java.lang.String$ImageMatcherWorker$errorcode263 call3formal@$obj@0)) (not (U_2_bool (MapType0Select fixed.$heap@6 call3formal@$obj@0@@0 fixed.$alloc)))) (and (= fixed.$heap@7 (MapType0Store (MapType0Store fixed.$heap@6 call3formal@$obj@0@@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@0 fixed.$type fixed.java.lang.StringBuffer)) (= fixed.$objIndex@3 (+ fixed.$objIndex@2 1)))) (and (and (= call3formal@$obj@0@@0 (fixed.$intToRef fixed.$objIndex@2)) (not (= call3formal@$obj@0@@0 fixed.$null))) (and (= fixed.$heap@8 (MapType0Store fixed.$heap@7 $this fixed.java.lang.StringBuffer$ImageMatcherWorker$error264 call3formal@$obj@0@@0)) (= fixed.$heap@9 (MapType0Store fixed.$heap@8 $this fixed.boolean$ImageMatcherWorker$success0 (int_2_U 0)))))) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$block1_correct))))))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+224801 true) :lblpos +224801) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$anon0$1_correct)))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+224800 true) :lblpos +224800) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+224799 true) :lblpos +224799) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+224798 true) :lblpos +224798) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCIm.10386:20|
 :skolemid |553|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCIm.10387:20|
 :skolemid |554|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCIm.10388:20|
 :skolemid |555|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.ImageMatcherWorker) (not (= $this fixed.$null)))) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+224797 true) :lblpos +224797) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+224796 true) :lblpos +224796) inline$fixed.ImageMatcherWorker$$la$init$ra$$$0$Entry_correct)))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+224795 true) :lblpos +224795) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$block1_correct  (=> (! (and %lbl%+224794 true) :lblpos +224794) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$anon0$1_correct  (=> (! (and %lbl%+224793 true) :lblpos +224793) (=> (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@1 fixed.$alloc))) (= fixed.$heap@0 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@1 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@1 fixed.$type fixed.java.lang.String))) (=> (and (and (= fixed.$objIndex@0 (+ fixed.$objIndex 1)) (= call3formal@$obj@0@@1 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@1 fixed.$null)) (= fixed.$stringSizeHeap@0 (MapType1Store fixed.$stringSizeHeap call3formal@$obj@0@@1 (int_2_U 0))))) (=> (and (and (and (= fixed.$heap@1 (MapType0Store fixed.$heap@0 $this fixed.java.lang.String$ImageMatcherWorker$errorcode263 call3formal@$obj@0@@1)) (not (U_2_bool (MapType0Select fixed.$heap@1 call3formal@$obj@0@@2 fixed.$alloc)))) (and (= fixed.$heap@2 (MapType0Store (MapType0Store fixed.$heap@1 call3formal@$obj@0@@2 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@2 fixed.$type fixed.java.lang.StringBuffer)) (= fixed.$objIndex@1 (+ fixed.$objIndex@0 1)))) (and (and (= call3formal@$obj@0@@2 (fixed.$intToRef fixed.$objIndex@0)) (not (= call3formal@$obj@0@@2 fixed.$null))) (and (= fixed.$heap@3 (MapType0Store fixed.$heap@2 $this fixed.java.lang.StringBuffer$ImageMatcherWorker$error264 call3formal@$obj@0@@2)) (= fixed.$heap@4 (MapType0Store fixed.$heap@3 $this fixed.boolean$ImageMatcherWorker$success0 (int_2_U 0)))))) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$block1_correct))))))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+224792 true) :lblpos +224792) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$anon0$1_correct)))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+224791 true) :lblpos +224791) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+224790 true) :lblpos +224790) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+224789 true) :lblpos +224789) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCIm.10314:20|
 :skolemid |550|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCIm.10315:20|
 :skolemid |551|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCIm.10316:20|
 :skolemid |552|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.ImageMatcherWorker) (not (= $this fixed.$null)))) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+224788 true) :lblpos +224788) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+224787 true) :lblpos +224787) inline$unsafe.ImageMatcherWorker$$la$init$ra$$$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+228446 true) :lblpos +228446) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+228453 true) :lblpos +228453) q@0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
