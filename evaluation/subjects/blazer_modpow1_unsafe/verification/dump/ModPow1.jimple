public class ModPow1 extends java.lang.Object
{

    public void <init>()
    {
        ModPow1 r0;

        r0 := @this: ModPow1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigInteger modPow1_unsafe(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, int)
    {
        java.math.BigInteger r0, r1, r2, $r3, $r4, $r5, r7, r8;
        int i0, $i1, $i2, i3;
        boolean z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        i0 := @parameter3: int;

        r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

        r8 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $i1 = i0 - i3;

        $i2 = $i1 - 1;

        z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>($i2);

        $r4 = staticinvoke <ModPow1: java.math.BigInteger standardMultiply(java.math.BigInteger,java.math.BigInteger)>(r8, r0);

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r6 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r5, r8);

        r7 = (java.math.BigInteger) $r6;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r7;
    }

    public static java.math.BigInteger modPow1_unsafe_inline(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, r24, r25, r26, r27;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        r24 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        i11 = 0;

     label01:
        if i11 >= i0 goto label11;

        $r11 = virtualinvoke r24.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r24);

        r24 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $i3 = i0 - i11;

        $i4 = $i3 - 1;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>($i4);

        if $z0 == 0 goto label10;

        r3 = r24;

        r4 = r0;

        i1 = virtualinvoke r3.<java.math.BigInteger: int bitLength()>();

        i2 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();

        $r12 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z1 = virtualinvoke r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label02;

        return r4;

     label02:
        $r13 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z2 = virtualinvoke r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label03;

        return r3;

     label03:
        r25 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i12 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);

        if i12 > 800 goto label04;

        r26 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        goto label09;

     label04:
        $i5 = i1 - i2;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i6 < 32 goto label08;

        r26 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i13 = 0;

     label05:
        $i10 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();

        if i13 >= $i10 goto label07;

        $z3 = virtualinvoke r4.<java.math.BigInteger: boolean testBit(int)>(i13);

        if $z3 == 0 goto label06;

        $r23 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i13);

        r26 = virtualinvoke r26.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r23);

     label06:
        i13 = i13 + 1;

        goto label05;

     label07:
        goto label09;

     label08:
        $i8 = i12 / 2;

        $i7 = i12 % 2;

        i14 = $i8 + $i7;

        r27 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i14);

        $r14 = virtualinvoke r27.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i14);

        r5 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r14);

        r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i14);

        $r15 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i14);

        r7 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r15);

        r8 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r5, r7);

        r9 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r27, r6);

        $r16 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r27);

        $r17 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r6);

        r10 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>($r16, $r17);

        $r18 = virtualinvoke r10.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r8);

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r9);

        $r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i14);

        $r21 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r20);

        $i9 = 2 * i14;

        $r22 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i9);

        r26 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r22);

     label09:
        r24 = virtualinvoke r26.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

     label10:
        i11 = i11 + 1;

        goto label01;

     label11:
        return r24;
    }

    public static java.math.BigInteger fastMultiply_1(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, r7, r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20, r21;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r10 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        r20 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i7 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        if i7 > 800 goto label3;

        r21 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        goto label5;

     label3:
        $i2 = i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i3 < 32 goto label4;

        r21 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        goto label5;

     label4:
        $i5 = i7 / 2;

        $i4 = i7 % 2;

        i8 = $i5 + $i4;

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i8);

        $r11 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i8);

        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i8);

        $r12 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i8);

        r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        r6 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r3, r5);

        r7 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r2, r4);

        $r13 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r2);

        $r14 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r4);

        r8 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>($r13, $r14);

        $r15 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r6);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r7);

        $r17 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i8);

        $r18 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r17);

        $i6 = 2 * i8;

        $r19 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i6);

        r21 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r19);

     label5:
        return r21;
    }

    public static java.math.BigInteger fastMultiply_inline(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, r3, r4, r5, r6, r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20, r21, r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $r8 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r9 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        r20 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        if i8 > 800 goto label3;

        r21 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r1);

        goto label8;

     label3:
        $i2 = i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i3 < 32 goto label7;

        r21 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i9 = 0;

     label4:
        $i7 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if i9 >= $i7 goto label6;

        $z2 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i9);

        if $z2 == 0 goto label5;

        $r19 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i9);

        r21 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r19);

     label5:
        i9 = i9 + 1;

        goto label4;

     label6:
        goto label8;

     label7:
        $i5 = i8 / 2;

        $i4 = i8 % 2;

        i10 = $i5 + $i4;

        r22 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i10);

        $r10 = virtualinvoke r22.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i10);

        $r11 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        r5 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r2, r4);

        r6 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>(r22, r3);

        $r12 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r22);

        $r13 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r3);

        r7 = staticinvoke <ModPow1: java.math.BigInteger fastMultiply_1(java.math.BigInteger,java.math.BigInteger)>($r12, $r13);

        $r14 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r5);

        $r15 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r6);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i10);

        $r17 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);

        $i6 = 2 * i10;

        $r18 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i6);

        r21 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r18);

     label8:
        return r21;
    }

    public static java.math.BigInteger standardMultiply(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, r3;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if i1 >= $i0 goto label3;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i1);

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }
}
