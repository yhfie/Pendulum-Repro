var unsafe.$heap: $heap_type;

var unsafe.$intArrayType: javaType;

var unsafe.$charArrayType: javaType;

var unsafe.$boolArrayType: javaType;

var unsafe.$byteArrayType: javaType;

var unsafe.$longArrayType: javaType;

var unsafe.$arrSizeHeap: [ref]int;

var unsafe.$stringSizeHeap: [ref]int;

var unsafe.$boolArrHeap: boolArrHeap_type;

var unsafe.$refArrHeap: refArrHeap_type;

var unsafe.$realArrHeap: realArrHeap_type;

var unsafe.$intArrHeap: intArrHeap_type;

var unsafe.$objIndex: int;

var unsafe.long$java.math.BigInteger$value0: Field int;

var unsafe.java.math.BigInteger$java.math.BigInteger$ONE259: ref;

var unsafe.java.math.BigInteger$java.math.BigInteger$ZERO260: ref;

var unsafe.java.math.BigInteger$java.math.BigInteger$ONE80: ref;

var unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79: ref;

const unique unsafe.$type: Field javaType;

const unique unsafe.$alloc: Field bool;

const unique unsafe.$null: ref;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.Object: javaType extends complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.math.BigInteger: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.io.Serializable: javaType extends complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.Throwable: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.Exception: javaType extends unique unsafe.java.lang.Throwable complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.RuntimeException: javaType extends unique unsafe.java.lang.Exception complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.NullPointerException: javaType extends unique unsafe.java.lang.RuntimeException complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.ArithmeticException: javaType extends unique unsafe.java.lang.RuntimeException complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.reflect.AnnotatedElement: javaType extends complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.reflect.GenericDeclaration: javaType extends unsafe.java.lang.reflect.AnnotatedElement complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.reflect.Type: javaType extends complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.Class: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable, unsafe.java.lang.reflect.GenericDeclaration, unsafe.java.lang.reflect.Type, unsafe.java.lang.reflect.AnnotatedElement complete;

const {:sourceloc "BigInteger.java", -1, -1, -1, -1} unique unsafe.java.lang.ClassCastException: javaType extends unique unsafe.java.lang.RuntimeException complete;

const {:sourceloc "ModPow1.java", -1, -1, -1, -1} unique unsafe.ModPow1: javaType extends unique unsafe.java.lang.Object complete;

const {:sourceloc "ModPow1.java", -1, -1, -1, -1} unique unsafe.java.lang.Number: javaType extends unique unsafe.java.lang.Object, unsafe.java.io.Serializable complete;

const {:sourceloc "ModPow1.java", -1, -1, -1, -1} unique unsafe.java.lang.Comparable: javaType extends complete;

const {:sourceloc "ModPow1.java", -1, -1, -1, -1} unique unsafe.java.lang.Math: javaType extends unique unsafe.java.lang.Object complete;

function unsafe.$arrayType(t: javaType) : javaType;

function unsafe.$intToReal(x: int) : real;

function unsafe.$intToBool(x: int) : bool;

function unsafe.$refToBool(x: ref) : bool;

function unsafe.$boolToInt(x: bool) : int;

function unsafe.$cmpBool(x: bool, y: bool) : int;

function unsafe.$cmpRef(x: ref, y: ref) : int;

function unsafe.$cmpReal(x: real, y: real) : int;

function unsafe.$cmpInt(x: int, y: int) : int;

function unsafe.$bitOr(x: int, y: int) : int;

function unsafe.$bitAnd(x: int, y: int) : int;

function unsafe.$xorInt(x: int, y: int) : int;

function unsafe.$shlInt(x: int, y: int) : int;

function unsafe.$ushrInt(x: int, y: int) : int;

function unsafe.$shrInt(x: int, y: int) : int;

function unsafe.$mulInt(x: int, y: int) : int;

function unsafe.$divInt(x: int, y: int) : int;

function unsafe.$modInt(x: int, y: int) : int;

function unsafe.$intToRef(id: int) : ref;

axiom (forall x: int :: 
  { unsafe.$intToBool(x): bool } 
  unsafe.$intToBool(x): bool <==> (if x == 0 then false else true));

axiom (forall x: ref :: 
  { unsafe.$refToBool(x): bool } 
  unsafe.$refToBool(x): bool <==> (if x == unsafe.$null then false else true));

axiom (forall x: bool :: 
  { unsafe.$boolToInt(x): int } 
  unsafe.$boolToInt(x): int == (if x <==> true then 1 else 0));

axiom (forall x: real, y: real :: 
  { unsafe.$cmpReal(x, y): int } 
  unsafe.$cmpReal(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall x: int, y: int :: 
  { unsafe.$cmpInt(x, y): int } 
  unsafe.$cmpInt(x, y): int == (if x > y then 1 else (if x < y then -1 else 0)));

axiom (forall index: int :: unsafe.$intToRef(index) != unsafe.$null);

axiom (forall i1: int, i2: int :: 
  i1 == i2 <==> unsafe.$intToRef(i1) == unsafe.$intToRef(i2));

procedure {:prefix "unsafe"} unsafe.$new(obj_type: javaType) returns ($obj: ref);
  modifies unsafe.$objIndex, unsafe.$heap;
  free ensures $obj == unsafe.$intToRef(old(unsafe.$objIndex));
  free ensures $obj != unsafe.$null;
  free ensures !old(unsafe.$heap[$obj, unsafe.$alloc]);
  free ensures unsafe.$objIndex == old(unsafe.$objIndex) + 1;
  free ensures unsafe.$heap
   == old(unsafe.$heap)[$obj, unsafe.$alloc := true][$obj, unsafe.$type := obj_type];



procedure {:prefix "unsafe"} unsafe.java.lang.Object$java.lang.Object$clone$43($this: ref) returns ($other: ref);
  free ensures unsafe.$heap[$other, unsafe.$alloc] <==> true;
  free ensures $other != unsafe.$null;
  free ensures unsafe.$heap[$other, unsafe.$type] == unsafe.$heap[$this, unsafe.$type];



procedure {:prefix "unsafe"} unsafe.int$java.lang.String$compareTo$87($this: ref, $other: ref) returns ($return: int);



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$$la$init$ra$$long($this: ref, $in_parameter__0: int) returns ($exception: ref);
  modifies unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$valueOf$long($in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$multiply$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$shiftRight$int($this: ref, $in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$shiftLeft$int($this: ref, $in_parameter__0: int) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$subtract$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$add$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$mod$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.ArithmeticException$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$bitLength$($this: ref) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$testBit$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$equals$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Object$getClass$($this: ref) returns ($return: ref, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.math.BigInteger$$la$clinit$ra$$() returns ($exception: ref);
  modifies unsafe.java.math.BigInteger$java.math.BigInteger$ONE259, unsafe.$objIndex, unsafe.$heap, unsafe.java.math.BigInteger$java.math.BigInteger$ZERO260;



procedure {:prefix "unsafe"} unsafe.ModPow1$$la$init$ra$$($this: ref) returns ($exception: ref);



procedure {:prefix "unsafe"} unsafe.ModPow1$modPow1_unsafe$java.math.BigInteger_java.math.BigInteger_java.math.BigInteger_int($in_parameter__0: ref, 
    $in_parameter__1: ref, 
    $in_parameter__2: ref, 
    $in_parameter__3: int)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.ModPow1$modPow1_unsafe_inline$java.math.BigInteger_java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.java.lang.Math$max$int_int($in_parameter__0: int, $in_parameter__1: int)
   returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.java.lang.Math$abs$int($in_parameter__0: int) returns ($return: int, $exception: ref);



procedure {:prefix "unsafe"} unsafe.ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



procedure {:prefix "unsafe"} unsafe.ModPow1$fastMultiply_inline$java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref);
  modifies unsafe.$objIndex, unsafe.$heap;



implementation unsafe.java.math.BigInteger$$la$init$ra$$long($this: ref, $in_parameter__0: int) returns ($exception: ref)
{
  var r0: ref;
  var l0: int;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0 := l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto block1;

  block1:
    return;
}



implementation unsafe.java.math.BigInteger$valueOf$long($in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var l0: int;
  var $r0: ref;
  var $fakelocal_0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    l0 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r0 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r0;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := l0;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    $return := $r0;
    goto block2;

  block2:
    return;
}



implementation unsafe.java.math.BigInteger$multiply$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_1: ref;
  var $l1: int;
  var r0: ref;
  var $fakelocal_0: ref;
  var $l2: int;
  var r1: ref;
  var $l0: int;
  var $r2: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r2 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    $l1 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon4_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon3:
    $l0 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    $l2 := unsafe.$mulInt($l1, $l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r2;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := $l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    $return := $r2;
    goto block3;

  block3:
    return;
}



implementation unsafe.java.math.BigInteger$shiftRight$int($this: ref, $in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var $l2: int;
  var i0: int;
  var $r1: ref;
  var $fakelocal_0: ref;
  var $l1: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r1 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    $l1 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    $l2 := unsafe.$shrInt($l1, i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r1;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := $l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    $return := $r1;
    goto block4;

  block4:
    return;
}



implementation unsafe.java.math.BigInteger$shiftLeft$int($this: ref, $in_parameter__0: int) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $l2: int;
  var $l1: int;
  var r0: ref;
  var i0: int;
  var $r1: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r1 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    $l1 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    $l2 := unsafe.$shlInt($l1, i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r1;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := $l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    $return := $r1;
    goto block5;

  block5:
    return;
}



implementation unsafe.java.math.BigInteger$subtract$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var r0: ref;
  var r1: ref;
  var $l2: int;
  var $l0: int;
  var $r2: ref;
  var $fakelocal_0: ref;
  var $l1: int;
  var $fakelocal_1: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r2 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    $l1 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon4_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon3:
    $l0 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    $l2 := $l1 - $l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r2;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := $l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    $return := $r2;
    goto block6;

  block6:
    return;
}



implementation unsafe.java.math.BigInteger$add$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var r1: ref;
  var r0: ref;
  var $r2: ref;
  var $l2: int;
  var $fakelocal_1: ref;
  var $l0: int;
  var $l1: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r2 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    $l1 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon4_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon3:
    $l0 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    $l2 := $l1 + $l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r2;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := $l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    $return := $r2;
    goto block7;

  block7:
    return;
}



implementation unsafe.java.math.BigInteger$mod$java.math.BigInteger($this: ref, $in_parameter__0: ref) returns ($return: ref, $exception: ref)
{
  var $fakelocal_5: ref;
  var $l4: int;
  var $fakelocal_1: ref;
  var $l0: int;
  var $l8: int;
  var $b1: int;
  var $r3: ref;
  var $l10: int;
  var $l14: int;
  var $l9: int;
  var $fakelocal_4: ref;
  var $fakelocal_6: ref;
  var $l2: int;
  var r1: ref;
  var $b3: int;
  var $fakelocal_3: ref;
  var $r4: ref;
  var $l6: int;
  var r0: ref;
  var $r2: ref;
  var $fakelocal_2: ref;
  var $fakelocal_0: ref;
  var $l13: int;
  var $l7: int;
  var $l5: int;
  var $l12: int;
  var $l11: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon19_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    $l0 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    $b1 := unsafe.$cmpInt($l0, 0);
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} $b1 > 0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "thenblock"} true;
    goto block8;

  anon20_Else:
    assume {:partition} 0 >= $b1;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $r4 := $fakelocal_1;
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call $exception := unsafe.java.lang.ArithmeticException$$la$init$ra$$($r4);
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    $exception := $r4;
    goto block10;

  block8:
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    $l2 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    $b3 := unsafe.$cmpInt($l2, 0);
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    goto anon21_Then, anon21_Else;

  anon21_Then:
    assume {:partition} $b3 < 0;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto block9;

  anon21_Else:
    assume {:partition} 0 <= $b3;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    call $fakelocal_2 := unsafe.$new(unsafe.java.math.BigInteger);
    $r3 := $fakelocal_2;
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    $l13 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    $l12 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto anon22_Then, anon22_Else;

  anon22_Then:
    assume {:partition} $l12 != 0;
    $exception := $exception;
    goto anon12;

  anon22_Else:
    assume {:partition} $l12 == 0;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon12:
    $l14 := unsafe.$modInt($l13, $l12);
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r3;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := $l14;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon12$1;

  anon12$1:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    $return := $r3;
    goto block10;

  block9:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    call $fakelocal_4 := unsafe.$new(unsafe.java.math.BigInteger);
    $r2 := $fakelocal_4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $l8 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $l4 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $l6 := -$l4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $l5 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto anon23_Then, anon23_Else;

  anon23_Then:
    assume {:partition} $l5 != 0;
    $exception := $exception;
    goto anon15;

  anon23_Else:
    assume {:partition} $l5 == 0;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon15:
    $l7 := unsafe.$modInt($l6, $l5);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $l10 := $l8 - $l7;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $l9 := unsafe.$heap[r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto anon24_Then, anon24_Else;

  anon24_Then:
    assume {:partition} $l9 != 0;
    $exception := $exception;
    goto anon18;

  anon24_Else:
    assume {:partition} $l9 == 0;
    call $fakelocal_6 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_6;
    return;

  anon18:
    $l11 := unsafe.$modInt($l10, $l9);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := $r2;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := $l11;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto anon18$1;

  anon18$1:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    $return := $r2;
    goto block10;

  block10:
    return;
}



implementation unsafe.java.math.BigInteger$bitLength$($this: ref) returns ($return: int, $exception: ref)
{
  var $b1: int;
  var $b3: int;
  var i8: int;
  var l7: int;
  var $l4: int;
  var $b5: int;
  var $l0: int;
  var $l2: int;
  var r0: ref;
  var $l6: int;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    $l0 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    $b1 := unsafe.$cmpInt($l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto anon10_Then, anon10_Else;

  anon10_Then:
    assume {:partition} $b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto block11;

  anon10_Else:
    assume {:partition} $b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    $return := 1;
    goto block16;

  block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    $l2 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    $b3 := unsafe.$cmpInt($l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto anon11_Then, anon11_Else;

  anon11_Then:
    assume {:partition} $b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto block12;

  anon11_Else:
    assume {:partition} 0 < $b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    $l6 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto block13;

  block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    $l4 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    $l6 := -$l4;
    goto block13;

  block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    l7 := $l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    i8 := 0;
    goto block14;

  block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    $b5 := unsafe.$cmpInt(l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto anon12_Then, anon12_Else;

  anon12_Then:
    assume {:partition} $b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto block15;

  anon12_Else:
    assume {:partition} 0 < $b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    i8 := i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    l7 := unsafe.$shrInt(l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto block14;

  block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    $return := i8;
    goto block16;

  block16:
    return;
}



implementation unsafe.java.math.BigInteger$testBit$int($this: ref, $in_parameter__0: int) returns ($return: int, $exception: ref)
{
  var r0: ref;
  var $z0: int;
  var i0: int;
  var $b5: int;
  var $l2: int;
  var $l3: int;
  var $i1: int;
  var $l4: int;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $l3 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $i1 := unsafe.$shlInt(1, i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $l2 := $i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $l4 := unsafe.$bitAnd($l3, $l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $b5 := unsafe.$cmpInt($l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto anon4_Then, anon4_Else;

  anon4_Then:
    assume {:partition} $b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto block17;

  anon4_Else:
    assume {:partition} $b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto block18;

  block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $z0 := 0;
    goto block18;

  block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    $return := $z0;
    goto block19;

  block19:
    return;
}



implementation unsafe.java.math.BigInteger$equals$java.lang.Object($this: ref, $in_parameter__0: ref) returns ($return: int, $exception: ref)
{
  var $r3: ref;
  var $fakelocal_0: ref;
  var $l0: int;
  var $r4: ref;
  var $b2: int;
  var r2: ref;
  var $l1: int;
  var r1: ref;
  var r0: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} $this != unsafe.$null;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.lang.Object;
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} r0 != r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto block20;

  anon16_Else:
    assume {:partition} r0 == r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    $return := 1;
    goto block24;

  block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto block21;

  anon17_Else:
    assume {:partition} r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    $return := 0;
    goto block24;

  block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call $r3, $exception := unsafe.java.lang.Object$getClass$(r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call $r4, $exception := unsafe.java.lang.Object$getClass$(r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} $r3 == $r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto block22;

  anon18_Else:
    assume {:partition} $r3 != $r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    $return := 0;
    goto block24;

  block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} unsafe.$heap[r1, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := $exception;
    goto anon12;

  anon19_Else:
    assume {:partition} !(unsafe.$heap[r1, unsafe.$type] <: unsafe.java.math.BigInteger);
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    $return := 0;
    $exception := $fakelocal_0;
    return;

  anon12:
    r2 := r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    $l1 := unsafe.$heap[r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    $l0 := unsafe.$heap[r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    $b2 := unsafe.$cmpInt($l1, $l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} $b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto block23;

  anon20_Else:
    assume {:partition} $b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    $return := 0;
    goto block24;

  block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    $return := 1;
    goto block24;

  block24:
    return;
}



implementation unsafe.java.math.BigInteger$$la$clinit$ra$$() returns ($exception: ref)
{
  var $r1: ref;
  var $r0: ref;
  var $fakelocal_1: ref;
  var $fakelocal_0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    $exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", 14, -1, -1, -1} true;
    call $fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    $r0 := $fakelocal_0;
    assert {:sourceloc "BigInteger.java", 14, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := $r0;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := 1;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "BigInteger.java", 14, -1, -1, -1} true;
    unsafe.java.math.BigInteger$java.math.BigInteger$ONE259 := $r0;
    assert {:sourceloc "BigInteger.java", 15, -1, -1, -1} true;
    call $fakelocal_1 := unsafe.$new(unsafe.java.math.BigInteger);
    $r1 := $fakelocal_1;
    assert {:sourceloc "BigInteger.java", 15, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := $r1;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := 0;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    $exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto anon0$2;

  anon0$2:
    assert {:sourceloc "BigInteger.java", 15, -1, -1, -1} true;
    unsafe.java.math.BigInteger$java.math.BigInteger$ZERO260 := $r1;
    assert {:sourceloc "BigInteger.java", 15, -1, -1, -1} true;
    goto block25;

  block25:
    return;
}



implementation unsafe.ModPow1$$la$init$ra$$($this: ref) returns ($exception: ref)
{
  var r0: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "ModPow1.java", -1, -1, -1, -1} unsafe.$heap[$this, unsafe.$type] <: unsafe.ModPow1;
    assume {:sourceloc "ModPow1.java", -1, -1, -1, -1} $this != unsafe.$null;
    $exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r0 := $this;
    assert {:sourceloc "ModPow1.java", 3, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    $exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "ModPow1.java", 3, -1, -1, -1} true;
    goto block26;

  block26:
    return;
}



implementation unsafe.ModPow1$modPow1_unsafe$java.math.BigInteger_java.math.BigInteger_java.math.BigInteger_int($in_parameter__0: ref, 
    $in_parameter__1: ref, 
    $in_parameter__2: ref, 
    $in_parameter__3: int)
   returns ($return: ref, $exception: ref)
{
  var r1: ref;
  var $fakelocal_2: ref;
  var $fakelocal_3: ref;
  var $fakelocal_1: ref;
  var r5: ref;
  var r2: ref;
  var $fakelocal_0: ref;
  var $z0: int;
  var r0: ref;
  var $i1: int;
  var i0: int;
  var $r4: ref;
  var i3: int;
  var $r3: ref;
  var $i2: int;
  var inline$java.math.BigInteger$valueOf$long$0$l0: int;
  var inline$java.math.BigInteger$valueOf$long$0$$r0: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$valueOf$long$0$$return: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$exception: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$objIndex: int;
  var inline$java.math.BigInteger$valueOf$long$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.math.BigInteger$testBit$int$0$r0: ref;
  var inline$java.math.BigInteger$testBit$int$0$$z0: int;
  var inline$java.math.BigInteger$testBit$int$0$i0: int;
  var inline$java.math.BigInteger$testBit$int$0$$b5: int;
  var inline$java.math.BigInteger$testBit$int$0$$l2: int;
  var inline$java.math.BigInteger$testBit$int$0$$l3: int;
  var inline$java.math.BigInteger$testBit$int$0$$i1: int;
  var inline$java.math.BigInteger$testBit$int$0$$l4: int;
  var inline$java.math.BigInteger$testBit$int$0$$this: ref;
  var inline$java.math.BigInteger$testBit$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$testBit$int$0$$return: int;
  var inline$java.math.BigInteger$testBit$int$0$$exception: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$z0: int;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$r2: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r0: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1: int;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$i0: int;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception: ref;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$objIndex: int;
  var inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$0$$b1: int;
  var inline$java.math.BigInteger$bitLength$$0$$b3: int;
  var inline$java.math.BigInteger$bitLength$$0$i8: int;
  var inline$java.math.BigInteger$bitLength$$0$l7: int;
  var inline$java.math.BigInteger$bitLength$$0$$l4: int;
  var inline$java.math.BigInteger$bitLength$$0$$b5: int;
  var inline$java.math.BigInteger$bitLength$$0$$l0: int;
  var inline$java.math.BigInteger$bitLength$$0$$l2: int;
  var inline$java.math.BigInteger$bitLength$$0$r0: ref;
  var inline$java.math.BigInteger$bitLength$$0$$l6: int;
  var inline$java.math.BigInteger$bitLength$$0$$this: ref;
  var inline$java.math.BigInteger$bitLength$$0$$return: int;
  var inline$java.math.BigInteger$bitLength$$0$$exception: ref;
  var inline$java.math.BigInteger$testBit$int$1$r0: ref;
  var inline$java.math.BigInteger$testBit$int$1$$z0: int;
  var inline$java.math.BigInteger$testBit$int$1$i0: int;
  var inline$java.math.BigInteger$testBit$int$1$$b5: int;
  var inline$java.math.BigInteger$testBit$int$1$$l2: int;
  var inline$java.math.BigInteger$testBit$int$1$$l3: int;
  var inline$java.math.BigInteger$testBit$int$1$$i1: int;
  var inline$java.math.BigInteger$testBit$int$1$$l4: int;
  var inline$java.math.BigInteger$testBit$int$1$$this: ref;
  var inline$java.math.BigInteger$testBit$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$testBit$int$1$$return: int;
  var inline$java.math.BigInteger$testBit$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__2, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r2 := $in_parameter__2;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    i0 := $in_parameter__3;
    assert {:sourceloc "ModPow1.java", 28, -1, -1, -1} true;
    goto inline$java.math.BigInteger$valueOf$long$0$Entry;

  inline$java.math.BigInteger$valueOf$long$0$Entry:
    inline$java.math.BigInteger$valueOf$long$0$$in_parameter__0 := 1;
    havoc inline$java.math.BigInteger$valueOf$long$0$l0, inline$java.math.BigInteger$valueOf$long$0$$r0, inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0, inline$java.math.BigInteger$valueOf$long$0$$return, inline$java.math.BigInteger$valueOf$long$0$$exception;
    inline$java.math.BigInteger$valueOf$long$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$valueOf$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$valueOf$long$0$anon0;

  inline$java.math.BigInteger$valueOf$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$java.math.BigInteger$valueOf$long$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$valueOf$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$valueOf$long$0$l0 := inline$java.math.BigInteger$valueOf$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    call inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$valueOf$long$0$$r0 := inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := inline$java.math.BigInteger$valueOf$long$0$$r0;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := inline$java.math.BigInteger$valueOf$long$0$l0;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    inline$java.math.BigInteger$valueOf$long$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto inline$java.math.BigInteger$valueOf$long$0$anon0$1;

  inline$java.math.BigInteger$valueOf$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    inline$java.math.BigInteger$valueOf$long$0$$return := inline$java.math.BigInteger$valueOf$long$0$$r0;
    goto inline$java.math.BigInteger$valueOf$long$0$block2;

  inline$java.math.BigInteger$valueOf$long$0$block2:
    goto inline$java.math.BigInteger$valueOf$long$0$Return;

  inline$java.math.BigInteger$valueOf$long$0$Return:
    r5 := inline$java.math.BigInteger$valueOf$long$0$$return;
    $exception := inline$java.math.BigInteger$valueOf$long$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "ModPow1.java", 30, -1, -1, -1} true;
    i3 := 0;
    goto block27;

  block27:
    assert {:sourceloc "ModPow1.java", 30, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} i3 >= i0;
    assert {:sourceloc "ModPow1.java", 30, -1, -1, -1} {:comment "thenblock"} true;
    goto block28;

  anon19_Else:
    assume {:partition} i0 > i3;
    assert {:sourceloc "ModPow1.java", 30, -1, -1, -1} {:comment "elseblock"} true;
    goto anon3;

  anon3:
    assert {:sourceloc "ModPow1.java", 31, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} r5 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon20_Else:
    assume {:partition} r5 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon6:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this := r5;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0 := r5;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return:
    $r3 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "ModPow1.java", 31, -1, -1, -1} true;
    goto anon21_Then, anon21_Else;

  anon21_Then:
    assume {:partition} $r3 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon21_Else:
    assume {:partition} $r3 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon9:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this := $r3;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0 := r2;
    havoc inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6, inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1 > 0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block8;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Else:
    assume {:partition} 0 >= inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon6;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon6:
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1;
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := unsafe.java.lang.ArithmeticException$$la$init$ra$$(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4);
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$block8:
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3 < 0;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Else:
    assume {:partition} 0 <= inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon9:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2;
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12);
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$2$r0, inline$java.math.BigInteger$$la$init$ra$$long$2$l0, inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$2$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$r0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$l0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.math.BigInteger$$la$init$ra$$long$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$2$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12$1:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$block9:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6 := -inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon15;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon15:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8
   - inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$3$r0, inline$java.math.BigInteger$$la$init$ra$$long$3$l0, inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$3$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$r0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$l0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.math.BigInteger$$la$init$ra$$long$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$3$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18$1:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return:
    r5 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto anon9$1;

  anon9$1:
    assert {:sourceloc "ModPow1.java", 32, -1, -1, -1} true;
    $i1 := i0 - i3;
    assert {:sourceloc "ModPow1.java", 32, -1, -1, -1} true;
    $i2 := $i1 - 1;
    assert {:sourceloc "ModPow1.java", 32, -1, -1, -1} true;
    goto anon22_Then, anon22_Else;

  anon22_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon12;

  anon22_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon12:
    goto inline$java.math.BigInteger$testBit$int$0$Entry;

  inline$java.math.BigInteger$testBit$int$0$Entry:
    inline$java.math.BigInteger$testBit$int$0$$this := r1;
    inline$java.math.BigInteger$testBit$int$0$$in_parameter__0 := $i2;
    havoc inline$java.math.BigInteger$testBit$int$0$r0, inline$java.math.BigInteger$testBit$int$0$$z0, inline$java.math.BigInteger$testBit$int$0$i0, inline$java.math.BigInteger$testBit$int$0$$b5, inline$java.math.BigInteger$testBit$int$0$$l2, inline$java.math.BigInteger$testBit$int$0$$l3, inline$java.math.BigInteger$testBit$int$0$$i1, inline$java.math.BigInteger$testBit$int$0$$l4, inline$java.math.BigInteger$testBit$int$0$$return, inline$java.math.BigInteger$testBit$int$0$$exception;
    goto inline$java.math.BigInteger$testBit$int$0$anon0;

  inline$java.math.BigInteger$testBit$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$testBit$int$0$$this != unsafe.$null;
    inline$java.math.BigInteger$testBit$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$r0 := inline$java.math.BigInteger$testBit$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$i0 := inline$java.math.BigInteger$testBit$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l3 := unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$i1 := unsafe.$shlInt(1, inline$java.math.BigInteger$testBit$int$0$i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l2 := inline$java.math.BigInteger$testBit$int$0$$i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l4 := unsafe.$bitAnd(inline$java.math.BigInteger$testBit$int$0$$l3, 
  inline$java.math.BigInteger$testBit$int$0$$l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$testBit$int$0$$l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon4_Then, inline$java.math.BigInteger$testBit$int$0$anon4_Else;

  inline$java.math.BigInteger$testBit$int$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$block17;

  inline$java.math.BigInteger$testBit$int$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon3;

  inline$java.math.BigInteger$testBit$int$0$anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 0;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$return := inline$java.math.BigInteger$testBit$int$0$$z0;
    goto inline$java.math.BigInteger$testBit$int$0$block19;

  inline$java.math.BigInteger$testBit$int$0$block19:
    goto inline$java.math.BigInteger$testBit$int$0$Return;

  inline$java.math.BigInteger$testBit$int$0$Return:
    $z0 := inline$java.math.BigInteger$testBit$int$0$$return;
    $exception := inline$java.math.BigInteger$testBit$int$0$$exception;
    goto anon12$1;

  anon12$1:
    assert {:sourceloc "ModPow1.java", 32, -1, -1, -1} true;
    goto anon23_Then, anon23_Else;

  anon23_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "ModPow1.java", 32, -1, -1, -1} {:comment "thenblock"} true;
    goto block29;

  anon23_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "ModPow1.java", 32, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "ModPow1.java", 35, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Entry;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Entry:
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0 := r5;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1 := r0;
    havoc inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$z0, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$r2, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r0, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$i0, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon0;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r0 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 167, -1, -1, -1} true;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1 := 0;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block58;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block58:
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Then, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Else;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Then:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1
   != unsafe.$null;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon16_Else:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1
   == unsafe.$null;
    call inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3:
    goto inline$java.math.BigInteger$bitLength$$0$Entry;

  inline$java.math.BigInteger$bitLength$$0$Entry:
    inline$java.math.BigInteger$bitLength$$0$$this := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$bitLength$$0$$b1, inline$java.math.BigInteger$bitLength$$0$$b3, inline$java.math.BigInteger$bitLength$$0$i8, inline$java.math.BigInteger$bitLength$$0$l7, inline$java.math.BigInteger$bitLength$$0$$l4, inline$java.math.BigInteger$bitLength$$0$$b5, inline$java.math.BigInteger$bitLength$$0$$l0, inline$java.math.BigInteger$bitLength$$0$$l2, inline$java.math.BigInteger$bitLength$$0$r0, inline$java.math.BigInteger$bitLength$$0$$l6, inline$java.math.BigInteger$bitLength$$0$$return, inline$java.math.BigInteger$bitLength$$0$$exception;
    goto inline$java.math.BigInteger$bitLength$$0$anon0;

  inline$java.math.BigInteger$bitLength$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$0$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$r0 := inline$java.math.BigInteger$bitLength$$0$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon10_Then, inline$java.math.BigInteger$bitLength$$0$anon10_Else;

  inline$java.math.BigInteger$bitLength$$0$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block11;

  inline$java.math.BigInteger$bitLength$$0$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon3;

  inline$java.math.BigInteger$bitLength$$0$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon11_Then, inline$java.math.BigInteger$bitLength$$0$anon11_Else;

  inline$java.math.BigInteger$bitLength$$0$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block12;

  inline$java.math.BigInteger$bitLength$$0$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon6;

  inline$java.math.BigInteger$bitLength$$0$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := -inline$java.math.BigInteger$bitLength$$0$$l4;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := inline$java.math.BigInteger$bitLength$$0$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon12_Then, inline$java.math.BigInteger$bitLength$$0$anon12_Else;

  inline$java.math.BigInteger$bitLength$$0$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block15;

  inline$java.math.BigInteger$bitLength$$0$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon9;

  inline$java.math.BigInteger$bitLength$$0$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := inline$java.math.BigInteger$bitLength$$0$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$0$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := inline$java.math.BigInteger$bitLength$$0$i8;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block16:
    goto inline$java.math.BigInteger$bitLength$$0$Return;

  inline$java.math.BigInteger$bitLength$$0$Return:
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$i0 := inline$java.math.BigInteger$bitLength$$0$$return;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$0$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3$1;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Then, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Else;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Then:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1
   >= inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$i0;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block59;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon17_Else:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$i0
   > inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6:
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$1$Entry;

  inline$java.math.BigInteger$testBit$int$1$Entry:
    inline$java.math.BigInteger$testBit$int$1$$this := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$testBit$int$1$$in_parameter__0 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1;
    havoc inline$java.math.BigInteger$testBit$int$1$r0, inline$java.math.BigInteger$testBit$int$1$$z0, inline$java.math.BigInteger$testBit$int$1$i0, inline$java.math.BigInteger$testBit$int$1$$b5, inline$java.math.BigInteger$testBit$int$1$$l2, inline$java.math.BigInteger$testBit$int$1$$l3, inline$java.math.BigInteger$testBit$int$1$$i1, inline$java.math.BigInteger$testBit$int$1$$l4, inline$java.math.BigInteger$testBit$int$1$$return, inline$java.math.BigInteger$testBit$int$1$$exception;
    goto inline$java.math.BigInteger$testBit$int$1$anon0;

  inline$java.math.BigInteger$testBit$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$testBit$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$testBit$int$1$$this != unsafe.$null;
    inline$java.math.BigInteger$testBit$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$r0 := inline$java.math.BigInteger$testBit$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$i0 := inline$java.math.BigInteger$testBit$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$l3 := unsafe.$heap[inline$java.math.BigInteger$testBit$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$i1 := unsafe.$shlInt(1, inline$java.math.BigInteger$testBit$int$1$i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$l2 := inline$java.math.BigInteger$testBit$int$1$$i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$l4 := unsafe.$bitAnd(inline$java.math.BigInteger$testBit$int$1$$l3, 
  inline$java.math.BigInteger$testBit$int$1$$l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$testBit$int$1$$l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$1$anon4_Then, inline$java.math.BigInteger$testBit$int$1$anon4_Else;

  inline$java.math.BigInteger$testBit$int$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$testBit$int$1$$b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$testBit$int$1$block17;

  inline$java.math.BigInteger$testBit$int$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$testBit$int$1$$b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$testBit$int$1$anon3;

  inline$java.math.BigInteger$testBit$int$1$anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$1$block18;

  inline$java.math.BigInteger$testBit$int$1$block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$z0 := 0;
    goto inline$java.math.BigInteger$testBit$int$1$block18;

  inline$java.math.BigInteger$testBit$int$1$block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$return := inline$java.math.BigInteger$testBit$int$1$$z0;
    goto inline$java.math.BigInteger$testBit$int$1$block19;

  inline$java.math.BigInteger$testBit$int$1$block19:
    goto inline$java.math.BigInteger$testBit$int$1$Return;

  inline$java.math.BigInteger$testBit$int$1$Return:
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$z0 := inline$java.math.BigInteger$testBit$int$1$$return;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$testBit$int$1$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6$1;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon6$1:
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Then, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Else;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Then:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block60;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon18_Else:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon9;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon9:
    assert {:sourceloc "ModPow1.java", 170, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Then, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Else;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Then:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r0
   != unsafe.$null;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon19_Else:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r0
   == unsafe.$null;
    call inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Entry;

  inline$java.math.BigInteger$shiftLeft$int$0$Entry:
    inline$java.math.BigInteger$shiftLeft$int$0$$this := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1;
    havoc inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$0$$l2, inline$java.math.BigInteger$shiftLeft$int$0$$l1, inline$java.math.BigInteger$shiftLeft$int$0$r0, inline$java.math.BigInteger$shiftLeft$int$0$i0, inline$java.math.BigInteger$shiftLeft$int$0$$r1, inline$java.math.BigInteger$shiftLeft$int$0$$return, inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    inline$java.math.BigInteger$shiftLeft$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$r0 := inline$java.math.BigInteger$shiftLeft$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$i0 := inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$0$$r1 := inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$0$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$0$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$this := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$4$r0, inline$java.math.BigInteger$$la$init$ra$$long$4$l0, inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$4$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$r0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$l0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.math.BigInteger$$la$init$ra$$long$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$4$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Return:
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$return := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$0$block5;

  inline$java.math.BigInteger$shiftLeft$int$0$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Return;

  inline$java.math.BigInteger$shiftLeft$int$0$Return:
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$shiftLeft$int$0$$return;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12$1;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon12$1:
    assert {:sourceloc "ModPow1.java", 170, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Then, inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Else;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Then:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3
   != unsafe.$null;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon20_Else:
    assume {:partition} inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3
   == unsafe.$null;
    call inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$this := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$this := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$5$r0, inline$java.math.BigInteger$$la$init$ra$$long$5$l0, inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$5$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$r0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$l0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.math.BigInteger$$la$init$ra$$long$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$5$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Return:
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$return;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15$1;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$anon15$1:
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block60;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block60:
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$i1
   + 1;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block58;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block59:
    assert {:sourceloc "ModPow1.java", 173, -1, -1, -1} true;
    inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$r3;
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block61;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$block61:
    goto inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$Return:
    $r4 := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$return;
    $exception := inline$ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto anon15$1;

  anon15$1:
    assert {:sourceloc "ModPow1.java", 35, -1, -1, -1} true;
    goto anon24_Then, anon24_Else;

  anon24_Then:
    assume {:partition} $r4 != unsafe.$null;
    $exception := $exception;
    goto anon18;

  anon24_Else:
    assume {:partition} $r4 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon18:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this := $r4;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0 := r2;
    havoc inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6, inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0, 0);
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1 > 0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block8;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Else:
    assume {:partition} 0 >= inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon6;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon6:
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1;
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := unsafe.java.lang.ArithmeticException$$la$init$ra$$(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4);
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$block8:
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2, 0);
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3 < 0;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Else:
    assume {:partition} 0 <= inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon9:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2;
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12);
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$6$r0, inline$java.math.BigInteger$$la$init$ra$$long$6$l0, inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$6$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$r0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$l0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.math.BigInteger$$la$init$ra$$long$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$6$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12$1:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$block9:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6 := -inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon15;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon15:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8
   - inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$7$r0, inline$java.math.BigInteger$$la$init$ra$$long$7$l0, inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$7$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$r0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$l0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.math.BigInteger$$la$init$ra$$long$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$7$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18$1:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return:
    r5 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto anon18$1;

  anon18$1:
    goto block29;

  block29:
    assert {:sourceloc "ModPow1.java", 30, -1, -1, -1} true;
    i3 := i3 + 1;
    assert {:sourceloc "ModPow1.java", 30, -1, -1, -1} true;
    goto block27;

  block28:
    assert {:sourceloc "ModPow1.java", 38, -1, -1, -1} true;
    $return := r5;
    goto block30;

  block30:
    return;
}



implementation unsafe.ModPow1$modPow1_unsafe_inline$java.math.BigInteger_java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref, $in_parameter__2: ref)
   returns ($return: ref, $exception: ref)
{
  var $r22: ref;
  var i14: int;
  var $r17: ref;
  var r2: ref;
  var r1: ref;
  var $i9: int;
  var $r14: ref;
  var $fakelocal_17: ref;
  var $r20: ref;
  var $fakelocal_12: ref;
  var r8: ref;
  var $fakelocal_9: ref;
  var r25: ref;
  var $fakelocal_18: ref;
  var r7: ref;
  var $r18: ref;
  var $z0: int;
  var r24: ref;
  var i13: int;
  var $z1: int;
  var $i10: int;
  var $r15: ref;
  var i11: int;
  var $fakelocal_14: ref;
  var $fakelocal_13: ref;
  var $r12: ref;
  var $fakelocal_15: ref;
  var r26: ref;
  var $i3: int;
  var $z2: int;
  var $i6: int;
  var $fakelocal_2: ref;
  var r0: ref;
  var $i4: int;
  var $r21: ref;
  var i0: int;
  var r5: ref;
  var $fakelocal_6: ref;
  var $fakelocal_5: ref;
  var $z3: int;
  var i1: int;
  var r4: ref;
  var $fakelocal_3: ref;
  var $fakelocal_4: ref;
  var $fakelocal_16: ref;
  var $fakelocal_0: ref;
  var $i7: int;
  var $fakelocal_1: ref;
  var $fakelocal_10: ref;
  var $r13: ref;
  var $r11: ref;
  var r9: ref;
  var r6: ref;
  var $fakelocal_11: ref;
  var i2: int;
  var i12: int;
  var $fakelocal_7: ref;
  var $fakelocal_8: ref;
  var $r16: ref;
  var r3: ref;
  var $i8: int;
  var r10: ref;
  var $r23: ref;
  var $i5: int;
  var $r19: ref;
  var r27: ref;
  var inline$java.math.BigInteger$valueOf$long$0$l0: int;
  var inline$java.math.BigInteger$valueOf$long$0$$r0: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$valueOf$long$0$$return: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$exception: ref;
  var inline$java.math.BigInteger$valueOf$long$0$$objIndex: int;
  var inline$java.math.BigInteger$valueOf$long$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$0$$b1: int;
  var inline$java.math.BigInteger$bitLength$$0$$b3: int;
  var inline$java.math.BigInteger$bitLength$$0$i8: int;
  var inline$java.math.BigInteger$bitLength$$0$l7: int;
  var inline$java.math.BigInteger$bitLength$$0$$l4: int;
  var inline$java.math.BigInteger$bitLength$$0$$b5: int;
  var inline$java.math.BigInteger$bitLength$$0$$l0: int;
  var inline$java.math.BigInteger$bitLength$$0$$l2: int;
  var inline$java.math.BigInteger$bitLength$$0$r0: ref;
  var inline$java.math.BigInteger$bitLength$$0$$l6: int;
  var inline$java.math.BigInteger$bitLength$$0$$this: ref;
  var inline$java.math.BigInteger$bitLength$$0$$return: int;
  var inline$java.math.BigInteger$bitLength$$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.math.BigInteger$testBit$int$0$r0: ref;
  var inline$java.math.BigInteger$testBit$int$0$$z0: int;
  var inline$java.math.BigInteger$testBit$int$0$i0: int;
  var inline$java.math.BigInteger$testBit$int$0$$b5: int;
  var inline$java.math.BigInteger$testBit$int$0$$l2: int;
  var inline$java.math.BigInteger$testBit$int$0$$l3: int;
  var inline$java.math.BigInteger$testBit$int$0$$i1: int;
  var inline$java.math.BigInteger$testBit$int$0$$l4: int;
  var inline$java.math.BigInteger$testBit$int$0$$this: ref;
  var inline$java.math.BigInteger$testBit$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$testBit$int$0$$return: int;
  var inline$java.math.BigInteger$testBit$int$0$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$1$$b1: int;
  var inline$java.math.BigInteger$bitLength$$1$$b3: int;
  var inline$java.math.BigInteger$bitLength$$1$i8: int;
  var inline$java.math.BigInteger$bitLength$$1$l7: int;
  var inline$java.math.BigInteger$bitLength$$1$$l4: int;
  var inline$java.math.BigInteger$bitLength$$1$$b5: int;
  var inline$java.math.BigInteger$bitLength$$1$$l0: int;
  var inline$java.math.BigInteger$bitLength$$1$$l2: int;
  var inline$java.math.BigInteger$bitLength$$1$r0: ref;
  var inline$java.math.BigInteger$bitLength$$1$$l6: int;
  var inline$java.math.BigInteger$bitLength$$1$$this: ref;
  var inline$java.math.BigInteger$bitLength$$1$$return: int;
  var inline$java.math.BigInteger$bitLength$$1$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$2$$b1: int;
  var inline$java.math.BigInteger$bitLength$$2$$b3: int;
  var inline$java.math.BigInteger$bitLength$$2$i8: int;
  var inline$java.math.BigInteger$bitLength$$2$l7: int;
  var inline$java.math.BigInteger$bitLength$$2$$l4: int;
  var inline$java.math.BigInteger$bitLength$$2$$b5: int;
  var inline$java.math.BigInteger$bitLength$$2$$l0: int;
  var inline$java.math.BigInteger$bitLength$$2$$l2: int;
  var inline$java.math.BigInteger$bitLength$$2$r0: ref;
  var inline$java.math.BigInteger$bitLength$$2$$l6: int;
  var inline$java.math.BigInteger$bitLength$$2$$this: ref;
  var inline$java.math.BigInteger$bitLength$$2$$return: int;
  var inline$java.math.BigInteger$bitLength$$2$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$3$$b1: int;
  var inline$java.math.BigInteger$bitLength$$3$$b3: int;
  var inline$java.math.BigInteger$bitLength$$3$i8: int;
  var inline$java.math.BigInteger$bitLength$$3$l7: int;
  var inline$java.math.BigInteger$bitLength$$3$$l4: int;
  var inline$java.math.BigInteger$bitLength$$3$$b5: int;
  var inline$java.math.BigInteger$bitLength$$3$$l0: int;
  var inline$java.math.BigInteger$bitLength$$3$$l2: int;
  var inline$java.math.BigInteger$bitLength$$3$r0: ref;
  var inline$java.math.BigInteger$bitLength$$3$$l6: int;
  var inline$java.math.BigInteger$bitLength$$3$$this: ref;
  var inline$java.math.BigInteger$bitLength$$3$$return: int;
  var inline$java.math.BigInteger$bitLength$$3$$exception: ref;
  var inline$java.math.BigInteger$testBit$int$1$r0: ref;
  var inline$java.math.BigInteger$testBit$int$1$$z0: int;
  var inline$java.math.BigInteger$testBit$int$1$i0: int;
  var inline$java.math.BigInteger$testBit$int$1$$b5: int;
  var inline$java.math.BigInteger$testBit$int$1$$l2: int;
  var inline$java.math.BigInteger$testBit$int$1$$l3: int;
  var inline$java.math.BigInteger$testBit$int$1$$i1: int;
  var inline$java.math.BigInteger$testBit$int$1$$l4: int;
  var inline$java.math.BigInteger$testBit$int$1$$this: ref;
  var inline$java.math.BigInteger$testBit$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$testBit$int$1$$return: int;
  var inline$java.math.BigInteger$testBit$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$0$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$1$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$4$$b1: int;
  var inline$java.math.BigInteger$bitLength$$4$$b3: int;
  var inline$java.math.BigInteger$bitLength$$4$i8: int;
  var inline$java.math.BigInteger$bitLength$$4$l7: int;
  var inline$java.math.BigInteger$bitLength$$4$$l4: int;
  var inline$java.math.BigInteger$bitLength$$4$$b5: int;
  var inline$java.math.BigInteger$bitLength$$4$$l0: int;
  var inline$java.math.BigInteger$bitLength$$4$$l2: int;
  var inline$java.math.BigInteger$bitLength$$4$r0: ref;
  var inline$java.math.BigInteger$bitLength$$4$$l6: int;
  var inline$java.math.BigInteger$bitLength$$4$$this: ref;
  var inline$java.math.BigInteger$bitLength$$4$$return: int;
  var inline$java.math.BigInteger$bitLength$$4$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$5$$b1: int;
  var inline$java.math.BigInteger$bitLength$$5$$b3: int;
  var inline$java.math.BigInteger$bitLength$$5$i8: int;
  var inline$java.math.BigInteger$bitLength$$5$l7: int;
  var inline$java.math.BigInteger$bitLength$$5$$l4: int;
  var inline$java.math.BigInteger$bitLength$$5$$b5: int;
  var inline$java.math.BigInteger$bitLength$$5$$l0: int;
  var inline$java.math.BigInteger$bitLength$$5$$l2: int;
  var inline$java.math.BigInteger$bitLength$$5$r0: ref;
  var inline$java.math.BigInteger$bitLength$$5$$l6: int;
  var inline$java.math.BigInteger$bitLength$$5$$this: ref;
  var inline$java.math.BigInteger$bitLength$$5$$return: int;
  var inline$java.math.BigInteger$bitLength$$5$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$14$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$2$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$15$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$16$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$17$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$3$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$18$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$19$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$20$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$21$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$22$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$23$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$24$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$24$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$25$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$25$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$26$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$26$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$27$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$27$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$28$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$28$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$6$$b1: int;
  var inline$java.math.BigInteger$bitLength$$6$$b3: int;
  var inline$java.math.BigInteger$bitLength$$6$i8: int;
  var inline$java.math.BigInteger$bitLength$$6$l7: int;
  var inline$java.math.BigInteger$bitLength$$6$$l4: int;
  var inline$java.math.BigInteger$bitLength$$6$$b5: int;
  var inline$java.math.BigInteger$bitLength$$6$$l0: int;
  var inline$java.math.BigInteger$bitLength$$6$$l2: int;
  var inline$java.math.BigInteger$bitLength$$6$r0: ref;
  var inline$java.math.BigInteger$bitLength$$6$$l6: int;
  var inline$java.math.BigInteger$bitLength$$6$$this: ref;
  var inline$java.math.BigInteger$bitLength$$6$$return: int;
  var inline$java.math.BigInteger$bitLength$$6$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$7$$b1: int;
  var inline$java.math.BigInteger$bitLength$$7$$b3: int;
  var inline$java.math.BigInteger$bitLength$$7$i8: int;
  var inline$java.math.BigInteger$bitLength$$7$l7: int;
  var inline$java.math.BigInteger$bitLength$$7$$l4: int;
  var inline$java.math.BigInteger$bitLength$$7$$b5: int;
  var inline$java.math.BigInteger$bitLength$$7$$l0: int;
  var inline$java.math.BigInteger$bitLength$$7$$l2: int;
  var inline$java.math.BigInteger$bitLength$$7$r0: ref;
  var inline$java.math.BigInteger$bitLength$$7$$l6: int;
  var inline$java.math.BigInteger$bitLength$$7$$this: ref;
  var inline$java.math.BigInteger$bitLength$$7$$return: int;
  var inline$java.math.BigInteger$bitLength$$7$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$29$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$29$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$30$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$30$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$4$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$31$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$31$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$32$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$32$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$33$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$33$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$5$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$34$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$34$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$35$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$35$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$36$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$36$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$37$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$37$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$38$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$38$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$39$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$39$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$40$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$40$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$41$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$41$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$42$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$42$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$43$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$43$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$44$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$44$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$45$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$45$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$46$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$46$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$8$$b1: int;
  var inline$java.math.BigInteger$bitLength$$8$$b3: int;
  var inline$java.math.BigInteger$bitLength$$8$i8: int;
  var inline$java.math.BigInteger$bitLength$$8$l7: int;
  var inline$java.math.BigInteger$bitLength$$8$$l4: int;
  var inline$java.math.BigInteger$bitLength$$8$$b5: int;
  var inline$java.math.BigInteger$bitLength$$8$$l0: int;
  var inline$java.math.BigInteger$bitLength$$8$$l2: int;
  var inline$java.math.BigInteger$bitLength$$8$r0: ref;
  var inline$java.math.BigInteger$bitLength$$8$$l6: int;
  var inline$java.math.BigInteger$bitLength$$8$$this: ref;
  var inline$java.math.BigInteger$bitLength$$8$$return: int;
  var inline$java.math.BigInteger$bitLength$$8$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$9$$b1: int;
  var inline$java.math.BigInteger$bitLength$$9$$b3: int;
  var inline$java.math.BigInteger$bitLength$$9$i8: int;
  var inline$java.math.BigInteger$bitLength$$9$l7: int;
  var inline$java.math.BigInteger$bitLength$$9$$l4: int;
  var inline$java.math.BigInteger$bitLength$$9$$b5: int;
  var inline$java.math.BigInteger$bitLength$$9$$l0: int;
  var inline$java.math.BigInteger$bitLength$$9$$l2: int;
  var inline$java.math.BigInteger$bitLength$$9$r0: ref;
  var inline$java.math.BigInteger$bitLength$$9$$l6: int;
  var inline$java.math.BigInteger$bitLength$$9$$this: ref;
  var inline$java.math.BigInteger$bitLength$$9$$return: int;
  var inline$java.math.BigInteger$bitLength$$9$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$47$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$47$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$48$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$48$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$6$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$49$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$49$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$50$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$50$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$51$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$51$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$7$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$52$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$52$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$53$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$53$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$54$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$54$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$55$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$55$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$56$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$56$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$57$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$57$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$58$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$58$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$59$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$59$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$60$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$60$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$61$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$61$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$62$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$62$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$63$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$63$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$64$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$64$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$65$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$65$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$65$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$65$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$65$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$65$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$65$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$65$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$66$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$66$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$66$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$66$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$66$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$66$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$66$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$66$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$67$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$67$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$67$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$67$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$67$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$67$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$67$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$67$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$68$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$68$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$68$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$68$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$68$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$68$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$68$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$68$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$mod$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$69$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$69$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$69$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$69$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$69$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$69$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$69$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$69$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$70$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$70$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$70$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$70$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$70$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$70$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$70$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$70$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__2, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r2 := $in_parameter__2;
    assert {:sourceloc "ModPow1.java", 46, -1, -1, -1} true;
    goto inline$java.math.BigInteger$valueOf$long$0$Entry;

  inline$java.math.BigInteger$valueOf$long$0$Entry:
    inline$java.math.BigInteger$valueOf$long$0$$in_parameter__0 := 1;
    havoc inline$java.math.BigInteger$valueOf$long$0$l0, inline$java.math.BigInteger$valueOf$long$0$$r0, inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0, inline$java.math.BigInteger$valueOf$long$0$$return, inline$java.math.BigInteger$valueOf$long$0$$exception;
    inline$java.math.BigInteger$valueOf$long$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$valueOf$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$valueOf$long$0$anon0;

  inline$java.math.BigInteger$valueOf$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$java.math.BigInteger$valueOf$long$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$valueOf$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$valueOf$long$0$l0 := inline$java.math.BigInteger$valueOf$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    call inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$valueOf$long$0$$r0 := inline$java.math.BigInteger$valueOf$long$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := inline$java.math.BigInteger$valueOf$long$0$$r0;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := inline$java.math.BigInteger$valueOf$long$0$l0;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    inline$java.math.BigInteger$valueOf$long$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto inline$java.math.BigInteger$valueOf$long$0$anon0$1;

  inline$java.math.BigInteger$valueOf$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 11, -1, -1, -1} true;
    inline$java.math.BigInteger$valueOf$long$0$$return := inline$java.math.BigInteger$valueOf$long$0$$r0;
    goto inline$java.math.BigInteger$valueOf$long$0$block2;

  inline$java.math.BigInteger$valueOf$long$0$block2:
    goto inline$java.math.BigInteger$valueOf$long$0$Return;

  inline$java.math.BigInteger$valueOf$long$0$Return:
    r24 := inline$java.math.BigInteger$valueOf$long$0$$return;
    $exception := inline$java.math.BigInteger$valueOf$long$0$$exception;
    goto anon0$1;

  anon0$1:
    assert {:sourceloc "ModPow1.java", 47, -1, -1, -1} true;
    goto anon82_Then, anon82_Else;

  anon82_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon82_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    goto inline$java.math.BigInteger$bitLength$$0$Entry;

  inline$java.math.BigInteger$bitLength$$0$Entry:
    inline$java.math.BigInteger$bitLength$$0$$this := r1;
    havoc inline$java.math.BigInteger$bitLength$$0$$b1, inline$java.math.BigInteger$bitLength$$0$$b3, inline$java.math.BigInteger$bitLength$$0$i8, inline$java.math.BigInteger$bitLength$$0$l7, inline$java.math.BigInteger$bitLength$$0$$l4, inline$java.math.BigInteger$bitLength$$0$$b5, inline$java.math.BigInteger$bitLength$$0$$l0, inline$java.math.BigInteger$bitLength$$0$$l2, inline$java.math.BigInteger$bitLength$$0$r0, inline$java.math.BigInteger$bitLength$$0$$l6, inline$java.math.BigInteger$bitLength$$0$$return, inline$java.math.BigInteger$bitLength$$0$$exception;
    goto inline$java.math.BigInteger$bitLength$$0$anon0;

  inline$java.math.BigInteger$bitLength$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$0$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$r0 := inline$java.math.BigInteger$bitLength$$0$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon10_Then, inline$java.math.BigInteger$bitLength$$0$anon10_Else;

  inline$java.math.BigInteger$bitLength$$0$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block11;

  inline$java.math.BigInteger$bitLength$$0$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon3;

  inline$java.math.BigInteger$bitLength$$0$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon11_Then, inline$java.math.BigInteger$bitLength$$0$anon11_Else;

  inline$java.math.BigInteger$bitLength$$0$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block12;

  inline$java.math.BigInteger$bitLength$$0$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon6;

  inline$java.math.BigInteger$bitLength$$0$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := -inline$java.math.BigInteger$bitLength$$0$$l4;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := inline$java.math.BigInteger$bitLength$$0$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon12_Then, inline$java.math.BigInteger$bitLength$$0$anon12_Else;

  inline$java.math.BigInteger$bitLength$$0$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block15;

  inline$java.math.BigInteger$bitLength$$0$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon9;

  inline$java.math.BigInteger$bitLength$$0$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := inline$java.math.BigInteger$bitLength$$0$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$0$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := inline$java.math.BigInteger$bitLength$$0$i8;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block16:
    goto inline$java.math.BigInteger$bitLength$$0$Return;

  inline$java.math.BigInteger$bitLength$$0$Return:
    i0 := inline$java.math.BigInteger$bitLength$$0$$return;
    $exception := inline$java.math.BigInteger$bitLength$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "ModPow1.java", 48, -1, -1, -1} true;
    i11 := 0;
    goto block31;

  block31:
    assert {:sourceloc "ModPow1.java", 48, -1, -1, -1} true;
    goto anon83_Then, anon83_Else;

  anon83_Then:
    assume {:partition} i11 >= i0;
    assert {:sourceloc "ModPow1.java", 48, -1, -1, -1} {:comment "thenblock"} true;
    goto block32;

  anon83_Else:
    assume {:partition} i0 > i11;
    assert {:sourceloc "ModPow1.java", 48, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "ModPow1.java", 49, -1, -1, -1} true;
    goto anon84_Then, anon84_Else;

  anon84_Then:
    assume {:partition} r24 != unsafe.$null;
    $exception := $exception;
    goto anon9;

  anon84_Else:
    assume {:partition} r24 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon9:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this := r24;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0 := r24;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return:
    $r11 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto anon9$1;

  anon9$1:
    assert {:sourceloc "ModPow1.java", 49, -1, -1, -1} true;
    goto anon85_Then, anon85_Else;

  anon85_Then:
    assume {:partition} $r11 != unsafe.$null;
    $exception := $exception;
    goto anon12;

  anon85_Else:
    assume {:partition} $r11 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon12:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this := $r11;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0 := r2;
    havoc inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6, inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return, inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon19_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_0;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1 > 0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block8;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon20_Else:
    assume {:partition} 0 >= inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b1;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon6;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon6:
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_1;
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := unsafe.java.lang.ArithmeticException$$la$init$ra$$(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4);
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r4;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$block8:
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3 < 0;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon21_Else:
    assume {:partition} 0 <= inline$java.math.BigInteger$mod$java.math.BigInteger$0$$b3;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon9:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_2;
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon22_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l13, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l12);
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l14;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$2$r0, inline$java.math.BigInteger$$la$init$ra$$long$2$l0, inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$2$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$r0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$l0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.math.BigInteger$$la$init$ra$$long$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$2$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon12$1:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$block9:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6 := -inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon15;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon23_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_5;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon15:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l6, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l5);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l8
   - inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l7;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon24_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$fakelocal_6;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l10, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l9);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$l11;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$3$r0, inline$java.math.BigInteger$$la$init$ra$$long$3$l0, inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$3$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$r0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$l0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.math.BigInteger$$la$init$ra$$long$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$3$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$anon18$1:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$block10:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$0$Return:
    r24 := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$mod$java.math.BigInteger$0$$exception;
    goto anon12$1;

  anon12$1:
    assert {:sourceloc "ModPow1.java", 50, -1, -1, -1} true;
    $i3 := i0 - i11;
    assert {:sourceloc "ModPow1.java", 50, -1, -1, -1} true;
    $i4 := $i3 - 1;
    assert {:sourceloc "ModPow1.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$Entry;

  inline$java.math.BigInteger$testBit$int$0$Entry:
    inline$java.math.BigInteger$testBit$int$0$$this := r1;
    inline$java.math.BigInteger$testBit$int$0$$in_parameter__0 := $i4;
    havoc inline$java.math.BigInteger$testBit$int$0$r0, inline$java.math.BigInteger$testBit$int$0$$z0, inline$java.math.BigInteger$testBit$int$0$i0, inline$java.math.BigInteger$testBit$int$0$$b5, inline$java.math.BigInteger$testBit$int$0$$l2, inline$java.math.BigInteger$testBit$int$0$$l3, inline$java.math.BigInteger$testBit$int$0$$i1, inline$java.math.BigInteger$testBit$int$0$$l4, inline$java.math.BigInteger$testBit$int$0$$return, inline$java.math.BigInteger$testBit$int$0$$exception;
    goto inline$java.math.BigInteger$testBit$int$0$anon0;

  inline$java.math.BigInteger$testBit$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$testBit$int$0$$this != unsafe.$null;
    inline$java.math.BigInteger$testBit$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$r0 := inline$java.math.BigInteger$testBit$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$i0 := inline$java.math.BigInteger$testBit$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l3 := unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$i1 := unsafe.$shlInt(1, inline$java.math.BigInteger$testBit$int$0$i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l2 := inline$java.math.BigInteger$testBit$int$0$$i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l4 := unsafe.$bitAnd(inline$java.math.BigInteger$testBit$int$0$$l3, 
  inline$java.math.BigInteger$testBit$int$0$$l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$testBit$int$0$$l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon4_Then, inline$java.math.BigInteger$testBit$int$0$anon4_Else;

  inline$java.math.BigInteger$testBit$int$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$block17;

  inline$java.math.BigInteger$testBit$int$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon3;

  inline$java.math.BigInteger$testBit$int$0$anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 0;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$return := inline$java.math.BigInteger$testBit$int$0$$z0;
    goto inline$java.math.BigInteger$testBit$int$0$block19;

  inline$java.math.BigInteger$testBit$int$0$block19:
    goto inline$java.math.BigInteger$testBit$int$0$Return;

  inline$java.math.BigInteger$testBit$int$0$Return:
    $z0 := inline$java.math.BigInteger$testBit$int$0$$return;
    $exception := inline$java.math.BigInteger$testBit$int$0$$exception;
    goto anon12$2;

  anon12$2:
    assert {:sourceloc "ModPow1.java", 50, -1, -1, -1} true;
    goto anon86_Then, anon86_Else;

  anon86_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "ModPow1.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto block33;

  anon86_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "ModPow1.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "ModPow1.java", 51, -1, -1, -1} true;
    r3 := r24;
    assert {:sourceloc "ModPow1.java", 52, -1, -1, -1} true;
    r4 := r0;
    assert {:sourceloc "ModPow1.java", 53, -1, -1, -1} true;
    goto anon87_Then, anon87_Else;

  anon87_Then:
    assume {:partition} r3 != unsafe.$null;
    $exception := $exception;
    goto anon18;

  anon87_Else:
    assume {:partition} r3 == unsafe.$null;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon18:
    goto inline$java.math.BigInteger$bitLength$$1$Entry;

  inline$java.math.BigInteger$bitLength$$1$Entry:
    inline$java.math.BigInteger$bitLength$$1$$this := r3;
    havoc inline$java.math.BigInteger$bitLength$$1$$b1, inline$java.math.BigInteger$bitLength$$1$$b3, inline$java.math.BigInteger$bitLength$$1$i8, inline$java.math.BigInteger$bitLength$$1$l7, inline$java.math.BigInteger$bitLength$$1$$l4, inline$java.math.BigInteger$bitLength$$1$$b5, inline$java.math.BigInteger$bitLength$$1$$l0, inline$java.math.BigInteger$bitLength$$1$$l2, inline$java.math.BigInteger$bitLength$$1$r0, inline$java.math.BigInteger$bitLength$$1$$l6, inline$java.math.BigInteger$bitLength$$1$$return, inline$java.math.BigInteger$bitLength$$1$$exception;
    goto inline$java.math.BigInteger$bitLength$$1$anon0;

  inline$java.math.BigInteger$bitLength$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$1$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$r0 := inline$java.math.BigInteger$bitLength$$1$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon10_Then, inline$java.math.BigInteger$bitLength$$1$anon10_Else;

  inline$java.math.BigInteger$bitLength$$1$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block11;

  inline$java.math.BigInteger$bitLength$$1$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon3;

  inline$java.math.BigInteger$bitLength$$1$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$1$block16;

  inline$java.math.BigInteger$bitLength$$1$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon11_Then, inline$java.math.BigInteger$bitLength$$1$anon11_Else;

  inline$java.math.BigInteger$bitLength$$1$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block12;

  inline$java.math.BigInteger$bitLength$$1$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$1$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon6;

  inline$java.math.BigInteger$bitLength$$1$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$block13;

  inline$java.math.BigInteger$bitLength$$1$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l6 := -inline$java.math.BigInteger$bitLength$$1$$l4;
    goto inline$java.math.BigInteger$bitLength$$1$block13;

  inline$java.math.BigInteger$bitLength$$1$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$l7 := inline$java.math.BigInteger$bitLength$$1$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$1$block14;

  inline$java.math.BigInteger$bitLength$$1$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon12_Then, inline$java.math.BigInteger$bitLength$$1$anon12_Else;

  inline$java.math.BigInteger$bitLength$$1$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block15;

  inline$java.math.BigInteger$bitLength$$1$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$1$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon9;

  inline$java.math.BigInteger$bitLength$$1$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$i8 := inline$java.math.BigInteger$bitLength$$1$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$1$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$block14;

  inline$java.math.BigInteger$bitLength$$1$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$return := inline$java.math.BigInteger$bitLength$$1$i8;
    goto inline$java.math.BigInteger$bitLength$$1$block16;

  inline$java.math.BigInteger$bitLength$$1$block16:
    goto inline$java.math.BigInteger$bitLength$$1$Return;

  inline$java.math.BigInteger$bitLength$$1$Return:
    i1 := inline$java.math.BigInteger$bitLength$$1$$return;
    $exception := inline$java.math.BigInteger$bitLength$$1$$exception;
    goto anon18$1;

  anon18$1:
    assert {:sourceloc "ModPow1.java", 54, -1, -1, -1} true;
    goto anon88_Then, anon88_Else;

  anon88_Then:
    assume {:partition} r4 != unsafe.$null;
    $exception := $exception;
    goto anon21;

  anon88_Else:
    assume {:partition} r4 == unsafe.$null;
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon21:
    goto inline$java.math.BigInteger$bitLength$$2$Entry;

  inline$java.math.BigInteger$bitLength$$2$Entry:
    inline$java.math.BigInteger$bitLength$$2$$this := r4;
    havoc inline$java.math.BigInteger$bitLength$$2$$b1, inline$java.math.BigInteger$bitLength$$2$$b3, inline$java.math.BigInteger$bitLength$$2$i8, inline$java.math.BigInteger$bitLength$$2$l7, inline$java.math.BigInteger$bitLength$$2$$l4, inline$java.math.BigInteger$bitLength$$2$$b5, inline$java.math.BigInteger$bitLength$$2$$l0, inline$java.math.BigInteger$bitLength$$2$$l2, inline$java.math.BigInteger$bitLength$$2$r0, inline$java.math.BigInteger$bitLength$$2$$l6, inline$java.math.BigInteger$bitLength$$2$$return, inline$java.math.BigInteger$bitLength$$2$$exception;
    goto inline$java.math.BigInteger$bitLength$$2$anon0;

  inline$java.math.BigInteger$bitLength$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$2$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$r0 := inline$java.math.BigInteger$bitLength$$2$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon10_Then, inline$java.math.BigInteger$bitLength$$2$anon10_Else;

  inline$java.math.BigInteger$bitLength$$2$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block11;

  inline$java.math.BigInteger$bitLength$$2$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon3;

  inline$java.math.BigInteger$bitLength$$2$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$2$block16;

  inline$java.math.BigInteger$bitLength$$2$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon11_Then, inline$java.math.BigInteger$bitLength$$2$anon11_Else;

  inline$java.math.BigInteger$bitLength$$2$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block12;

  inline$java.math.BigInteger$bitLength$$2$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$2$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon6;

  inline$java.math.BigInteger$bitLength$$2$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$block13;

  inline$java.math.BigInteger$bitLength$$2$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l6 := -inline$java.math.BigInteger$bitLength$$2$$l4;
    goto inline$java.math.BigInteger$bitLength$$2$block13;

  inline$java.math.BigInteger$bitLength$$2$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$l7 := inline$java.math.BigInteger$bitLength$$2$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$2$block14;

  inline$java.math.BigInteger$bitLength$$2$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon12_Then, inline$java.math.BigInteger$bitLength$$2$anon12_Else;

  inline$java.math.BigInteger$bitLength$$2$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block15;

  inline$java.math.BigInteger$bitLength$$2$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$2$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon9;

  inline$java.math.BigInteger$bitLength$$2$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$i8 := inline$java.math.BigInteger$bitLength$$2$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$2$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$block14;

  inline$java.math.BigInteger$bitLength$$2$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$return := inline$java.math.BigInteger$bitLength$$2$i8;
    goto inline$java.math.BigInteger$bitLength$$2$block16;

  inline$java.math.BigInteger$bitLength$$2$block16:
    goto inline$java.math.BigInteger$bitLength$$2$Return;

  inline$java.math.BigInteger$bitLength$$2$Return:
    i2 := inline$java.math.BigInteger$bitLength$$2$$return;
    $exception := inline$java.math.BigInteger$bitLength$$2$$exception;
    goto anon21$1;

  anon21$1:
    assert {:sourceloc "ModPow1.java", 55, -1, -1, -1} true;
    $r12 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 55, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$0$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$0$$this := r3;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0 := $r12;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$0$$r3, inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$0$$l0, inline$java.math.BigInteger$equals$java.lang.Object$0$$r4, inline$java.math.BigInteger$equals$java.lang.Object$0$$b2, inline$java.math.BigInteger$equals$java.lang.Object$0$r2, inline$java.math.BigInteger$equals$java.lang.Object$0$$l1, inline$java.math.BigInteger$equals$java.lang.Object$0$r1, inline$java.math.BigInteger$equals$java.lang.Object$0$r0, inline$java.math.BigInteger$equals$java.lang.Object$0$$return, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$r0 := inline$java.math.BigInteger$equals$java.lang.Object$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$r1 := inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$r3, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$0$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$r4, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$0$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$0$r2 := inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$0$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$0$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$0$Return:
    $z1 := inline$java.math.BigInteger$equals$java.lang.Object$0$$return;
    $exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    goto anon21$2;

  anon21$2:
    assert {:sourceloc "ModPow1.java", 55, -1, -1, -1} true;
    goto anon89_Then, anon89_Else;

  anon89_Then:
    assume {:partition} $z1 == 0;
    assert {:sourceloc "ModPow1.java", 55, -1, -1, -1} {:comment "thenblock"} true;
    goto block34;

  anon89_Else:
    assume {:partition} $z1 != 0;
    assert {:sourceloc "ModPow1.java", 55, -1, -1, -1} {:comment "elseblock"} true;
    goto anon24;

  anon24:
    assert {:sourceloc "ModPow1.java", 56, -1, -1, -1} true;
    $return := r4;
    goto block42;

  block34:
    assert {:sourceloc "ModPow1.java", 58, -1, -1, -1} true;
    $r13 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$1$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$1$$this := r4;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0 := $r13;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$1$$r3, inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$1$$l0, inline$java.math.BigInteger$equals$java.lang.Object$1$$r4, inline$java.math.BigInteger$equals$java.lang.Object$1$$b2, inline$java.math.BigInteger$equals$java.lang.Object$1$r2, inline$java.math.BigInteger$equals$java.lang.Object$1$$l1, inline$java.math.BigInteger$equals$java.lang.Object$1$r1, inline$java.math.BigInteger$equals$java.lang.Object$1$r0, inline$java.math.BigInteger$equals$java.lang.Object$1$$return, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$r0 := inline$java.math.BigInteger$equals$java.lang.Object$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$r1 := inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$r3, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$1$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$r4, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$1$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$1$r2 := inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$1$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$1$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$1$Return:
    $z2 := inline$java.math.BigInteger$equals$java.lang.Object$1$$return;
    $exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    goto block34$1;

  block34$1:
    assert {:sourceloc "ModPow1.java", 58, -1, -1, -1} true;
    goto anon90_Then, anon90_Else;

  anon90_Then:
    assume {:partition} $z2 == 0;
    assert {:sourceloc "ModPow1.java", 58, -1, -1, -1} {:comment "thenblock"} true;
    goto block35;

  anon90_Else:
    assume {:partition} $z2 != 0;
    assert {:sourceloc "ModPow1.java", 58, -1, -1, -1} {:comment "elseblock"} true;
    goto anon27;

  anon27:
    assert {:sourceloc "ModPow1.java", 59, -1, -1, -1} true;
    $return := r3;
    goto block42;

  block35:
    assert {:sourceloc "ModPow1.java", 61, -1, -1, -1} true;
    r25 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 62, -1, -1, -1} true;
    call i12, $exception := unsafe.java.lang.Math$max$int_int(i1, i2);
    assert {:sourceloc "ModPow1.java", 63, -1, -1, -1} true;
    goto anon91_Then, anon91_Else;

  anon91_Then:
    assume {:partition} i12 > 800;
    assert {:sourceloc "ModPow1.java", 63, -1, -1, -1} {:comment "thenblock"} true;
    goto block36;

  anon91_Else:
    assume {:partition} 800 >= i12;
    assert {:sourceloc "ModPow1.java", 63, -1, -1, -1} {:comment "elseblock"} true;
    goto anon30;

  anon30:
    assert {:sourceloc "ModPow1.java", 64, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this := r3;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0 := r4;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$4$r0, inline$java.math.BigInteger$$la$init$ra$$long$4$l0, inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$4$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$r0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$l0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.math.BigInteger$$la$init$ra$$long$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$4$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return:
    r26 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    goto anon30$1;

  anon30$1:
    assert {:sourceloc "ModPow1.java", 64, -1, -1, -1} true;
    goto block37;

  block36:
    assert {:sourceloc "ModPow1.java", 65, -1, -1, -1} true;
    $i5 := i1 - i2;
    assert {:sourceloc "ModPow1.java", 65, -1, -1, -1} true;
    call $i6, $exception := unsafe.java.lang.Math$abs$int($i5);
    assert {:sourceloc "ModPow1.java", 65, -1, -1, -1} true;
    goto anon92_Then, anon92_Else;

  anon92_Then:
    assume {:partition} $i6 < 32;
    assert {:sourceloc "ModPow1.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto block38;

  anon92_Else:
    assume {:partition} 32 <= $i6;
    assert {:sourceloc "ModPow1.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto anon33;

  anon33:
    assert {:sourceloc "ModPow1.java", 66, -1, -1, -1} true;
    r26 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} true;
    i13 := 0;
    goto block39;

  block39:
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$Entry;

  inline$java.math.BigInteger$bitLength$$3$Entry:
    inline$java.math.BigInteger$bitLength$$3$$this := r4;
    havoc inline$java.math.BigInteger$bitLength$$3$$b1, inline$java.math.BigInteger$bitLength$$3$$b3, inline$java.math.BigInteger$bitLength$$3$i8, inline$java.math.BigInteger$bitLength$$3$l7, inline$java.math.BigInteger$bitLength$$3$$l4, inline$java.math.BigInteger$bitLength$$3$$b5, inline$java.math.BigInteger$bitLength$$3$$l0, inline$java.math.BigInteger$bitLength$$3$$l2, inline$java.math.BigInteger$bitLength$$3$r0, inline$java.math.BigInteger$bitLength$$3$$l6, inline$java.math.BigInteger$bitLength$$3$$return, inline$java.math.BigInteger$bitLength$$3$$exception;
    goto inline$java.math.BigInteger$bitLength$$3$anon0;

  inline$java.math.BigInteger$bitLength$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$3$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$r0 := inline$java.math.BigInteger$bitLength$$3$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon10_Then, inline$java.math.BigInteger$bitLength$$3$anon10_Else;

  inline$java.math.BigInteger$bitLength$$3$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block11;

  inline$java.math.BigInteger$bitLength$$3$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon3;

  inline$java.math.BigInteger$bitLength$$3$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$3$block16;

  inline$java.math.BigInteger$bitLength$$3$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon11_Then, inline$java.math.BigInteger$bitLength$$3$anon11_Else;

  inline$java.math.BigInteger$bitLength$$3$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block12;

  inline$java.math.BigInteger$bitLength$$3$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$3$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon6;

  inline$java.math.BigInteger$bitLength$$3$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$block13;

  inline$java.math.BigInteger$bitLength$$3$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l6 := -inline$java.math.BigInteger$bitLength$$3$$l4;
    goto inline$java.math.BigInteger$bitLength$$3$block13;

  inline$java.math.BigInteger$bitLength$$3$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$l7 := inline$java.math.BigInteger$bitLength$$3$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$3$block14;

  inline$java.math.BigInteger$bitLength$$3$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon12_Then, inline$java.math.BigInteger$bitLength$$3$anon12_Else;

  inline$java.math.BigInteger$bitLength$$3$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block15;

  inline$java.math.BigInteger$bitLength$$3$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$3$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon9;

  inline$java.math.BigInteger$bitLength$$3$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$i8 := inline$java.math.BigInteger$bitLength$$3$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$3$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$block14;

  inline$java.math.BigInteger$bitLength$$3$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$return := inline$java.math.BigInteger$bitLength$$3$i8;
    goto inline$java.math.BigInteger$bitLength$$3$block16;

  inline$java.math.BigInteger$bitLength$$3$block16:
    goto inline$java.math.BigInteger$bitLength$$3$Return;

  inline$java.math.BigInteger$bitLength$$3$Return:
    $i10 := inline$java.math.BigInteger$bitLength$$3$$return;
    $exception := inline$java.math.BigInteger$bitLength$$3$$exception;
    goto block39$1;

  block39$1:
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} true;
    goto anon93_Then, anon93_Else;

  anon93_Then:
    assume {:partition} i13 >= $i10;
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} {:comment "thenblock"} true;
    goto block40;

  anon93_Else:
    assume {:partition} $i10 > i13;
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} {:comment "elseblock"} true;
    goto anon36;

  anon36:
    assert {:sourceloc "ModPow1.java", 68, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$1$Entry;

  inline$java.math.BigInteger$testBit$int$1$Entry:
    inline$java.math.BigInteger$testBit$int$1$$this := r4;
    inline$java.math.BigInteger$testBit$int$1$$in_parameter__0 := i13;
    havoc inline$java.math.BigInteger$testBit$int$1$r0, inline$java.math.BigInteger$testBit$int$1$$z0, inline$java.math.BigInteger$testBit$int$1$i0, inline$java.math.BigInteger$testBit$int$1$$b5, inline$java.math.BigInteger$testBit$int$1$$l2, inline$java.math.BigInteger$testBit$int$1$$l3, inline$java.math.BigInteger$testBit$int$1$$i1, inline$java.math.BigInteger$testBit$int$1$$l4, inline$java.math.BigInteger$testBit$int$1$$return, inline$java.math.BigInteger$testBit$int$1$$exception;
    goto inline$java.math.BigInteger$testBit$int$1$anon0;

  inline$java.math.BigInteger$testBit$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$testBit$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$testBit$int$1$$this != unsafe.$null;
    inline$java.math.BigInteger$testBit$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$r0 := inline$java.math.BigInteger$testBit$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$i0 := inline$java.math.BigInteger$testBit$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$l3 := unsafe.$heap[inline$java.math.BigInteger$testBit$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$i1 := unsafe.$shlInt(1, inline$java.math.BigInteger$testBit$int$1$i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$l2 := inline$java.math.BigInteger$testBit$int$1$$i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$l4 := unsafe.$bitAnd(inline$java.math.BigInteger$testBit$int$1$$l3, 
  inline$java.math.BigInteger$testBit$int$1$$l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$testBit$int$1$$l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$1$anon4_Then, inline$java.math.BigInteger$testBit$int$1$anon4_Else;

  inline$java.math.BigInteger$testBit$int$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$testBit$int$1$$b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$testBit$int$1$block17;

  inline$java.math.BigInteger$testBit$int$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$testBit$int$1$$b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$testBit$int$1$anon3;

  inline$java.math.BigInteger$testBit$int$1$anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$1$block18;

  inline$java.math.BigInteger$testBit$int$1$block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$z0 := 0;
    goto inline$java.math.BigInteger$testBit$int$1$block18;

  inline$java.math.BigInteger$testBit$int$1$block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$1$$return := inline$java.math.BigInteger$testBit$int$1$$z0;
    goto inline$java.math.BigInteger$testBit$int$1$block19;

  inline$java.math.BigInteger$testBit$int$1$block19:
    goto inline$java.math.BigInteger$testBit$int$1$Return;

  inline$java.math.BigInteger$testBit$int$1$Return:
    $z3 := inline$java.math.BigInteger$testBit$int$1$$return;
    $exception := inline$java.math.BigInteger$testBit$int$1$$exception;
    goto anon36$1;

  anon36$1:
    assert {:sourceloc "ModPow1.java", 68, -1, -1, -1} true;
    goto anon94_Then, anon94_Else;

  anon94_Then:
    assume {:partition} $z3 == 0;
    assert {:sourceloc "ModPow1.java", 68, -1, -1, -1} {:comment "thenblock"} true;
    goto block41;

  anon94_Else:
    assume {:partition} $z3 != 0;
    assert {:sourceloc "ModPow1.java", 68, -1, -1, -1} {:comment "elseblock"} true;
    goto anon39;

  anon39:
    assert {:sourceloc "ModPow1.java", 69, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftLeft$int$0$Entry;

  inline$java.math.BigInteger$shiftLeft$int$0$Entry:
    inline$java.math.BigInteger$shiftLeft$int$0$$this := r3;
    inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0 := i13;
    havoc inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$0$$l2, inline$java.math.BigInteger$shiftLeft$int$0$$l1, inline$java.math.BigInteger$shiftLeft$int$0$r0, inline$java.math.BigInteger$shiftLeft$int$0$i0, inline$java.math.BigInteger$shiftLeft$int$0$$r1, inline$java.math.BigInteger$shiftLeft$int$0$$return, inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    inline$java.math.BigInteger$shiftLeft$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$r0 := inline$java.math.BigInteger$shiftLeft$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$i0 := inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$0$$r1 := inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$0$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$0$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$this := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$5$r0, inline$java.math.BigInteger$$la$init$ra$$long$5$l0, inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$5$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$r0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$l0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.math.BigInteger$$la$init$ra$$long$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$5$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Return:
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$return := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$0$block5;

  inline$java.math.BigInteger$shiftLeft$int$0$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Return;

  inline$java.math.BigInteger$shiftLeft$int$0$Return:
    $r23 := inline$java.math.BigInteger$shiftLeft$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    goto anon39$1;

  anon39$1:
    assert {:sourceloc "ModPow1.java", 69, -1, -1, -1} true;
    goto anon95_Then, anon95_Else;

  anon95_Then:
    assume {:partition} r26 != unsafe.$null;
    $exception := $exception;
    goto anon42;

  anon95_Else:
    assume {:partition} r26 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon42:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$this := r26;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0 := $r23;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$this := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$6$r0, inline$java.math.BigInteger$$la$init$ra$$long$6$l0, inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$6$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$r0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$l0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.math.BigInteger$$la$init$ra$$long$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$6$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Return:
    r26 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto anon42$1;

  anon42$1:
    goto block41;

  block41:
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} true;
    i13 := i13 + 1;
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} true;
    goto block39;

  block40:
    assert {:sourceloc "ModPow1.java", 67, -1, -1, -1} true;
    goto block37;

  block38:
    assert {:sourceloc "ModPow1.java", 74, -1, -1, -1} true;
    goto anon96_Then, anon96_Else;

  anon96_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon45;

  anon96_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_6 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_6;
    return;

  anon45:
    $i8 := unsafe.$divInt(i12, 2);
    assert {:sourceloc "ModPow1.java", 74, -1, -1, -1} true;
    goto anon97_Then, anon97_Else;

  anon97_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon48;

  anon97_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_7 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_7;
    return;

  anon48:
    $i7 := unsafe.$modInt(i12, 2);
    assert {:sourceloc "ModPow1.java", 74, -1, -1, -1} true;
    i14 := $i8 + $i7;
    assert {:sourceloc "ModPow1.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$0$Entry;

  inline$java.math.BigInteger$shiftRight$int$0$Entry:
    inline$java.math.BigInteger$shiftRight$int$0$$this := r3;
    inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0 := i14;
    havoc inline$java.math.BigInteger$shiftRight$int$0$r0, inline$java.math.BigInteger$shiftRight$int$0$$l2, inline$java.math.BigInteger$shiftRight$int$0$i0, inline$java.math.BigInteger$shiftRight$int$0$$r1, inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$0$$l1, inline$java.math.BigInteger$shiftRight$int$0$$return, inline$java.math.BigInteger$shiftRight$int$0$$exception;
    inline$java.math.BigInteger$shiftRight$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$0$anon0;

  inline$java.math.BigInteger$shiftRight$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$r0 := inline$java.math.BigInteger$shiftRight$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$i0 := inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$0$$r1 := inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$0$$l1, 
  inline$java.math.BigInteger$shiftRight$int$0$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$this := inline$java.math.BigInteger$shiftRight$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$7$r0, inline$java.math.BigInteger$$la$init$ra$$long$7$l0, inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$7$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$r0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$l0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.math.BigInteger$$la$init$ra$$long$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$7$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Return:
    inline$java.math.BigInteger$shiftRight$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$0$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$return := inline$java.math.BigInteger$shiftRight$int$0$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$0$block4;

  inline$java.math.BigInteger$shiftRight$int$0$block4:
    goto inline$java.math.BigInteger$shiftRight$int$0$Return;

  inline$java.math.BigInteger$shiftRight$int$0$Return:
    r27 := inline$java.math.BigInteger$shiftRight$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftRight$int$0$$exception;
    goto anon48$1;

  anon48$1:
    assert {:sourceloc "ModPow1.java", 77, -1, -1, -1} true;
    goto anon98_Then, anon98_Else;

  anon98_Then:
    assume {:partition} r27 != unsafe.$null;
    $exception := $exception;
    goto anon51;

  anon98_Else:
    assume {:partition} r27 == unsafe.$null;
    call $fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_8;
    return;

  anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$1$Entry;

  inline$java.math.BigInteger$shiftLeft$int$1$Entry:
    inline$java.math.BigInteger$shiftLeft$int$1$$this := r27;
    inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0 := i14;
    havoc inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$1$$l2, inline$java.math.BigInteger$shiftLeft$int$1$$l1, inline$java.math.BigInteger$shiftLeft$int$1$r0, inline$java.math.BigInteger$shiftLeft$int$1$i0, inline$java.math.BigInteger$shiftLeft$int$1$$r1, inline$java.math.BigInteger$shiftLeft$int$1$$return, inline$java.math.BigInteger$shiftLeft$int$1$$exception;
    inline$java.math.BigInteger$shiftLeft$int$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$1$anon0;

  inline$java.math.BigInteger$shiftLeft$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$r0 := inline$java.math.BigInteger$shiftLeft$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$i0 := inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$1$$r1 := inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$1$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$1$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$8$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$8$$this := inline$java.math.BigInteger$shiftLeft$int$1$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$8$r0, inline$java.math.BigInteger$$la$init$ra$$long$8$l0, inline$java.math.BigInteger$$la$init$ra$$long$8$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$8$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$8$r0 := inline$java.math.BigInteger$$la$init$ra$$long$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$8$l0 := inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.math.BigInteger$$la$init$ra$$long$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$8$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$8$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$8$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$8$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$8$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$8$Return:
    inline$java.math.BigInteger$shiftLeft$int$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$8$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$1$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$return := inline$java.math.BigInteger$shiftLeft$int$1$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$1$block5;

  inline$java.math.BigInteger$shiftLeft$int$1$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$1$Return;

  inline$java.math.BigInteger$shiftLeft$int$1$Return:
    $r14 := inline$java.math.BigInteger$shiftLeft$int$1$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$1$$exception;
    goto anon51$1;

  anon51$1:
    assert {:sourceloc "ModPow1.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this := r3;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0 := $r14;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$9$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$9$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$9$r0, inline$java.math.BigInteger$$la$init$ra$$long$9$l0, inline$java.math.BigInteger$$la$init$ra$$long$9$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$9$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$9$r0 := inline$java.math.BigInteger$$la$init$ra$$long$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$9$l0 := inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.math.BigInteger$$la$init$ra$$long$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$9$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$9$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$9$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$9$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$9$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$9$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$9$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return:
    r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    goto anon51$2;

  anon51$2:
    assert {:sourceloc "ModPow1.java", 78, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$1$Entry;

  inline$java.math.BigInteger$shiftRight$int$1$Entry:
    inline$java.math.BigInteger$shiftRight$int$1$$this := r4;
    inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0 := i14;
    havoc inline$java.math.BigInteger$shiftRight$int$1$r0, inline$java.math.BigInteger$shiftRight$int$1$$l2, inline$java.math.BigInteger$shiftRight$int$1$i0, inline$java.math.BigInteger$shiftRight$int$1$$r1, inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$1$$l1, inline$java.math.BigInteger$shiftRight$int$1$$return, inline$java.math.BigInteger$shiftRight$int$1$$exception;
    inline$java.math.BigInteger$shiftRight$int$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$1$anon0;

  inline$java.math.BigInteger$shiftRight$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$r0 := inline$java.math.BigInteger$shiftRight$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$i0 := inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$1$$r1 := inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$1$$l1, 
  inline$java.math.BigInteger$shiftRight$int$1$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$10$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$10$$this := inline$java.math.BigInteger$shiftRight$int$1$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$10$r0, inline$java.math.BigInteger$$la$init$ra$$long$10$l0, inline$java.math.BigInteger$$la$init$ra$$long$10$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$10$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$10$r0 := inline$java.math.BigInteger$$la$init$ra$$long$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$10$l0 := inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.math.BigInteger$$la$init$ra$$long$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$10$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$10$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$10$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$10$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$10$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$10$Return:
    inline$java.math.BigInteger$shiftRight$int$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$10$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$1$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$return := inline$java.math.BigInteger$shiftRight$int$1$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$1$block4;

  inline$java.math.BigInteger$shiftRight$int$1$block4:
    goto inline$java.math.BigInteger$shiftRight$int$1$Return;

  inline$java.math.BigInteger$shiftRight$int$1$Return:
    r6 := inline$java.math.BigInteger$shiftRight$int$1$$return;
    $exception := inline$java.math.BigInteger$shiftRight$int$1$$exception;
    goto anon51$3;

  anon51$3:
    assert {:sourceloc "ModPow1.java", 79, -1, -1, -1} true;
    goto anon99_Then, anon99_Else;

  anon99_Then:
    assume {:partition} r6 != unsafe.$null;
    $exception := $exception;
    goto anon54;

  anon99_Else:
    assume {:partition} r6 == unsafe.$null;
    call $fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_9;
    return;

  anon54:
    goto inline$java.math.BigInteger$shiftLeft$int$2$Entry;

  inline$java.math.BigInteger$shiftLeft$int$2$Entry:
    inline$java.math.BigInteger$shiftLeft$int$2$$this := r6;
    inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0 := i14;
    havoc inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$2$$l2, inline$java.math.BigInteger$shiftLeft$int$2$$l1, inline$java.math.BigInteger$shiftLeft$int$2$r0, inline$java.math.BigInteger$shiftLeft$int$2$i0, inline$java.math.BigInteger$shiftLeft$int$2$$r1, inline$java.math.BigInteger$shiftLeft$int$2$$return, inline$java.math.BigInteger$shiftLeft$int$2$$exception;
    inline$java.math.BigInteger$shiftLeft$int$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$2$anon0;

  inline$java.math.BigInteger$shiftLeft$int$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$r0 := inline$java.math.BigInteger$shiftLeft$int$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$i0 := inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$2$$r1 := inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$2$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$2$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$11$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$11$$this := inline$java.math.BigInteger$shiftLeft$int$2$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$11$r0, inline$java.math.BigInteger$$la$init$ra$$long$11$l0, inline$java.math.BigInteger$$la$init$ra$$long$11$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$11$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$11$r0 := inline$java.math.BigInteger$$la$init$ra$$long$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$11$l0 := inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.math.BigInteger$$la$init$ra$$long$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$11$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$11$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$11$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$11$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$11$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$11$Return:
    inline$java.math.BigInteger$shiftLeft$int$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$11$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$2$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$return := inline$java.math.BigInteger$shiftLeft$int$2$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$2$block5;

  inline$java.math.BigInteger$shiftLeft$int$2$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$2$Return;

  inline$java.math.BigInteger$shiftLeft$int$2$Return:
    $r15 := inline$java.math.BigInteger$shiftLeft$int$2$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$2$$exception;
    goto anon54$1;

  anon54$1:
    assert {:sourceloc "ModPow1.java", 79, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this := r4;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0 := $r15;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$12$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$12$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$12$r0, inline$java.math.BigInteger$$la$init$ra$$long$12$l0, inline$java.math.BigInteger$$la$init$ra$$long$12$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$12$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$12$r0 := inline$java.math.BigInteger$$la$init$ra$$long$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$12$l0 := inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.math.BigInteger$$la$init$ra$$long$12$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$12$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$12$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$12$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$12$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$12$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$12$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$12$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return:
    r7 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    goto anon54$2;

  anon54$2:
    assert {:sourceloc "ModPow1.java", 81, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0 := r5;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1 := r7;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3:
    goto inline$java.math.BigInteger$bitLength$$4$Entry;

  inline$java.math.BigInteger$bitLength$$4$Entry:
    inline$java.math.BigInteger$bitLength$$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    havoc inline$java.math.BigInteger$bitLength$$4$$b1, inline$java.math.BigInteger$bitLength$$4$$b3, inline$java.math.BigInteger$bitLength$$4$i8, inline$java.math.BigInteger$bitLength$$4$l7, inline$java.math.BigInteger$bitLength$$4$$l4, inline$java.math.BigInteger$bitLength$$4$$b5, inline$java.math.BigInteger$bitLength$$4$$l0, inline$java.math.BigInteger$bitLength$$4$$l2, inline$java.math.BigInteger$bitLength$$4$r0, inline$java.math.BigInteger$bitLength$$4$$l6, inline$java.math.BigInteger$bitLength$$4$$return, inline$java.math.BigInteger$bitLength$$4$$exception;
    goto inline$java.math.BigInteger$bitLength$$4$anon0;

  inline$java.math.BigInteger$bitLength$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$4$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$r0 := inline$java.math.BigInteger$bitLength$$4$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon10_Then, inline$java.math.BigInteger$bitLength$$4$anon10_Else;

  inline$java.math.BigInteger$bitLength$$4$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block11;

  inline$java.math.BigInteger$bitLength$$4$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon3;

  inline$java.math.BigInteger$bitLength$$4$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$4$block16;

  inline$java.math.BigInteger$bitLength$$4$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon11_Then, inline$java.math.BigInteger$bitLength$$4$anon11_Else;

  inline$java.math.BigInteger$bitLength$$4$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block12;

  inline$java.math.BigInteger$bitLength$$4$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$4$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon6;

  inline$java.math.BigInteger$bitLength$$4$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$block13;

  inline$java.math.BigInteger$bitLength$$4$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l6 := -inline$java.math.BigInteger$bitLength$$4$$l4;
    goto inline$java.math.BigInteger$bitLength$$4$block13;

  inline$java.math.BigInteger$bitLength$$4$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$l7 := inline$java.math.BigInteger$bitLength$$4$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$4$block14;

  inline$java.math.BigInteger$bitLength$$4$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon12_Then, inline$java.math.BigInteger$bitLength$$4$anon12_Else;

  inline$java.math.BigInteger$bitLength$$4$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block15;

  inline$java.math.BigInteger$bitLength$$4$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$4$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon9;

  inline$java.math.BigInteger$bitLength$$4$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$i8 := inline$java.math.BigInteger$bitLength$$4$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$4$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$block14;

  inline$java.math.BigInteger$bitLength$$4$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$return := inline$java.math.BigInteger$bitLength$$4$i8;
    goto inline$java.math.BigInteger$bitLength$$4$block16;

  inline$java.math.BigInteger$bitLength$$4$block16:
    goto inline$java.math.BigInteger$bitLength$$4$Return;

  inline$java.math.BigInteger$bitLength$$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0 := inline$java.math.BigInteger$bitLength$$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6:
    goto inline$java.math.BigInteger$bitLength$$5$Entry;

  inline$java.math.BigInteger$bitLength$$5$Entry:
    inline$java.math.BigInteger$bitLength$$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$bitLength$$5$$b1, inline$java.math.BigInteger$bitLength$$5$$b3, inline$java.math.BigInteger$bitLength$$5$i8, inline$java.math.BigInteger$bitLength$$5$l7, inline$java.math.BigInteger$bitLength$$5$$l4, inline$java.math.BigInteger$bitLength$$5$$b5, inline$java.math.BigInteger$bitLength$$5$$l0, inline$java.math.BigInteger$bitLength$$5$$l2, inline$java.math.BigInteger$bitLength$$5$r0, inline$java.math.BigInteger$bitLength$$5$$l6, inline$java.math.BigInteger$bitLength$$5$$return, inline$java.math.BigInteger$bitLength$$5$$exception;
    goto inline$java.math.BigInteger$bitLength$$5$anon0;

  inline$java.math.BigInteger$bitLength$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$5$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$r0 := inline$java.math.BigInteger$bitLength$$5$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon10_Then, inline$java.math.BigInteger$bitLength$$5$anon10_Else;

  inline$java.math.BigInteger$bitLength$$5$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block11;

  inline$java.math.BigInteger$bitLength$$5$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon3;

  inline$java.math.BigInteger$bitLength$$5$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$5$block16;

  inline$java.math.BigInteger$bitLength$$5$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon11_Then, inline$java.math.BigInteger$bitLength$$5$anon11_Else;

  inline$java.math.BigInteger$bitLength$$5$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block12;

  inline$java.math.BigInteger$bitLength$$5$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$5$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon6;

  inline$java.math.BigInteger$bitLength$$5$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$block13;

  inline$java.math.BigInteger$bitLength$$5$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l6 := -inline$java.math.BigInteger$bitLength$$5$$l4;
    goto inline$java.math.BigInteger$bitLength$$5$block13;

  inline$java.math.BigInteger$bitLength$$5$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$l7 := inline$java.math.BigInteger$bitLength$$5$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$5$block14;

  inline$java.math.BigInteger$bitLength$$5$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon12_Then, inline$java.math.BigInteger$bitLength$$5$anon12_Else;

  inline$java.math.BigInteger$bitLength$$5$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block15;

  inline$java.math.BigInteger$bitLength$$5$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$5$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon9;

  inline$java.math.BigInteger$bitLength$$5$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$i8 := inline$java.math.BigInteger$bitLength$$5$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$5$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$block14;

  inline$java.math.BigInteger$bitLength$$5$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$return := inline$java.math.BigInteger$bitLength$$5$i8;
    goto inline$java.math.BigInteger$bitLength$$5$block16;

  inline$java.math.BigInteger$bitLength$$5$block16:
    goto inline$java.math.BigInteger$bitLength$$5$Return;

  inline$java.math.BigInteger$bitLength$$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1 := inline$java.math.BigInteger$bitLength$$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$2$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$2$$r3, inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$2$$l0, inline$java.math.BigInteger$equals$java.lang.Object$2$$r4, inline$java.math.BigInteger$equals$java.lang.Object$2$$b2, inline$java.math.BigInteger$equals$java.lang.Object$2$r2, inline$java.math.BigInteger$equals$java.lang.Object$2$$l1, inline$java.math.BigInteger$equals$java.lang.Object$2$r1, inline$java.math.BigInteger$equals$java.lang.Object$2$r0, inline$java.math.BigInteger$equals$java.lang.Object$2$$return, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$r0 := inline$java.math.BigInteger$equals$java.lang.Object$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$r1 := inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$r3, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$2$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$r4, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$2$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$2$r2 := inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$2$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$2$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$3$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$3$$r3, inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$3$$l0, inline$java.math.BigInteger$equals$java.lang.Object$3$$r4, inline$java.math.BigInteger$equals$java.lang.Object$3$$b2, inline$java.math.BigInteger$equals$java.lang.Object$3$r2, inline$java.math.BigInteger$equals$java.lang.Object$3$$l1, inline$java.math.BigInteger$equals$java.lang.Object$3$r1, inline$java.math.BigInteger$equals$java.lang.Object$3$r0, inline$java.math.BigInteger$equals$java.lang.Object$3$$return, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$r0 := inline$java.math.BigInteger$equals$java.lang.Object$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$r1 := inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$r3, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$3$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$r4, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$3$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$3$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$3$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$3$r2 := inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$3$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$3$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$13$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$13$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$13$r0, inline$java.math.BigInteger$$la$init$ra$$long$13$l0, inline$java.math.BigInteger$$la$init$ra$$long$13$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$13$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$13$r0 := inline$java.math.BigInteger$$la$init$ra$$long$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$13$l0 := inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.math.BigInteger$$la$init$ra$$long$13$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$13$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$13$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$13$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$13$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$13$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$13$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$13$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$14$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$14$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$14$r0, inline$java.math.BigInteger$$la$init$ra$$long$14$l0, inline$java.math.BigInteger$$la$init$ra$$long$14$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$14$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$14$r0 := inline$java.math.BigInteger$$la$init$ra$$long$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$14$l0 := inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$14$Entry;

  inline$java.lang.Object$$la$init$ra$$$14$Entry:
    inline$java.lang.Object$$la$init$ra$$$14$$this := inline$java.math.BigInteger$$la$init$ra$$long$14$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$14$anon0;

  inline$java.lang.Object$$la$init$ra$$$14$anon0:
    inline$java.lang.Object$$la$init$ra$$$14$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$14$Return;

  inline$java.lang.Object$$la$init$ra$$$14$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$14$$exception := inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$14$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$14$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$14$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$14$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$14$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$14$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$2$Entry;

  inline$java.math.BigInteger$shiftRight$int$2$Entry:
    inline$java.math.BigInteger$shiftRight$int$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$2$r0, inline$java.math.BigInteger$shiftRight$int$2$$l2, inline$java.math.BigInteger$shiftRight$int$2$i0, inline$java.math.BigInteger$shiftRight$int$2$$r1, inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$2$$l1, inline$java.math.BigInteger$shiftRight$int$2$$return, inline$java.math.BigInteger$shiftRight$int$2$$exception;
    inline$java.math.BigInteger$shiftRight$int$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$2$anon0;

  inline$java.math.BigInteger$shiftRight$int$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$r0 := inline$java.math.BigInteger$shiftRight$int$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$i0 := inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$2$$r1 := inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$2$$l1, 
  inline$java.math.BigInteger$shiftRight$int$2$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$15$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$15$$this := inline$java.math.BigInteger$shiftRight$int$2$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$15$r0, inline$java.math.BigInteger$$la$init$ra$$long$15$l0, inline$java.math.BigInteger$$la$init$ra$$long$15$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$15$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$15$r0 := inline$java.math.BigInteger$$la$init$ra$$long$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$15$l0 := inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$15$Entry;

  inline$java.lang.Object$$la$init$ra$$$15$Entry:
    inline$java.lang.Object$$la$init$ra$$$15$$this := inline$java.math.BigInteger$$la$init$ra$$long$15$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$15$anon0;

  inline$java.lang.Object$$la$init$ra$$$15$anon0:
    inline$java.lang.Object$$la$init$ra$$$15$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$15$Return;

  inline$java.lang.Object$$la$init$ra$$$15$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$15$$exception := inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$15$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$15$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$15$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$15$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$15$Return:
    inline$java.math.BigInteger$shiftRight$int$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$15$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$2$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$return := inline$java.math.BigInteger$shiftRight$int$2$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$2$block4;

  inline$java.math.BigInteger$shiftRight$int$2$block4:
    goto inline$java.math.BigInteger$shiftRight$int$2$Return;

  inline$java.math.BigInteger$shiftRight$int$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2 := inline$java.math.BigInteger$shiftRight$int$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftRight$int$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$3$Entry;

  inline$java.math.BigInteger$shiftLeft$int$3$Entry:
    inline$java.math.BigInteger$shiftLeft$int$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2;
    inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$3$$l2, inline$java.math.BigInteger$shiftLeft$int$3$$l1, inline$java.math.BigInteger$shiftLeft$int$3$r0, inline$java.math.BigInteger$shiftLeft$int$3$i0, inline$java.math.BigInteger$shiftLeft$int$3$$r1, inline$java.math.BigInteger$shiftLeft$int$3$$return, inline$java.math.BigInteger$shiftLeft$int$3$$exception;
    inline$java.math.BigInteger$shiftLeft$int$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$3$anon0;

  inline$java.math.BigInteger$shiftLeft$int$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$r0 := inline$java.math.BigInteger$shiftLeft$int$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$i0 := inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$3$$r1 := inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$3$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$3$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$16$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$16$$this := inline$java.math.BigInteger$shiftLeft$int$3$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$16$r0, inline$java.math.BigInteger$$la$init$ra$$long$16$l0, inline$java.math.BigInteger$$la$init$ra$$long$16$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$16$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$16$r0 := inline$java.math.BigInteger$$la$init$ra$$long$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$16$l0 := inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$16$Entry;

  inline$java.lang.Object$$la$init$ra$$$16$Entry:
    inline$java.lang.Object$$la$init$ra$$$16$$this := inline$java.math.BigInteger$$la$init$ra$$long$16$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$16$anon0;

  inline$java.lang.Object$$la$init$ra$$$16$anon0:
    inline$java.lang.Object$$la$init$ra$$$16$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$16$Return;

  inline$java.lang.Object$$la$init$ra$$$16$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$16$$exception := inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$16$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$16$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$16$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$16$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$16$Return:
    inline$java.math.BigInteger$shiftLeft$int$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$16$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$3$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$return := inline$java.math.BigInteger$shiftLeft$int$3$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$3$block5;

  inline$java.math.BigInteger$shiftLeft$int$3$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$3$Return;

  inline$java.math.BigInteger$shiftLeft$int$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11 := inline$java.math.BigInteger$shiftLeft$int$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$17$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$17$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$17$r0, inline$java.math.BigInteger$$la$init$ra$$long$17$l0, inline$java.math.BigInteger$$la$init$ra$$long$17$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$17$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$17$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$17$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$17$r0 := inline$java.math.BigInteger$$la$init$ra$$long$17$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$17$l0 := inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$17$Entry;

  inline$java.lang.Object$$la$init$ra$$$17$Entry:
    inline$java.lang.Object$$la$init$ra$$$17$$this := inline$java.math.BigInteger$$la$init$ra$$long$17$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$17$anon0;

  inline$java.lang.Object$$la$init$ra$$$17$anon0:
    inline$java.lang.Object$$la$init$ra$$$17$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$17$Return;

  inline$java.lang.Object$$la$init$ra$$$17$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$17$$exception := inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$17$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$17$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$17$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$17$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$17$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$17$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$3$Entry;

  inline$java.math.BigInteger$shiftRight$int$3$Entry:
    inline$java.math.BigInteger$shiftRight$int$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$3$r0, inline$java.math.BigInteger$shiftRight$int$3$$l2, inline$java.math.BigInteger$shiftRight$int$3$i0, inline$java.math.BigInteger$shiftRight$int$3$$r1, inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$3$$l1, inline$java.math.BigInteger$shiftRight$int$3$$return, inline$java.math.BigInteger$shiftRight$int$3$$exception;
    inline$java.math.BigInteger$shiftRight$int$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$3$anon0;

  inline$java.math.BigInteger$shiftRight$int$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$r0 := inline$java.math.BigInteger$shiftRight$int$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$i0 := inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$3$$r1 := inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$3$$l1, 
  inline$java.math.BigInteger$shiftRight$int$3$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$18$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$18$$this := inline$java.math.BigInteger$shiftRight$int$3$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$18$r0, inline$java.math.BigInteger$$la$init$ra$$long$18$l0, inline$java.math.BigInteger$$la$init$ra$$long$18$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$18$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$18$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$18$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$18$r0 := inline$java.math.BigInteger$$la$init$ra$$long$18$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$18$l0 := inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$18$Entry;

  inline$java.lang.Object$$la$init$ra$$$18$Entry:
    inline$java.lang.Object$$la$init$ra$$$18$$this := inline$java.math.BigInteger$$la$init$ra$$long$18$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$18$anon0;

  inline$java.lang.Object$$la$init$ra$$$18$anon0:
    inline$java.lang.Object$$la$init$ra$$$18$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$18$Return;

  inline$java.lang.Object$$la$init$ra$$$18$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$18$$exception := inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$18$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$18$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$18$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$18$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$18$Return:
    inline$java.math.BigInteger$shiftRight$int$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$18$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$3$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$return := inline$java.math.BigInteger$shiftRight$int$3$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$3$block4;

  inline$java.math.BigInteger$shiftRight$int$3$block4:
    goto inline$java.math.BigInteger$shiftRight$int$3$Return;

  inline$java.math.BigInteger$shiftRight$int$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4 := inline$java.math.BigInteger$shiftRight$int$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftRight$int$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$4$Entry;

  inline$java.math.BigInteger$shiftLeft$int$4$Entry:
    inline$java.math.BigInteger$shiftLeft$int$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4;
    inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$4$$l2, inline$java.math.BigInteger$shiftLeft$int$4$$l1, inline$java.math.BigInteger$shiftLeft$int$4$r0, inline$java.math.BigInteger$shiftLeft$int$4$i0, inline$java.math.BigInteger$shiftLeft$int$4$$r1, inline$java.math.BigInteger$shiftLeft$int$4$$return, inline$java.math.BigInteger$shiftLeft$int$4$$exception;
    inline$java.math.BigInteger$shiftLeft$int$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$4$anon0;

  inline$java.math.BigInteger$shiftLeft$int$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$r0 := inline$java.math.BigInteger$shiftLeft$int$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$i0 := inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$4$$r1 := inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$4$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$4$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$19$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$19$$this := inline$java.math.BigInteger$shiftLeft$int$4$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$19$r0, inline$java.math.BigInteger$$la$init$ra$$long$19$l0, inline$java.math.BigInteger$$la$init$ra$$long$19$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$19$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$19$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$19$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$19$r0 := inline$java.math.BigInteger$$la$init$ra$$long$19$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$19$l0 := inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$19$Entry;

  inline$java.lang.Object$$la$init$ra$$$19$Entry:
    inline$java.lang.Object$$la$init$ra$$$19$$this := inline$java.math.BigInteger$$la$init$ra$$long$19$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$19$anon0;

  inline$java.lang.Object$$la$init$ra$$$19$anon0:
    inline$java.lang.Object$$la$init$ra$$$19$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$19$Return;

  inline$java.lang.Object$$la$init$ra$$$19$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$19$$exception := inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$19$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$19$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$19$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$19$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$19$Return:
    inline$java.math.BigInteger$shiftLeft$int$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$19$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$4$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$return := inline$java.math.BigInteger$shiftLeft$int$4$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$4$block5;

  inline$java.math.BigInteger$shiftLeft$int$4$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$4$Return;

  inline$java.math.BigInteger$shiftLeft$int$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12 := inline$java.math.BigInteger$shiftLeft$int$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$20$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$20$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$20$r0, inline$java.math.BigInteger$$la$init$ra$$long$20$l0, inline$java.math.BigInteger$$la$init$ra$$long$20$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$20$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$20$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$20$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$20$r0 := inline$java.math.BigInteger$$la$init$ra$$long$20$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$20$l0 := inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$20$Entry;

  inline$java.lang.Object$$la$init$ra$$$20$Entry:
    inline$java.lang.Object$$la$init$ra$$$20$$this := inline$java.math.BigInteger$$la$init$ra$$long$20$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$20$anon0;

  inline$java.lang.Object$$la$init$ra$$$20$anon0:
    inline$java.lang.Object$$la$init$ra$$$20$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$20$Return;

  inline$java.lang.Object$$la$init$ra$$$20$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$20$$exception := inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$20$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$20$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$20$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$20$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$20$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$20$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$1$r1, inline$java.math.BigInteger$add$java.math.BigInteger$1$r0, inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$1$$return, inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$21$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$21$$this := inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$21$r0, inline$java.math.BigInteger$$la$init$ra$$long$21$l0, inline$java.math.BigInteger$$la$init$ra$$long$21$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$21$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$21$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$21$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$21$r0 := inline$java.math.BigInteger$$la$init$ra$$long$21$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$21$l0 := inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$21$Entry;

  inline$java.lang.Object$$la$init$ra$$$21$Entry:
    inline$java.lang.Object$$la$init$ra$$$21$$this := inline$java.math.BigInteger$$la$init$ra$$long$21$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$21$anon0;

  inline$java.lang.Object$$la$init$ra$$$21$anon0:
    inline$java.lang.Object$$la$init$ra$$$21$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$21$Return;

  inline$java.lang.Object$$la$init$ra$$$21$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$21$$exception := inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$21$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$21$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$21$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$21$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$21$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$21$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$return := inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$2$r1, inline$java.math.BigInteger$add$java.math.BigInteger$2$r0, inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$2$$return, inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$22$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$22$$this := inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$22$r0, inline$java.math.BigInteger$$la$init$ra$$long$22$l0, inline$java.math.BigInteger$$la$init$ra$$long$22$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$22$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$22$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$22$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$22$r0 := inline$java.math.BigInteger$$la$init$ra$$long$22$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$22$l0 := inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$22$Entry;

  inline$java.lang.Object$$la$init$ra$$$22$Entry:
    inline$java.lang.Object$$la$init$ra$$$22$$this := inline$java.math.BigInteger$$la$init$ra$$long$22$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$22$anon0;

  inline$java.lang.Object$$la$init$ra$$$22$anon0:
    inline$java.lang.Object$$la$init$ra$$$22$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$22$Return;

  inline$java.lang.Object$$la$init$ra$$$22$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$22$$exception := inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$22$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$22$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$22$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$22$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$22$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$22$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$return := inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$23$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$23$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$23$r0, inline$java.math.BigInteger$$la$init$ra$$long$23$l0, inline$java.math.BigInteger$$la$init$ra$$long$23$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$23$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$23$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$23$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$23$r0 := inline$java.math.BigInteger$$la$init$ra$$long$23$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$23$l0 := inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$23$Entry;

  inline$java.lang.Object$$la$init$ra$$$23$Entry:
    inline$java.lang.Object$$la$init$ra$$$23$$this := inline$java.math.BigInteger$$la$init$ra$$long$23$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$23$anon0;

  inline$java.lang.Object$$la$init$ra$$$23$anon0:
    inline$java.lang.Object$$la$init$ra$$$23$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$23$Return;

  inline$java.lang.Object$$la$init$ra$$$23$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$23$$exception := inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$23$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$23$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$23$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$23$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$23$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$23$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$24$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$24$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$24$r0, inline$java.math.BigInteger$$la$init$ra$$long$24$l0, inline$java.math.BigInteger$$la$init$ra$$long$24$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$24$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$24$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$24$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$24$r0 := inline$java.math.BigInteger$$la$init$ra$$long$24$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$24$l0 := inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$24$Entry;

  inline$java.lang.Object$$la$init$ra$$$24$Entry:
    inline$java.lang.Object$$la$init$ra$$$24$$this := inline$java.math.BigInteger$$la$init$ra$$long$24$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$24$anon0;

  inline$java.lang.Object$$la$init$ra$$$24$anon0:
    inline$java.lang.Object$$la$init$ra$$$24$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$24$Return;

  inline$java.lang.Object$$la$init$ra$$$24$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$24$$exception := inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$24$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$24$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$24$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$24$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$24$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$24$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$5$Entry;

  inline$java.math.BigInteger$shiftLeft$int$5$Entry:
    inline$java.math.BigInteger$shiftLeft$int$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16;
    inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$5$$l2, inline$java.math.BigInteger$shiftLeft$int$5$$l1, inline$java.math.BigInteger$shiftLeft$int$5$r0, inline$java.math.BigInteger$shiftLeft$int$5$i0, inline$java.math.BigInteger$shiftLeft$int$5$$r1, inline$java.math.BigInteger$shiftLeft$int$5$$return, inline$java.math.BigInteger$shiftLeft$int$5$$exception;
    inline$java.math.BigInteger$shiftLeft$int$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$5$anon0;

  inline$java.math.BigInteger$shiftLeft$int$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$r0 := inline$java.math.BigInteger$shiftLeft$int$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$i0 := inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$5$$r1 := inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$5$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$5$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$25$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$25$$this := inline$java.math.BigInteger$shiftLeft$int$5$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$25$r0, inline$java.math.BigInteger$$la$init$ra$$long$25$l0, inline$java.math.BigInteger$$la$init$ra$$long$25$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$25$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$25$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$25$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$25$r0 := inline$java.math.BigInteger$$la$init$ra$$long$25$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$25$l0 := inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$25$Entry;

  inline$java.lang.Object$$la$init$ra$$$25$Entry:
    inline$java.lang.Object$$la$init$ra$$$25$$this := inline$java.math.BigInteger$$la$init$ra$$long$25$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$25$anon0;

  inline$java.lang.Object$$la$init$ra$$$25$anon0:
    inline$java.lang.Object$$la$init$ra$$$25$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$25$Return;

  inline$java.lang.Object$$la$init$ra$$$25$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$25$$exception := inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$25$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$25$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$25$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$25$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$25$Return:
    inline$java.math.BigInteger$shiftLeft$int$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$25$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$5$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$return := inline$java.math.BigInteger$shiftLeft$int$5$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$5$block5;

  inline$java.math.BigInteger$shiftLeft$int$5$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$5$Return;

  inline$java.math.BigInteger$shiftLeft$int$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17 := inline$java.math.BigInteger$shiftLeft$int$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$3$r1, inline$java.math.BigInteger$add$java.math.BigInteger$3$r0, inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$3$$return, inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$26$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$26$$this := inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$26$r0, inline$java.math.BigInteger$$la$init$ra$$long$26$l0, inline$java.math.BigInteger$$la$init$ra$$long$26$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$26$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$26$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$26$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$26$r0 := inline$java.math.BigInteger$$la$init$ra$$long$26$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$26$l0 := inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$26$Entry;

  inline$java.lang.Object$$la$init$ra$$$26$Entry:
    inline$java.lang.Object$$la$init$ra$$$26$$this := inline$java.math.BigInteger$$la$init$ra$$long$26$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$26$anon0;

  inline$java.lang.Object$$la$init$ra$$$26$anon0:
    inline$java.lang.Object$$la$init$ra$$$26$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$26$Return;

  inline$java.lang.Object$$la$init$ra$$$26$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$26$$exception := inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$26$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$26$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$26$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$26$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$26$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$26$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$return := inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$6$Entry;

  inline$java.math.BigInteger$shiftLeft$int$6$Entry:
    inline$java.math.BigInteger$shiftLeft$int$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7;
    inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$6$$l2, inline$java.math.BigInteger$shiftLeft$int$6$$l1, inline$java.math.BigInteger$shiftLeft$int$6$r0, inline$java.math.BigInteger$shiftLeft$int$6$i0, inline$java.math.BigInteger$shiftLeft$int$6$$r1, inline$java.math.BigInteger$shiftLeft$int$6$$return, inline$java.math.BigInteger$shiftLeft$int$6$$exception;
    inline$java.math.BigInteger$shiftLeft$int$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$6$anon0;

  inline$java.math.BigInteger$shiftLeft$int$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$r0 := inline$java.math.BigInteger$shiftLeft$int$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$i0 := inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$6$$r1 := inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$6$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$6$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$27$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$27$$this := inline$java.math.BigInteger$shiftLeft$int$6$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$27$r0, inline$java.math.BigInteger$$la$init$ra$$long$27$l0, inline$java.math.BigInteger$$la$init$ra$$long$27$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$27$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$27$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$27$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$27$r0 := inline$java.math.BigInteger$$la$init$ra$$long$27$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$27$l0 := inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$27$Entry;

  inline$java.lang.Object$$la$init$ra$$$27$Entry:
    inline$java.lang.Object$$la$init$ra$$$27$$this := inline$java.math.BigInteger$$la$init$ra$$long$27$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$27$anon0;

  inline$java.lang.Object$$la$init$ra$$$27$anon0:
    inline$java.lang.Object$$la$init$ra$$$27$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$27$Return;

  inline$java.lang.Object$$la$init$ra$$$27$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$27$$exception := inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$27$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$27$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$27$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$27$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$27$Return:
    inline$java.math.BigInteger$shiftLeft$int$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$27$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$6$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$return := inline$java.math.BigInteger$shiftLeft$int$6$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$6$block5;

  inline$java.math.BigInteger$shiftLeft$int$6$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$6$Return;

  inline$java.math.BigInteger$shiftLeft$int$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19 := inline$java.math.BigInteger$shiftLeft$int$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$4$r1, inline$java.math.BigInteger$add$java.math.BigInteger$4$r0, inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$4$$return, inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$28$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$28$$this := inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$28$r0, inline$java.math.BigInteger$$la$init$ra$$long$28$l0, inline$java.math.BigInteger$$la$init$ra$$long$28$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$28$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$28$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$28$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$28$r0 := inline$java.math.BigInteger$$la$init$ra$$long$28$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$28$l0 := inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$28$Entry;

  inline$java.lang.Object$$la$init$ra$$$28$Entry:
    inline$java.lang.Object$$la$init$ra$$$28$$this := inline$java.math.BigInteger$$la$init$ra$$long$28$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$28$anon0;

  inline$java.lang.Object$$la$init$ra$$$28$anon0:
    inline$java.lang.Object$$la$init$ra$$$28$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$28$Return;

  inline$java.lang.Object$$la$init$ra$$$28$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$28$$exception := inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$28$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$28$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$28$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$28$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$28$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$28$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$return := inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return:
    r8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto anon54$3;

  anon54$3:
    assert {:sourceloc "ModPow1.java", 82, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0 := r27;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1 := r6;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3:
    goto inline$java.math.BigInteger$bitLength$$6$Entry;

  inline$java.math.BigInteger$bitLength$$6$Entry:
    inline$java.math.BigInteger$bitLength$$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    havoc inline$java.math.BigInteger$bitLength$$6$$b1, inline$java.math.BigInteger$bitLength$$6$$b3, inline$java.math.BigInteger$bitLength$$6$i8, inline$java.math.BigInteger$bitLength$$6$l7, inline$java.math.BigInteger$bitLength$$6$$l4, inline$java.math.BigInteger$bitLength$$6$$b5, inline$java.math.BigInteger$bitLength$$6$$l0, inline$java.math.BigInteger$bitLength$$6$$l2, inline$java.math.BigInteger$bitLength$$6$r0, inline$java.math.BigInteger$bitLength$$6$$l6, inline$java.math.BigInteger$bitLength$$6$$return, inline$java.math.BigInteger$bitLength$$6$$exception;
    goto inline$java.math.BigInteger$bitLength$$6$anon0;

  inline$java.math.BigInteger$bitLength$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$6$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$r0 := inline$java.math.BigInteger$bitLength$$6$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon10_Then, inline$java.math.BigInteger$bitLength$$6$anon10_Else;

  inline$java.math.BigInteger$bitLength$$6$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block11;

  inline$java.math.BigInteger$bitLength$$6$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon3;

  inline$java.math.BigInteger$bitLength$$6$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$6$block16;

  inline$java.math.BigInteger$bitLength$$6$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon11_Then, inline$java.math.BigInteger$bitLength$$6$anon11_Else;

  inline$java.math.BigInteger$bitLength$$6$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block12;

  inline$java.math.BigInteger$bitLength$$6$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$6$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon6;

  inline$java.math.BigInteger$bitLength$$6$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$block13;

  inline$java.math.BigInteger$bitLength$$6$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l6 := -inline$java.math.BigInteger$bitLength$$6$$l4;
    goto inline$java.math.BigInteger$bitLength$$6$block13;

  inline$java.math.BigInteger$bitLength$$6$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$l7 := inline$java.math.BigInteger$bitLength$$6$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$6$block14;

  inline$java.math.BigInteger$bitLength$$6$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon12_Then, inline$java.math.BigInteger$bitLength$$6$anon12_Else;

  inline$java.math.BigInteger$bitLength$$6$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block15;

  inline$java.math.BigInteger$bitLength$$6$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$6$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon9;

  inline$java.math.BigInteger$bitLength$$6$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$i8 := inline$java.math.BigInteger$bitLength$$6$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$6$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$block14;

  inline$java.math.BigInteger$bitLength$$6$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$return := inline$java.math.BigInteger$bitLength$$6$i8;
    goto inline$java.math.BigInteger$bitLength$$6$block16;

  inline$java.math.BigInteger$bitLength$$6$block16:
    goto inline$java.math.BigInteger$bitLength$$6$Return;

  inline$java.math.BigInteger$bitLength$$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0 := inline$java.math.BigInteger$bitLength$$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$bitLength$$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6:
    goto inline$java.math.BigInteger$bitLength$$7$Entry;

  inline$java.math.BigInteger$bitLength$$7$Entry:
    inline$java.math.BigInteger$bitLength$$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$bitLength$$7$$b1, inline$java.math.BigInteger$bitLength$$7$$b3, inline$java.math.BigInteger$bitLength$$7$i8, inline$java.math.BigInteger$bitLength$$7$l7, inline$java.math.BigInteger$bitLength$$7$$l4, inline$java.math.BigInteger$bitLength$$7$$b5, inline$java.math.BigInteger$bitLength$$7$$l0, inline$java.math.BigInteger$bitLength$$7$$l2, inline$java.math.BigInteger$bitLength$$7$r0, inline$java.math.BigInteger$bitLength$$7$$l6, inline$java.math.BigInteger$bitLength$$7$$return, inline$java.math.BigInteger$bitLength$$7$$exception;
    goto inline$java.math.BigInteger$bitLength$$7$anon0;

  inline$java.math.BigInteger$bitLength$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$7$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$r0 := inline$java.math.BigInteger$bitLength$$7$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon10_Then, inline$java.math.BigInteger$bitLength$$7$anon10_Else;

  inline$java.math.BigInteger$bitLength$$7$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block11;

  inline$java.math.BigInteger$bitLength$$7$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon3;

  inline$java.math.BigInteger$bitLength$$7$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$7$block16;

  inline$java.math.BigInteger$bitLength$$7$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon11_Then, inline$java.math.BigInteger$bitLength$$7$anon11_Else;

  inline$java.math.BigInteger$bitLength$$7$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block12;

  inline$java.math.BigInteger$bitLength$$7$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$7$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon6;

  inline$java.math.BigInteger$bitLength$$7$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$block13;

  inline$java.math.BigInteger$bitLength$$7$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l6 := -inline$java.math.BigInteger$bitLength$$7$$l4;
    goto inline$java.math.BigInteger$bitLength$$7$block13;

  inline$java.math.BigInteger$bitLength$$7$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$l7 := inline$java.math.BigInteger$bitLength$$7$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$7$block14;

  inline$java.math.BigInteger$bitLength$$7$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon12_Then, inline$java.math.BigInteger$bitLength$$7$anon12_Else;

  inline$java.math.BigInteger$bitLength$$7$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block15;

  inline$java.math.BigInteger$bitLength$$7$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$7$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon9;

  inline$java.math.BigInteger$bitLength$$7$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$i8 := inline$java.math.BigInteger$bitLength$$7$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$7$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$block14;

  inline$java.math.BigInteger$bitLength$$7$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$return := inline$java.math.BigInteger$bitLength$$7$i8;
    goto inline$java.math.BigInteger$bitLength$$7$block16;

  inline$java.math.BigInteger$bitLength$$7$block16:
    goto inline$java.math.BigInteger$bitLength$$7$Return;

  inline$java.math.BigInteger$bitLength$$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1 := inline$java.math.BigInteger$bitLength$$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$bitLength$$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$4$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$4$$r3, inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$4$$l0, inline$java.math.BigInteger$equals$java.lang.Object$4$$r4, inline$java.math.BigInteger$equals$java.lang.Object$4$$b2, inline$java.math.BigInteger$equals$java.lang.Object$4$r2, inline$java.math.BigInteger$equals$java.lang.Object$4$$l1, inline$java.math.BigInteger$equals$java.lang.Object$4$r1, inline$java.math.BigInteger$equals$java.lang.Object$4$r0, inline$java.math.BigInteger$equals$java.lang.Object$4$$return, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$r0 := inline$java.math.BigInteger$equals$java.lang.Object$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$r1 := inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$r3, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$4$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$r4, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$4$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$4$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$4$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$4$r2 := inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$4$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$4$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$5$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$5$$r3, inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$5$$l0, inline$java.math.BigInteger$equals$java.lang.Object$5$$r4, inline$java.math.BigInteger$equals$java.lang.Object$5$$b2, inline$java.math.BigInteger$equals$java.lang.Object$5$r2, inline$java.math.BigInteger$equals$java.lang.Object$5$$l1, inline$java.math.BigInteger$equals$java.lang.Object$5$r1, inline$java.math.BigInteger$equals$java.lang.Object$5$r0, inline$java.math.BigInteger$equals$java.lang.Object$5$$return, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$r0 := inline$java.math.BigInteger$equals$java.lang.Object$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$r1 := inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$r3, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$5$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$r4, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$5$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$5$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$5$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$5$r2 := inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$5$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$5$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$29$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$29$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$29$r0, inline$java.math.BigInteger$$la$init$ra$$long$29$l0, inline$java.math.BigInteger$$la$init$ra$$long$29$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$29$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$29$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$29$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$29$r0 := inline$java.math.BigInteger$$la$init$ra$$long$29$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$29$l0 := inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$29$Entry;

  inline$java.lang.Object$$la$init$ra$$$29$Entry:
    inline$java.lang.Object$$la$init$ra$$$29$$this := inline$java.math.BigInteger$$la$init$ra$$long$29$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$29$anon0;

  inline$java.lang.Object$$la$init$ra$$$29$anon0:
    inline$java.lang.Object$$la$init$ra$$$29$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$29$Return;

  inline$java.lang.Object$$la$init$ra$$$29$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$29$$exception := inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$29$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$29$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$29$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$29$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$29$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$29$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$30$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$30$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$30$r0, inline$java.math.BigInteger$$la$init$ra$$long$30$l0, inline$java.math.BigInteger$$la$init$ra$$long$30$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$30$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$30$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$30$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$30$r0 := inline$java.math.BigInteger$$la$init$ra$$long$30$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$30$l0 := inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$30$Entry;

  inline$java.lang.Object$$la$init$ra$$$30$Entry:
    inline$java.lang.Object$$la$init$ra$$$30$$this := inline$java.math.BigInteger$$la$init$ra$$long$30$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$30$anon0;

  inline$java.lang.Object$$la$init$ra$$$30$anon0:
    inline$java.lang.Object$$la$init$ra$$$30$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$30$Return;

  inline$java.lang.Object$$la$init$ra$$$30$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$30$$exception := inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$30$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$30$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$30$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$30$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$30$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$30$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$4$Entry;

  inline$java.math.BigInteger$shiftRight$int$4$Entry:
    inline$java.math.BigInteger$shiftRight$int$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$4$r0, inline$java.math.BigInteger$shiftRight$int$4$$l2, inline$java.math.BigInteger$shiftRight$int$4$i0, inline$java.math.BigInteger$shiftRight$int$4$$r1, inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$4$$l1, inline$java.math.BigInteger$shiftRight$int$4$$return, inline$java.math.BigInteger$shiftRight$int$4$$exception;
    inline$java.math.BigInteger$shiftRight$int$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$4$anon0;

  inline$java.math.BigInteger$shiftRight$int$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$r0 := inline$java.math.BigInteger$shiftRight$int$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$i0 := inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$4$$r1 := inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$4$$l1, 
  inline$java.math.BigInteger$shiftRight$int$4$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$31$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$31$$this := inline$java.math.BigInteger$shiftRight$int$4$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$31$r0, inline$java.math.BigInteger$$la$init$ra$$long$31$l0, inline$java.math.BigInteger$$la$init$ra$$long$31$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$31$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$31$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$31$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$31$r0 := inline$java.math.BigInteger$$la$init$ra$$long$31$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$31$l0 := inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$31$Entry;

  inline$java.lang.Object$$la$init$ra$$$31$Entry:
    inline$java.lang.Object$$la$init$ra$$$31$$this := inline$java.math.BigInteger$$la$init$ra$$long$31$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$31$anon0;

  inline$java.lang.Object$$la$init$ra$$$31$anon0:
    inline$java.lang.Object$$la$init$ra$$$31$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$31$Return;

  inline$java.lang.Object$$la$init$ra$$$31$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$31$$exception := inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$31$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$31$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$31$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$31$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$31$Return:
    inline$java.math.BigInteger$shiftRight$int$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$31$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$4$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$return := inline$java.math.BigInteger$shiftRight$int$4$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$4$block4;

  inline$java.math.BigInteger$shiftRight$int$4$block4:
    goto inline$java.math.BigInteger$shiftRight$int$4$Return;

  inline$java.math.BigInteger$shiftRight$int$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2 := inline$java.math.BigInteger$shiftRight$int$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftRight$int$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$7$Entry;

  inline$java.math.BigInteger$shiftLeft$int$7$Entry:
    inline$java.math.BigInteger$shiftLeft$int$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2;
    inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$7$$l2, inline$java.math.BigInteger$shiftLeft$int$7$$l1, inline$java.math.BigInteger$shiftLeft$int$7$r0, inline$java.math.BigInteger$shiftLeft$int$7$i0, inline$java.math.BigInteger$shiftLeft$int$7$$r1, inline$java.math.BigInteger$shiftLeft$int$7$$return, inline$java.math.BigInteger$shiftLeft$int$7$$exception;
    inline$java.math.BigInteger$shiftLeft$int$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$7$anon0;

  inline$java.math.BigInteger$shiftLeft$int$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$r0 := inline$java.math.BigInteger$shiftLeft$int$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$i0 := inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$7$$r1 := inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$7$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$7$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$32$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$32$$this := inline$java.math.BigInteger$shiftLeft$int$7$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$32$r0, inline$java.math.BigInteger$$la$init$ra$$long$32$l0, inline$java.math.BigInteger$$la$init$ra$$long$32$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$32$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$32$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$32$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$32$r0 := inline$java.math.BigInteger$$la$init$ra$$long$32$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$32$l0 := inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$32$Entry;

  inline$java.lang.Object$$la$init$ra$$$32$Entry:
    inline$java.lang.Object$$la$init$ra$$$32$$this := inline$java.math.BigInteger$$la$init$ra$$long$32$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$32$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$32$anon0;

  inline$java.lang.Object$$la$init$ra$$$32$anon0:
    inline$java.lang.Object$$la$init$ra$$$32$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$32$Return;

  inline$java.lang.Object$$la$init$ra$$$32$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$32$$exception := inline$java.lang.Object$$la$init$ra$$$32$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$32$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$32$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$32$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$32$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$32$Return:
    inline$java.math.BigInteger$shiftLeft$int$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$32$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$7$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$return := inline$java.math.BigInteger$shiftLeft$int$7$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$7$block5;

  inline$java.math.BigInteger$shiftLeft$int$7$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$7$Return;

  inline$java.math.BigInteger$shiftLeft$int$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11 := inline$java.math.BigInteger$shiftLeft$int$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$33$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$33$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$33$r0, inline$java.math.BigInteger$$la$init$ra$$long$33$l0, inline$java.math.BigInteger$$la$init$ra$$long$33$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$33$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$33$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$33$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$33$r0 := inline$java.math.BigInteger$$la$init$ra$$long$33$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$33$l0 := inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$33$Entry;

  inline$java.lang.Object$$la$init$ra$$$33$Entry:
    inline$java.lang.Object$$la$init$ra$$$33$$this := inline$java.math.BigInteger$$la$init$ra$$long$33$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$33$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$33$anon0;

  inline$java.lang.Object$$la$init$ra$$$33$anon0:
    inline$java.lang.Object$$la$init$ra$$$33$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$33$Return;

  inline$java.lang.Object$$la$init$ra$$$33$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$33$$exception := inline$java.lang.Object$$la$init$ra$$$33$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$33$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$33$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$33$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$33$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$33$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$33$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$5$Entry;

  inline$java.math.BigInteger$shiftRight$int$5$Entry:
    inline$java.math.BigInteger$shiftRight$int$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$5$r0, inline$java.math.BigInteger$shiftRight$int$5$$l2, inline$java.math.BigInteger$shiftRight$int$5$i0, inline$java.math.BigInteger$shiftRight$int$5$$r1, inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$5$$l1, inline$java.math.BigInteger$shiftRight$int$5$$return, inline$java.math.BigInteger$shiftRight$int$5$$exception;
    inline$java.math.BigInteger$shiftRight$int$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$5$anon0;

  inline$java.math.BigInteger$shiftRight$int$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$r0 := inline$java.math.BigInteger$shiftRight$int$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$i0 := inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$5$$r1 := inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$5$$l1, 
  inline$java.math.BigInteger$shiftRight$int$5$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$34$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$34$$this := inline$java.math.BigInteger$shiftRight$int$5$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$34$r0, inline$java.math.BigInteger$$la$init$ra$$long$34$l0, inline$java.math.BigInteger$$la$init$ra$$long$34$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$34$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$34$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$34$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$34$r0 := inline$java.math.BigInteger$$la$init$ra$$long$34$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$34$l0 := inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$34$Entry;

  inline$java.lang.Object$$la$init$ra$$$34$Entry:
    inline$java.lang.Object$$la$init$ra$$$34$$this := inline$java.math.BigInteger$$la$init$ra$$long$34$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$34$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$34$anon0;

  inline$java.lang.Object$$la$init$ra$$$34$anon0:
    inline$java.lang.Object$$la$init$ra$$$34$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$34$Return;

  inline$java.lang.Object$$la$init$ra$$$34$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$34$$exception := inline$java.lang.Object$$la$init$ra$$$34$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$34$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$34$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$34$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$34$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$34$Return:
    inline$java.math.BigInteger$shiftRight$int$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$34$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$5$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$return := inline$java.math.BigInteger$shiftRight$int$5$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$5$block4;

  inline$java.math.BigInteger$shiftRight$int$5$block4:
    goto inline$java.math.BigInteger$shiftRight$int$5$Return;

  inline$java.math.BigInteger$shiftRight$int$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4 := inline$java.math.BigInteger$shiftRight$int$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftRight$int$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$8$Entry;

  inline$java.math.BigInteger$shiftLeft$int$8$Entry:
    inline$java.math.BigInteger$shiftLeft$int$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4;
    inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$8$$l2, inline$java.math.BigInteger$shiftLeft$int$8$$l1, inline$java.math.BigInteger$shiftLeft$int$8$r0, inline$java.math.BigInteger$shiftLeft$int$8$i0, inline$java.math.BigInteger$shiftLeft$int$8$$r1, inline$java.math.BigInteger$shiftLeft$int$8$$return, inline$java.math.BigInteger$shiftLeft$int$8$$exception;
    inline$java.math.BigInteger$shiftLeft$int$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$8$anon0;

  inline$java.math.BigInteger$shiftLeft$int$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$r0 := inline$java.math.BigInteger$shiftLeft$int$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$i0 := inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$8$$r1 := inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$8$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$8$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$35$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$35$$this := inline$java.math.BigInteger$shiftLeft$int$8$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$35$r0, inline$java.math.BigInteger$$la$init$ra$$long$35$l0, inline$java.math.BigInteger$$la$init$ra$$long$35$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$35$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$35$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$35$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$35$r0 := inline$java.math.BigInteger$$la$init$ra$$long$35$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$35$l0 := inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$35$Entry;

  inline$java.lang.Object$$la$init$ra$$$35$Entry:
    inline$java.lang.Object$$la$init$ra$$$35$$this := inline$java.math.BigInteger$$la$init$ra$$long$35$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$35$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$35$anon0;

  inline$java.lang.Object$$la$init$ra$$$35$anon0:
    inline$java.lang.Object$$la$init$ra$$$35$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$35$Return;

  inline$java.lang.Object$$la$init$ra$$$35$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$35$$exception := inline$java.lang.Object$$la$init$ra$$$35$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$35$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$35$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$35$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$35$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$35$Return:
    inline$java.math.BigInteger$shiftLeft$int$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$35$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$8$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$8$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$return := inline$java.math.BigInteger$shiftLeft$int$8$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$8$block5;

  inline$java.math.BigInteger$shiftLeft$int$8$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$8$Return;

  inline$java.math.BigInteger$shiftLeft$int$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12 := inline$java.math.BigInteger$shiftLeft$int$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$36$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$36$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$36$r0, inline$java.math.BigInteger$$la$init$ra$$long$36$l0, inline$java.math.BigInteger$$la$init$ra$$long$36$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$36$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$36$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$36$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$36$r0 := inline$java.math.BigInteger$$la$init$ra$$long$36$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$36$l0 := inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$36$Entry;

  inline$java.lang.Object$$la$init$ra$$$36$Entry:
    inline$java.lang.Object$$la$init$ra$$$36$$this := inline$java.math.BigInteger$$la$init$ra$$long$36$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$36$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$36$anon0;

  inline$java.lang.Object$$la$init$ra$$$36$anon0:
    inline$java.lang.Object$$la$init$ra$$$36$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$36$Return;

  inline$java.lang.Object$$la$init$ra$$$36$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$36$$exception := inline$java.lang.Object$$la$init$ra$$$36$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$36$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$36$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$36$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$36$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$36$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$36$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$5$r1, inline$java.math.BigInteger$add$java.math.BigInteger$5$r0, inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$5$$return, inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$37$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$37$$this := inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$37$r0, inline$java.math.BigInteger$$la$init$ra$$long$37$l0, inline$java.math.BigInteger$$la$init$ra$$long$37$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$37$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$37$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$37$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$37$r0 := inline$java.math.BigInteger$$la$init$ra$$long$37$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$37$l0 := inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$37$Entry;

  inline$java.lang.Object$$la$init$ra$$$37$Entry:
    inline$java.lang.Object$$la$init$ra$$$37$$this := inline$java.math.BigInteger$$la$init$ra$$long$37$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$37$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$37$anon0;

  inline$java.lang.Object$$la$init$ra$$$37$anon0:
    inline$java.lang.Object$$la$init$ra$$$37$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$37$Return;

  inline$java.lang.Object$$la$init$ra$$$37$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$37$$exception := inline$java.lang.Object$$la$init$ra$$$37$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$37$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$37$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$37$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$37$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$37$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$37$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$return := inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$6$r1, inline$java.math.BigInteger$add$java.math.BigInteger$6$r0, inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$6$$return, inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$38$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$38$$this := inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$38$r0, inline$java.math.BigInteger$$la$init$ra$$long$38$l0, inline$java.math.BigInteger$$la$init$ra$$long$38$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$38$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$38$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$38$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$38$r0 := inline$java.math.BigInteger$$la$init$ra$$long$38$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$38$l0 := inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$38$Entry;

  inline$java.lang.Object$$la$init$ra$$$38$Entry:
    inline$java.lang.Object$$la$init$ra$$$38$$this := inline$java.math.BigInteger$$la$init$ra$$long$38$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$38$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$38$anon0;

  inline$java.lang.Object$$la$init$ra$$$38$anon0:
    inline$java.lang.Object$$la$init$ra$$$38$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$38$Return;

  inline$java.lang.Object$$la$init$ra$$$38$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$38$$exception := inline$java.lang.Object$$la$init$ra$$$38$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$38$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$38$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$38$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$38$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$38$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$38$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$return := inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$39$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$39$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$39$r0, inline$java.math.BigInteger$$la$init$ra$$long$39$l0, inline$java.math.BigInteger$$la$init$ra$$long$39$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$39$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$39$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$39$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$39$r0 := inline$java.math.BigInteger$$la$init$ra$$long$39$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$39$l0 := inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$39$Entry;

  inline$java.lang.Object$$la$init$ra$$$39$Entry:
    inline$java.lang.Object$$la$init$ra$$$39$$this := inline$java.math.BigInteger$$la$init$ra$$long$39$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$39$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$39$anon0;

  inline$java.lang.Object$$la$init$ra$$$39$anon0:
    inline$java.lang.Object$$la$init$ra$$$39$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$39$Return;

  inline$java.lang.Object$$la$init$ra$$$39$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$39$$exception := inline$java.lang.Object$$la$init$ra$$$39$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$39$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$39$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$39$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$39$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$39$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$39$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$40$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$40$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$40$r0, inline$java.math.BigInteger$$la$init$ra$$long$40$l0, inline$java.math.BigInteger$$la$init$ra$$long$40$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$40$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$40$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$40$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$40$r0 := inline$java.math.BigInteger$$la$init$ra$$long$40$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$40$l0 := inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$40$Entry;

  inline$java.lang.Object$$la$init$ra$$$40$Entry:
    inline$java.lang.Object$$la$init$ra$$$40$$this := inline$java.math.BigInteger$$la$init$ra$$long$40$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$40$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$40$anon0;

  inline$java.lang.Object$$la$init$ra$$$40$anon0:
    inline$java.lang.Object$$la$init$ra$$$40$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$40$Return;

  inline$java.lang.Object$$la$init$ra$$$40$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$40$$exception := inline$java.lang.Object$$la$init$ra$$$40$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$40$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$40$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$40$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$40$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$40$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$40$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$9$Entry;

  inline$java.math.BigInteger$shiftLeft$int$9$Entry:
    inline$java.math.BigInteger$shiftLeft$int$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16;
    inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$9$$l2, inline$java.math.BigInteger$shiftLeft$int$9$$l1, inline$java.math.BigInteger$shiftLeft$int$9$r0, inline$java.math.BigInteger$shiftLeft$int$9$i0, inline$java.math.BigInteger$shiftLeft$int$9$$r1, inline$java.math.BigInteger$shiftLeft$int$9$$return, inline$java.math.BigInteger$shiftLeft$int$9$$exception;
    inline$java.math.BigInteger$shiftLeft$int$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$9$anon0;

  inline$java.math.BigInteger$shiftLeft$int$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$r0 := inline$java.math.BigInteger$shiftLeft$int$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$i0 := inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$9$$r1 := inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$9$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$9$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$41$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$41$$this := inline$java.math.BigInteger$shiftLeft$int$9$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$41$r0, inline$java.math.BigInteger$$la$init$ra$$long$41$l0, inline$java.math.BigInteger$$la$init$ra$$long$41$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$41$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$41$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$41$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$41$r0 := inline$java.math.BigInteger$$la$init$ra$$long$41$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$41$l0 := inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$41$Entry;

  inline$java.lang.Object$$la$init$ra$$$41$Entry:
    inline$java.lang.Object$$la$init$ra$$$41$$this := inline$java.math.BigInteger$$la$init$ra$$long$41$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$41$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$41$anon0;

  inline$java.lang.Object$$la$init$ra$$$41$anon0:
    inline$java.lang.Object$$la$init$ra$$$41$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$41$Return;

  inline$java.lang.Object$$la$init$ra$$$41$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$41$$exception := inline$java.lang.Object$$la$init$ra$$$41$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$41$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$41$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$41$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$41$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$41$Return:
    inline$java.math.BigInteger$shiftLeft$int$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$41$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$9$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$9$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$return := inline$java.math.BigInteger$shiftLeft$int$9$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$9$block5;

  inline$java.math.BigInteger$shiftLeft$int$9$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$9$Return;

  inline$java.math.BigInteger$shiftLeft$int$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17 := inline$java.math.BigInteger$shiftLeft$int$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$7$r1, inline$java.math.BigInteger$add$java.math.BigInteger$7$r0, inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$7$$return, inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$42$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$42$$this := inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$42$r0, inline$java.math.BigInteger$$la$init$ra$$long$42$l0, inline$java.math.BigInteger$$la$init$ra$$long$42$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$42$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$42$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$42$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$42$r0 := inline$java.math.BigInteger$$la$init$ra$$long$42$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$42$l0 := inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$42$Entry;

  inline$java.lang.Object$$la$init$ra$$$42$Entry:
    inline$java.lang.Object$$la$init$ra$$$42$$this := inline$java.math.BigInteger$$la$init$ra$$long$42$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$42$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$42$anon0;

  inline$java.lang.Object$$la$init$ra$$$42$anon0:
    inline$java.lang.Object$$la$init$ra$$$42$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$42$Return;

  inline$java.lang.Object$$la$init$ra$$$42$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$42$$exception := inline$java.lang.Object$$la$init$ra$$$42$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$42$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$42$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$42$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$42$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$42$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$42$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$return := inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$10$Entry;

  inline$java.math.BigInteger$shiftLeft$int$10$Entry:
    inline$java.math.BigInteger$shiftLeft$int$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7;
    inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$10$$l2, inline$java.math.BigInteger$shiftLeft$int$10$$l1, inline$java.math.BigInteger$shiftLeft$int$10$r0, inline$java.math.BigInteger$shiftLeft$int$10$i0, inline$java.math.BigInteger$shiftLeft$int$10$$r1, inline$java.math.BigInteger$shiftLeft$int$10$$return, inline$java.math.BigInteger$shiftLeft$int$10$$exception;
    inline$java.math.BigInteger$shiftLeft$int$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$10$anon0;

  inline$java.math.BigInteger$shiftLeft$int$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$r0 := inline$java.math.BigInteger$shiftLeft$int$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$i0 := inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$10$$r1 := inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$10$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$10$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$43$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$43$$this := inline$java.math.BigInteger$shiftLeft$int$10$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$43$r0, inline$java.math.BigInteger$$la$init$ra$$long$43$l0, inline$java.math.BigInteger$$la$init$ra$$long$43$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$43$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$43$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$43$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$43$r0 := inline$java.math.BigInteger$$la$init$ra$$long$43$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$43$l0 := inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$43$Entry;

  inline$java.lang.Object$$la$init$ra$$$43$Entry:
    inline$java.lang.Object$$la$init$ra$$$43$$this := inline$java.math.BigInteger$$la$init$ra$$long$43$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$43$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$43$anon0;

  inline$java.lang.Object$$la$init$ra$$$43$anon0:
    inline$java.lang.Object$$la$init$ra$$$43$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$43$Return;

  inline$java.lang.Object$$la$init$ra$$$43$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$43$$exception := inline$java.lang.Object$$la$init$ra$$$43$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$43$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$43$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$43$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$43$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$43$Return:
    inline$java.math.BigInteger$shiftLeft$int$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$43$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$10$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$10$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$return := inline$java.math.BigInteger$shiftLeft$int$10$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$10$block5;

  inline$java.math.BigInteger$shiftLeft$int$10$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$10$Return;

  inline$java.math.BigInteger$shiftLeft$int$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19 := inline$java.math.BigInteger$shiftLeft$int$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$8$r1, inline$java.math.BigInteger$add$java.math.BigInteger$8$r0, inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$8$$return, inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$44$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$44$$this := inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$44$r0, inline$java.math.BigInteger$$la$init$ra$$long$44$l0, inline$java.math.BigInteger$$la$init$ra$$long$44$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$44$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$44$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$44$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$44$r0 := inline$java.math.BigInteger$$la$init$ra$$long$44$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$44$l0 := inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$44$Entry;

  inline$java.lang.Object$$la$init$ra$$$44$Entry:
    inline$java.lang.Object$$la$init$ra$$$44$$this := inline$java.math.BigInteger$$la$init$ra$$long$44$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$44$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$44$anon0;

  inline$java.lang.Object$$la$init$ra$$$44$anon0:
    inline$java.lang.Object$$la$init$ra$$$44$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$44$Return;

  inline$java.lang.Object$$la$init$ra$$$44$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$44$$exception := inline$java.lang.Object$$la$init$ra$$$44$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$44$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$44$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$44$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$44$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$44$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$44$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$return := inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return:
    r9 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto anon54$4;

  anon54$4:
    assert {:sourceloc "ModPow1.java", 83, -1, -1, -1} true;
    goto anon100_Then, anon100_Else;

  anon100_Then:
    assume {:partition} r5 != unsafe.$null;
    $exception := $exception;
    goto anon57;

  anon100_Else:
    assume {:partition} r5 == unsafe.$null;
    call $fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_10;
    return;

  anon57:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$this := r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0 := r27;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$9$r1, inline$java.math.BigInteger$add$java.math.BigInteger$9$r0, inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$9$$return, inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$45$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$45$$this := inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$45$r0, inline$java.math.BigInteger$$la$init$ra$$long$45$l0, inline$java.math.BigInteger$$la$init$ra$$long$45$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$45$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$45$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$45$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$45$r0 := inline$java.math.BigInteger$$la$init$ra$$long$45$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$45$l0 := inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$45$Entry;

  inline$java.lang.Object$$la$init$ra$$$45$Entry:
    inline$java.lang.Object$$la$init$ra$$$45$$this := inline$java.math.BigInteger$$la$init$ra$$long$45$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$45$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$45$anon0;

  inline$java.lang.Object$$la$init$ra$$$45$anon0:
    inline$java.lang.Object$$la$init$ra$$$45$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$45$Return;

  inline$java.lang.Object$$la$init$ra$$$45$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$45$$exception := inline$java.lang.Object$$la$init$ra$$$45$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$45$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$45$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$45$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$45$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$45$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$45$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$return := inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$Return:
    $r16 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    goto anon57$1;

  anon57$1:
    assert {:sourceloc "ModPow1.java", 83, -1, -1, -1} true;
    goto anon101_Then, anon101_Else;

  anon101_Then:
    assume {:partition} r7 != unsafe.$null;
    $exception := $exception;
    goto anon60;

  anon101_Else:
    assume {:partition} r7 == unsafe.$null;
    call $fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_11;
    return;

  anon60:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$this := r7;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0 := r6;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$10$r1, inline$java.math.BigInteger$add$java.math.BigInteger$10$r0, inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$10$$return, inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$46$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$46$$this := inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$46$r0, inline$java.math.BigInteger$$la$init$ra$$long$46$l0, inline$java.math.BigInteger$$la$init$ra$$long$46$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$46$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$46$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$46$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$46$r0 := inline$java.math.BigInteger$$la$init$ra$$long$46$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$46$l0 := inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$46$Entry;

  inline$java.lang.Object$$la$init$ra$$$46$Entry:
    inline$java.lang.Object$$la$init$ra$$$46$$this := inline$java.math.BigInteger$$la$init$ra$$long$46$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$46$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$46$anon0;

  inline$java.lang.Object$$la$init$ra$$$46$anon0:
    inline$java.lang.Object$$la$init$ra$$$46$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$46$Return;

  inline$java.lang.Object$$la$init$ra$$$46$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$46$$exception := inline$java.lang.Object$$la$init$ra$$$46$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$46$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$46$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$46$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$46$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$46$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$46$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$return := inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$Return:
    $r17 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    goto anon60$1;

  anon60$1:
    assert {:sourceloc "ModPow1.java", 83, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0 := $r16;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1 := $r17;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3:
    goto inline$java.math.BigInteger$bitLength$$8$Entry;

  inline$java.math.BigInteger$bitLength$$8$Entry:
    inline$java.math.BigInteger$bitLength$$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    havoc inline$java.math.BigInteger$bitLength$$8$$b1, inline$java.math.BigInteger$bitLength$$8$$b3, inline$java.math.BigInteger$bitLength$$8$i8, inline$java.math.BigInteger$bitLength$$8$l7, inline$java.math.BigInteger$bitLength$$8$$l4, inline$java.math.BigInteger$bitLength$$8$$b5, inline$java.math.BigInteger$bitLength$$8$$l0, inline$java.math.BigInteger$bitLength$$8$$l2, inline$java.math.BigInteger$bitLength$$8$r0, inline$java.math.BigInteger$bitLength$$8$$l6, inline$java.math.BigInteger$bitLength$$8$$return, inline$java.math.BigInteger$bitLength$$8$$exception;
    goto inline$java.math.BigInteger$bitLength$$8$anon0;

  inline$java.math.BigInteger$bitLength$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$8$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$r0 := inline$java.math.BigInteger$bitLength$$8$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$8$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon10_Then, inline$java.math.BigInteger$bitLength$$8$anon10_Else;

  inline$java.math.BigInteger$bitLength$$8$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$block11;

  inline$java.math.BigInteger$bitLength$$8$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon3;

  inline$java.math.BigInteger$bitLength$$8$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$8$block16;

  inline$java.math.BigInteger$bitLength$$8$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$8$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon11_Then, inline$java.math.BigInteger$bitLength$$8$anon11_Else;

  inline$java.math.BigInteger$bitLength$$8$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$block12;

  inline$java.math.BigInteger$bitLength$$8$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$8$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon6;

  inline$java.math.BigInteger$bitLength$$8$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$block13;

  inline$java.math.BigInteger$bitLength$$8$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l6 := -inline$java.math.BigInteger$bitLength$$8$$l4;
    goto inline$java.math.BigInteger$bitLength$$8$block13;

  inline$java.math.BigInteger$bitLength$$8$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$l7 := inline$java.math.BigInteger$bitLength$$8$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$8$block14;

  inline$java.math.BigInteger$bitLength$$8$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$8$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon12_Then, inline$java.math.BigInteger$bitLength$$8$anon12_Else;

  inline$java.math.BigInteger$bitLength$$8$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$block15;

  inline$java.math.BigInteger$bitLength$$8$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$8$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon9;

  inline$java.math.BigInteger$bitLength$$8$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$i8 := inline$java.math.BigInteger$bitLength$$8$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$8$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$block14;

  inline$java.math.BigInteger$bitLength$$8$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$return := inline$java.math.BigInteger$bitLength$$8$i8;
    goto inline$java.math.BigInteger$bitLength$$8$block16;

  inline$java.math.BigInteger$bitLength$$8$block16:
    goto inline$java.math.BigInteger$bitLength$$8$Return;

  inline$java.math.BigInteger$bitLength$$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0 := inline$java.math.BigInteger$bitLength$$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$bitLength$$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6:
    goto inline$java.math.BigInteger$bitLength$$9$Entry;

  inline$java.math.BigInteger$bitLength$$9$Entry:
    inline$java.math.BigInteger$bitLength$$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$bitLength$$9$$b1, inline$java.math.BigInteger$bitLength$$9$$b3, inline$java.math.BigInteger$bitLength$$9$i8, inline$java.math.BigInteger$bitLength$$9$l7, inline$java.math.BigInteger$bitLength$$9$$l4, inline$java.math.BigInteger$bitLength$$9$$b5, inline$java.math.BigInteger$bitLength$$9$$l0, inline$java.math.BigInteger$bitLength$$9$$l2, inline$java.math.BigInteger$bitLength$$9$r0, inline$java.math.BigInteger$bitLength$$9$$l6, inline$java.math.BigInteger$bitLength$$9$$return, inline$java.math.BigInteger$bitLength$$9$$exception;
    goto inline$java.math.BigInteger$bitLength$$9$anon0;

  inline$java.math.BigInteger$bitLength$$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$9$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$r0 := inline$java.math.BigInteger$bitLength$$9$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$9$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$9$anon10_Then, inline$java.math.BigInteger$bitLength$$9$anon10_Else;

  inline$java.math.BigInteger$bitLength$$9$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$9$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$9$block11;

  inline$java.math.BigInteger$bitLength$$9$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$9$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$9$anon3;

  inline$java.math.BigInteger$bitLength$$9$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$9$block16;

  inline$java.math.BigInteger$bitLength$$9$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$9$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$9$anon11_Then, inline$java.math.BigInteger$bitLength$$9$anon11_Else;

  inline$java.math.BigInteger$bitLength$$9$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$9$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$9$block12;

  inline$java.math.BigInteger$bitLength$$9$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$9$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$9$anon6;

  inline$java.math.BigInteger$bitLength$$9$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$9$block13;

  inline$java.math.BigInteger$bitLength$$9$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$l6 := -inline$java.math.BigInteger$bitLength$$9$$l4;
    goto inline$java.math.BigInteger$bitLength$$9$block13;

  inline$java.math.BigInteger$bitLength$$9$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$l7 := inline$java.math.BigInteger$bitLength$$9$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$9$block14;

  inline$java.math.BigInteger$bitLength$$9$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$9$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$9$anon12_Then, inline$java.math.BigInteger$bitLength$$9$anon12_Else;

  inline$java.math.BigInteger$bitLength$$9$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$9$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$9$block15;

  inline$java.math.BigInteger$bitLength$$9$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$9$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$9$anon9;

  inline$java.math.BigInteger$bitLength$$9$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$i8 := inline$java.math.BigInteger$bitLength$$9$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$9$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$9$block14;

  inline$java.math.BigInteger$bitLength$$9$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$9$$return := inline$java.math.BigInteger$bitLength$$9$i8;
    goto inline$java.math.BigInteger$bitLength$$9$block16;

  inline$java.math.BigInteger$bitLength$$9$block16:
    goto inline$java.math.BigInteger$bitLength$$9$Return;

  inline$java.math.BigInteger$bitLength$$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1 := inline$java.math.BigInteger$bitLength$$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$bitLength$$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$6$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$6$$r3, inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$6$$l0, inline$java.math.BigInteger$equals$java.lang.Object$6$$r4, inline$java.math.BigInteger$equals$java.lang.Object$6$$b2, inline$java.math.BigInteger$equals$java.lang.Object$6$r2, inline$java.math.BigInteger$equals$java.lang.Object$6$$l1, inline$java.math.BigInteger$equals$java.lang.Object$6$r1, inline$java.math.BigInteger$equals$java.lang.Object$6$r0, inline$java.math.BigInteger$equals$java.lang.Object$6$$return, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$r0 := inline$java.math.BigInteger$equals$java.lang.Object$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$r1 := inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$r3, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$6$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$r4, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$6$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$6$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$6$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$6$r2 := inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$6$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$6$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$7$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$7$$r3, inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$7$$l0, inline$java.math.BigInteger$equals$java.lang.Object$7$$r4, inline$java.math.BigInteger$equals$java.lang.Object$7$$b2, inline$java.math.BigInteger$equals$java.lang.Object$7$r2, inline$java.math.BigInteger$equals$java.lang.Object$7$$l1, inline$java.math.BigInteger$equals$java.lang.Object$7$r1, inline$java.math.BigInteger$equals$java.lang.Object$7$r0, inline$java.math.BigInteger$equals$java.lang.Object$7$$return, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$r0 := inline$java.math.BigInteger$equals$java.lang.Object$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$r1 := inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$r3, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$7$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$r4, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$7$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$7$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$7$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$7$r2 := inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$7$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$7$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$47$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$47$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$47$r0, inline$java.math.BigInteger$$la$init$ra$$long$47$l0, inline$java.math.BigInteger$$la$init$ra$$long$47$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$47$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$47$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$47$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$47$r0 := inline$java.math.BigInteger$$la$init$ra$$long$47$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$47$l0 := inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$47$Entry;

  inline$java.lang.Object$$la$init$ra$$$47$Entry:
    inline$java.lang.Object$$la$init$ra$$$47$$this := inline$java.math.BigInteger$$la$init$ra$$long$47$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$47$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$47$anon0;

  inline$java.lang.Object$$la$init$ra$$$47$anon0:
    inline$java.lang.Object$$la$init$ra$$$47$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$47$Return;

  inline$java.lang.Object$$la$init$ra$$$47$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$47$$exception := inline$java.lang.Object$$la$init$ra$$$47$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$47$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$47$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$47$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$47$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$47$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$47$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$48$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$48$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$48$r0, inline$java.math.BigInteger$$la$init$ra$$long$48$l0, inline$java.math.BigInteger$$la$init$ra$$long$48$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$48$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$48$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$48$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$48$r0 := inline$java.math.BigInteger$$la$init$ra$$long$48$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$48$l0 := inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$48$Entry;

  inline$java.lang.Object$$la$init$ra$$$48$Entry:
    inline$java.lang.Object$$la$init$ra$$$48$$this := inline$java.math.BigInteger$$la$init$ra$$long$48$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$48$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$48$anon0;

  inline$java.lang.Object$$la$init$ra$$$48$anon0:
    inline$java.lang.Object$$la$init$ra$$$48$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$48$Return;

  inline$java.lang.Object$$la$init$ra$$$48$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$48$$exception := inline$java.lang.Object$$la$init$ra$$$48$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$48$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$48$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$48$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$48$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$48$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$48$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$6$Entry;

  inline$java.math.BigInteger$shiftRight$int$6$Entry:
    inline$java.math.BigInteger$shiftRight$int$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$6$r0, inline$java.math.BigInteger$shiftRight$int$6$$l2, inline$java.math.BigInteger$shiftRight$int$6$i0, inline$java.math.BigInteger$shiftRight$int$6$$r1, inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$6$$l1, inline$java.math.BigInteger$shiftRight$int$6$$return, inline$java.math.BigInteger$shiftRight$int$6$$exception;
    inline$java.math.BigInteger$shiftRight$int$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$6$anon0;

  inline$java.math.BigInteger$shiftRight$int$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$r0 := inline$java.math.BigInteger$shiftRight$int$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$i0 := inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$6$$r1 := inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$6$$l1, 
  inline$java.math.BigInteger$shiftRight$int$6$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$49$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$49$$this := inline$java.math.BigInteger$shiftRight$int$6$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$49$r0, inline$java.math.BigInteger$$la$init$ra$$long$49$l0, inline$java.math.BigInteger$$la$init$ra$$long$49$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$49$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$49$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$49$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$49$r0 := inline$java.math.BigInteger$$la$init$ra$$long$49$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$49$l0 := inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$49$Entry;

  inline$java.lang.Object$$la$init$ra$$$49$Entry:
    inline$java.lang.Object$$la$init$ra$$$49$$this := inline$java.math.BigInteger$$la$init$ra$$long$49$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$49$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$49$anon0;

  inline$java.lang.Object$$la$init$ra$$$49$anon0:
    inline$java.lang.Object$$la$init$ra$$$49$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$49$Return;

  inline$java.lang.Object$$la$init$ra$$$49$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$49$$exception := inline$java.lang.Object$$la$init$ra$$$49$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$49$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$49$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$49$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$49$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$49$Return:
    inline$java.math.BigInteger$shiftRight$int$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$49$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$6$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$return := inline$java.math.BigInteger$shiftRight$int$6$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$6$block4;

  inline$java.math.BigInteger$shiftRight$int$6$block4:
    goto inline$java.math.BigInteger$shiftRight$int$6$Return;

  inline$java.math.BigInteger$shiftRight$int$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2 := inline$java.math.BigInteger$shiftRight$int$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftRight$int$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$11$Entry;

  inline$java.math.BigInteger$shiftLeft$int$11$Entry:
    inline$java.math.BigInteger$shiftLeft$int$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2;
    inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$11$$l2, inline$java.math.BigInteger$shiftLeft$int$11$$l1, inline$java.math.BigInteger$shiftLeft$int$11$r0, inline$java.math.BigInteger$shiftLeft$int$11$i0, inline$java.math.BigInteger$shiftLeft$int$11$$r1, inline$java.math.BigInteger$shiftLeft$int$11$$return, inline$java.math.BigInteger$shiftLeft$int$11$$exception;
    inline$java.math.BigInteger$shiftLeft$int$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$11$anon0;

  inline$java.math.BigInteger$shiftLeft$int$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$r0 := inline$java.math.BigInteger$shiftLeft$int$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$i0 := inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$11$$r1 := inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$11$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$11$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$50$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$50$$this := inline$java.math.BigInteger$shiftLeft$int$11$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$50$r0, inline$java.math.BigInteger$$la$init$ra$$long$50$l0, inline$java.math.BigInteger$$la$init$ra$$long$50$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$50$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$50$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$50$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$50$r0 := inline$java.math.BigInteger$$la$init$ra$$long$50$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$50$l0 := inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$50$Entry;

  inline$java.lang.Object$$la$init$ra$$$50$Entry:
    inline$java.lang.Object$$la$init$ra$$$50$$this := inline$java.math.BigInteger$$la$init$ra$$long$50$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$50$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$50$anon0;

  inline$java.lang.Object$$la$init$ra$$$50$anon0:
    inline$java.lang.Object$$la$init$ra$$$50$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$50$Return;

  inline$java.lang.Object$$la$init$ra$$$50$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$50$$exception := inline$java.lang.Object$$la$init$ra$$$50$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$50$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$50$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$50$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$50$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$50$Return:
    inline$java.math.BigInteger$shiftLeft$int$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$50$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$11$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$11$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$return := inline$java.math.BigInteger$shiftLeft$int$11$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$11$block5;

  inline$java.math.BigInteger$shiftLeft$int$11$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$11$Return;

  inline$java.math.BigInteger$shiftLeft$int$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11 := inline$java.math.BigInteger$shiftLeft$int$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$51$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$51$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$51$r0, inline$java.math.BigInteger$$la$init$ra$$long$51$l0, inline$java.math.BigInteger$$la$init$ra$$long$51$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$51$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$51$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$51$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$51$r0 := inline$java.math.BigInteger$$la$init$ra$$long$51$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$51$l0 := inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$51$Entry;

  inline$java.lang.Object$$la$init$ra$$$51$Entry:
    inline$java.lang.Object$$la$init$ra$$$51$$this := inline$java.math.BigInteger$$la$init$ra$$long$51$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$51$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$51$anon0;

  inline$java.lang.Object$$la$init$ra$$$51$anon0:
    inline$java.lang.Object$$la$init$ra$$$51$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$51$Return;

  inline$java.lang.Object$$la$init$ra$$$51$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$51$$exception := inline$java.lang.Object$$la$init$ra$$$51$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$51$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$51$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$51$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$51$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$51$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$51$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$7$Entry;

  inline$java.math.BigInteger$shiftRight$int$7$Entry:
    inline$java.math.BigInteger$shiftRight$int$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$7$r0, inline$java.math.BigInteger$shiftRight$int$7$$l2, inline$java.math.BigInteger$shiftRight$int$7$i0, inline$java.math.BigInteger$shiftRight$int$7$$r1, inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$7$$l1, inline$java.math.BigInteger$shiftRight$int$7$$return, inline$java.math.BigInteger$shiftRight$int$7$$exception;
    inline$java.math.BigInteger$shiftRight$int$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$7$anon0;

  inline$java.math.BigInteger$shiftRight$int$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$r0 := inline$java.math.BigInteger$shiftRight$int$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$i0 := inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$7$$r1 := inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$7$$l1, 
  inline$java.math.BigInteger$shiftRight$int$7$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$52$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$52$$this := inline$java.math.BigInteger$shiftRight$int$7$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$52$r0, inline$java.math.BigInteger$$la$init$ra$$long$52$l0, inline$java.math.BigInteger$$la$init$ra$$long$52$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$52$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$52$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$52$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$52$r0 := inline$java.math.BigInteger$$la$init$ra$$long$52$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$52$l0 := inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$52$Entry;

  inline$java.lang.Object$$la$init$ra$$$52$Entry:
    inline$java.lang.Object$$la$init$ra$$$52$$this := inline$java.math.BigInteger$$la$init$ra$$long$52$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$52$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$52$anon0;

  inline$java.lang.Object$$la$init$ra$$$52$anon0:
    inline$java.lang.Object$$la$init$ra$$$52$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$52$Return;

  inline$java.lang.Object$$la$init$ra$$$52$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$52$$exception := inline$java.lang.Object$$la$init$ra$$$52$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$52$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$52$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$52$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$52$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$52$Return:
    inline$java.math.BigInteger$shiftRight$int$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$52$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$7$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$return := inline$java.math.BigInteger$shiftRight$int$7$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$7$block4;

  inline$java.math.BigInteger$shiftRight$int$7$block4:
    goto inline$java.math.BigInteger$shiftRight$int$7$Return;

  inline$java.math.BigInteger$shiftRight$int$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4 := inline$java.math.BigInteger$shiftRight$int$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftRight$int$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$12$Entry;

  inline$java.math.BigInteger$shiftLeft$int$12$Entry:
    inline$java.math.BigInteger$shiftLeft$int$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4;
    inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$12$$l2, inline$java.math.BigInteger$shiftLeft$int$12$$l1, inline$java.math.BigInteger$shiftLeft$int$12$r0, inline$java.math.BigInteger$shiftLeft$int$12$i0, inline$java.math.BigInteger$shiftLeft$int$12$$r1, inline$java.math.BigInteger$shiftLeft$int$12$$return, inline$java.math.BigInteger$shiftLeft$int$12$$exception;
    inline$java.math.BigInteger$shiftLeft$int$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$12$anon0;

  inline$java.math.BigInteger$shiftLeft$int$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$r0 := inline$java.math.BigInteger$shiftLeft$int$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$i0 := inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$12$$r1 := inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$12$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$12$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$53$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$53$$this := inline$java.math.BigInteger$shiftLeft$int$12$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$53$r0, inline$java.math.BigInteger$$la$init$ra$$long$53$l0, inline$java.math.BigInteger$$la$init$ra$$long$53$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$53$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$53$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$53$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$53$r0 := inline$java.math.BigInteger$$la$init$ra$$long$53$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$53$l0 := inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$53$Entry;

  inline$java.lang.Object$$la$init$ra$$$53$Entry:
    inline$java.lang.Object$$la$init$ra$$$53$$this := inline$java.math.BigInteger$$la$init$ra$$long$53$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$53$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$53$anon0;

  inline$java.lang.Object$$la$init$ra$$$53$anon0:
    inline$java.lang.Object$$la$init$ra$$$53$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$53$Return;

  inline$java.lang.Object$$la$init$ra$$$53$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$53$$exception := inline$java.lang.Object$$la$init$ra$$$53$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$53$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$53$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$53$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$53$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$53$Return:
    inline$java.math.BigInteger$shiftLeft$int$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$53$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$12$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$12$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$return := inline$java.math.BigInteger$shiftLeft$int$12$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$12$block5;

  inline$java.math.BigInteger$shiftLeft$int$12$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$12$Return;

  inline$java.math.BigInteger$shiftLeft$int$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12 := inline$java.math.BigInteger$shiftLeft$int$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$54$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$54$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$54$r0, inline$java.math.BigInteger$$la$init$ra$$long$54$l0, inline$java.math.BigInteger$$la$init$ra$$long$54$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$54$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$54$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$54$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$54$r0 := inline$java.math.BigInteger$$la$init$ra$$long$54$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$54$l0 := inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$54$Entry;

  inline$java.lang.Object$$la$init$ra$$$54$Entry:
    inline$java.lang.Object$$la$init$ra$$$54$$this := inline$java.math.BigInteger$$la$init$ra$$long$54$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$54$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$54$anon0;

  inline$java.lang.Object$$la$init$ra$$$54$anon0:
    inline$java.lang.Object$$la$init$ra$$$54$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$54$Return;

  inline$java.lang.Object$$la$init$ra$$$54$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$54$$exception := inline$java.lang.Object$$la$init$ra$$$54$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$54$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$54$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$54$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$54$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$54$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$54$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$11$r1, inline$java.math.BigInteger$add$java.math.BigInteger$11$r0, inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$11$$return, inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$55$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$55$$this := inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$55$r0, inline$java.math.BigInteger$$la$init$ra$$long$55$l0, inline$java.math.BigInteger$$la$init$ra$$long$55$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$55$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$55$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$55$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$55$r0 := inline$java.math.BigInteger$$la$init$ra$$long$55$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$55$l0 := inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$55$Entry;

  inline$java.lang.Object$$la$init$ra$$$55$Entry:
    inline$java.lang.Object$$la$init$ra$$$55$$this := inline$java.math.BigInteger$$la$init$ra$$long$55$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$55$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$55$anon0;

  inline$java.lang.Object$$la$init$ra$$$55$anon0:
    inline$java.lang.Object$$la$init$ra$$$55$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$55$Return;

  inline$java.lang.Object$$la$init$ra$$$55$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$55$$exception := inline$java.lang.Object$$la$init$ra$$$55$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$55$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$55$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$55$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$55$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$55$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$55$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$return := inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$12$r1, inline$java.math.BigInteger$add$java.math.BigInteger$12$r0, inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$12$$return, inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$56$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$56$$this := inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$56$r0, inline$java.math.BigInteger$$la$init$ra$$long$56$l0, inline$java.math.BigInteger$$la$init$ra$$long$56$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$56$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$56$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$56$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$56$r0 := inline$java.math.BigInteger$$la$init$ra$$long$56$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$56$l0 := inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$56$Entry;

  inline$java.lang.Object$$la$init$ra$$$56$Entry:
    inline$java.lang.Object$$la$init$ra$$$56$$this := inline$java.math.BigInteger$$la$init$ra$$long$56$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$56$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$56$anon0;

  inline$java.lang.Object$$la$init$ra$$$56$anon0:
    inline$java.lang.Object$$la$init$ra$$$56$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$56$Return;

  inline$java.lang.Object$$la$init$ra$$$56$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$56$$exception := inline$java.lang.Object$$la$init$ra$$$56$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$56$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$56$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$56$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$56$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$56$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$56$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$return := inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$57$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$57$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$57$r0, inline$java.math.BigInteger$$la$init$ra$$long$57$l0, inline$java.math.BigInteger$$la$init$ra$$long$57$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$57$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$57$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$57$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$57$r0 := inline$java.math.BigInteger$$la$init$ra$$long$57$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$57$l0 := inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$57$Entry;

  inline$java.lang.Object$$la$init$ra$$$57$Entry:
    inline$java.lang.Object$$la$init$ra$$$57$$this := inline$java.math.BigInteger$$la$init$ra$$long$57$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$57$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$57$anon0;

  inline$java.lang.Object$$la$init$ra$$$57$anon0:
    inline$java.lang.Object$$la$init$ra$$$57$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$57$Return;

  inline$java.lang.Object$$la$init$ra$$$57$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$57$$exception := inline$java.lang.Object$$la$init$ra$$$57$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$57$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$57$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$57$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$57$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$57$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$57$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$58$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$58$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$58$r0, inline$java.math.BigInteger$$la$init$ra$$long$58$l0, inline$java.math.BigInteger$$la$init$ra$$long$58$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$58$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$58$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$58$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$58$r0 := inline$java.math.BigInteger$$la$init$ra$$long$58$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$58$l0 := inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$58$Entry;

  inline$java.lang.Object$$la$init$ra$$$58$Entry:
    inline$java.lang.Object$$la$init$ra$$$58$$this := inline$java.math.BigInteger$$la$init$ra$$long$58$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$58$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$58$anon0;

  inline$java.lang.Object$$la$init$ra$$$58$anon0:
    inline$java.lang.Object$$la$init$ra$$$58$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$58$Return;

  inline$java.lang.Object$$la$init$ra$$$58$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$58$$exception := inline$java.lang.Object$$la$init$ra$$$58$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$58$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$58$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$58$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$58$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$58$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$58$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$13$Entry;

  inline$java.math.BigInteger$shiftLeft$int$13$Entry:
    inline$java.math.BigInteger$shiftLeft$int$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16;
    inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$13$$l2, inline$java.math.BigInteger$shiftLeft$int$13$$l1, inline$java.math.BigInteger$shiftLeft$int$13$r0, inline$java.math.BigInteger$shiftLeft$int$13$i0, inline$java.math.BigInteger$shiftLeft$int$13$$r1, inline$java.math.BigInteger$shiftLeft$int$13$$return, inline$java.math.BigInteger$shiftLeft$int$13$$exception;
    inline$java.math.BigInteger$shiftLeft$int$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$13$anon0;

  inline$java.math.BigInteger$shiftLeft$int$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$r0 := inline$java.math.BigInteger$shiftLeft$int$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$i0 := inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$13$$r1 := inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$13$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$13$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$59$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$59$$this := inline$java.math.BigInteger$shiftLeft$int$13$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$59$r0, inline$java.math.BigInteger$$la$init$ra$$long$59$l0, inline$java.math.BigInteger$$la$init$ra$$long$59$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$59$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$59$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$59$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$59$r0 := inline$java.math.BigInteger$$la$init$ra$$long$59$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$59$l0 := inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$59$Entry;

  inline$java.lang.Object$$la$init$ra$$$59$Entry:
    inline$java.lang.Object$$la$init$ra$$$59$$this := inline$java.math.BigInteger$$la$init$ra$$long$59$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$59$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$59$anon0;

  inline$java.lang.Object$$la$init$ra$$$59$anon0:
    inline$java.lang.Object$$la$init$ra$$$59$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$59$Return;

  inline$java.lang.Object$$la$init$ra$$$59$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$59$$exception := inline$java.lang.Object$$la$init$ra$$$59$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$59$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$59$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$59$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$59$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$59$Return:
    inline$java.math.BigInteger$shiftLeft$int$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$59$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$13$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$13$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$return := inline$java.math.BigInteger$shiftLeft$int$13$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$13$block5;

  inline$java.math.BigInteger$shiftLeft$int$13$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$13$Return;

  inline$java.math.BigInteger$shiftLeft$int$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17 := inline$java.math.BigInteger$shiftLeft$int$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$13$r1, inline$java.math.BigInteger$add$java.math.BigInteger$13$r0, inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$13$$return, inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$60$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$60$$this := inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$60$r0, inline$java.math.BigInteger$$la$init$ra$$long$60$l0, inline$java.math.BigInteger$$la$init$ra$$long$60$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$60$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$60$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$60$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$60$r0 := inline$java.math.BigInteger$$la$init$ra$$long$60$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$60$l0 := inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$60$Entry;

  inline$java.lang.Object$$la$init$ra$$$60$Entry:
    inline$java.lang.Object$$la$init$ra$$$60$$this := inline$java.math.BigInteger$$la$init$ra$$long$60$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$60$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$60$anon0;

  inline$java.lang.Object$$la$init$ra$$$60$anon0:
    inline$java.lang.Object$$la$init$ra$$$60$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$60$Return;

  inline$java.lang.Object$$la$init$ra$$$60$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$60$$exception := inline$java.lang.Object$$la$init$ra$$$60$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$60$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$60$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$60$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$60$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$60$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$60$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$return := inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$14$Entry;

  inline$java.math.BigInteger$shiftLeft$int$14$Entry:
    inline$java.math.BigInteger$shiftLeft$int$14$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7;
    inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$14$$l2, inline$java.math.BigInteger$shiftLeft$int$14$$l1, inline$java.math.BigInteger$shiftLeft$int$14$r0, inline$java.math.BigInteger$shiftLeft$int$14$i0, inline$java.math.BigInteger$shiftLeft$int$14$$r1, inline$java.math.BigInteger$shiftLeft$int$14$$return, inline$java.math.BigInteger$shiftLeft$int$14$$exception;
    inline$java.math.BigInteger$shiftLeft$int$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$14$anon0;

  inline$java.math.BigInteger$shiftLeft$int$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$r0 := inline$java.math.BigInteger$shiftLeft$int$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$i0 := inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$14$$r1 := inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$14$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$14$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$61$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$61$$this := inline$java.math.BigInteger$shiftLeft$int$14$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$61$r0, inline$java.math.BigInteger$$la$init$ra$$long$61$l0, inline$java.math.BigInteger$$la$init$ra$$long$61$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$61$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$61$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$61$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$61$r0 := inline$java.math.BigInteger$$la$init$ra$$long$61$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$61$l0 := inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$61$Entry;

  inline$java.lang.Object$$la$init$ra$$$61$Entry:
    inline$java.lang.Object$$la$init$ra$$$61$$this := inline$java.math.BigInteger$$la$init$ra$$long$61$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$61$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$61$anon0;

  inline$java.lang.Object$$la$init$ra$$$61$anon0:
    inline$java.lang.Object$$la$init$ra$$$61$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$61$Return;

  inline$java.lang.Object$$la$init$ra$$$61$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$61$$exception := inline$java.lang.Object$$la$init$ra$$$61$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$61$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$61$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$61$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$61$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$61$Return:
    inline$java.math.BigInteger$shiftLeft$int$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$61$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$14$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$14$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$return := inline$java.math.BigInteger$shiftLeft$int$14$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$14$block5;

  inline$java.math.BigInteger$shiftLeft$int$14$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$14$Return;

  inline$java.math.BigInteger$shiftLeft$int$14$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19 := inline$java.math.BigInteger$shiftLeft$int$14$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$14$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$14$r1, inline$java.math.BigInteger$add$java.math.BigInteger$14$r0, inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$14$$return, inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$62$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$62$$this := inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$62$r0, inline$java.math.BigInteger$$la$init$ra$$long$62$l0, inline$java.math.BigInteger$$la$init$ra$$long$62$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$62$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$62$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$62$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$62$r0 := inline$java.math.BigInteger$$la$init$ra$$long$62$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$62$l0 := inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$62$Entry;

  inline$java.lang.Object$$la$init$ra$$$62$Entry:
    inline$java.lang.Object$$la$init$ra$$$62$$this := inline$java.math.BigInteger$$la$init$ra$$long$62$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$62$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$62$anon0;

  inline$java.lang.Object$$la$init$ra$$$62$anon0:
    inline$java.lang.Object$$la$init$ra$$$62$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$62$Return;

  inline$java.lang.Object$$la$init$ra$$$62$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$62$$exception := inline$java.lang.Object$$la$init$ra$$$62$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$62$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$62$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$62$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$62$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$62$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$62$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$return := inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return:
    r10 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto anon60$2;

  anon60$2:
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    goto anon102_Then, anon102_Else;

  anon102_Then:
    assume {:partition} r10 != unsafe.$null;
    $exception := $exception;
    goto anon63;

  anon102_Else:
    assume {:partition} r10 == unsafe.$null;
    call $fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_12;
    return;

  anon63:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this := r10;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0 := r8;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$63$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$63$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$63$r0, inline$java.math.BigInteger$$la$init$ra$$long$63$l0, inline$java.math.BigInteger$$la$init$ra$$long$63$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$63$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$63$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$63$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$63$r0 := inline$java.math.BigInteger$$la$init$ra$$long$63$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$63$l0 := inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$63$Entry;

  inline$java.lang.Object$$la$init$ra$$$63$Entry:
    inline$java.lang.Object$$la$init$ra$$$63$$this := inline$java.math.BigInteger$$la$init$ra$$long$63$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$63$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$63$anon0;

  inline$java.lang.Object$$la$init$ra$$$63$anon0:
    inline$java.lang.Object$$la$init$ra$$$63$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$63$Return;

  inline$java.lang.Object$$la$init$ra$$$63$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$63$$exception := inline$java.lang.Object$$la$init$ra$$$63$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$63$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$63$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$63$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$63$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$63$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$63$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return:
    $r18 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    goto anon63$1;

  anon63$1:
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    goto anon103_Then, anon103_Else;

  anon103_Then:
    assume {:partition} $r18 != unsafe.$null;
    $exception := $exception;
    goto anon66;

  anon103_Else:
    assume {:partition} $r18 == unsafe.$null;
    call $fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_13;
    return;

  anon66:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this := $r18;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0 := r9;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$64$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$64$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$64$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$64$r0, inline$java.math.BigInteger$$la$init$ra$$long$64$l0, inline$java.math.BigInteger$$la$init$ra$$long$64$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$64$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$64$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$64$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$64$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$64$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$64$r0 := inline$java.math.BigInteger$$la$init$ra$$long$64$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$64$l0 := inline$java.math.BigInteger$$la$init$ra$$long$64$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$64$Entry;

  inline$java.lang.Object$$la$init$ra$$$64$Entry:
    inline$java.lang.Object$$la$init$ra$$$64$$this := inline$java.math.BigInteger$$la$init$ra$$long$64$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$64$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$64$anon0;

  inline$java.lang.Object$$la$init$ra$$$64$anon0:
    inline$java.lang.Object$$la$init$ra$$$64$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$64$Return;

  inline$java.lang.Object$$la$init$ra$$$64$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$64$$exception := inline$java.lang.Object$$la$init$ra$$$64$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$64$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$64$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$64$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$64$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$64$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$64$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return:
    $r19 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    goto anon66$1;

  anon66$1:
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    goto anon104_Then, anon104_Else;

  anon104_Then:
    assume {:partition} $r19 != unsafe.$null;
    $exception := $exception;
    goto anon69;

  anon104_Else:
    assume {:partition} $r19 == unsafe.$null;
    call $fakelocal_14 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_14;
    return;

  anon69:
    goto inline$java.math.BigInteger$shiftLeft$int$15$Entry;

  inline$java.math.BigInteger$shiftLeft$int$15$Entry:
    inline$java.math.BigInteger$shiftLeft$int$15$$this := $r19;
    inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0 := i14;
    havoc inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$15$$l2, inline$java.math.BigInteger$shiftLeft$int$15$$l1, inline$java.math.BigInteger$shiftLeft$int$15$r0, inline$java.math.BigInteger$shiftLeft$int$15$i0, inline$java.math.BigInteger$shiftLeft$int$15$$r1, inline$java.math.BigInteger$shiftLeft$int$15$$return, inline$java.math.BigInteger$shiftLeft$int$15$$exception;
    inline$java.math.BigInteger$shiftLeft$int$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$15$anon0;

  inline$java.math.BigInteger$shiftLeft$int$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$r0 := inline$java.math.BigInteger$shiftLeft$int$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$i0 := inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$15$$r1 := inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$15$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$15$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$65$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$65$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$65$$this := inline$java.math.BigInteger$shiftLeft$int$15$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$65$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$65$r0, inline$java.math.BigInteger$$la$init$ra$$long$65$l0, inline$java.math.BigInteger$$la$init$ra$$long$65$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$65$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$65$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$65$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$65$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$65$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$65$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$65$r0 := inline$java.math.BigInteger$$la$init$ra$$long$65$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$65$l0 := inline$java.math.BigInteger$$la$init$ra$$long$65$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$65$Entry;

  inline$java.lang.Object$$la$init$ra$$$65$Entry:
    inline$java.lang.Object$$la$init$ra$$$65$$this := inline$java.math.BigInteger$$la$init$ra$$long$65$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$65$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$65$anon0;

  inline$java.lang.Object$$la$init$ra$$$65$anon0:
    inline$java.lang.Object$$la$init$ra$$$65$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$65$Return;

  inline$java.lang.Object$$la$init$ra$$$65$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$65$$exception := inline$java.lang.Object$$la$init$ra$$$65$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$65$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$65$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$65$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$65$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$65$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$65$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$65$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$65$Return:
    inline$java.math.BigInteger$shiftLeft$int$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$65$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$15$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$15$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$return := inline$java.math.BigInteger$shiftLeft$int$15$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$15$block5;

  inline$java.math.BigInteger$shiftLeft$int$15$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$15$Return;

  inline$java.math.BigInteger$shiftLeft$int$15$Return:
    $r20 := inline$java.math.BigInteger$shiftLeft$int$15$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$15$$exception;
    goto anon69$1;

  anon69$1:
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    goto anon105_Then, anon105_Else;

  anon105_Then:
    assume {:partition} r8 != unsafe.$null;
    $exception := $exception;
    goto anon72;

  anon105_Else:
    assume {:partition} r8 == unsafe.$null;
    call $fakelocal_15 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_15;
    return;

  anon72:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$this := r8;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0 := $r20;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$15$r1, inline$java.math.BigInteger$add$java.math.BigInteger$15$r0, inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$15$$return, inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$66$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$66$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$66$$this := inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$66$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$66$r0, inline$java.math.BigInteger$$la$init$ra$$long$66$l0, inline$java.math.BigInteger$$la$init$ra$$long$66$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$66$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$66$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$66$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$66$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$66$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$66$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$66$r0 := inline$java.math.BigInteger$$la$init$ra$$long$66$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$66$l0 := inline$java.math.BigInteger$$la$init$ra$$long$66$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$66$Entry;

  inline$java.lang.Object$$la$init$ra$$$66$Entry:
    inline$java.lang.Object$$la$init$ra$$$66$$this := inline$java.math.BigInteger$$la$init$ra$$long$66$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$66$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$66$anon0;

  inline$java.lang.Object$$la$init$ra$$$66$anon0:
    inline$java.lang.Object$$la$init$ra$$$66$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$66$Return;

  inline$java.lang.Object$$la$init$ra$$$66$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$66$$exception := inline$java.lang.Object$$la$init$ra$$$66$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$66$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$66$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$66$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$66$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$66$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$66$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$66$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$66$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$66$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$return := inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$Return:
    $r21 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    goto anon72$1;

  anon72$1:
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    $i9 := unsafe.$mulInt(2, i14);
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    goto anon106_Then, anon106_Else;

  anon106_Then:
    assume {:partition} r9 != unsafe.$null;
    $exception := $exception;
    goto anon75;

  anon106_Else:
    assume {:partition} r9 == unsafe.$null;
    call $fakelocal_16 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_16;
    return;

  anon75:
    goto inline$java.math.BigInteger$shiftLeft$int$16$Entry;

  inline$java.math.BigInteger$shiftLeft$int$16$Entry:
    inline$java.math.BigInteger$shiftLeft$int$16$$this := r9;
    inline$java.math.BigInteger$shiftLeft$int$16$$in_parameter__0 := $i9;
    havoc inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$16$$l2, inline$java.math.BigInteger$shiftLeft$int$16$$l1, inline$java.math.BigInteger$shiftLeft$int$16$r0, inline$java.math.BigInteger$shiftLeft$int$16$i0, inline$java.math.BigInteger$shiftLeft$int$16$$r1, inline$java.math.BigInteger$shiftLeft$int$16$$return, inline$java.math.BigInteger$shiftLeft$int$16$$exception;
    inline$java.math.BigInteger$shiftLeft$int$16$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$16$anon0;

  inline$java.math.BigInteger$shiftLeft$int$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$16$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$16$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$r0 := inline$java.math.BigInteger$shiftLeft$int$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$i0 := inline$java.math.BigInteger$shiftLeft$int$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$16$$r1 := inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$16$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$16$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$16$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$67$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$67$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$67$$this := inline$java.math.BigInteger$shiftLeft$int$16$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$67$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$16$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$67$r0, inline$java.math.BigInteger$$la$init$ra$$long$67$l0, inline$java.math.BigInteger$$la$init$ra$$long$67$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$67$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$67$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$67$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$67$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$67$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$67$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$67$r0 := inline$java.math.BigInteger$$la$init$ra$$long$67$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$67$l0 := inline$java.math.BigInteger$$la$init$ra$$long$67$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$67$Entry;

  inline$java.lang.Object$$la$init$ra$$$67$Entry:
    inline$java.lang.Object$$la$init$ra$$$67$$this := inline$java.math.BigInteger$$la$init$ra$$long$67$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$67$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$67$anon0;

  inline$java.lang.Object$$la$init$ra$$$67$anon0:
    inline$java.lang.Object$$la$init$ra$$$67$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$67$Return;

  inline$java.lang.Object$$la$init$ra$$$67$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$67$$exception := inline$java.lang.Object$$la$init$ra$$$67$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$67$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$67$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$67$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$67$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$67$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$67$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$67$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$67$Return:
    inline$java.math.BigInteger$shiftLeft$int$16$$exception := inline$java.math.BigInteger$$la$init$ra$$long$67$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$16$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$16$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$$return := inline$java.math.BigInteger$shiftLeft$int$16$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$16$block5;

  inline$java.math.BigInteger$shiftLeft$int$16$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$16$Return;

  inline$java.math.BigInteger$shiftLeft$int$16$Return:
    $r22 := inline$java.math.BigInteger$shiftLeft$int$16$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$16$$exception;
    goto anon75$1;

  anon75$1:
    assert {:sourceloc "ModPow1.java", 84, -1, -1, -1} true;
    goto anon107_Then, anon107_Else;

  anon107_Then:
    assume {:partition} $r21 != unsafe.$null;
    $exception := $exception;
    goto anon78;

  anon107_Else:
    assume {:partition} $r21 == unsafe.$null;
    call $fakelocal_17 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_17;
    return;

  anon78:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$this := $r21;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0 := $r22;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$16$r1, inline$java.math.BigInteger$add$java.math.BigInteger$16$r0, inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$16$$return, inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$16$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$16$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$16$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$68$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$68$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$68$$this := inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$68$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$68$r0, inline$java.math.BigInteger$$la$init$ra$$long$68$l0, inline$java.math.BigInteger$$la$init$ra$$long$68$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$68$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$68$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$68$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$68$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$68$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$68$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$68$r0 := inline$java.math.BigInteger$$la$init$ra$$long$68$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$68$l0 := inline$java.math.BigInteger$$la$init$ra$$long$68$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$68$Entry;

  inline$java.lang.Object$$la$init$ra$$$68$Entry:
    inline$java.lang.Object$$la$init$ra$$$68$$this := inline$java.math.BigInteger$$la$init$ra$$long$68$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$68$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$68$anon0;

  inline$java.lang.Object$$la$init$ra$$$68$anon0:
    inline$java.lang.Object$$la$init$ra$$$68$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$68$Return;

  inline$java.lang.Object$$la$init$ra$$$68$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$68$$exception := inline$java.lang.Object$$la$init$ra$$$68$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$68$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$68$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$68$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$68$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$68$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$68$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$68$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$68$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := inline$java.math.BigInteger$$la$init$ra$$long$68$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$return := inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$Return:
    r26 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception;
    goto anon78$1;

  anon78$1:
    goto block37;

  block37:
    assert {:sourceloc "ModPow1.java", 86, -1, -1, -1} true;
    goto anon108_Then, anon108_Else;

  anon108_Then:
    assume {:partition} r26 != unsafe.$null;
    $exception := $exception;
    goto anon81;

  anon108_Else:
    assume {:partition} r26 == unsafe.$null;
    call $fakelocal_18 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_18;
    return;

  anon81:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this := r26;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0 := r2;
    havoc inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6, inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return, inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon19_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_0;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l0, 0);
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1 > 0;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block8;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon20_Else:
    assume {:partition} 0 >= inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b1;
    assert {:sourceloc "BigInteger.java", 38, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon6;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon6:
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_1;
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := unsafe.java.lang.ArithmeticException$$la$init$ra$$(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4);
    assert {:sourceloc "BigInteger.java", 39, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r4;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$block8:
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l2, 0);
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3 < 0;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon21_Else:
    assume {:partition} 0 <= inline$java.math.BigInteger$mod$java.math.BigInteger$1$$b3;
    assert {:sourceloc "BigInteger.java", 42, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon9;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon9:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_2;
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon22_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l13, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l12);
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$69$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$69$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$69$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3;
    inline$java.math.BigInteger$$la$init$ra$$long$69$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l14;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$69$r0, inline$java.math.BigInteger$$la$init$ra$$long$69$l0, inline$java.math.BigInteger$$la$init$ra$$long$69$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$69$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$69$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$69$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$69$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$69$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$69$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$69$r0 := inline$java.math.BigInteger$$la$init$ra$$long$69$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$69$l0 := inline$java.math.BigInteger$$la$init$ra$$long$69$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$69$Entry;

  inline$java.lang.Object$$la$init$ra$$$69$Entry:
    inline$java.lang.Object$$la$init$ra$$$69$$this := inline$java.math.BigInteger$$la$init$ra$$long$69$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$69$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$69$anon0;

  inline$java.lang.Object$$la$init$ra$$$69$anon0:
    inline$java.lang.Object$$la$init$ra$$$69$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$69$Return;

  inline$java.lang.Object$$la$init$ra$$$69$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$69$$exception := inline$java.lang.Object$$la$init$ra$$$69$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$69$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$69$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$69$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$69$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$69$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$69$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$69$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$69$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$69$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon12$1:
    assert {:sourceloc "BigInteger.java", 43, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r3;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$block9:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6 := -inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l4;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon15;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon23_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_5;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon15:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l6, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l5);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l8
   - inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l7;
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9 := unsafe.$heap[inline$java.math.BigInteger$mod$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Then, inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Else;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Then:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9 != 0;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon24_Else:
    assume {:partition} inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9 == 0;
    call inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$fakelocal_6;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11 := unsafe.$modInt(inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l10, 
  inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l9);
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$70$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$70$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$70$$this := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$70$$in_parameter__0 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$l11;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$70$r0, inline$java.math.BigInteger$$la$init$ra$$long$70$l0, inline$java.math.BigInteger$$la$init$ra$$long$70$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$70$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$70$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$70$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$70$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$70$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$70$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$70$r0 := inline$java.math.BigInteger$$la$init$ra$$long$70$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$70$l0 := inline$java.math.BigInteger$$la$init$ra$$long$70$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$70$Entry;

  inline$java.lang.Object$$la$init$ra$$$70$Entry:
    inline$java.lang.Object$$la$init$ra$$$70$$this := inline$java.math.BigInteger$$la$init$ra$$long$70$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$70$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$70$anon0;

  inline$java.lang.Object$$la$init$ra$$$70$anon0:
    inline$java.lang.Object$$la$init$ra$$$70$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$70$Return;

  inline$java.lang.Object$$la$init$ra$$$70$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$70$$exception := inline$java.lang.Object$$la$init$ra$$$70$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$70$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$70$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$70$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$70$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$70$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$70$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$70$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$70$Return:
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$70$$exception;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18$1;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$anon18$1:
    assert {:sourceloc "BigInteger.java", 45, -1, -1, -1} true;
    inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$block10:
    goto inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$mod$java.math.BigInteger$1$Return:
    r24 := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$mod$java.math.BigInteger$1$$exception;
    goto anon81$1;

  anon81$1:
    goto block33;

  block33:
    assert {:sourceloc "ModPow1.java", 48, -1, -1, -1} true;
    i11 := i11 + 1;
    assert {:sourceloc "ModPow1.java", 48, -1, -1, -1} true;
    goto block31;

  block32:
    assert {:sourceloc "ModPow1.java", 90, -1, -1, -1} true;
    $return := r24;
    goto block42;

  block42:
    return;
}



implementation unsafe.ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref)
{
  var $r13: ref;
  var i7: int;
  var r3: ref;
  var $fakelocal_7: ref;
  var $fakelocal_5: ref;
  var r8: ref;
  var r6: ref;
  var $fakelocal_1: ref;
  var $r12: ref;
  var $i2: int;
  var r7: ref;
  var $i6: int;
  var $r14: ref;
  var r21: ref;
  var $fakelocal_2: ref;
  var $fakelocal_12: ref;
  var $r18: ref;
  var r20: ref;
  var $z1: int;
  var $i4: int;
  var $fakelocal_11: ref;
  var r2: ref;
  var r1: ref;
  var $i3: int;
  var $fakelocal_10: ref;
  var r5: ref;
  var $r15: ref;
  var $z0: int;
  var i8: int;
  var i0: int;
  var $fakelocal_0: ref;
  var $r16: ref;
  var $fakelocal_13: ref;
  var $r17: ref;
  var $r10: ref;
  var $fakelocal_8: ref;
  var $r19: ref;
  var $fakelocal_9: ref;
  var $r11: ref;
  var $fakelocal_6: ref;
  var $fakelocal_4: ref;
  var r0: ref;
  var $fakelocal_3: ref;
  var i1: int;
  var r4: ref;
  var $i5: int;
  var $r9: ref;
  var inline$java.math.BigInteger$bitLength$$0$$b1: int;
  var inline$java.math.BigInteger$bitLength$$0$$b3: int;
  var inline$java.math.BigInteger$bitLength$$0$i8: int;
  var inline$java.math.BigInteger$bitLength$$0$l7: int;
  var inline$java.math.BigInteger$bitLength$$0$$l4: int;
  var inline$java.math.BigInteger$bitLength$$0$$b5: int;
  var inline$java.math.BigInteger$bitLength$$0$$l0: int;
  var inline$java.math.BigInteger$bitLength$$0$$l2: int;
  var inline$java.math.BigInteger$bitLength$$0$r0: ref;
  var inline$java.math.BigInteger$bitLength$$0$$l6: int;
  var inline$java.math.BigInteger$bitLength$$0$$this: ref;
  var inline$java.math.BigInteger$bitLength$$0$$return: int;
  var inline$java.math.BigInteger$bitLength$$0$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$1$$b1: int;
  var inline$java.math.BigInteger$bitLength$$1$$b3: int;
  var inline$java.math.BigInteger$bitLength$$1$i8: int;
  var inline$java.math.BigInteger$bitLength$$1$l7: int;
  var inline$java.math.BigInteger$bitLength$$1$$l4: int;
  var inline$java.math.BigInteger$bitLength$$1$$b5: int;
  var inline$java.math.BigInteger$bitLength$$1$$l0: int;
  var inline$java.math.BigInteger$bitLength$$1$$l2: int;
  var inline$java.math.BigInteger$bitLength$$1$r0: ref;
  var inline$java.math.BigInteger$bitLength$$1$$l6: int;
  var inline$java.math.BigInteger$bitLength$$1$$this: ref;
  var inline$java.math.BigInteger$bitLength$$1$$return: int;
  var inline$java.math.BigInteger$bitLength$$1$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$0$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$1$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$2$$b1: int;
  var inline$java.math.BigInteger$bitLength$$2$$b3: int;
  var inline$java.math.BigInteger$bitLength$$2$i8: int;
  var inline$java.math.BigInteger$bitLength$$2$l7: int;
  var inline$java.math.BigInteger$bitLength$$2$$l4: int;
  var inline$java.math.BigInteger$bitLength$$2$$b5: int;
  var inline$java.math.BigInteger$bitLength$$2$$l0: int;
  var inline$java.math.BigInteger$bitLength$$2$$l2: int;
  var inline$java.math.BigInteger$bitLength$$2$r0: ref;
  var inline$java.math.BigInteger$bitLength$$2$$l6: int;
  var inline$java.math.BigInteger$bitLength$$2$$this: ref;
  var inline$java.math.BigInteger$bitLength$$2$$return: int;
  var inline$java.math.BigInteger$bitLength$$2$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$3$$b1: int;
  var inline$java.math.BigInteger$bitLength$$3$$b3: int;
  var inline$java.math.BigInteger$bitLength$$3$i8: int;
  var inline$java.math.BigInteger$bitLength$$3$l7: int;
  var inline$java.math.BigInteger$bitLength$$3$$l4: int;
  var inline$java.math.BigInteger$bitLength$$3$$b5: int;
  var inline$java.math.BigInteger$bitLength$$3$$l0: int;
  var inline$java.math.BigInteger$bitLength$$3$$l2: int;
  var inline$java.math.BigInteger$bitLength$$3$r0: ref;
  var inline$java.math.BigInteger$bitLength$$3$$l6: int;
  var inline$java.math.BigInteger$bitLength$$3$$this: ref;
  var inline$java.math.BigInteger$bitLength$$3$$return: int;
  var inline$java.math.BigInteger$bitLength$$3$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$2$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$3$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$14$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$15$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$16$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$17$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$18$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$19$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$20$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$21$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$22$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$23$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$4$$b1: int;
  var inline$java.math.BigInteger$bitLength$$4$$b3: int;
  var inline$java.math.BigInteger$bitLength$$4$i8: int;
  var inline$java.math.BigInteger$bitLength$$4$l7: int;
  var inline$java.math.BigInteger$bitLength$$4$$l4: int;
  var inline$java.math.BigInteger$bitLength$$4$$b5: int;
  var inline$java.math.BigInteger$bitLength$$4$$l0: int;
  var inline$java.math.BigInteger$bitLength$$4$$l2: int;
  var inline$java.math.BigInteger$bitLength$$4$r0: ref;
  var inline$java.math.BigInteger$bitLength$$4$$l6: int;
  var inline$java.math.BigInteger$bitLength$$4$$this: ref;
  var inline$java.math.BigInteger$bitLength$$4$$return: int;
  var inline$java.math.BigInteger$bitLength$$4$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$5$$b1: int;
  var inline$java.math.BigInteger$bitLength$$5$$b3: int;
  var inline$java.math.BigInteger$bitLength$$5$i8: int;
  var inline$java.math.BigInteger$bitLength$$5$l7: int;
  var inline$java.math.BigInteger$bitLength$$5$$l4: int;
  var inline$java.math.BigInteger$bitLength$$5$$b5: int;
  var inline$java.math.BigInteger$bitLength$$5$$l0: int;
  var inline$java.math.BigInteger$bitLength$$5$$l2: int;
  var inline$java.math.BigInteger$bitLength$$5$r0: ref;
  var inline$java.math.BigInteger$bitLength$$5$$l6: int;
  var inline$java.math.BigInteger$bitLength$$5$$this: ref;
  var inline$java.math.BigInteger$bitLength$$5$$return: int;
  var inline$java.math.BigInteger$bitLength$$5$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$24$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$24$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$25$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$25$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$4$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$26$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$26$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$27$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$27$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$28$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$28$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$5$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$29$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$29$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$30$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$30$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$31$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$31$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$32$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$32$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$33$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$33$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$34$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$34$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$35$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$35$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$36$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$36$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$37$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$37$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$38$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$38$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$39$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$39$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$40$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$40$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$41$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$41$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$6$$b1: int;
  var inline$java.math.BigInteger$bitLength$$6$$b3: int;
  var inline$java.math.BigInteger$bitLength$$6$i8: int;
  var inline$java.math.BigInteger$bitLength$$6$l7: int;
  var inline$java.math.BigInteger$bitLength$$6$$l4: int;
  var inline$java.math.BigInteger$bitLength$$6$$b5: int;
  var inline$java.math.BigInteger$bitLength$$6$$l0: int;
  var inline$java.math.BigInteger$bitLength$$6$$l2: int;
  var inline$java.math.BigInteger$bitLength$$6$r0: ref;
  var inline$java.math.BigInteger$bitLength$$6$$l6: int;
  var inline$java.math.BigInteger$bitLength$$6$$this: ref;
  var inline$java.math.BigInteger$bitLength$$6$$return: int;
  var inline$java.math.BigInteger$bitLength$$6$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$7$$b1: int;
  var inline$java.math.BigInteger$bitLength$$7$$b3: int;
  var inline$java.math.BigInteger$bitLength$$7$i8: int;
  var inline$java.math.BigInteger$bitLength$$7$l7: int;
  var inline$java.math.BigInteger$bitLength$$7$$l4: int;
  var inline$java.math.BigInteger$bitLength$$7$$b5: int;
  var inline$java.math.BigInteger$bitLength$$7$$l0: int;
  var inline$java.math.BigInteger$bitLength$$7$$l2: int;
  var inline$java.math.BigInteger$bitLength$$7$r0: ref;
  var inline$java.math.BigInteger$bitLength$$7$$l6: int;
  var inline$java.math.BigInteger$bitLength$$7$$this: ref;
  var inline$java.math.BigInteger$bitLength$$7$$return: int;
  var inline$java.math.BigInteger$bitLength$$7$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$42$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$42$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$43$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$43$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$6$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$44$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$44$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$45$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$45$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$46$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$46$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$7$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$47$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$47$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$48$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$48$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$49$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$49$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$50$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$50$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$51$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$51$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$52$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$52$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$53$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$53$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$54$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$54$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$55$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$55$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$56$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$56$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$57$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$57$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$58$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$58$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$59$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$59$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$60$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$60$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$61$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$61$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$62$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$62$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$63$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$63$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto anon55_Then, anon55_Else;

  anon55_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon55_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    goto inline$java.math.BigInteger$bitLength$$0$Entry;

  inline$java.math.BigInteger$bitLength$$0$Entry:
    inline$java.math.BigInteger$bitLength$$0$$this := r0;
    havoc inline$java.math.BigInteger$bitLength$$0$$b1, inline$java.math.BigInteger$bitLength$$0$$b3, inline$java.math.BigInteger$bitLength$$0$i8, inline$java.math.BigInteger$bitLength$$0$l7, inline$java.math.BigInteger$bitLength$$0$$l4, inline$java.math.BigInteger$bitLength$$0$$b5, inline$java.math.BigInteger$bitLength$$0$$l0, inline$java.math.BigInteger$bitLength$$0$$l2, inline$java.math.BigInteger$bitLength$$0$r0, inline$java.math.BigInteger$bitLength$$0$$l6, inline$java.math.BigInteger$bitLength$$0$$return, inline$java.math.BigInteger$bitLength$$0$$exception;
    goto inline$java.math.BigInteger$bitLength$$0$anon0;

  inline$java.math.BigInteger$bitLength$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$0$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$r0 := inline$java.math.BigInteger$bitLength$$0$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon10_Then, inline$java.math.BigInteger$bitLength$$0$anon10_Else;

  inline$java.math.BigInteger$bitLength$$0$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block11;

  inline$java.math.BigInteger$bitLength$$0$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon3;

  inline$java.math.BigInteger$bitLength$$0$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon11_Then, inline$java.math.BigInteger$bitLength$$0$anon11_Else;

  inline$java.math.BigInteger$bitLength$$0$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block12;

  inline$java.math.BigInteger$bitLength$$0$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon6;

  inline$java.math.BigInteger$bitLength$$0$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := -inline$java.math.BigInteger$bitLength$$0$$l4;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := inline$java.math.BigInteger$bitLength$$0$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon12_Then, inline$java.math.BigInteger$bitLength$$0$anon12_Else;

  inline$java.math.BigInteger$bitLength$$0$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block15;

  inline$java.math.BigInteger$bitLength$$0$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon9;

  inline$java.math.BigInteger$bitLength$$0$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := inline$java.math.BigInteger$bitLength$$0$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$0$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := inline$java.math.BigInteger$bitLength$$0$i8;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block16:
    goto inline$java.math.BigInteger$bitLength$$0$Return;

  inline$java.math.BigInteger$bitLength$$0$Return:
    i0 := inline$java.math.BigInteger$bitLength$$0$$return;
    $exception := inline$java.math.BigInteger$bitLength$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto anon56_Then, anon56_Else;

  anon56_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon56_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon6:
    goto inline$java.math.BigInteger$bitLength$$1$Entry;

  inline$java.math.BigInteger$bitLength$$1$Entry:
    inline$java.math.BigInteger$bitLength$$1$$this := r1;
    havoc inline$java.math.BigInteger$bitLength$$1$$b1, inline$java.math.BigInteger$bitLength$$1$$b3, inline$java.math.BigInteger$bitLength$$1$i8, inline$java.math.BigInteger$bitLength$$1$l7, inline$java.math.BigInteger$bitLength$$1$$l4, inline$java.math.BigInteger$bitLength$$1$$b5, inline$java.math.BigInteger$bitLength$$1$$l0, inline$java.math.BigInteger$bitLength$$1$$l2, inline$java.math.BigInteger$bitLength$$1$r0, inline$java.math.BigInteger$bitLength$$1$$l6, inline$java.math.BigInteger$bitLength$$1$$return, inline$java.math.BigInteger$bitLength$$1$$exception;
    goto inline$java.math.BigInteger$bitLength$$1$anon0;

  inline$java.math.BigInteger$bitLength$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$1$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$r0 := inline$java.math.BigInteger$bitLength$$1$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon10_Then, inline$java.math.BigInteger$bitLength$$1$anon10_Else;

  inline$java.math.BigInteger$bitLength$$1$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block11;

  inline$java.math.BigInteger$bitLength$$1$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon3;

  inline$java.math.BigInteger$bitLength$$1$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$1$block16;

  inline$java.math.BigInteger$bitLength$$1$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon11_Then, inline$java.math.BigInteger$bitLength$$1$anon11_Else;

  inline$java.math.BigInteger$bitLength$$1$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block12;

  inline$java.math.BigInteger$bitLength$$1$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$1$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon6;

  inline$java.math.BigInteger$bitLength$$1$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$block13;

  inline$java.math.BigInteger$bitLength$$1$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l6 := -inline$java.math.BigInteger$bitLength$$1$$l4;
    goto inline$java.math.BigInteger$bitLength$$1$block13;

  inline$java.math.BigInteger$bitLength$$1$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$l7 := inline$java.math.BigInteger$bitLength$$1$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$1$block14;

  inline$java.math.BigInteger$bitLength$$1$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon12_Then, inline$java.math.BigInteger$bitLength$$1$anon12_Else;

  inline$java.math.BigInteger$bitLength$$1$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block15;

  inline$java.math.BigInteger$bitLength$$1$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$1$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon9;

  inline$java.math.BigInteger$bitLength$$1$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$i8 := inline$java.math.BigInteger$bitLength$$1$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$1$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$block14;

  inline$java.math.BigInteger$bitLength$$1$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$return := inline$java.math.BigInteger$bitLength$$1$i8;
    goto inline$java.math.BigInteger$bitLength$$1$block16;

  inline$java.math.BigInteger$bitLength$$1$block16:
    goto inline$java.math.BigInteger$bitLength$$1$Return;

  inline$java.math.BigInteger$bitLength$$1$Return:
    i1 := inline$java.math.BigInteger$bitLength$$1$$return;
    $exception := inline$java.math.BigInteger$bitLength$$1$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    $r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$0$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$0$$this := r0;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0 := $r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$0$$r3, inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$0$$l0, inline$java.math.BigInteger$equals$java.lang.Object$0$$r4, inline$java.math.BigInteger$equals$java.lang.Object$0$$b2, inline$java.math.BigInteger$equals$java.lang.Object$0$r2, inline$java.math.BigInteger$equals$java.lang.Object$0$$l1, inline$java.math.BigInteger$equals$java.lang.Object$0$r1, inline$java.math.BigInteger$equals$java.lang.Object$0$r0, inline$java.math.BigInteger$equals$java.lang.Object$0$$return, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$r0 := inline$java.math.BigInteger$equals$java.lang.Object$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$r1 := inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$r3, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$0$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$r4, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$0$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$0$r2 := inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$0$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$0$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$0$Return:
    $z0 := inline$java.math.BigInteger$equals$java.lang.Object$0$$return;
    $exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    goto anon6$2;

  anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto anon57_Then, anon57_Else;

  anon57_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto block43;

  anon57_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    $return := r1;
    goto block48;

  block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    $r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$1$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$1$$this := r1;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0 := $r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$1$$r3, inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$1$$l0, inline$java.math.BigInteger$equals$java.lang.Object$1$$r4, inline$java.math.BigInteger$equals$java.lang.Object$1$$b2, inline$java.math.BigInteger$equals$java.lang.Object$1$r2, inline$java.math.BigInteger$equals$java.lang.Object$1$$l1, inline$java.math.BigInteger$equals$java.lang.Object$1$r1, inline$java.math.BigInteger$equals$java.lang.Object$1$r0, inline$java.math.BigInteger$equals$java.lang.Object$1$$return, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$r0 := inline$java.math.BigInteger$equals$java.lang.Object$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$r1 := inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$r3, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$1$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$r4, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$1$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$1$r2 := inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$1$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$1$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$1$Return:
    $z1 := inline$java.math.BigInteger$equals$java.lang.Object$1$$return;
    $exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    goto block43$1;

  block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto anon58_Then, anon58_Else;

  anon58_Then:
    assume {:partition} $z1 == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto block44;

  anon58_Else:
    assume {:partition} $z1 != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto anon12;

  anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    $return := r0;
    goto block48;

  block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call i7, $exception := unsafe.java.lang.Math$max$int_int(i0, i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto anon59_Then, anon59_Else;

  anon59_Then:
    assume {:partition} i7 > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto block45;

  anon59_Else:
    assume {:partition} 800 >= i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this := r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0 := r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return:
    r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto anon15$1;

  anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto block46;

  block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    $i2 := i0 - i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call $i3, $exception := unsafe.java.lang.Math$abs$int($i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto anon60_Then, anon60_Else;

  anon60_Then:
    assume {:partition} $i3 < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto block47;

  anon60_Else:
    assume {:partition} 32 <= $i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto anon18;

  anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this := r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0 := r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return:
    r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    goto anon18$1;

  anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto block46;

  block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto anon61_Then, anon61_Else;

  anon61_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon21;

  anon61_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon21:
    $i5 := unsafe.$divInt(i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto anon62_Then, anon62_Else;

  anon62_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon24;

  anon62_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon24:
    $i4 := unsafe.$modInt(i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    i8 := $i5 + $i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$0$Entry;

  inline$java.math.BigInteger$shiftRight$int$0$Entry:
    inline$java.math.BigInteger$shiftRight$int$0$$this := r0;
    inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0 := i8;
    havoc inline$java.math.BigInteger$shiftRight$int$0$r0, inline$java.math.BigInteger$shiftRight$int$0$$l2, inline$java.math.BigInteger$shiftRight$int$0$i0, inline$java.math.BigInteger$shiftRight$int$0$$r1, inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$0$$l1, inline$java.math.BigInteger$shiftRight$int$0$$return, inline$java.math.BigInteger$shiftRight$int$0$$exception;
    inline$java.math.BigInteger$shiftRight$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$0$anon0;

  inline$java.math.BigInteger$shiftRight$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$r0 := inline$java.math.BigInteger$shiftRight$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$i0 := inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$0$$r1 := inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$0$$l1, 
  inline$java.math.BigInteger$shiftRight$int$0$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$this := inline$java.math.BigInteger$shiftRight$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$2$r0, inline$java.math.BigInteger$$la$init$ra$$long$2$l0, inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$2$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$r0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$l0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.math.BigInteger$$la$init$ra$$long$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$2$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Return:
    inline$java.math.BigInteger$shiftRight$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$0$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$return := inline$java.math.BigInteger$shiftRight$int$0$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$0$block4;

  inline$java.math.BigInteger$shiftRight$int$0$block4:
    goto inline$java.math.BigInteger$shiftRight$int$0$Return;

  inline$java.math.BigInteger$shiftRight$int$0$Return:
    r2 := inline$java.math.BigInteger$shiftRight$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftRight$int$0$$exception;
    goto anon24$1;

  anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto anon63_Then, anon63_Else;

  anon63_Then:
    assume {:partition} r2 != unsafe.$null;
    $exception := $exception;
    goto anon27;

  anon63_Else:
    assume {:partition} r2 == unsafe.$null;
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Entry;

  inline$java.math.BigInteger$shiftLeft$int$0$Entry:
    inline$java.math.BigInteger$shiftLeft$int$0$$this := r2;
    inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0 := i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$0$$l2, inline$java.math.BigInteger$shiftLeft$int$0$$l1, inline$java.math.BigInteger$shiftLeft$int$0$r0, inline$java.math.BigInteger$shiftLeft$int$0$i0, inline$java.math.BigInteger$shiftLeft$int$0$$r1, inline$java.math.BigInteger$shiftLeft$int$0$$return, inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    inline$java.math.BigInteger$shiftLeft$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$r0 := inline$java.math.BigInteger$shiftLeft$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$i0 := inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$0$$r1 := inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$0$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$0$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$this := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$3$r0, inline$java.math.BigInteger$$la$init$ra$$long$3$l0, inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$3$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$r0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$l0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.math.BigInteger$$la$init$ra$$long$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$3$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Return:
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$return := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$0$block5;

  inline$java.math.BigInteger$shiftLeft$int$0$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Return;

  inline$java.math.BigInteger$shiftLeft$int$0$Return:
    $r11 := inline$java.math.BigInteger$shiftLeft$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    goto anon27$1;

  anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this := r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0 := $r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$4$r0, inline$java.math.BigInteger$$la$init$ra$$long$4$l0, inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$4$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$r0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$l0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.math.BigInteger$$la$init$ra$$long$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$4$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return:
    r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    goto anon27$2;

  anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$1$Entry;

  inline$java.math.BigInteger$shiftRight$int$1$Entry:
    inline$java.math.BigInteger$shiftRight$int$1$$this := r1;
    inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0 := i8;
    havoc inline$java.math.BigInteger$shiftRight$int$1$r0, inline$java.math.BigInteger$shiftRight$int$1$$l2, inline$java.math.BigInteger$shiftRight$int$1$i0, inline$java.math.BigInteger$shiftRight$int$1$$r1, inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$1$$l1, inline$java.math.BigInteger$shiftRight$int$1$$return, inline$java.math.BigInteger$shiftRight$int$1$$exception;
    inline$java.math.BigInteger$shiftRight$int$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$1$anon0;

  inline$java.math.BigInteger$shiftRight$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$r0 := inline$java.math.BigInteger$shiftRight$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$i0 := inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$1$$r1 := inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$1$$l1, 
  inline$java.math.BigInteger$shiftRight$int$1$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$this := inline$java.math.BigInteger$shiftRight$int$1$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$5$r0, inline$java.math.BigInteger$$la$init$ra$$long$5$l0, inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$5$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$r0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$l0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.math.BigInteger$$la$init$ra$$long$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$5$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Return:
    inline$java.math.BigInteger$shiftRight$int$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$1$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$return := inline$java.math.BigInteger$shiftRight$int$1$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$1$block4;

  inline$java.math.BigInteger$shiftRight$int$1$block4:
    goto inline$java.math.BigInteger$shiftRight$int$1$Return;

  inline$java.math.BigInteger$shiftRight$int$1$Return:
    r4 := inline$java.math.BigInteger$shiftRight$int$1$$return;
    $exception := inline$java.math.BigInteger$shiftRight$int$1$$exception;
    goto anon27$3;

  anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto anon64_Then, anon64_Else;

  anon64_Then:
    assume {:partition} r4 != unsafe.$null;
    $exception := $exception;
    goto anon30;

  anon64_Else:
    assume {:partition} r4 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$1$Entry;

  inline$java.math.BigInteger$shiftLeft$int$1$Entry:
    inline$java.math.BigInteger$shiftLeft$int$1$$this := r4;
    inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0 := i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$1$$l2, inline$java.math.BigInteger$shiftLeft$int$1$$l1, inline$java.math.BigInteger$shiftLeft$int$1$r0, inline$java.math.BigInteger$shiftLeft$int$1$i0, inline$java.math.BigInteger$shiftLeft$int$1$$r1, inline$java.math.BigInteger$shiftLeft$int$1$$return, inline$java.math.BigInteger$shiftLeft$int$1$$exception;
    inline$java.math.BigInteger$shiftLeft$int$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$1$anon0;

  inline$java.math.BigInteger$shiftLeft$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$r0 := inline$java.math.BigInteger$shiftLeft$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$i0 := inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$1$$r1 := inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$1$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$1$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$this := inline$java.math.BigInteger$shiftLeft$int$1$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$6$r0, inline$java.math.BigInteger$$la$init$ra$$long$6$l0, inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$6$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$r0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$l0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.math.BigInteger$$la$init$ra$$long$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$6$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Return:
    inline$java.math.BigInteger$shiftLeft$int$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$1$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$return := inline$java.math.BigInteger$shiftLeft$int$1$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$1$block5;

  inline$java.math.BigInteger$shiftLeft$int$1$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$1$Return;

  inline$java.math.BigInteger$shiftLeft$int$1$Return:
    $r12 := inline$java.math.BigInteger$shiftLeft$int$1$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$1$$exception;
    goto anon30$1;

  anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this := r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0 := $r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$7$r0, inline$java.math.BigInteger$$la$init$ra$$long$7$l0, inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$7$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$r0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$l0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.math.BigInteger$$la$init$ra$$long$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$7$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return:
    r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    goto anon30$2;

  anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0 := r3;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1 := r5;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3:
    goto inline$java.math.BigInteger$bitLength$$2$Entry;

  inline$java.math.BigInteger$bitLength$$2$Entry:
    inline$java.math.BigInteger$bitLength$$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    havoc inline$java.math.BigInteger$bitLength$$2$$b1, inline$java.math.BigInteger$bitLength$$2$$b3, inline$java.math.BigInteger$bitLength$$2$i8, inline$java.math.BigInteger$bitLength$$2$l7, inline$java.math.BigInteger$bitLength$$2$$l4, inline$java.math.BigInteger$bitLength$$2$$b5, inline$java.math.BigInteger$bitLength$$2$$l0, inline$java.math.BigInteger$bitLength$$2$$l2, inline$java.math.BigInteger$bitLength$$2$r0, inline$java.math.BigInteger$bitLength$$2$$l6, inline$java.math.BigInteger$bitLength$$2$$return, inline$java.math.BigInteger$bitLength$$2$$exception;
    goto inline$java.math.BigInteger$bitLength$$2$anon0;

  inline$java.math.BigInteger$bitLength$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$2$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$r0 := inline$java.math.BigInteger$bitLength$$2$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon10_Then, inline$java.math.BigInteger$bitLength$$2$anon10_Else;

  inline$java.math.BigInteger$bitLength$$2$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block11;

  inline$java.math.BigInteger$bitLength$$2$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon3;

  inline$java.math.BigInteger$bitLength$$2$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$2$block16;

  inline$java.math.BigInteger$bitLength$$2$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon11_Then, inline$java.math.BigInteger$bitLength$$2$anon11_Else;

  inline$java.math.BigInteger$bitLength$$2$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block12;

  inline$java.math.BigInteger$bitLength$$2$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$2$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon6;

  inline$java.math.BigInteger$bitLength$$2$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$block13;

  inline$java.math.BigInteger$bitLength$$2$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l6 := -inline$java.math.BigInteger$bitLength$$2$$l4;
    goto inline$java.math.BigInteger$bitLength$$2$block13;

  inline$java.math.BigInteger$bitLength$$2$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$l7 := inline$java.math.BigInteger$bitLength$$2$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$2$block14;

  inline$java.math.BigInteger$bitLength$$2$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon12_Then, inline$java.math.BigInteger$bitLength$$2$anon12_Else;

  inline$java.math.BigInteger$bitLength$$2$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block15;

  inline$java.math.BigInteger$bitLength$$2$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$2$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon9;

  inline$java.math.BigInteger$bitLength$$2$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$i8 := inline$java.math.BigInteger$bitLength$$2$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$2$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$block14;

  inline$java.math.BigInteger$bitLength$$2$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$return := inline$java.math.BigInteger$bitLength$$2$i8;
    goto inline$java.math.BigInteger$bitLength$$2$block16;

  inline$java.math.BigInteger$bitLength$$2$block16:
    goto inline$java.math.BigInteger$bitLength$$2$Return;

  inline$java.math.BigInteger$bitLength$$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0 := inline$java.math.BigInteger$bitLength$$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6:
    goto inline$java.math.BigInteger$bitLength$$3$Entry;

  inline$java.math.BigInteger$bitLength$$3$Entry:
    inline$java.math.BigInteger$bitLength$$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$bitLength$$3$$b1, inline$java.math.BigInteger$bitLength$$3$$b3, inline$java.math.BigInteger$bitLength$$3$i8, inline$java.math.BigInteger$bitLength$$3$l7, inline$java.math.BigInteger$bitLength$$3$$l4, inline$java.math.BigInteger$bitLength$$3$$b5, inline$java.math.BigInteger$bitLength$$3$$l0, inline$java.math.BigInteger$bitLength$$3$$l2, inline$java.math.BigInteger$bitLength$$3$r0, inline$java.math.BigInteger$bitLength$$3$$l6, inline$java.math.BigInteger$bitLength$$3$$return, inline$java.math.BigInteger$bitLength$$3$$exception;
    goto inline$java.math.BigInteger$bitLength$$3$anon0;

  inline$java.math.BigInteger$bitLength$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$3$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$r0 := inline$java.math.BigInteger$bitLength$$3$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon10_Then, inline$java.math.BigInteger$bitLength$$3$anon10_Else;

  inline$java.math.BigInteger$bitLength$$3$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block11;

  inline$java.math.BigInteger$bitLength$$3$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon3;

  inline$java.math.BigInteger$bitLength$$3$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$3$block16;

  inline$java.math.BigInteger$bitLength$$3$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon11_Then, inline$java.math.BigInteger$bitLength$$3$anon11_Else;

  inline$java.math.BigInteger$bitLength$$3$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block12;

  inline$java.math.BigInteger$bitLength$$3$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$3$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon6;

  inline$java.math.BigInteger$bitLength$$3$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$block13;

  inline$java.math.BigInteger$bitLength$$3$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l6 := -inline$java.math.BigInteger$bitLength$$3$$l4;
    goto inline$java.math.BigInteger$bitLength$$3$block13;

  inline$java.math.BigInteger$bitLength$$3$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$l7 := inline$java.math.BigInteger$bitLength$$3$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$3$block14;

  inline$java.math.BigInteger$bitLength$$3$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon12_Then, inline$java.math.BigInteger$bitLength$$3$anon12_Else;

  inline$java.math.BigInteger$bitLength$$3$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block15;

  inline$java.math.BigInteger$bitLength$$3$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$3$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon9;

  inline$java.math.BigInteger$bitLength$$3$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$i8 := inline$java.math.BigInteger$bitLength$$3$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$3$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$block14;

  inline$java.math.BigInteger$bitLength$$3$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$return := inline$java.math.BigInteger$bitLength$$3$i8;
    goto inline$java.math.BigInteger$bitLength$$3$block16;

  inline$java.math.BigInteger$bitLength$$3$block16:
    goto inline$java.math.BigInteger$bitLength$$3$Return;

  inline$java.math.BigInteger$bitLength$$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1 := inline$java.math.BigInteger$bitLength$$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$2$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$2$$r3, inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$2$$l0, inline$java.math.BigInteger$equals$java.lang.Object$2$$r4, inline$java.math.BigInteger$equals$java.lang.Object$2$$b2, inline$java.math.BigInteger$equals$java.lang.Object$2$r2, inline$java.math.BigInteger$equals$java.lang.Object$2$$l1, inline$java.math.BigInteger$equals$java.lang.Object$2$r1, inline$java.math.BigInteger$equals$java.lang.Object$2$r0, inline$java.math.BigInteger$equals$java.lang.Object$2$$return, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$r0 := inline$java.math.BigInteger$equals$java.lang.Object$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$r1 := inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$r3, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$2$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$r4, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$2$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$2$r2 := inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$2$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$2$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$3$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$3$$r3, inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$3$$l0, inline$java.math.BigInteger$equals$java.lang.Object$3$$r4, inline$java.math.BigInteger$equals$java.lang.Object$3$$b2, inline$java.math.BigInteger$equals$java.lang.Object$3$r2, inline$java.math.BigInteger$equals$java.lang.Object$3$$l1, inline$java.math.BigInteger$equals$java.lang.Object$3$r1, inline$java.math.BigInteger$equals$java.lang.Object$3$r0, inline$java.math.BigInteger$equals$java.lang.Object$3$$return, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$r0 := inline$java.math.BigInteger$equals$java.lang.Object$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$r1 := inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$r3, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$3$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$r4, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$3$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$3$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$3$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$3$r2 := inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$3$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$3$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$8$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$8$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$8$r0, inline$java.math.BigInteger$$la$init$ra$$long$8$l0, inline$java.math.BigInteger$$la$init$ra$$long$8$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$8$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$8$r0 := inline$java.math.BigInteger$$la$init$ra$$long$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$8$l0 := inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.math.BigInteger$$la$init$ra$$long$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$8$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$8$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$8$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$8$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$8$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$8$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$8$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$9$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$9$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$9$r0, inline$java.math.BigInteger$$la$init$ra$$long$9$l0, inline$java.math.BigInteger$$la$init$ra$$long$9$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$9$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$9$r0 := inline$java.math.BigInteger$$la$init$ra$$long$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$9$l0 := inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.math.BigInteger$$la$init$ra$$long$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$9$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$9$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$9$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$9$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$9$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$9$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$9$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$2$Entry;

  inline$java.math.BigInteger$shiftRight$int$2$Entry:
    inline$java.math.BigInteger$shiftRight$int$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$2$r0, inline$java.math.BigInteger$shiftRight$int$2$$l2, inline$java.math.BigInteger$shiftRight$int$2$i0, inline$java.math.BigInteger$shiftRight$int$2$$r1, inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$2$$l1, inline$java.math.BigInteger$shiftRight$int$2$$return, inline$java.math.BigInteger$shiftRight$int$2$$exception;
    inline$java.math.BigInteger$shiftRight$int$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$2$anon0;

  inline$java.math.BigInteger$shiftRight$int$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$r0 := inline$java.math.BigInteger$shiftRight$int$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$i0 := inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$2$$r1 := inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$2$$l1, 
  inline$java.math.BigInteger$shiftRight$int$2$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$10$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$10$$this := inline$java.math.BigInteger$shiftRight$int$2$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$10$r0, inline$java.math.BigInteger$$la$init$ra$$long$10$l0, inline$java.math.BigInteger$$la$init$ra$$long$10$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$10$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$10$r0 := inline$java.math.BigInteger$$la$init$ra$$long$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$10$l0 := inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.math.BigInteger$$la$init$ra$$long$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$10$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$10$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$10$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$10$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$10$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$10$Return:
    inline$java.math.BigInteger$shiftRight$int$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$10$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$2$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$return := inline$java.math.BigInteger$shiftRight$int$2$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$2$block4;

  inline$java.math.BigInteger$shiftRight$int$2$block4:
    goto inline$java.math.BigInteger$shiftRight$int$2$Return;

  inline$java.math.BigInteger$shiftRight$int$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2 := inline$java.math.BigInteger$shiftRight$int$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftRight$int$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$2$Entry;

  inline$java.math.BigInteger$shiftLeft$int$2$Entry:
    inline$java.math.BigInteger$shiftLeft$int$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2;
    inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$2$$l2, inline$java.math.BigInteger$shiftLeft$int$2$$l1, inline$java.math.BigInteger$shiftLeft$int$2$r0, inline$java.math.BigInteger$shiftLeft$int$2$i0, inline$java.math.BigInteger$shiftLeft$int$2$$r1, inline$java.math.BigInteger$shiftLeft$int$2$$return, inline$java.math.BigInteger$shiftLeft$int$2$$exception;
    inline$java.math.BigInteger$shiftLeft$int$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$2$anon0;

  inline$java.math.BigInteger$shiftLeft$int$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$r0 := inline$java.math.BigInteger$shiftLeft$int$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$i0 := inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$2$$r1 := inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$2$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$2$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$11$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$11$$this := inline$java.math.BigInteger$shiftLeft$int$2$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$11$r0, inline$java.math.BigInteger$$la$init$ra$$long$11$l0, inline$java.math.BigInteger$$la$init$ra$$long$11$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$11$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$11$r0 := inline$java.math.BigInteger$$la$init$ra$$long$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$11$l0 := inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.math.BigInteger$$la$init$ra$$long$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$11$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$11$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$11$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$11$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$11$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$11$Return:
    inline$java.math.BigInteger$shiftLeft$int$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$11$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$2$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$return := inline$java.math.BigInteger$shiftLeft$int$2$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$2$block5;

  inline$java.math.BigInteger$shiftLeft$int$2$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$2$Return;

  inline$java.math.BigInteger$shiftLeft$int$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11 := inline$java.math.BigInteger$shiftLeft$int$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$12$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$12$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$12$r0, inline$java.math.BigInteger$$la$init$ra$$long$12$l0, inline$java.math.BigInteger$$la$init$ra$$long$12$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$12$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$12$r0 := inline$java.math.BigInteger$$la$init$ra$$long$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$12$l0 := inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.math.BigInteger$$la$init$ra$$long$12$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$12$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$12$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$12$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$12$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$12$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$12$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$12$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$3$Entry;

  inline$java.math.BigInteger$shiftRight$int$3$Entry:
    inline$java.math.BigInteger$shiftRight$int$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$3$r0, inline$java.math.BigInteger$shiftRight$int$3$$l2, inline$java.math.BigInteger$shiftRight$int$3$i0, inline$java.math.BigInteger$shiftRight$int$3$$r1, inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$3$$l1, inline$java.math.BigInteger$shiftRight$int$3$$return, inline$java.math.BigInteger$shiftRight$int$3$$exception;
    inline$java.math.BigInteger$shiftRight$int$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$3$anon0;

  inline$java.math.BigInteger$shiftRight$int$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$r0 := inline$java.math.BigInteger$shiftRight$int$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$i0 := inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$3$$r1 := inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$3$$l1, 
  inline$java.math.BigInteger$shiftRight$int$3$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$13$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$13$$this := inline$java.math.BigInteger$shiftRight$int$3$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$13$r0, inline$java.math.BigInteger$$la$init$ra$$long$13$l0, inline$java.math.BigInteger$$la$init$ra$$long$13$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$13$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$13$r0 := inline$java.math.BigInteger$$la$init$ra$$long$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$13$l0 := inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.math.BigInteger$$la$init$ra$$long$13$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$13$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$13$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$13$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$13$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$13$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$13$Return:
    inline$java.math.BigInteger$shiftRight$int$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$13$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$3$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$return := inline$java.math.BigInteger$shiftRight$int$3$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$3$block4;

  inline$java.math.BigInteger$shiftRight$int$3$block4:
    goto inline$java.math.BigInteger$shiftRight$int$3$Return;

  inline$java.math.BigInteger$shiftRight$int$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4 := inline$java.math.BigInteger$shiftRight$int$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftRight$int$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$3$Entry;

  inline$java.math.BigInteger$shiftLeft$int$3$Entry:
    inline$java.math.BigInteger$shiftLeft$int$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4;
    inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$3$$l2, inline$java.math.BigInteger$shiftLeft$int$3$$l1, inline$java.math.BigInteger$shiftLeft$int$3$r0, inline$java.math.BigInteger$shiftLeft$int$3$i0, inline$java.math.BigInteger$shiftLeft$int$3$$r1, inline$java.math.BigInteger$shiftLeft$int$3$$return, inline$java.math.BigInteger$shiftLeft$int$3$$exception;
    inline$java.math.BigInteger$shiftLeft$int$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$3$anon0;

  inline$java.math.BigInteger$shiftLeft$int$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$r0 := inline$java.math.BigInteger$shiftLeft$int$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$i0 := inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$3$$r1 := inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$3$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$3$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$14$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$14$$this := inline$java.math.BigInteger$shiftLeft$int$3$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$14$r0, inline$java.math.BigInteger$$la$init$ra$$long$14$l0, inline$java.math.BigInteger$$la$init$ra$$long$14$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$14$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$14$r0 := inline$java.math.BigInteger$$la$init$ra$$long$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$14$l0 := inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$14$Entry;

  inline$java.lang.Object$$la$init$ra$$$14$Entry:
    inline$java.lang.Object$$la$init$ra$$$14$$this := inline$java.math.BigInteger$$la$init$ra$$long$14$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$14$anon0;

  inline$java.lang.Object$$la$init$ra$$$14$anon0:
    inline$java.lang.Object$$la$init$ra$$$14$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$14$Return;

  inline$java.lang.Object$$la$init$ra$$$14$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$14$$exception := inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$14$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$14$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$14$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$14$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$14$Return:
    inline$java.math.BigInteger$shiftLeft$int$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$14$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$3$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$return := inline$java.math.BigInteger$shiftLeft$int$3$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$3$block5;

  inline$java.math.BigInteger$shiftLeft$int$3$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$3$Return;

  inline$java.math.BigInteger$shiftLeft$int$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12 := inline$java.math.BigInteger$shiftLeft$int$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$15$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$15$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$15$r0, inline$java.math.BigInteger$$la$init$ra$$long$15$l0, inline$java.math.BigInteger$$la$init$ra$$long$15$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$15$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$15$r0 := inline$java.math.BigInteger$$la$init$ra$$long$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$15$l0 := inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$15$Entry;

  inline$java.lang.Object$$la$init$ra$$$15$Entry:
    inline$java.lang.Object$$la$init$ra$$$15$$this := inline$java.math.BigInteger$$la$init$ra$$long$15$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$15$anon0;

  inline$java.lang.Object$$la$init$ra$$$15$anon0:
    inline$java.lang.Object$$la$init$ra$$$15$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$15$Return;

  inline$java.lang.Object$$la$init$ra$$$15$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$15$$exception := inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$15$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$15$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$15$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$15$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$15$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$15$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$16$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$16$$this := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$16$r0, inline$java.math.BigInteger$$la$init$ra$$long$16$l0, inline$java.math.BigInteger$$la$init$ra$$long$16$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$16$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$16$r0 := inline$java.math.BigInteger$$la$init$ra$$long$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$16$l0 := inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$16$Entry;

  inline$java.lang.Object$$la$init$ra$$$16$Entry:
    inline$java.lang.Object$$la$init$ra$$$16$$this := inline$java.math.BigInteger$$la$init$ra$$long$16$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$16$anon0;

  inline$java.lang.Object$$la$init$ra$$$16$anon0:
    inline$java.lang.Object$$la$init$ra$$$16$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$16$Return;

  inline$java.lang.Object$$la$init$ra$$$16$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$16$$exception := inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$16$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$16$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$16$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$16$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$16$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$16$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$1$r1, inline$java.math.BigInteger$add$java.math.BigInteger$1$r0, inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$1$$return, inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$17$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$17$$this := inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$17$r0, inline$java.math.BigInteger$$la$init$ra$$long$17$l0, inline$java.math.BigInteger$$la$init$ra$$long$17$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$17$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$17$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$17$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$17$r0 := inline$java.math.BigInteger$$la$init$ra$$long$17$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$17$l0 := inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$17$Entry;

  inline$java.lang.Object$$la$init$ra$$$17$Entry:
    inline$java.lang.Object$$la$init$ra$$$17$$this := inline$java.math.BigInteger$$la$init$ra$$long$17$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$17$anon0;

  inline$java.lang.Object$$la$init$ra$$$17$anon0:
    inline$java.lang.Object$$la$init$ra$$$17$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$17$Return;

  inline$java.lang.Object$$la$init$ra$$$17$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$17$$exception := inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$17$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$17$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$17$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$17$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$17$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$17$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$return := inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$18$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$18$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$18$r0, inline$java.math.BigInteger$$la$init$ra$$long$18$l0, inline$java.math.BigInteger$$la$init$ra$$long$18$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$18$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$18$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$18$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$18$r0 := inline$java.math.BigInteger$$la$init$ra$$long$18$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$18$l0 := inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$18$Entry;

  inline$java.lang.Object$$la$init$ra$$$18$Entry:
    inline$java.lang.Object$$la$init$ra$$$18$$this := inline$java.math.BigInteger$$la$init$ra$$long$18$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$18$anon0;

  inline$java.lang.Object$$la$init$ra$$$18$anon0:
    inline$java.lang.Object$$la$init$ra$$$18$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$18$Return;

  inline$java.lang.Object$$la$init$ra$$$18$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$18$$exception := inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$18$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$18$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$18$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$18$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$18$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$18$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$19$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$19$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$19$r0, inline$java.math.BigInteger$$la$init$ra$$long$19$l0, inline$java.math.BigInteger$$la$init$ra$$long$19$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$19$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$19$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$19$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$19$r0 := inline$java.math.BigInteger$$la$init$ra$$long$19$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$19$l0 := inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$19$Entry;

  inline$java.lang.Object$$la$init$ra$$$19$Entry:
    inline$java.lang.Object$$la$init$ra$$$19$$this := inline$java.math.BigInteger$$la$init$ra$$long$19$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$19$anon0;

  inline$java.lang.Object$$la$init$ra$$$19$anon0:
    inline$java.lang.Object$$la$init$ra$$$19$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$19$Return;

  inline$java.lang.Object$$la$init$ra$$$19$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$19$$exception := inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$19$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$19$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$19$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$19$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$19$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$19$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$4$Entry;

  inline$java.math.BigInteger$shiftLeft$int$4$Entry:
    inline$java.math.BigInteger$shiftLeft$int$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16;
    inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$4$$l2, inline$java.math.BigInteger$shiftLeft$int$4$$l1, inline$java.math.BigInteger$shiftLeft$int$4$r0, inline$java.math.BigInteger$shiftLeft$int$4$i0, inline$java.math.BigInteger$shiftLeft$int$4$$r1, inline$java.math.BigInteger$shiftLeft$int$4$$return, inline$java.math.BigInteger$shiftLeft$int$4$$exception;
    inline$java.math.BigInteger$shiftLeft$int$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$4$anon0;

  inline$java.math.BigInteger$shiftLeft$int$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$r0 := inline$java.math.BigInteger$shiftLeft$int$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$i0 := inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$4$$r1 := inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$4$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$4$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$20$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$20$$this := inline$java.math.BigInteger$shiftLeft$int$4$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$20$r0, inline$java.math.BigInteger$$la$init$ra$$long$20$l0, inline$java.math.BigInteger$$la$init$ra$$long$20$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$20$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$20$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$20$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$20$r0 := inline$java.math.BigInteger$$la$init$ra$$long$20$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$20$l0 := inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$20$Entry;

  inline$java.lang.Object$$la$init$ra$$$20$Entry:
    inline$java.lang.Object$$la$init$ra$$$20$$this := inline$java.math.BigInteger$$la$init$ra$$long$20$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$20$anon0;

  inline$java.lang.Object$$la$init$ra$$$20$anon0:
    inline$java.lang.Object$$la$init$ra$$$20$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$20$Return;

  inline$java.lang.Object$$la$init$ra$$$20$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$20$$exception := inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$20$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$20$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$20$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$20$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$20$Return:
    inline$java.math.BigInteger$shiftLeft$int$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$20$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$4$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$return := inline$java.math.BigInteger$shiftLeft$int$4$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$4$block5;

  inline$java.math.BigInteger$shiftLeft$int$4$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$4$Return;

  inline$java.math.BigInteger$shiftLeft$int$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17 := inline$java.math.BigInteger$shiftLeft$int$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$2$r1, inline$java.math.BigInteger$add$java.math.BigInteger$2$r0, inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$2$$return, inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$21$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$21$$this := inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$21$r0, inline$java.math.BigInteger$$la$init$ra$$long$21$l0, inline$java.math.BigInteger$$la$init$ra$$long$21$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$21$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$21$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$21$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$21$r0 := inline$java.math.BigInteger$$la$init$ra$$long$21$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$21$l0 := inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$21$Entry;

  inline$java.lang.Object$$la$init$ra$$$21$Entry:
    inline$java.lang.Object$$la$init$ra$$$21$$this := inline$java.math.BigInteger$$la$init$ra$$long$21$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$21$anon0;

  inline$java.lang.Object$$la$init$ra$$$21$anon0:
    inline$java.lang.Object$$la$init$ra$$$21$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$21$Return;

  inline$java.lang.Object$$la$init$ra$$$21$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$21$$exception := inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$21$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$21$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$21$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$21$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$21$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$21$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$return := inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$5$Entry;

  inline$java.math.BigInteger$shiftLeft$int$5$Entry:
    inline$java.math.BigInteger$shiftLeft$int$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7;
    inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$5$$l2, inline$java.math.BigInteger$shiftLeft$int$5$$l1, inline$java.math.BigInteger$shiftLeft$int$5$r0, inline$java.math.BigInteger$shiftLeft$int$5$i0, inline$java.math.BigInteger$shiftLeft$int$5$$r1, inline$java.math.BigInteger$shiftLeft$int$5$$return, inline$java.math.BigInteger$shiftLeft$int$5$$exception;
    inline$java.math.BigInteger$shiftLeft$int$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$5$anon0;

  inline$java.math.BigInteger$shiftLeft$int$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$r0 := inline$java.math.BigInteger$shiftLeft$int$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$i0 := inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$5$$r1 := inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$5$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$5$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$22$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$22$$this := inline$java.math.BigInteger$shiftLeft$int$5$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$22$r0, inline$java.math.BigInteger$$la$init$ra$$long$22$l0, inline$java.math.BigInteger$$la$init$ra$$long$22$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$22$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$22$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$22$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$22$r0 := inline$java.math.BigInteger$$la$init$ra$$long$22$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$22$l0 := inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$22$Entry;

  inline$java.lang.Object$$la$init$ra$$$22$Entry:
    inline$java.lang.Object$$la$init$ra$$$22$$this := inline$java.math.BigInteger$$la$init$ra$$long$22$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$22$anon0;

  inline$java.lang.Object$$la$init$ra$$$22$anon0:
    inline$java.lang.Object$$la$init$ra$$$22$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$22$Return;

  inline$java.lang.Object$$la$init$ra$$$22$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$22$$exception := inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$22$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$22$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$22$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$22$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$22$Return:
    inline$java.math.BigInteger$shiftLeft$int$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$22$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$5$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$return := inline$java.math.BigInteger$shiftLeft$int$5$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$5$block5;

  inline$java.math.BigInteger$shiftLeft$int$5$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$5$Return;

  inline$java.math.BigInteger$shiftLeft$int$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19 := inline$java.math.BigInteger$shiftLeft$int$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$3$r1, inline$java.math.BigInteger$add$java.math.BigInteger$3$r0, inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$3$$return, inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$23$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$23$$this := inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$23$r0, inline$java.math.BigInteger$$la$init$ra$$long$23$l0, inline$java.math.BigInteger$$la$init$ra$$long$23$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$23$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$23$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$23$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$23$r0 := inline$java.math.BigInteger$$la$init$ra$$long$23$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$23$l0 := inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$23$Entry;

  inline$java.lang.Object$$la$init$ra$$$23$Entry:
    inline$java.lang.Object$$la$init$ra$$$23$$this := inline$java.math.BigInteger$$la$init$ra$$long$23$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$23$anon0;

  inline$java.lang.Object$$la$init$ra$$$23$anon0:
    inline$java.lang.Object$$la$init$ra$$$23$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$23$Return;

  inline$java.lang.Object$$la$init$ra$$$23$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$23$$exception := inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$23$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$23$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$23$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$23$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$23$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$23$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$return := inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return:
    r6 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto anon30$3;

  anon30$3:
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0 := r2;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1 := r4;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3:
    goto inline$java.math.BigInteger$bitLength$$4$Entry;

  inline$java.math.BigInteger$bitLength$$4$Entry:
    inline$java.math.BigInteger$bitLength$$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    havoc inline$java.math.BigInteger$bitLength$$4$$b1, inline$java.math.BigInteger$bitLength$$4$$b3, inline$java.math.BigInteger$bitLength$$4$i8, inline$java.math.BigInteger$bitLength$$4$l7, inline$java.math.BigInteger$bitLength$$4$$l4, inline$java.math.BigInteger$bitLength$$4$$b5, inline$java.math.BigInteger$bitLength$$4$$l0, inline$java.math.BigInteger$bitLength$$4$$l2, inline$java.math.BigInteger$bitLength$$4$r0, inline$java.math.BigInteger$bitLength$$4$$l6, inline$java.math.BigInteger$bitLength$$4$$return, inline$java.math.BigInteger$bitLength$$4$$exception;
    goto inline$java.math.BigInteger$bitLength$$4$anon0;

  inline$java.math.BigInteger$bitLength$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$4$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$r0 := inline$java.math.BigInteger$bitLength$$4$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon10_Then, inline$java.math.BigInteger$bitLength$$4$anon10_Else;

  inline$java.math.BigInteger$bitLength$$4$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block11;

  inline$java.math.BigInteger$bitLength$$4$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon3;

  inline$java.math.BigInteger$bitLength$$4$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$4$block16;

  inline$java.math.BigInteger$bitLength$$4$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon11_Then, inline$java.math.BigInteger$bitLength$$4$anon11_Else;

  inline$java.math.BigInteger$bitLength$$4$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block12;

  inline$java.math.BigInteger$bitLength$$4$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$4$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon6;

  inline$java.math.BigInteger$bitLength$$4$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$block13;

  inline$java.math.BigInteger$bitLength$$4$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l6 := -inline$java.math.BigInteger$bitLength$$4$$l4;
    goto inline$java.math.BigInteger$bitLength$$4$block13;

  inline$java.math.BigInteger$bitLength$$4$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$l7 := inline$java.math.BigInteger$bitLength$$4$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$4$block14;

  inline$java.math.BigInteger$bitLength$$4$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon12_Then, inline$java.math.BigInteger$bitLength$$4$anon12_Else;

  inline$java.math.BigInteger$bitLength$$4$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block15;

  inline$java.math.BigInteger$bitLength$$4$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$4$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon9;

  inline$java.math.BigInteger$bitLength$$4$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$i8 := inline$java.math.BigInteger$bitLength$$4$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$4$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$block14;

  inline$java.math.BigInteger$bitLength$$4$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$return := inline$java.math.BigInteger$bitLength$$4$i8;
    goto inline$java.math.BigInteger$bitLength$$4$block16;

  inline$java.math.BigInteger$bitLength$$4$block16:
    goto inline$java.math.BigInteger$bitLength$$4$Return;

  inline$java.math.BigInteger$bitLength$$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0 := inline$java.math.BigInteger$bitLength$$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$bitLength$$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6:
    goto inline$java.math.BigInteger$bitLength$$5$Entry;

  inline$java.math.BigInteger$bitLength$$5$Entry:
    inline$java.math.BigInteger$bitLength$$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$bitLength$$5$$b1, inline$java.math.BigInteger$bitLength$$5$$b3, inline$java.math.BigInteger$bitLength$$5$i8, inline$java.math.BigInteger$bitLength$$5$l7, inline$java.math.BigInteger$bitLength$$5$$l4, inline$java.math.BigInteger$bitLength$$5$$b5, inline$java.math.BigInteger$bitLength$$5$$l0, inline$java.math.BigInteger$bitLength$$5$$l2, inline$java.math.BigInteger$bitLength$$5$r0, inline$java.math.BigInteger$bitLength$$5$$l6, inline$java.math.BigInteger$bitLength$$5$$return, inline$java.math.BigInteger$bitLength$$5$$exception;
    goto inline$java.math.BigInteger$bitLength$$5$anon0;

  inline$java.math.BigInteger$bitLength$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$5$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$r0 := inline$java.math.BigInteger$bitLength$$5$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon10_Then, inline$java.math.BigInteger$bitLength$$5$anon10_Else;

  inline$java.math.BigInteger$bitLength$$5$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block11;

  inline$java.math.BigInteger$bitLength$$5$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon3;

  inline$java.math.BigInteger$bitLength$$5$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$5$block16;

  inline$java.math.BigInteger$bitLength$$5$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon11_Then, inline$java.math.BigInteger$bitLength$$5$anon11_Else;

  inline$java.math.BigInteger$bitLength$$5$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block12;

  inline$java.math.BigInteger$bitLength$$5$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$5$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon6;

  inline$java.math.BigInteger$bitLength$$5$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$block13;

  inline$java.math.BigInteger$bitLength$$5$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l6 := -inline$java.math.BigInteger$bitLength$$5$$l4;
    goto inline$java.math.BigInteger$bitLength$$5$block13;

  inline$java.math.BigInteger$bitLength$$5$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$l7 := inline$java.math.BigInteger$bitLength$$5$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$5$block14;

  inline$java.math.BigInteger$bitLength$$5$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon12_Then, inline$java.math.BigInteger$bitLength$$5$anon12_Else;

  inline$java.math.BigInteger$bitLength$$5$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block15;

  inline$java.math.BigInteger$bitLength$$5$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$5$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon9;

  inline$java.math.BigInteger$bitLength$$5$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$i8 := inline$java.math.BigInteger$bitLength$$5$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$5$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$block14;

  inline$java.math.BigInteger$bitLength$$5$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$return := inline$java.math.BigInteger$bitLength$$5$i8;
    goto inline$java.math.BigInteger$bitLength$$5$block16;

  inline$java.math.BigInteger$bitLength$$5$block16:
    goto inline$java.math.BigInteger$bitLength$$5$Return;

  inline$java.math.BigInteger$bitLength$$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1 := inline$java.math.BigInteger$bitLength$$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$bitLength$$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$4$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$4$$r3, inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$4$$l0, inline$java.math.BigInteger$equals$java.lang.Object$4$$r4, inline$java.math.BigInteger$equals$java.lang.Object$4$$b2, inline$java.math.BigInteger$equals$java.lang.Object$4$r2, inline$java.math.BigInteger$equals$java.lang.Object$4$$l1, inline$java.math.BigInteger$equals$java.lang.Object$4$r1, inline$java.math.BigInteger$equals$java.lang.Object$4$r0, inline$java.math.BigInteger$equals$java.lang.Object$4$$return, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$r0 := inline$java.math.BigInteger$equals$java.lang.Object$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$r1 := inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$r3, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$4$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$r4, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$4$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$4$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$4$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$4$r2 := inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$4$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$4$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$5$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$5$$r3, inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$5$$l0, inline$java.math.BigInteger$equals$java.lang.Object$5$$r4, inline$java.math.BigInteger$equals$java.lang.Object$5$$b2, inline$java.math.BigInteger$equals$java.lang.Object$5$r2, inline$java.math.BigInteger$equals$java.lang.Object$5$$l1, inline$java.math.BigInteger$equals$java.lang.Object$5$r1, inline$java.math.BigInteger$equals$java.lang.Object$5$r0, inline$java.math.BigInteger$equals$java.lang.Object$5$$return, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$r0 := inline$java.math.BigInteger$equals$java.lang.Object$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$r1 := inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$r3, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$5$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$r4, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$5$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$5$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$5$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$5$r2 := inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$5$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$5$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$24$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$24$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$24$r0, inline$java.math.BigInteger$$la$init$ra$$long$24$l0, inline$java.math.BigInteger$$la$init$ra$$long$24$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$24$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$24$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$24$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$24$r0 := inline$java.math.BigInteger$$la$init$ra$$long$24$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$24$l0 := inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$24$Entry;

  inline$java.lang.Object$$la$init$ra$$$24$Entry:
    inline$java.lang.Object$$la$init$ra$$$24$$this := inline$java.math.BigInteger$$la$init$ra$$long$24$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$24$anon0;

  inline$java.lang.Object$$la$init$ra$$$24$anon0:
    inline$java.lang.Object$$la$init$ra$$$24$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$24$Return;

  inline$java.lang.Object$$la$init$ra$$$24$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$24$$exception := inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$24$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$24$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$24$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$24$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$24$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$24$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$25$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$25$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$25$r0, inline$java.math.BigInteger$$la$init$ra$$long$25$l0, inline$java.math.BigInteger$$la$init$ra$$long$25$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$25$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$25$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$25$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$25$r0 := inline$java.math.BigInteger$$la$init$ra$$long$25$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$25$l0 := inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$25$Entry;

  inline$java.lang.Object$$la$init$ra$$$25$Entry:
    inline$java.lang.Object$$la$init$ra$$$25$$this := inline$java.math.BigInteger$$la$init$ra$$long$25$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$25$anon0;

  inline$java.lang.Object$$la$init$ra$$$25$anon0:
    inline$java.lang.Object$$la$init$ra$$$25$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$25$Return;

  inline$java.lang.Object$$la$init$ra$$$25$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$25$$exception := inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$25$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$25$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$25$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$25$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$25$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$25$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$4$Entry;

  inline$java.math.BigInteger$shiftRight$int$4$Entry:
    inline$java.math.BigInteger$shiftRight$int$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$4$r0, inline$java.math.BigInteger$shiftRight$int$4$$l2, inline$java.math.BigInteger$shiftRight$int$4$i0, inline$java.math.BigInteger$shiftRight$int$4$$r1, inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$4$$l1, inline$java.math.BigInteger$shiftRight$int$4$$return, inline$java.math.BigInteger$shiftRight$int$4$$exception;
    inline$java.math.BigInteger$shiftRight$int$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$4$anon0;

  inline$java.math.BigInteger$shiftRight$int$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$r0 := inline$java.math.BigInteger$shiftRight$int$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$i0 := inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$4$$r1 := inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$4$$l1, 
  inline$java.math.BigInteger$shiftRight$int$4$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$26$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$26$$this := inline$java.math.BigInteger$shiftRight$int$4$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$26$r0, inline$java.math.BigInteger$$la$init$ra$$long$26$l0, inline$java.math.BigInteger$$la$init$ra$$long$26$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$26$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$26$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$26$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$26$r0 := inline$java.math.BigInteger$$la$init$ra$$long$26$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$26$l0 := inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$26$Entry;

  inline$java.lang.Object$$la$init$ra$$$26$Entry:
    inline$java.lang.Object$$la$init$ra$$$26$$this := inline$java.math.BigInteger$$la$init$ra$$long$26$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$26$anon0;

  inline$java.lang.Object$$la$init$ra$$$26$anon0:
    inline$java.lang.Object$$la$init$ra$$$26$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$26$Return;

  inline$java.lang.Object$$la$init$ra$$$26$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$26$$exception := inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$26$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$26$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$26$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$26$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$26$Return:
    inline$java.math.BigInteger$shiftRight$int$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$26$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$4$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$return := inline$java.math.BigInteger$shiftRight$int$4$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$4$block4;

  inline$java.math.BigInteger$shiftRight$int$4$block4:
    goto inline$java.math.BigInteger$shiftRight$int$4$Return;

  inline$java.math.BigInteger$shiftRight$int$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2 := inline$java.math.BigInteger$shiftRight$int$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftRight$int$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$6$Entry;

  inline$java.math.BigInteger$shiftLeft$int$6$Entry:
    inline$java.math.BigInteger$shiftLeft$int$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2;
    inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$6$$l2, inline$java.math.BigInteger$shiftLeft$int$6$$l1, inline$java.math.BigInteger$shiftLeft$int$6$r0, inline$java.math.BigInteger$shiftLeft$int$6$i0, inline$java.math.BigInteger$shiftLeft$int$6$$r1, inline$java.math.BigInteger$shiftLeft$int$6$$return, inline$java.math.BigInteger$shiftLeft$int$6$$exception;
    inline$java.math.BigInteger$shiftLeft$int$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$6$anon0;

  inline$java.math.BigInteger$shiftLeft$int$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$r0 := inline$java.math.BigInteger$shiftLeft$int$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$i0 := inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$6$$r1 := inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$6$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$6$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$27$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$27$$this := inline$java.math.BigInteger$shiftLeft$int$6$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$27$r0, inline$java.math.BigInteger$$la$init$ra$$long$27$l0, inline$java.math.BigInteger$$la$init$ra$$long$27$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$27$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$27$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$27$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$27$r0 := inline$java.math.BigInteger$$la$init$ra$$long$27$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$27$l0 := inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$27$Entry;

  inline$java.lang.Object$$la$init$ra$$$27$Entry:
    inline$java.lang.Object$$la$init$ra$$$27$$this := inline$java.math.BigInteger$$la$init$ra$$long$27$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$27$anon0;

  inline$java.lang.Object$$la$init$ra$$$27$anon0:
    inline$java.lang.Object$$la$init$ra$$$27$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$27$Return;

  inline$java.lang.Object$$la$init$ra$$$27$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$27$$exception := inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$27$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$27$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$27$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$27$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$27$Return:
    inline$java.math.BigInteger$shiftLeft$int$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$27$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$6$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$return := inline$java.math.BigInteger$shiftLeft$int$6$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$6$block5;

  inline$java.math.BigInteger$shiftLeft$int$6$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$6$Return;

  inline$java.math.BigInteger$shiftLeft$int$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11 := inline$java.math.BigInteger$shiftLeft$int$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$28$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$28$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$28$r0, inline$java.math.BigInteger$$la$init$ra$$long$28$l0, inline$java.math.BigInteger$$la$init$ra$$long$28$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$28$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$28$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$28$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$28$r0 := inline$java.math.BigInteger$$la$init$ra$$long$28$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$28$l0 := inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$28$Entry;

  inline$java.lang.Object$$la$init$ra$$$28$Entry:
    inline$java.lang.Object$$la$init$ra$$$28$$this := inline$java.math.BigInteger$$la$init$ra$$long$28$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$28$anon0;

  inline$java.lang.Object$$la$init$ra$$$28$anon0:
    inline$java.lang.Object$$la$init$ra$$$28$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$28$Return;

  inline$java.lang.Object$$la$init$ra$$$28$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$28$$exception := inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$28$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$28$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$28$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$28$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$28$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$28$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$5$Entry;

  inline$java.math.BigInteger$shiftRight$int$5$Entry:
    inline$java.math.BigInteger$shiftRight$int$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$5$r0, inline$java.math.BigInteger$shiftRight$int$5$$l2, inline$java.math.BigInteger$shiftRight$int$5$i0, inline$java.math.BigInteger$shiftRight$int$5$$r1, inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$5$$l1, inline$java.math.BigInteger$shiftRight$int$5$$return, inline$java.math.BigInteger$shiftRight$int$5$$exception;
    inline$java.math.BigInteger$shiftRight$int$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$5$anon0;

  inline$java.math.BigInteger$shiftRight$int$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$r0 := inline$java.math.BigInteger$shiftRight$int$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$i0 := inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$5$$r1 := inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$5$$l1, 
  inline$java.math.BigInteger$shiftRight$int$5$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$29$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$29$$this := inline$java.math.BigInteger$shiftRight$int$5$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$29$r0, inline$java.math.BigInteger$$la$init$ra$$long$29$l0, inline$java.math.BigInteger$$la$init$ra$$long$29$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$29$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$29$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$29$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$29$r0 := inline$java.math.BigInteger$$la$init$ra$$long$29$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$29$l0 := inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$29$Entry;

  inline$java.lang.Object$$la$init$ra$$$29$Entry:
    inline$java.lang.Object$$la$init$ra$$$29$$this := inline$java.math.BigInteger$$la$init$ra$$long$29$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$29$anon0;

  inline$java.lang.Object$$la$init$ra$$$29$anon0:
    inline$java.lang.Object$$la$init$ra$$$29$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$29$Return;

  inline$java.lang.Object$$la$init$ra$$$29$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$29$$exception := inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$29$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$29$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$29$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$29$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$29$Return:
    inline$java.math.BigInteger$shiftRight$int$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$29$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$5$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$return := inline$java.math.BigInteger$shiftRight$int$5$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$5$block4;

  inline$java.math.BigInteger$shiftRight$int$5$block4:
    goto inline$java.math.BigInteger$shiftRight$int$5$Return;

  inline$java.math.BigInteger$shiftRight$int$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4 := inline$java.math.BigInteger$shiftRight$int$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftRight$int$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$7$Entry;

  inline$java.math.BigInteger$shiftLeft$int$7$Entry:
    inline$java.math.BigInteger$shiftLeft$int$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4;
    inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$7$$l2, inline$java.math.BigInteger$shiftLeft$int$7$$l1, inline$java.math.BigInteger$shiftLeft$int$7$r0, inline$java.math.BigInteger$shiftLeft$int$7$i0, inline$java.math.BigInteger$shiftLeft$int$7$$r1, inline$java.math.BigInteger$shiftLeft$int$7$$return, inline$java.math.BigInteger$shiftLeft$int$7$$exception;
    inline$java.math.BigInteger$shiftLeft$int$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$7$anon0;

  inline$java.math.BigInteger$shiftLeft$int$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$r0 := inline$java.math.BigInteger$shiftLeft$int$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$i0 := inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$7$$r1 := inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$7$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$7$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$30$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$30$$this := inline$java.math.BigInteger$shiftLeft$int$7$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$30$r0, inline$java.math.BigInteger$$la$init$ra$$long$30$l0, inline$java.math.BigInteger$$la$init$ra$$long$30$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$30$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$30$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$30$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$30$r0 := inline$java.math.BigInteger$$la$init$ra$$long$30$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$30$l0 := inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$30$Entry;

  inline$java.lang.Object$$la$init$ra$$$30$Entry:
    inline$java.lang.Object$$la$init$ra$$$30$$this := inline$java.math.BigInteger$$la$init$ra$$long$30$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$30$anon0;

  inline$java.lang.Object$$la$init$ra$$$30$anon0:
    inline$java.lang.Object$$la$init$ra$$$30$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$30$Return;

  inline$java.lang.Object$$la$init$ra$$$30$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$30$$exception := inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$30$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$30$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$30$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$30$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$30$Return:
    inline$java.math.BigInteger$shiftLeft$int$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$30$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$7$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$return := inline$java.math.BigInteger$shiftLeft$int$7$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$7$block5;

  inline$java.math.BigInteger$shiftLeft$int$7$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$7$Return;

  inline$java.math.BigInteger$shiftLeft$int$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12 := inline$java.math.BigInteger$shiftLeft$int$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$31$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$31$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$31$r0, inline$java.math.BigInteger$$la$init$ra$$long$31$l0, inline$java.math.BigInteger$$la$init$ra$$long$31$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$31$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$31$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$31$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$31$r0 := inline$java.math.BigInteger$$la$init$ra$$long$31$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$31$l0 := inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$31$Entry;

  inline$java.lang.Object$$la$init$ra$$$31$Entry:
    inline$java.lang.Object$$la$init$ra$$$31$$this := inline$java.math.BigInteger$$la$init$ra$$long$31$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$31$anon0;

  inline$java.lang.Object$$la$init$ra$$$31$anon0:
    inline$java.lang.Object$$la$init$ra$$$31$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$31$Return;

  inline$java.lang.Object$$la$init$ra$$$31$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$31$$exception := inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$31$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$31$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$31$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$31$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$31$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$31$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$4$r1, inline$java.math.BigInteger$add$java.math.BigInteger$4$r0, inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$4$$return, inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$32$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$32$$this := inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$32$r0, inline$java.math.BigInteger$$la$init$ra$$long$32$l0, inline$java.math.BigInteger$$la$init$ra$$long$32$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$32$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$32$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$32$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$32$r0 := inline$java.math.BigInteger$$la$init$ra$$long$32$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$32$l0 := inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$32$Entry;

  inline$java.lang.Object$$la$init$ra$$$32$Entry:
    inline$java.lang.Object$$la$init$ra$$$32$$this := inline$java.math.BigInteger$$la$init$ra$$long$32$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$32$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$32$anon0;

  inline$java.lang.Object$$la$init$ra$$$32$anon0:
    inline$java.lang.Object$$la$init$ra$$$32$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$32$Return;

  inline$java.lang.Object$$la$init$ra$$$32$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$32$$exception := inline$java.lang.Object$$la$init$ra$$$32$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$32$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$32$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$32$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$32$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$32$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$32$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$return := inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$5$r1, inline$java.math.BigInteger$add$java.math.BigInteger$5$r0, inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$5$$return, inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$33$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$33$$this := inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$33$r0, inline$java.math.BigInteger$$la$init$ra$$long$33$l0, inline$java.math.BigInteger$$la$init$ra$$long$33$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$33$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$33$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$33$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$33$r0 := inline$java.math.BigInteger$$la$init$ra$$long$33$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$33$l0 := inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$33$Entry;

  inline$java.lang.Object$$la$init$ra$$$33$Entry:
    inline$java.lang.Object$$la$init$ra$$$33$$this := inline$java.math.BigInteger$$la$init$ra$$long$33$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$33$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$33$anon0;

  inline$java.lang.Object$$la$init$ra$$$33$anon0:
    inline$java.lang.Object$$la$init$ra$$$33$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$33$Return;

  inline$java.lang.Object$$la$init$ra$$$33$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$33$$exception := inline$java.lang.Object$$la$init$ra$$$33$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$33$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$33$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$33$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$33$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$33$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$33$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$return := inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$34$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$34$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$34$r0, inline$java.math.BigInteger$$la$init$ra$$long$34$l0, inline$java.math.BigInteger$$la$init$ra$$long$34$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$34$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$34$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$34$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$34$r0 := inline$java.math.BigInteger$$la$init$ra$$long$34$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$34$l0 := inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$34$Entry;

  inline$java.lang.Object$$la$init$ra$$$34$Entry:
    inline$java.lang.Object$$la$init$ra$$$34$$this := inline$java.math.BigInteger$$la$init$ra$$long$34$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$34$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$34$anon0;

  inline$java.lang.Object$$la$init$ra$$$34$anon0:
    inline$java.lang.Object$$la$init$ra$$$34$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$34$Return;

  inline$java.lang.Object$$la$init$ra$$$34$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$34$$exception := inline$java.lang.Object$$la$init$ra$$$34$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$34$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$34$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$34$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$34$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$34$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$34$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$35$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$35$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$35$r0, inline$java.math.BigInteger$$la$init$ra$$long$35$l0, inline$java.math.BigInteger$$la$init$ra$$long$35$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$35$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$35$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$35$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$35$r0 := inline$java.math.BigInteger$$la$init$ra$$long$35$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$35$l0 := inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$35$Entry;

  inline$java.lang.Object$$la$init$ra$$$35$Entry:
    inline$java.lang.Object$$la$init$ra$$$35$$this := inline$java.math.BigInteger$$la$init$ra$$long$35$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$35$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$35$anon0;

  inline$java.lang.Object$$la$init$ra$$$35$anon0:
    inline$java.lang.Object$$la$init$ra$$$35$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$35$Return;

  inline$java.lang.Object$$la$init$ra$$$35$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$35$$exception := inline$java.lang.Object$$la$init$ra$$$35$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$35$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$35$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$35$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$35$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$35$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$35$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$8$Entry;

  inline$java.math.BigInteger$shiftLeft$int$8$Entry:
    inline$java.math.BigInteger$shiftLeft$int$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16;
    inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$8$$l2, inline$java.math.BigInteger$shiftLeft$int$8$$l1, inline$java.math.BigInteger$shiftLeft$int$8$r0, inline$java.math.BigInteger$shiftLeft$int$8$i0, inline$java.math.BigInteger$shiftLeft$int$8$$r1, inline$java.math.BigInteger$shiftLeft$int$8$$return, inline$java.math.BigInteger$shiftLeft$int$8$$exception;
    inline$java.math.BigInteger$shiftLeft$int$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$8$anon0;

  inline$java.math.BigInteger$shiftLeft$int$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$r0 := inline$java.math.BigInteger$shiftLeft$int$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$i0 := inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$8$$r1 := inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$8$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$8$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$36$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$36$$this := inline$java.math.BigInteger$shiftLeft$int$8$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$36$r0, inline$java.math.BigInteger$$la$init$ra$$long$36$l0, inline$java.math.BigInteger$$la$init$ra$$long$36$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$36$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$36$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$36$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$36$r0 := inline$java.math.BigInteger$$la$init$ra$$long$36$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$36$l0 := inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$36$Entry;

  inline$java.lang.Object$$la$init$ra$$$36$Entry:
    inline$java.lang.Object$$la$init$ra$$$36$$this := inline$java.math.BigInteger$$la$init$ra$$long$36$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$36$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$36$anon0;

  inline$java.lang.Object$$la$init$ra$$$36$anon0:
    inline$java.lang.Object$$la$init$ra$$$36$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$36$Return;

  inline$java.lang.Object$$la$init$ra$$$36$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$36$$exception := inline$java.lang.Object$$la$init$ra$$$36$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$36$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$36$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$36$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$36$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$36$Return:
    inline$java.math.BigInteger$shiftLeft$int$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$36$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$8$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$8$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$return := inline$java.math.BigInteger$shiftLeft$int$8$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$8$block5;

  inline$java.math.BigInteger$shiftLeft$int$8$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$8$Return;

  inline$java.math.BigInteger$shiftLeft$int$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17 := inline$java.math.BigInteger$shiftLeft$int$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$6$r1, inline$java.math.BigInteger$add$java.math.BigInteger$6$r0, inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$6$$return, inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$37$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$37$$this := inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$37$r0, inline$java.math.BigInteger$$la$init$ra$$long$37$l0, inline$java.math.BigInteger$$la$init$ra$$long$37$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$37$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$37$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$37$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$37$r0 := inline$java.math.BigInteger$$la$init$ra$$long$37$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$37$l0 := inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$37$Entry;

  inline$java.lang.Object$$la$init$ra$$$37$Entry:
    inline$java.lang.Object$$la$init$ra$$$37$$this := inline$java.math.BigInteger$$la$init$ra$$long$37$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$37$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$37$anon0;

  inline$java.lang.Object$$la$init$ra$$$37$anon0:
    inline$java.lang.Object$$la$init$ra$$$37$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$37$Return;

  inline$java.lang.Object$$la$init$ra$$$37$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$37$$exception := inline$java.lang.Object$$la$init$ra$$$37$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$37$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$37$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$37$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$37$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$37$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$37$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$return := inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$9$Entry;

  inline$java.math.BigInteger$shiftLeft$int$9$Entry:
    inline$java.math.BigInteger$shiftLeft$int$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7;
    inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$9$$l2, inline$java.math.BigInteger$shiftLeft$int$9$$l1, inline$java.math.BigInteger$shiftLeft$int$9$r0, inline$java.math.BigInteger$shiftLeft$int$9$i0, inline$java.math.BigInteger$shiftLeft$int$9$$r1, inline$java.math.BigInteger$shiftLeft$int$9$$return, inline$java.math.BigInteger$shiftLeft$int$9$$exception;
    inline$java.math.BigInteger$shiftLeft$int$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$9$anon0;

  inline$java.math.BigInteger$shiftLeft$int$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$r0 := inline$java.math.BigInteger$shiftLeft$int$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$i0 := inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$9$$r1 := inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$9$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$9$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$38$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$38$$this := inline$java.math.BigInteger$shiftLeft$int$9$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$38$r0, inline$java.math.BigInteger$$la$init$ra$$long$38$l0, inline$java.math.BigInteger$$la$init$ra$$long$38$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$38$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$38$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$38$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$38$r0 := inline$java.math.BigInteger$$la$init$ra$$long$38$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$38$l0 := inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$38$Entry;

  inline$java.lang.Object$$la$init$ra$$$38$Entry:
    inline$java.lang.Object$$la$init$ra$$$38$$this := inline$java.math.BigInteger$$la$init$ra$$long$38$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$38$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$38$anon0;

  inline$java.lang.Object$$la$init$ra$$$38$anon0:
    inline$java.lang.Object$$la$init$ra$$$38$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$38$Return;

  inline$java.lang.Object$$la$init$ra$$$38$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$38$$exception := inline$java.lang.Object$$la$init$ra$$$38$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$38$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$38$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$38$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$38$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$38$Return:
    inline$java.math.BigInteger$shiftLeft$int$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$38$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$9$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$9$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$return := inline$java.math.BigInteger$shiftLeft$int$9$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$9$block5;

  inline$java.math.BigInteger$shiftLeft$int$9$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$9$Return;

  inline$java.math.BigInteger$shiftLeft$int$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19 := inline$java.math.BigInteger$shiftLeft$int$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$7$r1, inline$java.math.BigInteger$add$java.math.BigInteger$7$r0, inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$7$$return, inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$39$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$39$$this := inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$39$r0, inline$java.math.BigInteger$$la$init$ra$$long$39$l0, inline$java.math.BigInteger$$la$init$ra$$long$39$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$39$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$39$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$39$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$39$r0 := inline$java.math.BigInteger$$la$init$ra$$long$39$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$39$l0 := inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$39$Entry;

  inline$java.lang.Object$$la$init$ra$$$39$Entry:
    inline$java.lang.Object$$la$init$ra$$$39$$this := inline$java.math.BigInteger$$la$init$ra$$long$39$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$39$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$39$anon0;

  inline$java.lang.Object$$la$init$ra$$$39$anon0:
    inline$java.lang.Object$$la$init$ra$$$39$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$39$Return;

  inline$java.lang.Object$$la$init$ra$$$39$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$39$$exception := inline$java.lang.Object$$la$init$ra$$$39$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$39$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$39$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$39$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$39$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$39$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$39$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$return := inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return:
    r7 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto anon30$4;

  anon30$4:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto anon65_Then, anon65_Else;

  anon65_Then:
    assume {:partition} r3 != unsafe.$null;
    $exception := $exception;
    goto anon33;

  anon65_Else:
    assume {:partition} r3 == unsafe.$null;
    call $fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_6;
    return;

  anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$this := r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0 := r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$8$r1, inline$java.math.BigInteger$add$java.math.BigInteger$8$r0, inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$8$$return, inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$40$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$40$$this := inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$40$r0, inline$java.math.BigInteger$$la$init$ra$$long$40$l0, inline$java.math.BigInteger$$la$init$ra$$long$40$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$40$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$40$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$40$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$40$r0 := inline$java.math.BigInteger$$la$init$ra$$long$40$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$40$l0 := inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$40$Entry;

  inline$java.lang.Object$$la$init$ra$$$40$Entry:
    inline$java.lang.Object$$la$init$ra$$$40$$this := inline$java.math.BigInteger$$la$init$ra$$long$40$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$40$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$40$anon0;

  inline$java.lang.Object$$la$init$ra$$$40$anon0:
    inline$java.lang.Object$$la$init$ra$$$40$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$40$Return;

  inline$java.lang.Object$$la$init$ra$$$40$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$40$$exception := inline$java.lang.Object$$la$init$ra$$$40$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$40$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$40$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$40$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$40$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$40$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$40$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$return := inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$Return:
    $r13 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    goto anon33$1;

  anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto anon66_Then, anon66_Else;

  anon66_Then:
    assume {:partition} r5 != unsafe.$null;
    $exception := $exception;
    goto anon36;

  anon66_Else:
    assume {:partition} r5 == unsafe.$null;
    call $fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_7;
    return;

  anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$this := r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0 := r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$9$r1, inline$java.math.BigInteger$add$java.math.BigInteger$9$r0, inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$9$$return, inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$41$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$41$$this := inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$41$r0, inline$java.math.BigInteger$$la$init$ra$$long$41$l0, inline$java.math.BigInteger$$la$init$ra$$long$41$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$41$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$41$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$41$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$41$r0 := inline$java.math.BigInteger$$la$init$ra$$long$41$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$41$l0 := inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$41$Entry;

  inline$java.lang.Object$$la$init$ra$$$41$Entry:
    inline$java.lang.Object$$la$init$ra$$$41$$this := inline$java.math.BigInteger$$la$init$ra$$long$41$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$41$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$41$anon0;

  inline$java.lang.Object$$la$init$ra$$$41$anon0:
    inline$java.lang.Object$$la$init$ra$$$41$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$41$Return;

  inline$java.lang.Object$$la$init$ra$$$41$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$41$$exception := inline$java.lang.Object$$la$init$ra$$$41$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$41$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$41$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$41$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$41$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$41$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$41$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$return := inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$Return:
    $r14 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    goto anon36$1;

  anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0 := $r13;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1 := $r14;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3:
    goto inline$java.math.BigInteger$bitLength$$6$Entry;

  inline$java.math.BigInteger$bitLength$$6$Entry:
    inline$java.math.BigInteger$bitLength$$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    havoc inline$java.math.BigInteger$bitLength$$6$$b1, inline$java.math.BigInteger$bitLength$$6$$b3, inline$java.math.BigInteger$bitLength$$6$i8, inline$java.math.BigInteger$bitLength$$6$l7, inline$java.math.BigInteger$bitLength$$6$$l4, inline$java.math.BigInteger$bitLength$$6$$b5, inline$java.math.BigInteger$bitLength$$6$$l0, inline$java.math.BigInteger$bitLength$$6$$l2, inline$java.math.BigInteger$bitLength$$6$r0, inline$java.math.BigInteger$bitLength$$6$$l6, inline$java.math.BigInteger$bitLength$$6$$return, inline$java.math.BigInteger$bitLength$$6$$exception;
    goto inline$java.math.BigInteger$bitLength$$6$anon0;

  inline$java.math.BigInteger$bitLength$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$6$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$r0 := inline$java.math.BigInteger$bitLength$$6$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon10_Then, inline$java.math.BigInteger$bitLength$$6$anon10_Else;

  inline$java.math.BigInteger$bitLength$$6$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block11;

  inline$java.math.BigInteger$bitLength$$6$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon3;

  inline$java.math.BigInteger$bitLength$$6$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$6$block16;

  inline$java.math.BigInteger$bitLength$$6$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon11_Then, inline$java.math.BigInteger$bitLength$$6$anon11_Else;

  inline$java.math.BigInteger$bitLength$$6$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block12;

  inline$java.math.BigInteger$bitLength$$6$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$6$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon6;

  inline$java.math.BigInteger$bitLength$$6$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$block13;

  inline$java.math.BigInteger$bitLength$$6$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l6 := -inline$java.math.BigInteger$bitLength$$6$$l4;
    goto inline$java.math.BigInteger$bitLength$$6$block13;

  inline$java.math.BigInteger$bitLength$$6$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$l7 := inline$java.math.BigInteger$bitLength$$6$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$6$block14;

  inline$java.math.BigInteger$bitLength$$6$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon12_Then, inline$java.math.BigInteger$bitLength$$6$anon12_Else;

  inline$java.math.BigInteger$bitLength$$6$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block15;

  inline$java.math.BigInteger$bitLength$$6$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$6$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon9;

  inline$java.math.BigInteger$bitLength$$6$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$i8 := inline$java.math.BigInteger$bitLength$$6$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$6$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$block14;

  inline$java.math.BigInteger$bitLength$$6$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$return := inline$java.math.BigInteger$bitLength$$6$i8;
    goto inline$java.math.BigInteger$bitLength$$6$block16;

  inline$java.math.BigInteger$bitLength$$6$block16:
    goto inline$java.math.BigInteger$bitLength$$6$Return;

  inline$java.math.BigInteger$bitLength$$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0 := inline$java.math.BigInteger$bitLength$$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$bitLength$$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6:
    goto inline$java.math.BigInteger$bitLength$$7$Entry;

  inline$java.math.BigInteger$bitLength$$7$Entry:
    inline$java.math.BigInteger$bitLength$$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$bitLength$$7$$b1, inline$java.math.BigInteger$bitLength$$7$$b3, inline$java.math.BigInteger$bitLength$$7$i8, inline$java.math.BigInteger$bitLength$$7$l7, inline$java.math.BigInteger$bitLength$$7$$l4, inline$java.math.BigInteger$bitLength$$7$$b5, inline$java.math.BigInteger$bitLength$$7$$l0, inline$java.math.BigInteger$bitLength$$7$$l2, inline$java.math.BigInteger$bitLength$$7$r0, inline$java.math.BigInteger$bitLength$$7$$l6, inline$java.math.BigInteger$bitLength$$7$$return, inline$java.math.BigInteger$bitLength$$7$$exception;
    goto inline$java.math.BigInteger$bitLength$$7$anon0;

  inline$java.math.BigInteger$bitLength$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$7$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$r0 := inline$java.math.BigInteger$bitLength$$7$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon10_Then, inline$java.math.BigInteger$bitLength$$7$anon10_Else;

  inline$java.math.BigInteger$bitLength$$7$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block11;

  inline$java.math.BigInteger$bitLength$$7$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon3;

  inline$java.math.BigInteger$bitLength$$7$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$7$block16;

  inline$java.math.BigInteger$bitLength$$7$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon11_Then, inline$java.math.BigInteger$bitLength$$7$anon11_Else;

  inline$java.math.BigInteger$bitLength$$7$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block12;

  inline$java.math.BigInteger$bitLength$$7$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$7$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon6;

  inline$java.math.BigInteger$bitLength$$7$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$block13;

  inline$java.math.BigInteger$bitLength$$7$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l6 := -inline$java.math.BigInteger$bitLength$$7$$l4;
    goto inline$java.math.BigInteger$bitLength$$7$block13;

  inline$java.math.BigInteger$bitLength$$7$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$l7 := inline$java.math.BigInteger$bitLength$$7$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$7$block14;

  inline$java.math.BigInteger$bitLength$$7$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon12_Then, inline$java.math.BigInteger$bitLength$$7$anon12_Else;

  inline$java.math.BigInteger$bitLength$$7$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block15;

  inline$java.math.BigInteger$bitLength$$7$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$7$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon9;

  inline$java.math.BigInteger$bitLength$$7$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$i8 := inline$java.math.BigInteger$bitLength$$7$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$7$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$block14;

  inline$java.math.BigInteger$bitLength$$7$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$return := inline$java.math.BigInteger$bitLength$$7$i8;
    goto inline$java.math.BigInteger$bitLength$$7$block16;

  inline$java.math.BigInteger$bitLength$$7$block16:
    goto inline$java.math.BigInteger$bitLength$$7$Return;

  inline$java.math.BigInteger$bitLength$$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1 := inline$java.math.BigInteger$bitLength$$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$bitLength$$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$6$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$6$$r3, inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$6$$l0, inline$java.math.BigInteger$equals$java.lang.Object$6$$r4, inline$java.math.BigInteger$equals$java.lang.Object$6$$b2, inline$java.math.BigInteger$equals$java.lang.Object$6$r2, inline$java.math.BigInteger$equals$java.lang.Object$6$$l1, inline$java.math.BigInteger$equals$java.lang.Object$6$r1, inline$java.math.BigInteger$equals$java.lang.Object$6$r0, inline$java.math.BigInteger$equals$java.lang.Object$6$$return, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$r0 := inline$java.math.BigInteger$equals$java.lang.Object$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$r1 := inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$r3, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$6$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$r4, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$6$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$6$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$6$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$6$r2 := inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$6$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$6$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$7$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$7$$r3, inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$7$$l0, inline$java.math.BigInteger$equals$java.lang.Object$7$$r4, inline$java.math.BigInteger$equals$java.lang.Object$7$$b2, inline$java.math.BigInteger$equals$java.lang.Object$7$r2, inline$java.math.BigInteger$equals$java.lang.Object$7$$l1, inline$java.math.BigInteger$equals$java.lang.Object$7$r1, inline$java.math.BigInteger$equals$java.lang.Object$7$r0, inline$java.math.BigInteger$equals$java.lang.Object$7$$return, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$r0 := inline$java.math.BigInteger$equals$java.lang.Object$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$r1 := inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$r3, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$7$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$r4, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$7$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$7$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$7$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$7$r2 := inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$7$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$7$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$42$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$42$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$42$r0, inline$java.math.BigInteger$$la$init$ra$$long$42$l0, inline$java.math.BigInteger$$la$init$ra$$long$42$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$42$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$42$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$42$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$42$r0 := inline$java.math.BigInteger$$la$init$ra$$long$42$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$42$l0 := inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$42$Entry;

  inline$java.lang.Object$$la$init$ra$$$42$Entry:
    inline$java.lang.Object$$la$init$ra$$$42$$this := inline$java.math.BigInteger$$la$init$ra$$long$42$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$42$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$42$anon0;

  inline$java.lang.Object$$la$init$ra$$$42$anon0:
    inline$java.lang.Object$$la$init$ra$$$42$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$42$Return;

  inline$java.lang.Object$$la$init$ra$$$42$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$42$$exception := inline$java.lang.Object$$la$init$ra$$$42$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$42$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$42$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$42$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$42$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$42$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$42$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$43$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$43$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$43$r0, inline$java.math.BigInteger$$la$init$ra$$long$43$l0, inline$java.math.BigInteger$$la$init$ra$$long$43$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$43$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$43$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$43$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$43$r0 := inline$java.math.BigInteger$$la$init$ra$$long$43$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$43$l0 := inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$43$Entry;

  inline$java.lang.Object$$la$init$ra$$$43$Entry:
    inline$java.lang.Object$$la$init$ra$$$43$$this := inline$java.math.BigInteger$$la$init$ra$$long$43$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$43$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$43$anon0;

  inline$java.lang.Object$$la$init$ra$$$43$anon0:
    inline$java.lang.Object$$la$init$ra$$$43$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$43$Return;

  inline$java.lang.Object$$la$init$ra$$$43$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$43$$exception := inline$java.lang.Object$$la$init$ra$$$43$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$43$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$43$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$43$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$43$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$43$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$43$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$6$Entry;

  inline$java.math.BigInteger$shiftRight$int$6$Entry:
    inline$java.math.BigInteger$shiftRight$int$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$6$r0, inline$java.math.BigInteger$shiftRight$int$6$$l2, inline$java.math.BigInteger$shiftRight$int$6$i0, inline$java.math.BigInteger$shiftRight$int$6$$r1, inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$6$$l1, inline$java.math.BigInteger$shiftRight$int$6$$return, inline$java.math.BigInteger$shiftRight$int$6$$exception;
    inline$java.math.BigInteger$shiftRight$int$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$6$anon0;

  inline$java.math.BigInteger$shiftRight$int$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$r0 := inline$java.math.BigInteger$shiftRight$int$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$i0 := inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$6$$r1 := inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$6$$l1, 
  inline$java.math.BigInteger$shiftRight$int$6$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$44$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$44$$this := inline$java.math.BigInteger$shiftRight$int$6$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$44$r0, inline$java.math.BigInteger$$la$init$ra$$long$44$l0, inline$java.math.BigInteger$$la$init$ra$$long$44$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$44$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$44$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$44$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$44$r0 := inline$java.math.BigInteger$$la$init$ra$$long$44$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$44$l0 := inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$44$Entry;

  inline$java.lang.Object$$la$init$ra$$$44$Entry:
    inline$java.lang.Object$$la$init$ra$$$44$$this := inline$java.math.BigInteger$$la$init$ra$$long$44$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$44$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$44$anon0;

  inline$java.lang.Object$$la$init$ra$$$44$anon0:
    inline$java.lang.Object$$la$init$ra$$$44$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$44$Return;

  inline$java.lang.Object$$la$init$ra$$$44$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$44$$exception := inline$java.lang.Object$$la$init$ra$$$44$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$44$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$44$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$44$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$44$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$44$Return:
    inline$java.math.BigInteger$shiftRight$int$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$44$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$6$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$return := inline$java.math.BigInteger$shiftRight$int$6$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$6$block4;

  inline$java.math.BigInteger$shiftRight$int$6$block4:
    goto inline$java.math.BigInteger$shiftRight$int$6$Return;

  inline$java.math.BigInteger$shiftRight$int$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2 := inline$java.math.BigInteger$shiftRight$int$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftRight$int$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$10$Entry;

  inline$java.math.BigInteger$shiftLeft$int$10$Entry:
    inline$java.math.BigInteger$shiftLeft$int$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2;
    inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$10$$l2, inline$java.math.BigInteger$shiftLeft$int$10$$l1, inline$java.math.BigInteger$shiftLeft$int$10$r0, inline$java.math.BigInteger$shiftLeft$int$10$i0, inline$java.math.BigInteger$shiftLeft$int$10$$r1, inline$java.math.BigInteger$shiftLeft$int$10$$return, inline$java.math.BigInteger$shiftLeft$int$10$$exception;
    inline$java.math.BigInteger$shiftLeft$int$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$10$anon0;

  inline$java.math.BigInteger$shiftLeft$int$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$r0 := inline$java.math.BigInteger$shiftLeft$int$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$i0 := inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$10$$r1 := inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$10$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$10$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$45$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$45$$this := inline$java.math.BigInteger$shiftLeft$int$10$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$45$r0, inline$java.math.BigInteger$$la$init$ra$$long$45$l0, inline$java.math.BigInteger$$la$init$ra$$long$45$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$45$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$45$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$45$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$45$r0 := inline$java.math.BigInteger$$la$init$ra$$long$45$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$45$l0 := inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$45$Entry;

  inline$java.lang.Object$$la$init$ra$$$45$Entry:
    inline$java.lang.Object$$la$init$ra$$$45$$this := inline$java.math.BigInteger$$la$init$ra$$long$45$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$45$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$45$anon0;

  inline$java.lang.Object$$la$init$ra$$$45$anon0:
    inline$java.lang.Object$$la$init$ra$$$45$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$45$Return;

  inline$java.lang.Object$$la$init$ra$$$45$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$45$$exception := inline$java.lang.Object$$la$init$ra$$$45$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$45$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$45$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$45$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$45$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$45$Return:
    inline$java.math.BigInteger$shiftLeft$int$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$45$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$10$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$10$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$return := inline$java.math.BigInteger$shiftLeft$int$10$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$10$block5;

  inline$java.math.BigInteger$shiftLeft$int$10$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$10$Return;

  inline$java.math.BigInteger$shiftLeft$int$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11 := inline$java.math.BigInteger$shiftLeft$int$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$46$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$46$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$46$r0, inline$java.math.BigInteger$$la$init$ra$$long$46$l0, inline$java.math.BigInteger$$la$init$ra$$long$46$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$46$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$46$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$46$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$46$r0 := inline$java.math.BigInteger$$la$init$ra$$long$46$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$46$l0 := inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$46$Entry;

  inline$java.lang.Object$$la$init$ra$$$46$Entry:
    inline$java.lang.Object$$la$init$ra$$$46$$this := inline$java.math.BigInteger$$la$init$ra$$long$46$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$46$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$46$anon0;

  inline$java.lang.Object$$la$init$ra$$$46$anon0:
    inline$java.lang.Object$$la$init$ra$$$46$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$46$Return;

  inline$java.lang.Object$$la$init$ra$$$46$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$46$$exception := inline$java.lang.Object$$la$init$ra$$$46$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$46$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$46$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$46$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$46$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$46$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$46$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$7$Entry;

  inline$java.math.BigInteger$shiftRight$int$7$Entry:
    inline$java.math.BigInteger$shiftRight$int$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$7$r0, inline$java.math.BigInteger$shiftRight$int$7$$l2, inline$java.math.BigInteger$shiftRight$int$7$i0, inline$java.math.BigInteger$shiftRight$int$7$$r1, inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$7$$l1, inline$java.math.BigInteger$shiftRight$int$7$$return, inline$java.math.BigInteger$shiftRight$int$7$$exception;
    inline$java.math.BigInteger$shiftRight$int$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$7$anon0;

  inline$java.math.BigInteger$shiftRight$int$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$r0 := inline$java.math.BigInteger$shiftRight$int$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$i0 := inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$7$$r1 := inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$7$$l1, 
  inline$java.math.BigInteger$shiftRight$int$7$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$47$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$47$$this := inline$java.math.BigInteger$shiftRight$int$7$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$47$r0, inline$java.math.BigInteger$$la$init$ra$$long$47$l0, inline$java.math.BigInteger$$la$init$ra$$long$47$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$47$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$47$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$47$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$47$r0 := inline$java.math.BigInteger$$la$init$ra$$long$47$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$47$l0 := inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$47$Entry;

  inline$java.lang.Object$$la$init$ra$$$47$Entry:
    inline$java.lang.Object$$la$init$ra$$$47$$this := inline$java.math.BigInteger$$la$init$ra$$long$47$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$47$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$47$anon0;

  inline$java.lang.Object$$la$init$ra$$$47$anon0:
    inline$java.lang.Object$$la$init$ra$$$47$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$47$Return;

  inline$java.lang.Object$$la$init$ra$$$47$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$47$$exception := inline$java.lang.Object$$la$init$ra$$$47$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$47$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$47$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$47$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$47$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$47$Return:
    inline$java.math.BigInteger$shiftRight$int$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$47$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$7$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$return := inline$java.math.BigInteger$shiftRight$int$7$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$7$block4;

  inline$java.math.BigInteger$shiftRight$int$7$block4:
    goto inline$java.math.BigInteger$shiftRight$int$7$Return;

  inline$java.math.BigInteger$shiftRight$int$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4 := inline$java.math.BigInteger$shiftRight$int$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftRight$int$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$11$Entry;

  inline$java.math.BigInteger$shiftLeft$int$11$Entry:
    inline$java.math.BigInteger$shiftLeft$int$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4;
    inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$11$$l2, inline$java.math.BigInteger$shiftLeft$int$11$$l1, inline$java.math.BigInteger$shiftLeft$int$11$r0, inline$java.math.BigInteger$shiftLeft$int$11$i0, inline$java.math.BigInteger$shiftLeft$int$11$$r1, inline$java.math.BigInteger$shiftLeft$int$11$$return, inline$java.math.BigInteger$shiftLeft$int$11$$exception;
    inline$java.math.BigInteger$shiftLeft$int$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$11$anon0;

  inline$java.math.BigInteger$shiftLeft$int$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$r0 := inline$java.math.BigInteger$shiftLeft$int$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$i0 := inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$11$$r1 := inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$11$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$11$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$48$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$48$$this := inline$java.math.BigInteger$shiftLeft$int$11$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$48$r0, inline$java.math.BigInteger$$la$init$ra$$long$48$l0, inline$java.math.BigInteger$$la$init$ra$$long$48$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$48$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$48$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$48$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$48$r0 := inline$java.math.BigInteger$$la$init$ra$$long$48$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$48$l0 := inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$48$Entry;

  inline$java.lang.Object$$la$init$ra$$$48$Entry:
    inline$java.lang.Object$$la$init$ra$$$48$$this := inline$java.math.BigInteger$$la$init$ra$$long$48$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$48$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$48$anon0;

  inline$java.lang.Object$$la$init$ra$$$48$anon0:
    inline$java.lang.Object$$la$init$ra$$$48$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$48$Return;

  inline$java.lang.Object$$la$init$ra$$$48$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$48$$exception := inline$java.lang.Object$$la$init$ra$$$48$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$48$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$48$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$48$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$48$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$48$Return:
    inline$java.math.BigInteger$shiftLeft$int$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$48$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$11$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$11$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$return := inline$java.math.BigInteger$shiftLeft$int$11$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$11$block5;

  inline$java.math.BigInteger$shiftLeft$int$11$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$11$Return;

  inline$java.math.BigInteger$shiftLeft$int$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12 := inline$java.math.BigInteger$shiftLeft$int$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$49$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$49$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$49$r0, inline$java.math.BigInteger$$la$init$ra$$long$49$l0, inline$java.math.BigInteger$$la$init$ra$$long$49$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$49$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$49$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$49$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$49$r0 := inline$java.math.BigInteger$$la$init$ra$$long$49$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$49$l0 := inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$49$Entry;

  inline$java.lang.Object$$la$init$ra$$$49$Entry:
    inline$java.lang.Object$$la$init$ra$$$49$$this := inline$java.math.BigInteger$$la$init$ra$$long$49$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$49$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$49$anon0;

  inline$java.lang.Object$$la$init$ra$$$49$anon0:
    inline$java.lang.Object$$la$init$ra$$$49$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$49$Return;

  inline$java.lang.Object$$la$init$ra$$$49$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$49$$exception := inline$java.lang.Object$$la$init$ra$$$49$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$49$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$49$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$49$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$49$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$49$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$49$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$10$r1, inline$java.math.BigInteger$add$java.math.BigInteger$10$r0, inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$10$$return, inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$50$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$50$$this := inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$50$r0, inline$java.math.BigInteger$$la$init$ra$$long$50$l0, inline$java.math.BigInteger$$la$init$ra$$long$50$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$50$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$50$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$50$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$50$r0 := inline$java.math.BigInteger$$la$init$ra$$long$50$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$50$l0 := inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$50$Entry;

  inline$java.lang.Object$$la$init$ra$$$50$Entry:
    inline$java.lang.Object$$la$init$ra$$$50$$this := inline$java.math.BigInteger$$la$init$ra$$long$50$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$50$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$50$anon0;

  inline$java.lang.Object$$la$init$ra$$$50$anon0:
    inline$java.lang.Object$$la$init$ra$$$50$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$50$Return;

  inline$java.lang.Object$$la$init$ra$$$50$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$50$$exception := inline$java.lang.Object$$la$init$ra$$$50$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$50$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$50$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$50$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$50$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$50$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$50$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$return := inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$11$r1, inline$java.math.BigInteger$add$java.math.BigInteger$11$r0, inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$11$$return, inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$51$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$51$$this := inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$51$r0, inline$java.math.BigInteger$$la$init$ra$$long$51$l0, inline$java.math.BigInteger$$la$init$ra$$long$51$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$51$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$51$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$51$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$51$r0 := inline$java.math.BigInteger$$la$init$ra$$long$51$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$51$l0 := inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$51$Entry;

  inline$java.lang.Object$$la$init$ra$$$51$Entry:
    inline$java.lang.Object$$la$init$ra$$$51$$this := inline$java.math.BigInteger$$la$init$ra$$long$51$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$51$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$51$anon0;

  inline$java.lang.Object$$la$init$ra$$$51$anon0:
    inline$java.lang.Object$$la$init$ra$$$51$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$51$Return;

  inline$java.lang.Object$$la$init$ra$$$51$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$51$$exception := inline$java.lang.Object$$la$init$ra$$$51$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$51$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$51$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$51$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$51$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$51$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$51$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$return := inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$52$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$52$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$52$r0, inline$java.math.BigInteger$$la$init$ra$$long$52$l0, inline$java.math.BigInteger$$la$init$ra$$long$52$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$52$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$52$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$52$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$52$r0 := inline$java.math.BigInteger$$la$init$ra$$long$52$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$52$l0 := inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$52$Entry;

  inline$java.lang.Object$$la$init$ra$$$52$Entry:
    inline$java.lang.Object$$la$init$ra$$$52$$this := inline$java.math.BigInteger$$la$init$ra$$long$52$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$52$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$52$anon0;

  inline$java.lang.Object$$la$init$ra$$$52$anon0:
    inline$java.lang.Object$$la$init$ra$$$52$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$52$Return;

  inline$java.lang.Object$$la$init$ra$$$52$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$52$$exception := inline$java.lang.Object$$la$init$ra$$$52$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$52$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$52$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$52$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$52$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$52$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$52$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$53$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$53$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$53$r0, inline$java.math.BigInteger$$la$init$ra$$long$53$l0, inline$java.math.BigInteger$$la$init$ra$$long$53$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$53$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$53$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$53$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$53$r0 := inline$java.math.BigInteger$$la$init$ra$$long$53$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$53$l0 := inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$53$Entry;

  inline$java.lang.Object$$la$init$ra$$$53$Entry:
    inline$java.lang.Object$$la$init$ra$$$53$$this := inline$java.math.BigInteger$$la$init$ra$$long$53$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$53$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$53$anon0;

  inline$java.lang.Object$$la$init$ra$$$53$anon0:
    inline$java.lang.Object$$la$init$ra$$$53$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$53$Return;

  inline$java.lang.Object$$la$init$ra$$$53$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$53$$exception := inline$java.lang.Object$$la$init$ra$$$53$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$53$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$53$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$53$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$53$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$53$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$53$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$12$Entry;

  inline$java.math.BigInteger$shiftLeft$int$12$Entry:
    inline$java.math.BigInteger$shiftLeft$int$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16;
    inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$12$$l2, inline$java.math.BigInteger$shiftLeft$int$12$$l1, inline$java.math.BigInteger$shiftLeft$int$12$r0, inline$java.math.BigInteger$shiftLeft$int$12$i0, inline$java.math.BigInteger$shiftLeft$int$12$$r1, inline$java.math.BigInteger$shiftLeft$int$12$$return, inline$java.math.BigInteger$shiftLeft$int$12$$exception;
    inline$java.math.BigInteger$shiftLeft$int$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$12$anon0;

  inline$java.math.BigInteger$shiftLeft$int$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$r0 := inline$java.math.BigInteger$shiftLeft$int$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$i0 := inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$12$$r1 := inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$12$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$12$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$54$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$54$$this := inline$java.math.BigInteger$shiftLeft$int$12$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$54$r0, inline$java.math.BigInteger$$la$init$ra$$long$54$l0, inline$java.math.BigInteger$$la$init$ra$$long$54$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$54$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$54$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$54$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$54$r0 := inline$java.math.BigInteger$$la$init$ra$$long$54$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$54$l0 := inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$54$Entry;

  inline$java.lang.Object$$la$init$ra$$$54$Entry:
    inline$java.lang.Object$$la$init$ra$$$54$$this := inline$java.math.BigInteger$$la$init$ra$$long$54$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$54$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$54$anon0;

  inline$java.lang.Object$$la$init$ra$$$54$anon0:
    inline$java.lang.Object$$la$init$ra$$$54$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$54$Return;

  inline$java.lang.Object$$la$init$ra$$$54$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$54$$exception := inline$java.lang.Object$$la$init$ra$$$54$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$54$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$54$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$54$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$54$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$54$Return:
    inline$java.math.BigInteger$shiftLeft$int$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$54$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$12$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$12$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$return := inline$java.math.BigInteger$shiftLeft$int$12$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$12$block5;

  inline$java.math.BigInteger$shiftLeft$int$12$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$12$Return;

  inline$java.math.BigInteger$shiftLeft$int$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17 := inline$java.math.BigInteger$shiftLeft$int$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$12$r1, inline$java.math.BigInteger$add$java.math.BigInteger$12$r0, inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$12$$return, inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$55$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$55$$this := inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$55$r0, inline$java.math.BigInteger$$la$init$ra$$long$55$l0, inline$java.math.BigInteger$$la$init$ra$$long$55$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$55$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$55$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$55$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$55$r0 := inline$java.math.BigInteger$$la$init$ra$$long$55$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$55$l0 := inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$55$Entry;

  inline$java.lang.Object$$la$init$ra$$$55$Entry:
    inline$java.lang.Object$$la$init$ra$$$55$$this := inline$java.math.BigInteger$$la$init$ra$$long$55$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$55$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$55$anon0;

  inline$java.lang.Object$$la$init$ra$$$55$anon0:
    inline$java.lang.Object$$la$init$ra$$$55$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$55$Return;

  inline$java.lang.Object$$la$init$ra$$$55$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$55$$exception := inline$java.lang.Object$$la$init$ra$$$55$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$55$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$55$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$55$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$55$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$55$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$55$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$return := inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$13$Entry;

  inline$java.math.BigInteger$shiftLeft$int$13$Entry:
    inline$java.math.BigInteger$shiftLeft$int$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7;
    inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$13$$l2, inline$java.math.BigInteger$shiftLeft$int$13$$l1, inline$java.math.BigInteger$shiftLeft$int$13$r0, inline$java.math.BigInteger$shiftLeft$int$13$i0, inline$java.math.BigInteger$shiftLeft$int$13$$r1, inline$java.math.BigInteger$shiftLeft$int$13$$return, inline$java.math.BigInteger$shiftLeft$int$13$$exception;
    inline$java.math.BigInteger$shiftLeft$int$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$13$anon0;

  inline$java.math.BigInteger$shiftLeft$int$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$r0 := inline$java.math.BigInteger$shiftLeft$int$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$i0 := inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$13$$r1 := inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$13$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$13$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$56$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$56$$this := inline$java.math.BigInteger$shiftLeft$int$13$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$56$r0, inline$java.math.BigInteger$$la$init$ra$$long$56$l0, inline$java.math.BigInteger$$la$init$ra$$long$56$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$56$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$56$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$56$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$56$r0 := inline$java.math.BigInteger$$la$init$ra$$long$56$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$56$l0 := inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$56$Entry;

  inline$java.lang.Object$$la$init$ra$$$56$Entry:
    inline$java.lang.Object$$la$init$ra$$$56$$this := inline$java.math.BigInteger$$la$init$ra$$long$56$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$56$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$56$anon0;

  inline$java.lang.Object$$la$init$ra$$$56$anon0:
    inline$java.lang.Object$$la$init$ra$$$56$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$56$Return;

  inline$java.lang.Object$$la$init$ra$$$56$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$56$$exception := inline$java.lang.Object$$la$init$ra$$$56$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$56$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$56$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$56$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$56$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$56$Return:
    inline$java.math.BigInteger$shiftLeft$int$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$56$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$13$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$13$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$return := inline$java.math.BigInteger$shiftLeft$int$13$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$13$block5;

  inline$java.math.BigInteger$shiftLeft$int$13$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$13$Return;

  inline$java.math.BigInteger$shiftLeft$int$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19 := inline$java.math.BigInteger$shiftLeft$int$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$13$r1, inline$java.math.BigInteger$add$java.math.BigInteger$13$r0, inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$13$$return, inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$57$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$57$$this := inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$57$r0, inline$java.math.BigInteger$$la$init$ra$$long$57$l0, inline$java.math.BigInteger$$la$init$ra$$long$57$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$57$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$57$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$57$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$57$r0 := inline$java.math.BigInteger$$la$init$ra$$long$57$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$57$l0 := inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$57$Entry;

  inline$java.lang.Object$$la$init$ra$$$57$Entry:
    inline$java.lang.Object$$la$init$ra$$$57$$this := inline$java.math.BigInteger$$la$init$ra$$long$57$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$57$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$57$anon0;

  inline$java.lang.Object$$la$init$ra$$$57$anon0:
    inline$java.lang.Object$$la$init$ra$$$57$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$57$Return;

  inline$java.lang.Object$$la$init$ra$$$57$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$57$$exception := inline$java.lang.Object$$la$init$ra$$$57$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$57$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$57$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$57$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$57$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$57$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$57$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$return := inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return:
    r8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto anon36$2;

  anon36$2:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Then:
    assume {:partition} r8 != unsafe.$null;
    $exception := $exception;
    goto anon39;

  anon67_Else:
    assume {:partition} r8 == unsafe.$null;
    call $fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_8;
    return;

  anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this := r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0 := r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$58$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$58$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$58$r0, inline$java.math.BigInteger$$la$init$ra$$long$58$l0, inline$java.math.BigInteger$$la$init$ra$$long$58$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$58$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$58$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$58$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$58$r0 := inline$java.math.BigInteger$$la$init$ra$$long$58$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$58$l0 := inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$58$Entry;

  inline$java.lang.Object$$la$init$ra$$$58$Entry:
    inline$java.lang.Object$$la$init$ra$$$58$$this := inline$java.math.BigInteger$$la$init$ra$$long$58$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$58$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$58$anon0;

  inline$java.lang.Object$$la$init$ra$$$58$anon0:
    inline$java.lang.Object$$la$init$ra$$$58$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$58$Return;

  inline$java.lang.Object$$la$init$ra$$$58$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$58$$exception := inline$java.lang.Object$$la$init$ra$$$58$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$58$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$58$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$58$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$58$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$58$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$58$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return:
    $r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    goto anon39$1;

  anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Then:
    assume {:partition} $r15 != unsafe.$null;
    $exception := $exception;
    goto anon42;

  anon68_Else:
    assume {:partition} $r15 == unsafe.$null;
    call $fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_9;
    return;

  anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this := $r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0 := r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$59$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$59$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$59$r0, inline$java.math.BigInteger$$la$init$ra$$long$59$l0, inline$java.math.BigInteger$$la$init$ra$$long$59$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$59$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$59$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$59$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$59$r0 := inline$java.math.BigInteger$$la$init$ra$$long$59$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$59$l0 := inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$59$Entry;

  inline$java.lang.Object$$la$init$ra$$$59$Entry:
    inline$java.lang.Object$$la$init$ra$$$59$$this := inline$java.math.BigInteger$$la$init$ra$$long$59$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$59$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$59$anon0;

  inline$java.lang.Object$$la$init$ra$$$59$anon0:
    inline$java.lang.Object$$la$init$ra$$$59$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$59$Return;

  inline$java.lang.Object$$la$init$ra$$$59$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$59$$exception := inline$java.lang.Object$$la$init$ra$$$59$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$59$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$59$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$59$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$59$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$59$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$59$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return:
    $r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    goto anon42$1;

  anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Then:
    assume {:partition} $r16 != unsafe.$null;
    $exception := $exception;
    goto anon45;

  anon69_Else:
    assume {:partition} $r16 == unsafe.$null;
    call $fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_10;
    return;

  anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$14$Entry;

  inline$java.math.BigInteger$shiftLeft$int$14$Entry:
    inline$java.math.BigInteger$shiftLeft$int$14$$this := $r16;
    inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0 := i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$14$$l2, inline$java.math.BigInteger$shiftLeft$int$14$$l1, inline$java.math.BigInteger$shiftLeft$int$14$r0, inline$java.math.BigInteger$shiftLeft$int$14$i0, inline$java.math.BigInteger$shiftLeft$int$14$$r1, inline$java.math.BigInteger$shiftLeft$int$14$$return, inline$java.math.BigInteger$shiftLeft$int$14$$exception;
    inline$java.math.BigInteger$shiftLeft$int$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$14$anon0;

  inline$java.math.BigInteger$shiftLeft$int$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$r0 := inline$java.math.BigInteger$shiftLeft$int$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$i0 := inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$14$$r1 := inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$14$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$14$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$60$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$60$$this := inline$java.math.BigInteger$shiftLeft$int$14$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$60$r0, inline$java.math.BigInteger$$la$init$ra$$long$60$l0, inline$java.math.BigInteger$$la$init$ra$$long$60$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$60$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$60$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$60$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$60$r0 := inline$java.math.BigInteger$$la$init$ra$$long$60$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$60$l0 := inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$60$Entry;

  inline$java.lang.Object$$la$init$ra$$$60$Entry:
    inline$java.lang.Object$$la$init$ra$$$60$$this := inline$java.math.BigInteger$$la$init$ra$$long$60$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$60$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$60$anon0;

  inline$java.lang.Object$$la$init$ra$$$60$anon0:
    inline$java.lang.Object$$la$init$ra$$$60$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$60$Return;

  inline$java.lang.Object$$la$init$ra$$$60$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$60$$exception := inline$java.lang.Object$$la$init$ra$$$60$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$60$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$60$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$60$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$60$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$60$Return:
    inline$java.math.BigInteger$shiftLeft$int$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$60$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$14$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$14$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$return := inline$java.math.BigInteger$shiftLeft$int$14$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$14$block5;

  inline$java.math.BigInteger$shiftLeft$int$14$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$14$Return;

  inline$java.math.BigInteger$shiftLeft$int$14$Return:
    $r17 := inline$java.math.BigInteger$shiftLeft$int$14$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$14$$exception;
    goto anon45$1;

  anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Then:
    assume {:partition} r6 != unsafe.$null;
    $exception := $exception;
    goto anon48;

  anon70_Else:
    assume {:partition} r6 == unsafe.$null;
    call $fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_11;
    return;

  anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$this := r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0 := $r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$14$r1, inline$java.math.BigInteger$add$java.math.BigInteger$14$r0, inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$14$$return, inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$61$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$61$$this := inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$61$r0, inline$java.math.BigInteger$$la$init$ra$$long$61$l0, inline$java.math.BigInteger$$la$init$ra$$long$61$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$61$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$61$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$61$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$61$r0 := inline$java.math.BigInteger$$la$init$ra$$long$61$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$61$l0 := inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$61$Entry;

  inline$java.lang.Object$$la$init$ra$$$61$Entry:
    inline$java.lang.Object$$la$init$ra$$$61$$this := inline$java.math.BigInteger$$la$init$ra$$long$61$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$61$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$61$anon0;

  inline$java.lang.Object$$la$init$ra$$$61$anon0:
    inline$java.lang.Object$$la$init$ra$$$61$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$61$Return;

  inline$java.lang.Object$$la$init$ra$$$61$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$61$$exception := inline$java.lang.Object$$la$init$ra$$$61$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$61$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$61$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$61$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$61$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$61$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$61$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$return := inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$Return:
    $r18 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    goto anon48$1;

  anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    $i6 := unsafe.$mulInt(2, i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Then:
    assume {:partition} r7 != unsafe.$null;
    $exception := $exception;
    goto anon51;

  anon71_Else:
    assume {:partition} r7 == unsafe.$null;
    call $fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_12;
    return;

  anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$15$Entry;

  inline$java.math.BigInteger$shiftLeft$int$15$Entry:
    inline$java.math.BigInteger$shiftLeft$int$15$$this := r7;
    inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0 := $i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$15$$l2, inline$java.math.BigInteger$shiftLeft$int$15$$l1, inline$java.math.BigInteger$shiftLeft$int$15$r0, inline$java.math.BigInteger$shiftLeft$int$15$i0, inline$java.math.BigInteger$shiftLeft$int$15$$r1, inline$java.math.BigInteger$shiftLeft$int$15$$return, inline$java.math.BigInteger$shiftLeft$int$15$$exception;
    inline$java.math.BigInteger$shiftLeft$int$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$15$anon0;

  inline$java.math.BigInteger$shiftLeft$int$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$r0 := inline$java.math.BigInteger$shiftLeft$int$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$i0 := inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$15$$r1 := inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$15$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$15$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$62$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$62$$this := inline$java.math.BigInteger$shiftLeft$int$15$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$62$r0, inline$java.math.BigInteger$$la$init$ra$$long$62$l0, inline$java.math.BigInteger$$la$init$ra$$long$62$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$62$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$62$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$62$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$62$r0 := inline$java.math.BigInteger$$la$init$ra$$long$62$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$62$l0 := inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$62$Entry;

  inline$java.lang.Object$$la$init$ra$$$62$Entry:
    inline$java.lang.Object$$la$init$ra$$$62$$this := inline$java.math.BigInteger$$la$init$ra$$long$62$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$62$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$62$anon0;

  inline$java.lang.Object$$la$init$ra$$$62$anon0:
    inline$java.lang.Object$$la$init$ra$$$62$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$62$Return;

  inline$java.lang.Object$$la$init$ra$$$62$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$62$$exception := inline$java.lang.Object$$la$init$ra$$$62$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$62$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$62$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$62$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$62$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$62$Return:
    inline$java.math.BigInteger$shiftLeft$int$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$62$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$15$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$15$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$return := inline$java.math.BigInteger$shiftLeft$int$15$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$15$block5;

  inline$java.math.BigInteger$shiftLeft$int$15$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$15$Return;

  inline$java.math.BigInteger$shiftLeft$int$15$Return:
    $r19 := inline$java.math.BigInteger$shiftLeft$int$15$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$15$$exception;
    goto anon51$1;

  anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Then:
    assume {:partition} $r18 != unsafe.$null;
    $exception := $exception;
    goto anon54;

  anon72_Else:
    assume {:partition} $r18 == unsafe.$null;
    call $fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_13;
    return;

  anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$this := $r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0 := $r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$15$r1, inline$java.math.BigInteger$add$java.math.BigInteger$15$r0, inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$15$$return, inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$63$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$63$$this := inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$63$r0, inline$java.math.BigInteger$$la$init$ra$$long$63$l0, inline$java.math.BigInteger$$la$init$ra$$long$63$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$63$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$63$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$63$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$63$r0 := inline$java.math.BigInteger$$la$init$ra$$long$63$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$63$l0 := inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$63$Entry;

  inline$java.lang.Object$$la$init$ra$$$63$Entry:
    inline$java.lang.Object$$la$init$ra$$$63$$this := inline$java.math.BigInteger$$la$init$ra$$long$63$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$63$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$63$anon0;

  inline$java.lang.Object$$la$init$ra$$$63$anon0:
    inline$java.lang.Object$$la$init$ra$$$63$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$63$Return;

  inline$java.lang.Object$$la$init$ra$$$63$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$63$$exception := inline$java.lang.Object$$la$init$ra$$$63$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$63$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$63$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$63$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$63$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$63$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$63$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$return := inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$Return:
    r21 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    goto anon54$1;

  anon54$1:
    goto block46;

  block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    $return := r21;
    goto block48;

  block48:
    return;
}



implementation unsafe.ModPow1$fastMultiply_inline$java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref)
{
  var $fakelocal_14: ref;
  var r20: ref;
  var $fakelocal_3: ref;
  var $i5: int;
  var $i7: int;
  var $r16: ref;
  var $r9: ref;
  var $r13: ref;
  var r22: ref;
  var $r8: ref;
  var $i3: int;
  var $fakelocal_7: ref;
  var $i2: int;
  var r7: ref;
  var r3: ref;
  var $fakelocal_12: ref;
  var $fakelocal_9: ref;
  var $i4: int;
  var i0: int;
  var $r12: ref;
  var $fakelocal_4: ref;
  var r6: ref;
  var $fakelocal_6: ref;
  var $r19: ref;
  var r5: ref;
  var $fakelocal_13: ref;
  var $r11: ref;
  var $r14: ref;
  var r0: ref;
  var r4: ref;
  var $fakelocal_0: ref;
  var i9: int;
  var $fakelocal_2: ref;
  var $z1: int;
  var $fakelocal_5: ref;
  var i10: int;
  var $fakelocal_8: ref;
  var $r10: ref;
  var i1: int;
  var i8: int;
  var $fakelocal_1: ref;
  var $fakelocal_11: ref;
  var $z2: int;
  var r1: ref;
  var $fakelocal_10: ref;
  var $r15: ref;
  var r2: ref;
  var $r18: ref;
  var $r17: ref;
  var $z0: int;
  var $i6: int;
  var r21: ref;
  var inline$java.math.BigInteger$bitLength$$0$$b1: int;
  var inline$java.math.BigInteger$bitLength$$0$$b3: int;
  var inline$java.math.BigInteger$bitLength$$0$i8: int;
  var inline$java.math.BigInteger$bitLength$$0$l7: int;
  var inline$java.math.BigInteger$bitLength$$0$$l4: int;
  var inline$java.math.BigInteger$bitLength$$0$$b5: int;
  var inline$java.math.BigInteger$bitLength$$0$$l0: int;
  var inline$java.math.BigInteger$bitLength$$0$$l2: int;
  var inline$java.math.BigInteger$bitLength$$0$r0: ref;
  var inline$java.math.BigInteger$bitLength$$0$$l6: int;
  var inline$java.math.BigInteger$bitLength$$0$$this: ref;
  var inline$java.math.BigInteger$bitLength$$0$$return: int;
  var inline$java.math.BigInteger$bitLength$$0$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$1$$b1: int;
  var inline$java.math.BigInteger$bitLength$$1$$b3: int;
  var inline$java.math.BigInteger$bitLength$$1$i8: int;
  var inline$java.math.BigInteger$bitLength$$1$l7: int;
  var inline$java.math.BigInteger$bitLength$$1$$l4: int;
  var inline$java.math.BigInteger$bitLength$$1$$b5: int;
  var inline$java.math.BigInteger$bitLength$$1$$l0: int;
  var inline$java.math.BigInteger$bitLength$$1$$l2: int;
  var inline$java.math.BigInteger$bitLength$$1$r0: ref;
  var inline$java.math.BigInteger$bitLength$$1$$l6: int;
  var inline$java.math.BigInteger$bitLength$$1$$this: ref;
  var inline$java.math.BigInteger$bitLength$$1$$return: int;
  var inline$java.math.BigInteger$bitLength$$1$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$0$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$1$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$2$$b1: int;
  var inline$java.math.BigInteger$bitLength$$2$$b3: int;
  var inline$java.math.BigInteger$bitLength$$2$i8: int;
  var inline$java.math.BigInteger$bitLength$$2$l7: int;
  var inline$java.math.BigInteger$bitLength$$2$$l4: int;
  var inline$java.math.BigInteger$bitLength$$2$$b5: int;
  var inline$java.math.BigInteger$bitLength$$2$$l0: int;
  var inline$java.math.BigInteger$bitLength$$2$$l2: int;
  var inline$java.math.BigInteger$bitLength$$2$r0: ref;
  var inline$java.math.BigInteger$bitLength$$2$$l6: int;
  var inline$java.math.BigInteger$bitLength$$2$$this: ref;
  var inline$java.math.BigInteger$bitLength$$2$$return: int;
  var inline$java.math.BigInteger$bitLength$$2$$exception: ref;
  var inline$java.math.BigInteger$testBit$int$0$r0: ref;
  var inline$java.math.BigInteger$testBit$int$0$$z0: int;
  var inline$java.math.BigInteger$testBit$int$0$i0: int;
  var inline$java.math.BigInteger$testBit$int$0$$b5: int;
  var inline$java.math.BigInteger$testBit$int$0$$l2: int;
  var inline$java.math.BigInteger$testBit$int$0$$l3: int;
  var inline$java.math.BigInteger$testBit$int$0$$i1: int;
  var inline$java.math.BigInteger$testBit$int$0$$l4: int;
  var inline$java.math.BigInteger$testBit$int$0$$this: ref;
  var inline$java.math.BigInteger$testBit$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$testBit$int$0$$return: int;
  var inline$java.math.BigInteger$testBit$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$2$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$2$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$2$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$0$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$3$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$3$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$3$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$1$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$4$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$4$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$4$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$5$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$5$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$5$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$1$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$1$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$6$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$6$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$6$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$2$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$7$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$7$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$7$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$8$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$8$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$8$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$3$$b1: int;
  var inline$java.math.BigInteger$bitLength$$3$$b3: int;
  var inline$java.math.BigInteger$bitLength$$3$i8: int;
  var inline$java.math.BigInteger$bitLength$$3$l7: int;
  var inline$java.math.BigInteger$bitLength$$3$$l4: int;
  var inline$java.math.BigInteger$bitLength$$3$$b5: int;
  var inline$java.math.BigInteger$bitLength$$3$$l0: int;
  var inline$java.math.BigInteger$bitLength$$3$$l2: int;
  var inline$java.math.BigInteger$bitLength$$3$r0: ref;
  var inline$java.math.BigInteger$bitLength$$3$$l6: int;
  var inline$java.math.BigInteger$bitLength$$3$$this: ref;
  var inline$java.math.BigInteger$bitLength$$3$$return: int;
  var inline$java.math.BigInteger$bitLength$$3$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$4$$b1: int;
  var inline$java.math.BigInteger$bitLength$$4$$b3: int;
  var inline$java.math.BigInteger$bitLength$$4$i8: int;
  var inline$java.math.BigInteger$bitLength$$4$l7: int;
  var inline$java.math.BigInteger$bitLength$$4$$l4: int;
  var inline$java.math.BigInteger$bitLength$$4$$b5: int;
  var inline$java.math.BigInteger$bitLength$$4$$l0: int;
  var inline$java.math.BigInteger$bitLength$$4$$l2: int;
  var inline$java.math.BigInteger$bitLength$$4$r0: ref;
  var inline$java.math.BigInteger$bitLength$$4$$l6: int;
  var inline$java.math.BigInteger$bitLength$$4$$this: ref;
  var inline$java.math.BigInteger$bitLength$$4$$return: int;
  var inline$java.math.BigInteger$bitLength$$4$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$2$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$3$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$9$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$9$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$9$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$10$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$10$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$10$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$2$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$2$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$11$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$11$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$11$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$3$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$12$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$12$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$12$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$13$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$13$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$13$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$3$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$3$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$14$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$14$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$14$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$4$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$15$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$15$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$15$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$16$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$16$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$16$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$17$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$17$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$17$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$18$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$18$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$18$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$19$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$19$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$19$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$20$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$20$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$20$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$5$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$21$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$21$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$21$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$22$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$22$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$22$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$6$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$23$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$23$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$23$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$24$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$24$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$24$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$5$$b1: int;
  var inline$java.math.BigInteger$bitLength$$5$$b3: int;
  var inline$java.math.BigInteger$bitLength$$5$i8: int;
  var inline$java.math.BigInteger$bitLength$$5$l7: int;
  var inline$java.math.BigInteger$bitLength$$5$$l4: int;
  var inline$java.math.BigInteger$bitLength$$5$$b5: int;
  var inline$java.math.BigInteger$bitLength$$5$$l0: int;
  var inline$java.math.BigInteger$bitLength$$5$$l2: int;
  var inline$java.math.BigInteger$bitLength$$5$r0: ref;
  var inline$java.math.BigInteger$bitLength$$5$$l6: int;
  var inline$java.math.BigInteger$bitLength$$5$$this: ref;
  var inline$java.math.BigInteger$bitLength$$5$$return: int;
  var inline$java.math.BigInteger$bitLength$$5$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$6$$b1: int;
  var inline$java.math.BigInteger$bitLength$$6$$b3: int;
  var inline$java.math.BigInteger$bitLength$$6$i8: int;
  var inline$java.math.BigInteger$bitLength$$6$l7: int;
  var inline$java.math.BigInteger$bitLength$$6$$l4: int;
  var inline$java.math.BigInteger$bitLength$$6$$b5: int;
  var inline$java.math.BigInteger$bitLength$$6$$l0: int;
  var inline$java.math.BigInteger$bitLength$$6$$l2: int;
  var inline$java.math.BigInteger$bitLength$$6$r0: ref;
  var inline$java.math.BigInteger$bitLength$$6$$l6: int;
  var inline$java.math.BigInteger$bitLength$$6$$this: ref;
  var inline$java.math.BigInteger$bitLength$$6$$return: int;
  var inline$java.math.BigInteger$bitLength$$6$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$4$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$5$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$25$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$25$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$25$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$26$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$26$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$26$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$4$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$4$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$4$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$27$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$27$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$27$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$7$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$28$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$28$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$28$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$29$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$29$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$29$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$5$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$5$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$30$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$30$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$30$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$8$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$31$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$31$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$31$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$32$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$32$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$32$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$33$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$33$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$33$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$34$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$34$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$34$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$35$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$35$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$35$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$36$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$36$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$36$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$9$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$37$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$37$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$37$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$38$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$38$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$38$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$10$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$39$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$39$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$39$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$8$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$40$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$40$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$40$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$9$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$41$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$41$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$41$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$42$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$42$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$42$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception: ref;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$objIndex: int;
  var inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$heap: $heap_type;
  var inline$java.math.BigInteger$bitLength$$7$$b1: int;
  var inline$java.math.BigInteger$bitLength$$7$$b3: int;
  var inline$java.math.BigInteger$bitLength$$7$i8: int;
  var inline$java.math.BigInteger$bitLength$$7$l7: int;
  var inline$java.math.BigInteger$bitLength$$7$$l4: int;
  var inline$java.math.BigInteger$bitLength$$7$$b5: int;
  var inline$java.math.BigInteger$bitLength$$7$$l0: int;
  var inline$java.math.BigInteger$bitLength$$7$$l2: int;
  var inline$java.math.BigInteger$bitLength$$7$r0: ref;
  var inline$java.math.BigInteger$bitLength$$7$$l6: int;
  var inline$java.math.BigInteger$bitLength$$7$$this: ref;
  var inline$java.math.BigInteger$bitLength$$7$$return: int;
  var inline$java.math.BigInteger$bitLength$$7$$exception: ref;
  var inline$java.math.BigInteger$bitLength$$8$$b1: int;
  var inline$java.math.BigInteger$bitLength$$8$$b3: int;
  var inline$java.math.BigInteger$bitLength$$8$i8: int;
  var inline$java.math.BigInteger$bitLength$$8$l7: int;
  var inline$java.math.BigInteger$bitLength$$8$$l4: int;
  var inline$java.math.BigInteger$bitLength$$8$$b5: int;
  var inline$java.math.BigInteger$bitLength$$8$$l0: int;
  var inline$java.math.BigInteger$bitLength$$8$$l2: int;
  var inline$java.math.BigInteger$bitLength$$8$r0: ref;
  var inline$java.math.BigInteger$bitLength$$8$$l6: int;
  var inline$java.math.BigInteger$bitLength$$8$$this: ref;
  var inline$java.math.BigInteger$bitLength$$8$$return: int;
  var inline$java.math.BigInteger$bitLength$$8$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$6$$heap: $heap_type;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$r3: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$l0: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$r4: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$b2: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r2: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$l1: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r1: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$r0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$this: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$return: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$exception: ref;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$objIndex: int;
  var inline$java.math.BigInteger$equals$java.lang.Object$7$$heap: $heap_type;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$43$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$43$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$43$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception: ref;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$objIndex: int;
  var inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$44$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$44$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$44$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$6$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$6$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$6$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$45$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$45$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$45$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$11$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$46$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$46$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$46$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$47$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$47$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$47$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$r0: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$l2: int;
  var inline$java.math.BigInteger$shiftRight$int$7$i0: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$r1: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$l1: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$this: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$return: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$exception: ref;
  var inline$java.math.BigInteger$shiftRight$int$7$$objIndex: int;
  var inline$java.math.BigInteger$shiftRight$int$7$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$48$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$48$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$48$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$12$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$49$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$49$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$49$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$50$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$50$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$50$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$11$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$51$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$51$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$51$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$52$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$52$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$52$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$53$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$53$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$53$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$54$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$54$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$54$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$13$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$55$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$55$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$55$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$13$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$56$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$56$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$56$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$14$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$57$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$57$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$57$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$58$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$58$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$58$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$59$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$59$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$59$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception: ref;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$objIndex: int;
  var inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$60$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$60$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$60$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$15$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$61$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$61$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$61$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$15$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$62$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$62$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$62$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$16$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$16$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$63$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$63$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$63$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$16$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$64$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$64$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$64$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ModPow1.java", 129, -1, -1, -1} true;
    goto anon64_Then, anon64_Else;

  anon64_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon64_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    goto inline$java.math.BigInteger$bitLength$$0$Entry;

  inline$java.math.BigInteger$bitLength$$0$Entry:
    inline$java.math.BigInteger$bitLength$$0$$this := r0;
    havoc inline$java.math.BigInteger$bitLength$$0$$b1, inline$java.math.BigInteger$bitLength$$0$$b3, inline$java.math.BigInteger$bitLength$$0$i8, inline$java.math.BigInteger$bitLength$$0$l7, inline$java.math.BigInteger$bitLength$$0$$l4, inline$java.math.BigInteger$bitLength$$0$$b5, inline$java.math.BigInteger$bitLength$$0$$l0, inline$java.math.BigInteger$bitLength$$0$$l2, inline$java.math.BigInteger$bitLength$$0$r0, inline$java.math.BigInteger$bitLength$$0$$l6, inline$java.math.BigInteger$bitLength$$0$$return, inline$java.math.BigInteger$bitLength$$0$$exception;
    goto inline$java.math.BigInteger$bitLength$$0$anon0;

  inline$java.math.BigInteger$bitLength$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$0$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$r0 := inline$java.math.BigInteger$bitLength$$0$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon10_Then, inline$java.math.BigInteger$bitLength$$0$anon10_Else;

  inline$java.math.BigInteger$bitLength$$0$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block11;

  inline$java.math.BigInteger$bitLength$$0$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon3;

  inline$java.math.BigInteger$bitLength$$0$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon11_Then, inline$java.math.BigInteger$bitLength$$0$anon11_Else;

  inline$java.math.BigInteger$bitLength$$0$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block12;

  inline$java.math.BigInteger$bitLength$$0$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon6;

  inline$java.math.BigInteger$bitLength$$0$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := -inline$java.math.BigInteger$bitLength$$0$$l4;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := inline$java.math.BigInteger$bitLength$$0$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon12_Then, inline$java.math.BigInteger$bitLength$$0$anon12_Else;

  inline$java.math.BigInteger$bitLength$$0$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block15;

  inline$java.math.BigInteger$bitLength$$0$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon9;

  inline$java.math.BigInteger$bitLength$$0$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := inline$java.math.BigInteger$bitLength$$0$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$0$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := inline$java.math.BigInteger$bitLength$$0$i8;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block16:
    goto inline$java.math.BigInteger$bitLength$$0$Return;

  inline$java.math.BigInteger$bitLength$$0$Return:
    i0 := inline$java.math.BigInteger$bitLength$$0$$return;
    $exception := inline$java.math.BigInteger$bitLength$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "ModPow1.java", 130, -1, -1, -1} true;
    goto anon65_Then, anon65_Else;

  anon65_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon6;

  anon65_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon6:
    goto inline$java.math.BigInteger$bitLength$$1$Entry;

  inline$java.math.BigInteger$bitLength$$1$Entry:
    inline$java.math.BigInteger$bitLength$$1$$this := r1;
    havoc inline$java.math.BigInteger$bitLength$$1$$b1, inline$java.math.BigInteger$bitLength$$1$$b3, inline$java.math.BigInteger$bitLength$$1$i8, inline$java.math.BigInteger$bitLength$$1$l7, inline$java.math.BigInteger$bitLength$$1$$l4, inline$java.math.BigInteger$bitLength$$1$$b5, inline$java.math.BigInteger$bitLength$$1$$l0, inline$java.math.BigInteger$bitLength$$1$$l2, inline$java.math.BigInteger$bitLength$$1$r0, inline$java.math.BigInteger$bitLength$$1$$l6, inline$java.math.BigInteger$bitLength$$1$$return, inline$java.math.BigInteger$bitLength$$1$$exception;
    goto inline$java.math.BigInteger$bitLength$$1$anon0;

  inline$java.math.BigInteger$bitLength$$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$1$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$r0 := inline$java.math.BigInteger$bitLength$$1$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon10_Then, inline$java.math.BigInteger$bitLength$$1$anon10_Else;

  inline$java.math.BigInteger$bitLength$$1$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block11;

  inline$java.math.BigInteger$bitLength$$1$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon3;

  inline$java.math.BigInteger$bitLength$$1$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$1$block16;

  inline$java.math.BigInteger$bitLength$$1$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon11_Then, inline$java.math.BigInteger$bitLength$$1$anon11_Else;

  inline$java.math.BigInteger$bitLength$$1$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block12;

  inline$java.math.BigInteger$bitLength$$1$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$1$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon6;

  inline$java.math.BigInteger$bitLength$$1$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$block13;

  inline$java.math.BigInteger$bitLength$$1$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$l6 := -inline$java.math.BigInteger$bitLength$$1$$l4;
    goto inline$java.math.BigInteger$bitLength$$1$block13;

  inline$java.math.BigInteger$bitLength$$1$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$l7 := inline$java.math.BigInteger$bitLength$$1$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$1$block14;

  inline$java.math.BigInteger$bitLength$$1$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$1$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon12_Then, inline$java.math.BigInteger$bitLength$$1$anon12_Else;

  inline$java.math.BigInteger$bitLength$$1$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$1$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$block15;

  inline$java.math.BigInteger$bitLength$$1$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$1$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$1$anon9;

  inline$java.math.BigInteger$bitLength$$1$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$i8 := inline$java.math.BigInteger$bitLength$$1$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$1$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$1$block14;

  inline$java.math.BigInteger$bitLength$$1$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$1$$return := inline$java.math.BigInteger$bitLength$$1$i8;
    goto inline$java.math.BigInteger$bitLength$$1$block16;

  inline$java.math.BigInteger$bitLength$$1$block16:
    goto inline$java.math.BigInteger$bitLength$$1$Return;

  inline$java.math.BigInteger$bitLength$$1$Return:
    i1 := inline$java.math.BigInteger$bitLength$$1$$return;
    $exception := inline$java.math.BigInteger$bitLength$$1$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "ModPow1.java", 131, -1, -1, -1} true;
    $r8 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 131, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$0$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$0$$this := r0;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0 := $r8;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$0$$r3, inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$0$$l0, inline$java.math.BigInteger$equals$java.lang.Object$0$$r4, inline$java.math.BigInteger$equals$java.lang.Object$0$$b2, inline$java.math.BigInteger$equals$java.lang.Object$0$r2, inline$java.math.BigInteger$equals$java.lang.Object$0$$l1, inline$java.math.BigInteger$equals$java.lang.Object$0$r1, inline$java.math.BigInteger$equals$java.lang.Object$0$r0, inline$java.math.BigInteger$equals$java.lang.Object$0$$return, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$r0 := inline$java.math.BigInteger$equals$java.lang.Object$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$r1 := inline$java.math.BigInteger$equals$java.lang.Object$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$r3, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$0$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$r4, inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$0$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$0$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$0$r2 := inline$java.math.BigInteger$equals$java.lang.Object$0$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$0$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$0$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$0$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$0$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$0$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$0$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$0$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$0$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$0$Return:
    $z0 := inline$java.math.BigInteger$equals$java.lang.Object$0$$return;
    $exception := inline$java.math.BigInteger$equals$java.lang.Object$0$$exception;
    goto anon6$2;

  anon6$2:
    assert {:sourceloc "ModPow1.java", 131, -1, -1, -1} true;
    goto anon66_Then, anon66_Else;

  anon66_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "ModPow1.java", 131, -1, -1, -1} {:comment "thenblock"} true;
    goto block49;

  anon66_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "ModPow1.java", 131, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "ModPow1.java", 132, -1, -1, -1} true;
    $return := r1;
    goto block57;

  block49:
    assert {:sourceloc "ModPow1.java", 134, -1, -1, -1} true;
    $r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 134, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$1$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$1$$this := r1;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0 := $r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$1$$r3, inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$1$$l0, inline$java.math.BigInteger$equals$java.lang.Object$1$$r4, inline$java.math.BigInteger$equals$java.lang.Object$1$$b2, inline$java.math.BigInteger$equals$java.lang.Object$1$r2, inline$java.math.BigInteger$equals$java.lang.Object$1$$l1, inline$java.math.BigInteger$equals$java.lang.Object$1$r1, inline$java.math.BigInteger$equals$java.lang.Object$1$r0, inline$java.math.BigInteger$equals$java.lang.Object$1$$return, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$r0 := inline$java.math.BigInteger$equals$java.lang.Object$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$r1 := inline$java.math.BigInteger$equals$java.lang.Object$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$r3, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$1$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$r4, inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$1$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$1$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$1$r2 := inline$java.math.BigInteger$equals$java.lang.Object$1$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$1$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$1$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$1$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$1$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$1$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$1$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$1$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$1$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$1$Return:
    $z1 := inline$java.math.BigInteger$equals$java.lang.Object$1$$return;
    $exception := inline$java.math.BigInteger$equals$java.lang.Object$1$$exception;
    goto block49$1;

  block49$1:
    assert {:sourceloc "ModPow1.java", 134, -1, -1, -1} true;
    goto anon67_Then, anon67_Else;

  anon67_Then:
    assume {:partition} $z1 == 0;
    assert {:sourceloc "ModPow1.java", 134, -1, -1, -1} {:comment "thenblock"} true;
    goto block50;

  anon67_Else:
    assume {:partition} $z1 != 0;
    assert {:sourceloc "ModPow1.java", 134, -1, -1, -1} {:comment "elseblock"} true;
    goto anon12;

  anon12:
    assert {:sourceloc "ModPow1.java", 135, -1, -1, -1} true;
    $return := r0;
    goto block57;

  block50:
    assert {:sourceloc "ModPow1.java", 137, -1, -1, -1} true;
    r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 138, -1, -1, -1} true;
    call i8, $exception := unsafe.java.lang.Math$max$int_int(i0, i1);
    assert {:sourceloc "ModPow1.java", 139, -1, -1, -1} true;
    goto anon68_Then, anon68_Else;

  anon68_Then:
    assume {:partition} i8 > 800;
    assert {:sourceloc "ModPow1.java", 139, -1, -1, -1} {:comment "thenblock"} true;
    goto block51;

  anon68_Else:
    assume {:partition} 800 >= i8;
    assert {:sourceloc "ModPow1.java", 139, -1, -1, -1} {:comment "elseblock"} true;
    goto anon15;

  anon15:
    assert {:sourceloc "ModPow1.java", 140, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this := r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0 := r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$0$Return:
    r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$0$$exception;
    goto anon15$1;

  anon15$1:
    assert {:sourceloc "ModPow1.java", 140, -1, -1, -1} true;
    goto block52;

  block51:
    assert {:sourceloc "ModPow1.java", 141, -1, -1, -1} true;
    $i2 := i0 - i1;
    assert {:sourceloc "ModPow1.java", 141, -1, -1, -1} true;
    call $i3, $exception := unsafe.java.lang.Math$abs$int($i2);
    assert {:sourceloc "ModPow1.java", 141, -1, -1, -1} true;
    goto anon69_Then, anon69_Else;

  anon69_Then:
    assume {:partition} $i3 < 32;
    assert {:sourceloc "ModPow1.java", 141, -1, -1, -1} {:comment "thenblock"} true;
    goto block53;

  anon69_Else:
    assume {:partition} 32 <= $i3;
    assert {:sourceloc "ModPow1.java", 141, -1, -1, -1} {:comment "elseblock"} true;
    goto anon18;

  anon18:
    assert {:sourceloc "ModPow1.java", 142, -1, -1, -1} true;
    r21 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} true;
    i9 := 0;
    goto block54;

  block54:
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$Entry;

  inline$java.math.BigInteger$bitLength$$2$Entry:
    inline$java.math.BigInteger$bitLength$$2$$this := r1;
    havoc inline$java.math.BigInteger$bitLength$$2$$b1, inline$java.math.BigInteger$bitLength$$2$$b3, inline$java.math.BigInteger$bitLength$$2$i8, inline$java.math.BigInteger$bitLength$$2$l7, inline$java.math.BigInteger$bitLength$$2$$l4, inline$java.math.BigInteger$bitLength$$2$$b5, inline$java.math.BigInteger$bitLength$$2$$l0, inline$java.math.BigInteger$bitLength$$2$$l2, inline$java.math.BigInteger$bitLength$$2$r0, inline$java.math.BigInteger$bitLength$$2$$l6, inline$java.math.BigInteger$bitLength$$2$$return, inline$java.math.BigInteger$bitLength$$2$$exception;
    goto inline$java.math.BigInteger$bitLength$$2$anon0;

  inline$java.math.BigInteger$bitLength$$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$2$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$r0 := inline$java.math.BigInteger$bitLength$$2$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon10_Then, inline$java.math.BigInteger$bitLength$$2$anon10_Else;

  inline$java.math.BigInteger$bitLength$$2$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block11;

  inline$java.math.BigInteger$bitLength$$2$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon3;

  inline$java.math.BigInteger$bitLength$$2$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$2$block16;

  inline$java.math.BigInteger$bitLength$$2$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon11_Then, inline$java.math.BigInteger$bitLength$$2$anon11_Else;

  inline$java.math.BigInteger$bitLength$$2$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block12;

  inline$java.math.BigInteger$bitLength$$2$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$2$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon6;

  inline$java.math.BigInteger$bitLength$$2$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$block13;

  inline$java.math.BigInteger$bitLength$$2$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$l6 := -inline$java.math.BigInteger$bitLength$$2$$l4;
    goto inline$java.math.BigInteger$bitLength$$2$block13;

  inline$java.math.BigInteger$bitLength$$2$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$l7 := inline$java.math.BigInteger$bitLength$$2$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$2$block14;

  inline$java.math.BigInteger$bitLength$$2$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$2$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon12_Then, inline$java.math.BigInteger$bitLength$$2$anon12_Else;

  inline$java.math.BigInteger$bitLength$$2$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$2$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$block15;

  inline$java.math.BigInteger$bitLength$$2$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$2$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$2$anon9;

  inline$java.math.BigInteger$bitLength$$2$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$i8 := inline$java.math.BigInteger$bitLength$$2$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$2$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$2$block14;

  inline$java.math.BigInteger$bitLength$$2$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$2$$return := inline$java.math.BigInteger$bitLength$$2$i8;
    goto inline$java.math.BigInteger$bitLength$$2$block16;

  inline$java.math.BigInteger$bitLength$$2$block16:
    goto inline$java.math.BigInteger$bitLength$$2$Return;

  inline$java.math.BigInteger$bitLength$$2$Return:
    $i7 := inline$java.math.BigInteger$bitLength$$2$$return;
    $exception := inline$java.math.BigInteger$bitLength$$2$$exception;
    goto block54$1;

  block54$1:
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} true;
    goto anon70_Then, anon70_Else;

  anon70_Then:
    assume {:partition} i9 >= $i7;
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} {:comment "thenblock"} true;
    goto block55;

  anon70_Else:
    assume {:partition} $i7 > i9;
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} {:comment "elseblock"} true;
    goto anon21;

  anon21:
    assert {:sourceloc "ModPow1.java", 144, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$Entry;

  inline$java.math.BigInteger$testBit$int$0$Entry:
    inline$java.math.BigInteger$testBit$int$0$$this := r1;
    inline$java.math.BigInteger$testBit$int$0$$in_parameter__0 := i9;
    havoc inline$java.math.BigInteger$testBit$int$0$r0, inline$java.math.BigInteger$testBit$int$0$$z0, inline$java.math.BigInteger$testBit$int$0$i0, inline$java.math.BigInteger$testBit$int$0$$b5, inline$java.math.BigInteger$testBit$int$0$$l2, inline$java.math.BigInteger$testBit$int$0$$l3, inline$java.math.BigInteger$testBit$int$0$$i1, inline$java.math.BigInteger$testBit$int$0$$l4, inline$java.math.BigInteger$testBit$int$0$$return, inline$java.math.BigInteger$testBit$int$0$$exception;
    goto inline$java.math.BigInteger$testBit$int$0$anon0;

  inline$java.math.BigInteger$testBit$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$testBit$int$0$$this != unsafe.$null;
    inline$java.math.BigInteger$testBit$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$r0 := inline$java.math.BigInteger$testBit$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$i0 := inline$java.math.BigInteger$testBit$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l3 := unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$i1 := unsafe.$shlInt(1, inline$java.math.BigInteger$testBit$int$0$i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l2 := inline$java.math.BigInteger$testBit$int$0$$i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l4 := unsafe.$bitAnd(inline$java.math.BigInteger$testBit$int$0$$l3, 
  inline$java.math.BigInteger$testBit$int$0$$l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$testBit$int$0$$l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon4_Then, inline$java.math.BigInteger$testBit$int$0$anon4_Else;

  inline$java.math.BigInteger$testBit$int$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$block17;

  inline$java.math.BigInteger$testBit$int$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon3;

  inline$java.math.BigInteger$testBit$int$0$anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 0;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$return := inline$java.math.BigInteger$testBit$int$0$$z0;
    goto inline$java.math.BigInteger$testBit$int$0$block19;

  inline$java.math.BigInteger$testBit$int$0$block19:
    goto inline$java.math.BigInteger$testBit$int$0$Return;

  inline$java.math.BigInteger$testBit$int$0$Return:
    $z2 := inline$java.math.BigInteger$testBit$int$0$$return;
    $exception := inline$java.math.BigInteger$testBit$int$0$$exception;
    goto anon21$1;

  anon21$1:
    assert {:sourceloc "ModPow1.java", 144, -1, -1, -1} true;
    goto anon71_Then, anon71_Else;

  anon71_Then:
    assume {:partition} $z2 == 0;
    assert {:sourceloc "ModPow1.java", 144, -1, -1, -1} {:comment "thenblock"} true;
    goto block56;

  anon71_Else:
    assume {:partition} $z2 != 0;
    assert {:sourceloc "ModPow1.java", 144, -1, -1, -1} {:comment "elseblock"} true;
    goto anon24;

  anon24:
    assert {:sourceloc "ModPow1.java", 145, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftLeft$int$0$Entry;

  inline$java.math.BigInteger$shiftLeft$int$0$Entry:
    inline$java.math.BigInteger$shiftLeft$int$0$$this := r0;
    inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0 := i9;
    havoc inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$0$$l2, inline$java.math.BigInteger$shiftLeft$int$0$$l1, inline$java.math.BigInteger$shiftLeft$int$0$r0, inline$java.math.BigInteger$shiftLeft$int$0$i0, inline$java.math.BigInteger$shiftLeft$int$0$$r1, inline$java.math.BigInteger$shiftLeft$int$0$$return, inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    inline$java.math.BigInteger$shiftLeft$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$r0 := inline$java.math.BigInteger$shiftLeft$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$i0 := inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$0$$r1 := inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$0$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$0$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$return := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$0$block5;

  inline$java.math.BigInteger$shiftLeft$int$0$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Return;

  inline$java.math.BigInteger$shiftLeft$int$0$Return:
    $r19 := inline$java.math.BigInteger$shiftLeft$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    goto anon24$1;

  anon24$1:
    assert {:sourceloc "ModPow1.java", 145, -1, -1, -1} true;
    goto anon72_Then, anon72_Else;

  anon72_Then:
    assume {:partition} r21 != unsafe.$null;
    $exception := $exception;
    goto anon27;

  anon72_Else:
    assume {:partition} r21 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon27:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$this := r21;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0 := $r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$this := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$2$r0, inline$java.math.BigInteger$$la$init$ra$$long$2$l0, inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$2$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$r0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$2$l0 := inline$java.math.BigInteger$$la$init$ra$$long$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$2$Entry;

  inline$java.lang.Object$$la$init$ra$$$2$Entry:
    inline$java.lang.Object$$la$init$ra$$$2$$this := inline$java.math.BigInteger$$la$init$ra$$long$2$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$2$anon0;

  inline$java.lang.Object$$la$init$ra$$$2$anon0:
    inline$java.lang.Object$$la$init$ra$$$2$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$2$Return;

  inline$java.lang.Object$$la$init$ra$$$2$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$2$$exception := inline$java.lang.Object$$la$init$ra$$$2$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$2$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$2$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$2$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$2$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$2$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$2$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Return:
    r21 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto anon27$1;

  anon27$1:
    goto block56;

  block56:
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} true;
    i9 := i9 + 1;
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} true;
    goto block54;

  block55:
    assert {:sourceloc "ModPow1.java", 143, -1, -1, -1} true;
    goto block52;

  block53:
    assert {:sourceloc "ModPow1.java", 150, -1, -1, -1} true;
    goto anon73_Then, anon73_Else;

  anon73_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon30;

  anon73_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_3;
    return;

  anon30:
    $i5 := unsafe.$divInt(i8, 2);
    assert {:sourceloc "ModPow1.java", 150, -1, -1, -1} true;
    goto anon74_Then, anon74_Else;

  anon74_Then:
    assume {:partition} 2 != 0;
    $exception := $exception;
    goto anon33;

  anon74_Else:
    assume {:partition} 2 == 0;
    call $fakelocal_4 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    $return := unsafe.$null;
    $exception := $fakelocal_4;
    return;

  anon33:
    $i4 := unsafe.$modInt(i8, 2);
    assert {:sourceloc "ModPow1.java", 150, -1, -1, -1} true;
    i10 := $i5 + $i4;
    assert {:sourceloc "ModPow1.java", 152, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$0$Entry;

  inline$java.math.BigInteger$shiftRight$int$0$Entry:
    inline$java.math.BigInteger$shiftRight$int$0$$this := r0;
    inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0 := i10;
    havoc inline$java.math.BigInteger$shiftRight$int$0$r0, inline$java.math.BigInteger$shiftRight$int$0$$l2, inline$java.math.BigInteger$shiftRight$int$0$i0, inline$java.math.BigInteger$shiftRight$int$0$$r1, inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$0$$l1, inline$java.math.BigInteger$shiftRight$int$0$$return, inline$java.math.BigInteger$shiftRight$int$0$$exception;
    inline$java.math.BigInteger$shiftRight$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$0$anon0;

  inline$java.math.BigInteger$shiftRight$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$r0 := inline$java.math.BigInteger$shiftRight$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$i0 := inline$java.math.BigInteger$shiftRight$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$0$$r1 := inline$java.math.BigInteger$shiftRight$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$0$$l1, 
  inline$java.math.BigInteger$shiftRight$int$0$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$this := inline$java.math.BigInteger$shiftRight$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$3$r0, inline$java.math.BigInteger$$la$init$ra$$long$3$l0, inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$3$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$r0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$3$l0 := inline$java.math.BigInteger$$la$init$ra$$long$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$3$Entry;

  inline$java.lang.Object$$la$init$ra$$$3$Entry:
    inline$java.lang.Object$$la$init$ra$$$3$$this := inline$java.math.BigInteger$$la$init$ra$$long$3$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$3$anon0;

  inline$java.lang.Object$$la$init$ra$$$3$anon0:
    inline$java.lang.Object$$la$init$ra$$$3$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$3$Return;

  inline$java.lang.Object$$la$init$ra$$$3$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$3$$exception := inline$java.lang.Object$$la$init$ra$$$3$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$3$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$3$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$3$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$3$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$3$Return:
    inline$java.math.BigInteger$shiftRight$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$3$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$0$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$0$$return := inline$java.math.BigInteger$shiftRight$int$0$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$0$block4;

  inline$java.math.BigInteger$shiftRight$int$0$block4:
    goto inline$java.math.BigInteger$shiftRight$int$0$Return;

  inline$java.math.BigInteger$shiftRight$int$0$Return:
    r22 := inline$java.math.BigInteger$shiftRight$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftRight$int$0$$exception;
    goto anon33$1;

  anon33$1:
    assert {:sourceloc "ModPow1.java", 153, -1, -1, -1} true;
    goto anon75_Then, anon75_Else;

  anon75_Then:
    assume {:partition} r22 != unsafe.$null;
    $exception := $exception;
    goto anon36;

  anon75_Else:
    assume {:partition} r22 == unsafe.$null;
    call $fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_5;
    return;

  anon36:
    goto inline$java.math.BigInteger$shiftLeft$int$1$Entry;

  inline$java.math.BigInteger$shiftLeft$int$1$Entry:
    inline$java.math.BigInteger$shiftLeft$int$1$$this := r22;
    inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0 := i10;
    havoc inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$1$$l2, inline$java.math.BigInteger$shiftLeft$int$1$$l1, inline$java.math.BigInteger$shiftLeft$int$1$r0, inline$java.math.BigInteger$shiftLeft$int$1$i0, inline$java.math.BigInteger$shiftLeft$int$1$$r1, inline$java.math.BigInteger$shiftLeft$int$1$$return, inline$java.math.BigInteger$shiftLeft$int$1$$exception;
    inline$java.math.BigInteger$shiftLeft$int$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$1$anon0;

  inline$java.math.BigInteger$shiftLeft$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$r0 := inline$java.math.BigInteger$shiftLeft$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$i0 := inline$java.math.BigInteger$shiftLeft$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$1$$r1 := inline$java.math.BigInteger$shiftLeft$int$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$1$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$1$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$this := inline$java.math.BigInteger$shiftLeft$int$1$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$4$r0, inline$java.math.BigInteger$$la$init$ra$$long$4$l0, inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$4$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$r0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$4$l0 := inline$java.math.BigInteger$$la$init$ra$$long$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$4$Entry;

  inline$java.lang.Object$$la$init$ra$$$4$Entry:
    inline$java.lang.Object$$la$init$ra$$$4$$this := inline$java.math.BigInteger$$la$init$ra$$long$4$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$4$anon0;

  inline$java.lang.Object$$la$init$ra$$$4$anon0:
    inline$java.lang.Object$$la$init$ra$$$4$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$4$Return;

  inline$java.lang.Object$$la$init$ra$$$4$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$4$$exception := inline$java.lang.Object$$la$init$ra$$$4$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$4$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$4$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$4$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$4$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$4$Return:
    inline$java.math.BigInteger$shiftLeft$int$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$4$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$1$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$1$$return := inline$java.math.BigInteger$shiftLeft$int$1$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$1$block5;

  inline$java.math.BigInteger$shiftLeft$int$1$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$1$Return;

  inline$java.math.BigInteger$shiftLeft$int$1$Return:
    $r10 := inline$java.math.BigInteger$shiftLeft$int$1$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$1$$exception;
    goto anon36$1;

  anon36$1:
    assert {:sourceloc "ModPow1.java", 153, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this := r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0 := $r10;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$5$r0, inline$java.math.BigInteger$$la$init$ra$$long$5$l0, inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$5$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$r0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$5$l0 := inline$java.math.BigInteger$$la$init$ra$$long$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$5$Entry;

  inline$java.lang.Object$$la$init$ra$$$5$Entry:
    inline$java.lang.Object$$la$init$ra$$$5$$this := inline$java.math.BigInteger$$la$init$ra$$long$5$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$5$anon0;

  inline$java.lang.Object$$la$init$ra$$$5$anon0:
    inline$java.lang.Object$$la$init$ra$$$5$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$5$Return;

  inline$java.lang.Object$$la$init$ra$$$5$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$5$$exception := inline$java.lang.Object$$la$init$ra$$$5$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$5$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$5$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$5$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$5$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$5$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$5$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$0$Return:
    r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$0$$exception;
    goto anon36$2;

  anon36$2:
    assert {:sourceloc "ModPow1.java", 154, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$1$Entry;

  inline$java.math.BigInteger$shiftRight$int$1$Entry:
    inline$java.math.BigInteger$shiftRight$int$1$$this := r1;
    inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0 := i10;
    havoc inline$java.math.BigInteger$shiftRight$int$1$r0, inline$java.math.BigInteger$shiftRight$int$1$$l2, inline$java.math.BigInteger$shiftRight$int$1$i0, inline$java.math.BigInteger$shiftRight$int$1$$r1, inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$1$$l1, inline$java.math.BigInteger$shiftRight$int$1$$return, inline$java.math.BigInteger$shiftRight$int$1$$exception;
    inline$java.math.BigInteger$shiftRight$int$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$1$anon0;

  inline$java.math.BigInteger$shiftRight$int$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$r0 := inline$java.math.BigInteger$shiftRight$int$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$i0 := inline$java.math.BigInteger$shiftRight$int$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$1$$r1 := inline$java.math.BigInteger$shiftRight$int$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$1$$l1, 
  inline$java.math.BigInteger$shiftRight$int$1$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$this := inline$java.math.BigInteger$shiftRight$int$1$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$6$r0, inline$java.math.BigInteger$$la$init$ra$$long$6$l0, inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$6$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$r0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$6$l0 := inline$java.math.BigInteger$$la$init$ra$$long$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$6$Entry;

  inline$java.lang.Object$$la$init$ra$$$6$Entry:
    inline$java.lang.Object$$la$init$ra$$$6$$this := inline$java.math.BigInteger$$la$init$ra$$long$6$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$6$anon0;

  inline$java.lang.Object$$la$init$ra$$$6$anon0:
    inline$java.lang.Object$$la$init$ra$$$6$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$6$Return;

  inline$java.lang.Object$$la$init$ra$$$6$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$6$$exception := inline$java.lang.Object$$la$init$ra$$$6$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$6$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$6$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$6$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$6$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$6$Return:
    inline$java.math.BigInteger$shiftRight$int$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$6$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$1$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$1$$return := inline$java.math.BigInteger$shiftRight$int$1$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$1$block4;

  inline$java.math.BigInteger$shiftRight$int$1$block4:
    goto inline$java.math.BigInteger$shiftRight$int$1$Return;

  inline$java.math.BigInteger$shiftRight$int$1$Return:
    r3 := inline$java.math.BigInteger$shiftRight$int$1$$return;
    $exception := inline$java.math.BigInteger$shiftRight$int$1$$exception;
    goto anon36$3;

  anon36$3:
    assert {:sourceloc "ModPow1.java", 155, -1, -1, -1} true;
    goto anon76_Then, anon76_Else;

  anon76_Then:
    assume {:partition} r3 != unsafe.$null;
    $exception := $exception;
    goto anon39;

  anon76_Else:
    assume {:partition} r3 == unsafe.$null;
    call $fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_6;
    return;

  anon39:
    goto inline$java.math.BigInteger$shiftLeft$int$2$Entry;

  inline$java.math.BigInteger$shiftLeft$int$2$Entry:
    inline$java.math.BigInteger$shiftLeft$int$2$$this := r3;
    inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0 := i10;
    havoc inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$2$$l2, inline$java.math.BigInteger$shiftLeft$int$2$$l1, inline$java.math.BigInteger$shiftLeft$int$2$r0, inline$java.math.BigInteger$shiftLeft$int$2$i0, inline$java.math.BigInteger$shiftLeft$int$2$$r1, inline$java.math.BigInteger$shiftLeft$int$2$$return, inline$java.math.BigInteger$shiftLeft$int$2$$exception;
    inline$java.math.BigInteger$shiftLeft$int$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$2$anon0;

  inline$java.math.BigInteger$shiftLeft$int$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$r0 := inline$java.math.BigInteger$shiftLeft$int$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$i0 := inline$java.math.BigInteger$shiftLeft$int$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$2$$r1 := inline$java.math.BigInteger$shiftLeft$int$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$2$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$2$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$this := inline$java.math.BigInteger$shiftLeft$int$2$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$7$r0, inline$java.math.BigInteger$$la$init$ra$$long$7$l0, inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$7$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$r0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$7$l0 := inline$java.math.BigInteger$$la$init$ra$$long$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$7$Entry;

  inline$java.lang.Object$$la$init$ra$$$7$Entry:
    inline$java.lang.Object$$la$init$ra$$$7$$this := inline$java.math.BigInteger$$la$init$ra$$long$7$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$7$anon0;

  inline$java.lang.Object$$la$init$ra$$$7$anon0:
    inline$java.lang.Object$$la$init$ra$$$7$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$7$Return;

  inline$java.lang.Object$$la$init$ra$$$7$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$7$$exception := inline$java.lang.Object$$la$init$ra$$$7$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$7$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$7$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$7$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$7$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$7$Return:
    inline$java.math.BigInteger$shiftLeft$int$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$7$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$2$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$2$$return := inline$java.math.BigInteger$shiftLeft$int$2$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$2$block5;

  inline$java.math.BigInteger$shiftLeft$int$2$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$2$Return;

  inline$java.math.BigInteger$shiftLeft$int$2$Return:
    $r11 := inline$java.math.BigInteger$shiftLeft$int$2$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$2$$exception;
    goto anon39$1;

  anon39$1:
    assert {:sourceloc "ModPow1.java", 155, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this := r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0 := $r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$8$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$8$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$8$r0, inline$java.math.BigInteger$$la$init$ra$$long$8$l0, inline$java.math.BigInteger$$la$init$ra$$long$8$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$8$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$8$r0 := inline$java.math.BigInteger$$la$init$ra$$long$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$8$l0 := inline$java.math.BigInteger$$la$init$ra$$long$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$8$Entry;

  inline$java.lang.Object$$la$init$ra$$$8$Entry:
    inline$java.lang.Object$$la$init$ra$$$8$$this := inline$java.math.BigInteger$$la$init$ra$$long$8$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$8$anon0;

  inline$java.lang.Object$$la$init$ra$$$8$anon0:
    inline$java.lang.Object$$la$init$ra$$$8$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$8$Return;

  inline$java.lang.Object$$la$init$ra$$$8$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$8$$exception := inline$java.lang.Object$$la$init$ra$$$8$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$8$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$8$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$8$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$8$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$8$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$8$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$8$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$1$Return:
    r4 := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$1$$exception;
    goto anon39$2;

  anon39$2:
    assert {:sourceloc "ModPow1.java", 157, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0 := r2;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1 := r4;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3:
    goto inline$java.math.BigInteger$bitLength$$3$Entry;

  inline$java.math.BigInteger$bitLength$$3$Entry:
    inline$java.math.BigInteger$bitLength$$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    havoc inline$java.math.BigInteger$bitLength$$3$$b1, inline$java.math.BigInteger$bitLength$$3$$b3, inline$java.math.BigInteger$bitLength$$3$i8, inline$java.math.BigInteger$bitLength$$3$l7, inline$java.math.BigInteger$bitLength$$3$$l4, inline$java.math.BigInteger$bitLength$$3$$b5, inline$java.math.BigInteger$bitLength$$3$$l0, inline$java.math.BigInteger$bitLength$$3$$l2, inline$java.math.BigInteger$bitLength$$3$r0, inline$java.math.BigInteger$bitLength$$3$$l6, inline$java.math.BigInteger$bitLength$$3$$return, inline$java.math.BigInteger$bitLength$$3$$exception;
    goto inline$java.math.BigInteger$bitLength$$3$anon0;

  inline$java.math.BigInteger$bitLength$$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$3$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$r0 := inline$java.math.BigInteger$bitLength$$3$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon10_Then, inline$java.math.BigInteger$bitLength$$3$anon10_Else;

  inline$java.math.BigInteger$bitLength$$3$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block11;

  inline$java.math.BigInteger$bitLength$$3$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon3;

  inline$java.math.BigInteger$bitLength$$3$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$3$block16;

  inline$java.math.BigInteger$bitLength$$3$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon11_Then, inline$java.math.BigInteger$bitLength$$3$anon11_Else;

  inline$java.math.BigInteger$bitLength$$3$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block12;

  inline$java.math.BigInteger$bitLength$$3$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$3$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon6;

  inline$java.math.BigInteger$bitLength$$3$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$block13;

  inline$java.math.BigInteger$bitLength$$3$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$l6 := -inline$java.math.BigInteger$bitLength$$3$$l4;
    goto inline$java.math.BigInteger$bitLength$$3$block13;

  inline$java.math.BigInteger$bitLength$$3$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$l7 := inline$java.math.BigInteger$bitLength$$3$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$3$block14;

  inline$java.math.BigInteger$bitLength$$3$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$3$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon12_Then, inline$java.math.BigInteger$bitLength$$3$anon12_Else;

  inline$java.math.BigInteger$bitLength$$3$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$3$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$block15;

  inline$java.math.BigInteger$bitLength$$3$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$3$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$3$anon9;

  inline$java.math.BigInteger$bitLength$$3$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$i8 := inline$java.math.BigInteger$bitLength$$3$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$3$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$3$block14;

  inline$java.math.BigInteger$bitLength$$3$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$3$$return := inline$java.math.BigInteger$bitLength$$3$i8;
    goto inline$java.math.BigInteger$bitLength$$3$block16;

  inline$java.math.BigInteger$bitLength$$3$block16:
    goto inline$java.math.BigInteger$bitLength$$3$Return;

  inline$java.math.BigInteger$bitLength$$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0 := inline$java.math.BigInteger$bitLength$$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6:
    goto inline$java.math.BigInteger$bitLength$$4$Entry;

  inline$java.math.BigInteger$bitLength$$4$Entry:
    inline$java.math.BigInteger$bitLength$$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$bitLength$$4$$b1, inline$java.math.BigInteger$bitLength$$4$$b3, inline$java.math.BigInteger$bitLength$$4$i8, inline$java.math.BigInteger$bitLength$$4$l7, inline$java.math.BigInteger$bitLength$$4$$l4, inline$java.math.BigInteger$bitLength$$4$$b5, inline$java.math.BigInteger$bitLength$$4$$l0, inline$java.math.BigInteger$bitLength$$4$$l2, inline$java.math.BigInteger$bitLength$$4$r0, inline$java.math.BigInteger$bitLength$$4$$l6, inline$java.math.BigInteger$bitLength$$4$$return, inline$java.math.BigInteger$bitLength$$4$$exception;
    goto inline$java.math.BigInteger$bitLength$$4$anon0;

  inline$java.math.BigInteger$bitLength$$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$4$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$r0 := inline$java.math.BigInteger$bitLength$$4$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon10_Then, inline$java.math.BigInteger$bitLength$$4$anon10_Else;

  inline$java.math.BigInteger$bitLength$$4$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block11;

  inline$java.math.BigInteger$bitLength$$4$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon3;

  inline$java.math.BigInteger$bitLength$$4$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$4$block16;

  inline$java.math.BigInteger$bitLength$$4$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon11_Then, inline$java.math.BigInteger$bitLength$$4$anon11_Else;

  inline$java.math.BigInteger$bitLength$$4$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block12;

  inline$java.math.BigInteger$bitLength$$4$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$4$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon6;

  inline$java.math.BigInteger$bitLength$$4$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$block13;

  inline$java.math.BigInteger$bitLength$$4$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$l6 := -inline$java.math.BigInteger$bitLength$$4$$l4;
    goto inline$java.math.BigInteger$bitLength$$4$block13;

  inline$java.math.BigInteger$bitLength$$4$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$l7 := inline$java.math.BigInteger$bitLength$$4$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$4$block14;

  inline$java.math.BigInteger$bitLength$$4$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$4$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon12_Then, inline$java.math.BigInteger$bitLength$$4$anon12_Else;

  inline$java.math.BigInteger$bitLength$$4$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$4$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$block15;

  inline$java.math.BigInteger$bitLength$$4$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$4$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$4$anon9;

  inline$java.math.BigInteger$bitLength$$4$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$i8 := inline$java.math.BigInteger$bitLength$$4$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$4$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$4$block14;

  inline$java.math.BigInteger$bitLength$$4$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$4$$return := inline$java.math.BigInteger$bitLength$$4$i8;
    goto inline$java.math.BigInteger$bitLength$$4$block16;

  inline$java.math.BigInteger$bitLength$$4$block16:
    goto inline$java.math.BigInteger$bitLength$$4$Return;

  inline$java.math.BigInteger$bitLength$$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1 := inline$java.math.BigInteger$bitLength$$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$bitLength$$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$2$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$2$$r3, inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$2$$l0, inline$java.math.BigInteger$equals$java.lang.Object$2$$r4, inline$java.math.BigInteger$equals$java.lang.Object$2$$b2, inline$java.math.BigInteger$equals$java.lang.Object$2$r2, inline$java.math.BigInteger$equals$java.lang.Object$2$$l1, inline$java.math.BigInteger$equals$java.lang.Object$2$r1, inline$java.math.BigInteger$equals$java.lang.Object$2$r0, inline$java.math.BigInteger$equals$java.lang.Object$2$$return, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$r0 := inline$java.math.BigInteger$equals$java.lang.Object$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$r1 := inline$java.math.BigInteger$equals$java.lang.Object$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$r3, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$2$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$r4, inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$2$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$2$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$2$r2 := inline$java.math.BigInteger$equals$java.lang.Object$2$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$2$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$2$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$2$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$2$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$2$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$2$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$2$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$2$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$3$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$3$$r3, inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$3$$l0, inline$java.math.BigInteger$equals$java.lang.Object$3$$r4, inline$java.math.BigInteger$equals$java.lang.Object$3$$b2, inline$java.math.BigInteger$equals$java.lang.Object$3$r2, inline$java.math.BigInteger$equals$java.lang.Object$3$$l1, inline$java.math.BigInteger$equals$java.lang.Object$3$r1, inline$java.math.BigInteger$equals$java.lang.Object$3$r0, inline$java.math.BigInteger$equals$java.lang.Object$3$$return, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$r0 := inline$java.math.BigInteger$equals$java.lang.Object$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$r1 := inline$java.math.BigInteger$equals$java.lang.Object$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$r3, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$3$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$r4, inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$3$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$3$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$3$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$3$r2 := inline$java.math.BigInteger$equals$java.lang.Object$3$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$3$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$3$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$3$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$3$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$3$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$3$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$3$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$3$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$equals$java.lang.Object$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$9$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$9$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$9$r0, inline$java.math.BigInteger$$la$init$ra$$long$9$l0, inline$java.math.BigInteger$$la$init$ra$$long$9$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$9$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$9$r0 := inline$java.math.BigInteger$$la$init$ra$$long$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$9$l0 := inline$java.math.BigInteger$$la$init$ra$$long$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$9$Entry;

  inline$java.lang.Object$$la$init$ra$$$9$Entry:
    inline$java.lang.Object$$la$init$ra$$$9$$this := inline$java.math.BigInteger$$la$init$ra$$long$9$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$9$anon0;

  inline$java.lang.Object$$la$init$ra$$$9$anon0:
    inline$java.lang.Object$$la$init$ra$$$9$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$9$Return;

  inline$java.lang.Object$$la$init$ra$$$9$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$9$$exception := inline$java.lang.Object$$la$init$ra$$$9$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$9$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$9$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$9$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$9$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$9$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$9$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$9$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$1$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$10$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$10$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$10$r0, inline$java.math.BigInteger$$la$init$ra$$long$10$l0, inline$java.math.BigInteger$$la$init$ra$$long$10$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$10$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$10$r0 := inline$java.math.BigInteger$$la$init$ra$$long$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$10$l0 := inline$java.math.BigInteger$$la$init$ra$$long$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$10$Entry;

  inline$java.lang.Object$$la$init$ra$$$10$Entry:
    inline$java.lang.Object$$la$init$ra$$$10$$this := inline$java.math.BigInteger$$la$init$ra$$long$10$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$10$anon0;

  inline$java.lang.Object$$la$init$ra$$$10$anon0:
    inline$java.lang.Object$$la$init$ra$$$10$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$10$Return;

  inline$java.lang.Object$$la$init$ra$$$10$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$10$$exception := inline$java.lang.Object$$la$init$ra$$$10$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$10$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$10$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$10$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$10$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$10$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$10$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$10$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$2$Entry;

  inline$java.math.BigInteger$shiftRight$int$2$Entry:
    inline$java.math.BigInteger$shiftRight$int$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$2$r0, inline$java.math.BigInteger$shiftRight$int$2$$l2, inline$java.math.BigInteger$shiftRight$int$2$i0, inline$java.math.BigInteger$shiftRight$int$2$$r1, inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$2$$l1, inline$java.math.BigInteger$shiftRight$int$2$$return, inline$java.math.BigInteger$shiftRight$int$2$$exception;
    inline$java.math.BigInteger$shiftRight$int$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$2$anon0;

  inline$java.math.BigInteger$shiftRight$int$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$r0 := inline$java.math.BigInteger$shiftRight$int$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$i0 := inline$java.math.BigInteger$shiftRight$int$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$2$$r1 := inline$java.math.BigInteger$shiftRight$int$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$2$$l1, 
  inline$java.math.BigInteger$shiftRight$int$2$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$11$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$11$$this := inline$java.math.BigInteger$shiftRight$int$2$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$11$r0, inline$java.math.BigInteger$$la$init$ra$$long$11$l0, inline$java.math.BigInteger$$la$init$ra$$long$11$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$11$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$11$r0 := inline$java.math.BigInteger$$la$init$ra$$long$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$11$l0 := inline$java.math.BigInteger$$la$init$ra$$long$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$11$Entry;

  inline$java.lang.Object$$la$init$ra$$$11$Entry:
    inline$java.lang.Object$$la$init$ra$$$11$$this := inline$java.math.BigInteger$$la$init$ra$$long$11$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$11$anon0;

  inline$java.lang.Object$$la$init$ra$$$11$anon0:
    inline$java.lang.Object$$la$init$ra$$$11$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$11$Return;

  inline$java.lang.Object$$la$init$ra$$$11$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$11$$exception := inline$java.lang.Object$$la$init$ra$$$11$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$11$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$11$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$11$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$11$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$11$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$11$Return:
    inline$java.math.BigInteger$shiftRight$int$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$11$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$2$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$2$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$2$$return := inline$java.math.BigInteger$shiftRight$int$2$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$2$block4;

  inline$java.math.BigInteger$shiftRight$int$2$block4:
    goto inline$java.math.BigInteger$shiftRight$int$2$Return;

  inline$java.math.BigInteger$shiftRight$int$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2 := inline$java.math.BigInteger$shiftRight$int$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftRight$int$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$3$Entry;

  inline$java.math.BigInteger$shiftLeft$int$3$Entry:
    inline$java.math.BigInteger$shiftLeft$int$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2;
    inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$3$$l2, inline$java.math.BigInteger$shiftLeft$int$3$$l1, inline$java.math.BigInteger$shiftLeft$int$3$r0, inline$java.math.BigInteger$shiftLeft$int$3$i0, inline$java.math.BigInteger$shiftLeft$int$3$$r1, inline$java.math.BigInteger$shiftLeft$int$3$$return, inline$java.math.BigInteger$shiftLeft$int$3$$exception;
    inline$java.math.BigInteger$shiftLeft$int$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$3$anon0;

  inline$java.math.BigInteger$shiftLeft$int$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$r0 := inline$java.math.BigInteger$shiftLeft$int$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$i0 := inline$java.math.BigInteger$shiftLeft$int$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$3$$r1 := inline$java.math.BigInteger$shiftLeft$int$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$3$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$3$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$12$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$12$$this := inline$java.math.BigInteger$shiftLeft$int$3$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$12$r0, inline$java.math.BigInteger$$la$init$ra$$long$12$l0, inline$java.math.BigInteger$$la$init$ra$$long$12$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$12$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$12$r0 := inline$java.math.BigInteger$$la$init$ra$$long$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$12$l0 := inline$java.math.BigInteger$$la$init$ra$$long$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$12$Entry;

  inline$java.lang.Object$$la$init$ra$$$12$Entry:
    inline$java.lang.Object$$la$init$ra$$$12$$this := inline$java.math.BigInteger$$la$init$ra$$long$12$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$12$anon0;

  inline$java.lang.Object$$la$init$ra$$$12$anon0:
    inline$java.lang.Object$$la$init$ra$$$12$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$12$Return;

  inline$java.lang.Object$$la$init$ra$$$12$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$12$$exception := inline$java.lang.Object$$la$init$ra$$$12$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$12$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$12$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$12$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$12$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$12$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$12$Return:
    inline$java.math.BigInteger$shiftLeft$int$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$12$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$3$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$3$$return := inline$java.math.BigInteger$shiftLeft$int$3$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$3$block5;

  inline$java.math.BigInteger$shiftLeft$int$3$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$3$Return;

  inline$java.math.BigInteger$shiftLeft$int$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11 := inline$java.math.BigInteger$shiftLeft$int$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$13$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$13$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$13$r0, inline$java.math.BigInteger$$la$init$ra$$long$13$l0, inline$java.math.BigInteger$$la$init$ra$$long$13$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$13$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$13$r0 := inline$java.math.BigInteger$$la$init$ra$$long$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$13$l0 := inline$java.math.BigInteger$$la$init$ra$$long$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$13$Entry;

  inline$java.lang.Object$$la$init$ra$$$13$Entry:
    inline$java.lang.Object$$la$init$ra$$$13$$this := inline$java.math.BigInteger$$la$init$ra$$long$13$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$13$anon0;

  inline$java.lang.Object$$la$init$ra$$$13$anon0:
    inline$java.lang.Object$$la$init$ra$$$13$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$13$Return;

  inline$java.lang.Object$$la$init$ra$$$13$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$13$$exception := inline$java.lang.Object$$la$init$ra$$$13$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$13$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$13$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$13$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$13$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$13$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$13$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$13$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$3$Entry;

  inline$java.math.BigInteger$shiftRight$int$3$Entry:
    inline$java.math.BigInteger$shiftRight$int$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$3$r0, inline$java.math.BigInteger$shiftRight$int$3$$l2, inline$java.math.BigInteger$shiftRight$int$3$i0, inline$java.math.BigInteger$shiftRight$int$3$$r1, inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$3$$l1, inline$java.math.BigInteger$shiftRight$int$3$$return, inline$java.math.BigInteger$shiftRight$int$3$$exception;
    inline$java.math.BigInteger$shiftRight$int$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$3$anon0;

  inline$java.math.BigInteger$shiftRight$int$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$r0 := inline$java.math.BigInteger$shiftRight$int$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$i0 := inline$java.math.BigInteger$shiftRight$int$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$3$$r1 := inline$java.math.BigInteger$shiftRight$int$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$3$$l1, 
  inline$java.math.BigInteger$shiftRight$int$3$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$14$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$14$$this := inline$java.math.BigInteger$shiftRight$int$3$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$14$r0, inline$java.math.BigInteger$$la$init$ra$$long$14$l0, inline$java.math.BigInteger$$la$init$ra$$long$14$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$14$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$14$r0 := inline$java.math.BigInteger$$la$init$ra$$long$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$14$l0 := inline$java.math.BigInteger$$la$init$ra$$long$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$14$Entry;

  inline$java.lang.Object$$la$init$ra$$$14$Entry:
    inline$java.lang.Object$$la$init$ra$$$14$$this := inline$java.math.BigInteger$$la$init$ra$$long$14$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$14$anon0;

  inline$java.lang.Object$$la$init$ra$$$14$anon0:
    inline$java.lang.Object$$la$init$ra$$$14$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$14$Return;

  inline$java.lang.Object$$la$init$ra$$$14$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$14$$exception := inline$java.lang.Object$$la$init$ra$$$14$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$14$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$14$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$14$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$14$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$14$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$14$Return:
    inline$java.math.BigInteger$shiftRight$int$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$14$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$3$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$3$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$3$$return := inline$java.math.BigInteger$shiftRight$int$3$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$3$block4;

  inline$java.math.BigInteger$shiftRight$int$3$block4:
    goto inline$java.math.BigInteger$shiftRight$int$3$Return;

  inline$java.math.BigInteger$shiftRight$int$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4 := inline$java.math.BigInteger$shiftRight$int$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftRight$int$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$4$Entry;

  inline$java.math.BigInteger$shiftLeft$int$4$Entry:
    inline$java.math.BigInteger$shiftLeft$int$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4;
    inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$4$$l2, inline$java.math.BigInteger$shiftLeft$int$4$$l1, inline$java.math.BigInteger$shiftLeft$int$4$r0, inline$java.math.BigInteger$shiftLeft$int$4$i0, inline$java.math.BigInteger$shiftLeft$int$4$$r1, inline$java.math.BigInteger$shiftLeft$int$4$$return, inline$java.math.BigInteger$shiftLeft$int$4$$exception;
    inline$java.math.BigInteger$shiftLeft$int$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$4$anon0;

  inline$java.math.BigInteger$shiftLeft$int$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$r0 := inline$java.math.BigInteger$shiftLeft$int$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$i0 := inline$java.math.BigInteger$shiftLeft$int$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$4$$r1 := inline$java.math.BigInteger$shiftLeft$int$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$4$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$4$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$15$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$15$$this := inline$java.math.BigInteger$shiftLeft$int$4$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$15$r0, inline$java.math.BigInteger$$la$init$ra$$long$15$l0, inline$java.math.BigInteger$$la$init$ra$$long$15$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$15$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$15$r0 := inline$java.math.BigInteger$$la$init$ra$$long$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$15$l0 := inline$java.math.BigInteger$$la$init$ra$$long$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$15$Entry;

  inline$java.lang.Object$$la$init$ra$$$15$Entry:
    inline$java.lang.Object$$la$init$ra$$$15$$this := inline$java.math.BigInteger$$la$init$ra$$long$15$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$15$anon0;

  inline$java.lang.Object$$la$init$ra$$$15$anon0:
    inline$java.lang.Object$$la$init$ra$$$15$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$15$Return;

  inline$java.lang.Object$$la$init$ra$$$15$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$15$$exception := inline$java.lang.Object$$la$init$ra$$$15$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$15$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$15$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$15$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$15$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$15$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$15$Return:
    inline$java.math.BigInteger$shiftLeft$int$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$15$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$4$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$4$$return := inline$java.math.BigInteger$shiftLeft$int$4$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$4$block5;

  inline$java.math.BigInteger$shiftLeft$int$4$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$4$Return;

  inline$java.math.BigInteger$shiftLeft$int$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12 := inline$java.math.BigInteger$shiftLeft$int$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$16$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$16$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$16$r0, inline$java.math.BigInteger$$la$init$ra$$long$16$l0, inline$java.math.BigInteger$$la$init$ra$$long$16$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$16$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$16$r0 := inline$java.math.BigInteger$$la$init$ra$$long$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$16$l0 := inline$java.math.BigInteger$$la$init$ra$$long$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$16$Entry;

  inline$java.lang.Object$$la$init$ra$$$16$Entry:
    inline$java.lang.Object$$la$init$ra$$$16$$this := inline$java.math.BigInteger$$la$init$ra$$long$16$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$16$anon0;

  inline$java.lang.Object$$la$init$ra$$$16$anon0:
    inline$java.lang.Object$$la$init$ra$$$16$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$16$Return;

  inline$java.lang.Object$$la$init$ra$$$16$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$16$$exception := inline$java.lang.Object$$la$init$ra$$$16$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$16$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$16$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$16$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$16$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$16$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$16$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$16$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$1$r1, inline$java.math.BigInteger$add$java.math.BigInteger$1$r0, inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$1$$return, inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$1$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$1$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$1$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$1$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$17$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$17$$this := inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$17$r0, inline$java.math.BigInteger$$la$init$ra$$long$17$l0, inline$java.math.BigInteger$$la$init$ra$$long$17$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$17$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$17$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$17$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$17$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$17$r0 := inline$java.math.BigInteger$$la$init$ra$$long$17$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$17$l0 := inline$java.math.BigInteger$$la$init$ra$$long$17$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$17$Entry;

  inline$java.lang.Object$$la$init$ra$$$17$Entry:
    inline$java.lang.Object$$la$init$ra$$$17$$this := inline$java.math.BigInteger$$la$init$ra$$long$17$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$17$anon0;

  inline$java.lang.Object$$la$init$ra$$$17$anon0:
    inline$java.lang.Object$$la$init$ra$$$17$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$17$Return;

  inline$java.lang.Object$$la$init$ra$$$17$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$17$$exception := inline$java.lang.Object$$la$init$ra$$$17$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$17$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$17$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$17$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$17$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$17$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$17$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception := inline$java.math.BigInteger$$la$init$ra$$long$17$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$1$$return := inline$java.math.BigInteger$add$java.math.BigInteger$1$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$1$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$1$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$1$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$2$r1, inline$java.math.BigInteger$add$java.math.BigInteger$2$r0, inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$2$$return, inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$2$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$2$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$2$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$2$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$18$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$18$$this := inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$18$r0, inline$java.math.BigInteger$$la$init$ra$$long$18$l0, inline$java.math.BigInteger$$la$init$ra$$long$18$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$18$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$18$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$18$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$18$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$18$r0 := inline$java.math.BigInteger$$la$init$ra$$long$18$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$18$l0 := inline$java.math.BigInteger$$la$init$ra$$long$18$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$18$Entry;

  inline$java.lang.Object$$la$init$ra$$$18$Entry:
    inline$java.lang.Object$$la$init$ra$$$18$$this := inline$java.math.BigInteger$$la$init$ra$$long$18$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$18$anon0;

  inline$java.lang.Object$$la$init$ra$$$18$anon0:
    inline$java.lang.Object$$la$init$ra$$$18$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$18$Return;

  inline$java.lang.Object$$la$init$ra$$$18$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$18$$exception := inline$java.lang.Object$$la$init$ra$$$18$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$18$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$18$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$18$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$18$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$18$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$18$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception := inline$java.math.BigInteger$$la$init$ra$$long$18$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$2$$return := inline$java.math.BigInteger$add$java.math.BigInteger$2$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$2$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$2$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$2$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$19$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$19$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$19$r0, inline$java.math.BigInteger$$la$init$ra$$long$19$l0, inline$java.math.BigInteger$$la$init$ra$$long$19$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$19$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$19$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$19$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$19$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$19$r0 := inline$java.math.BigInteger$$la$init$ra$$long$19$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$19$l0 := inline$java.math.BigInteger$$la$init$ra$$long$19$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$19$Entry;

  inline$java.lang.Object$$la$init$ra$$$19$Entry:
    inline$java.lang.Object$$la$init$ra$$$19$$this := inline$java.math.BigInteger$$la$init$ra$$long$19$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$19$anon0;

  inline$java.lang.Object$$la$init$ra$$$19$anon0:
    inline$java.lang.Object$$la$init$ra$$$19$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$19$Return;

  inline$java.lang.Object$$la$init$ra$$$19$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$19$$exception := inline$java.lang.Object$$la$init$ra$$$19$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$19$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$19$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$19$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$19$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$19$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$19$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$19$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$20$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$20$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$20$r0, inline$java.math.BigInteger$$la$init$ra$$long$20$l0, inline$java.math.BigInteger$$la$init$ra$$long$20$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$20$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$20$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$20$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$20$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$20$r0 := inline$java.math.BigInteger$$la$init$ra$$long$20$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$20$l0 := inline$java.math.BigInteger$$la$init$ra$$long$20$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$20$Entry;

  inline$java.lang.Object$$la$init$ra$$$20$Entry:
    inline$java.lang.Object$$la$init$ra$$$20$$this := inline$java.math.BigInteger$$la$init$ra$$long$20$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$20$anon0;

  inline$java.lang.Object$$la$init$ra$$$20$anon0:
    inline$java.lang.Object$$la$init$ra$$$20$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$20$Return;

  inline$java.lang.Object$$la$init$ra$$$20$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$20$$exception := inline$java.lang.Object$$la$init$ra$$$20$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$20$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$20$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$20$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$20$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$20$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$20$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$20$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$5$Entry;

  inline$java.math.BigInteger$shiftLeft$int$5$Entry:
    inline$java.math.BigInteger$shiftLeft$int$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r16;
    inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$5$$l2, inline$java.math.BigInteger$shiftLeft$int$5$$l1, inline$java.math.BigInteger$shiftLeft$int$5$r0, inline$java.math.BigInteger$shiftLeft$int$5$i0, inline$java.math.BigInteger$shiftLeft$int$5$$r1, inline$java.math.BigInteger$shiftLeft$int$5$$return, inline$java.math.BigInteger$shiftLeft$int$5$$exception;
    inline$java.math.BigInteger$shiftLeft$int$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$5$anon0;

  inline$java.math.BigInteger$shiftLeft$int$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$r0 := inline$java.math.BigInteger$shiftLeft$int$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$i0 := inline$java.math.BigInteger$shiftLeft$int$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$5$$r1 := inline$java.math.BigInteger$shiftLeft$int$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$5$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$5$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$21$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$21$$this := inline$java.math.BigInteger$shiftLeft$int$5$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$21$r0, inline$java.math.BigInteger$$la$init$ra$$long$21$l0, inline$java.math.BigInteger$$la$init$ra$$long$21$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$21$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$21$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$21$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$21$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$21$r0 := inline$java.math.BigInteger$$la$init$ra$$long$21$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$21$l0 := inline$java.math.BigInteger$$la$init$ra$$long$21$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$21$Entry;

  inline$java.lang.Object$$la$init$ra$$$21$Entry:
    inline$java.lang.Object$$la$init$ra$$$21$$this := inline$java.math.BigInteger$$la$init$ra$$long$21$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$21$anon0;

  inline$java.lang.Object$$la$init$ra$$$21$anon0:
    inline$java.lang.Object$$la$init$ra$$$21$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$21$Return;

  inline$java.lang.Object$$la$init$ra$$$21$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$21$$exception := inline$java.lang.Object$$la$init$ra$$$21$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$21$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$21$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$21$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$21$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$21$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$21$Return:
    inline$java.math.BigInteger$shiftLeft$int$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$21$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$5$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$5$$return := inline$java.math.BigInteger$shiftLeft$int$5$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$5$block5;

  inline$java.math.BigInteger$shiftLeft$int$5$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$5$Return;

  inline$java.math.BigInteger$shiftLeft$int$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17 := inline$java.math.BigInteger$shiftLeft$int$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$3$r1, inline$java.math.BigInteger$add$java.math.BigInteger$3$r0, inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$3$$return, inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$3$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$3$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$22$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$22$$this := inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$22$r0, inline$java.math.BigInteger$$la$init$ra$$long$22$l0, inline$java.math.BigInteger$$la$init$ra$$long$22$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$22$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$22$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$22$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$22$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$22$r0 := inline$java.math.BigInteger$$la$init$ra$$long$22$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$22$l0 := inline$java.math.BigInteger$$la$init$ra$$long$22$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$22$Entry;

  inline$java.lang.Object$$la$init$ra$$$22$Entry:
    inline$java.lang.Object$$la$init$ra$$$22$$this := inline$java.math.BigInteger$$la$init$ra$$long$22$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$22$anon0;

  inline$java.lang.Object$$la$init$ra$$$22$anon0:
    inline$java.lang.Object$$la$init$ra$$$22$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$22$Return;

  inline$java.lang.Object$$la$init$ra$$$22$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$22$$exception := inline$java.lang.Object$$la$init$ra$$$22$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$22$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$22$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$22$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$22$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$22$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$22$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$22$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$3$$return := inline$java.math.BigInteger$add$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$6$Entry;

  inline$java.math.BigInteger$shiftLeft$int$6$Entry:
    inline$java.math.BigInteger$shiftLeft$int$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r7;
    inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$6$$l2, inline$java.math.BigInteger$shiftLeft$int$6$$l1, inline$java.math.BigInteger$shiftLeft$int$6$r0, inline$java.math.BigInteger$shiftLeft$int$6$i0, inline$java.math.BigInteger$shiftLeft$int$6$$r1, inline$java.math.BigInteger$shiftLeft$int$6$$return, inline$java.math.BigInteger$shiftLeft$int$6$$exception;
    inline$java.math.BigInteger$shiftLeft$int$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$6$anon0;

  inline$java.math.BigInteger$shiftLeft$int$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$r0 := inline$java.math.BigInteger$shiftLeft$int$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$i0 := inline$java.math.BigInteger$shiftLeft$int$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$6$$r1 := inline$java.math.BigInteger$shiftLeft$int$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$6$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$6$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$23$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$23$$this := inline$java.math.BigInteger$shiftLeft$int$6$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$23$r0, inline$java.math.BigInteger$$la$init$ra$$long$23$l0, inline$java.math.BigInteger$$la$init$ra$$long$23$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$23$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$23$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$23$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$23$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$23$r0 := inline$java.math.BigInteger$$la$init$ra$$long$23$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$23$l0 := inline$java.math.BigInteger$$la$init$ra$$long$23$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$23$Entry;

  inline$java.lang.Object$$la$init$ra$$$23$Entry:
    inline$java.lang.Object$$la$init$ra$$$23$$this := inline$java.math.BigInteger$$la$init$ra$$long$23$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$23$anon0;

  inline$java.lang.Object$$la$init$ra$$$23$anon0:
    inline$java.lang.Object$$la$init$ra$$$23$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$23$Return;

  inline$java.lang.Object$$la$init$ra$$$23$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$23$$exception := inline$java.lang.Object$$la$init$ra$$$23$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$23$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$23$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$23$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$23$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$23$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$23$Return:
    inline$java.math.BigInteger$shiftLeft$int$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$23$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$6$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$6$$return := inline$java.math.BigInteger$shiftLeft$int$6$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$6$block5;

  inline$java.math.BigInteger$shiftLeft$int$6$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$6$Return;

  inline$java.math.BigInteger$shiftLeft$int$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19 := inline$java.math.BigInteger$shiftLeft$int$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$shiftLeft$int$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$4$r1, inline$java.math.BigInteger$add$java.math.BigInteger$4$r0, inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$4$$return, inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$4$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$24$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$24$$this := inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$24$r0, inline$java.math.BigInteger$$la$init$ra$$long$24$l0, inline$java.math.BigInteger$$la$init$ra$$long$24$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$24$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$24$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$24$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$24$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$24$r0 := inline$java.math.BigInteger$$la$init$ra$$long$24$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$24$l0 := inline$java.math.BigInteger$$la$init$ra$$long$24$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$24$Entry;

  inline$java.lang.Object$$la$init$ra$$$24$Entry:
    inline$java.lang.Object$$la$init$ra$$$24$$this := inline$java.math.BigInteger$$la$init$ra$$long$24$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$24$anon0;

  inline$java.lang.Object$$la$init$ra$$$24$anon0:
    inline$java.lang.Object$$la$init$ra$$$24$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$24$Return;

  inline$java.lang.Object$$la$init$ra$$$24$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$24$$exception := inline$java.lang.Object$$la$init$ra$$$24$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$24$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$24$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$24$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$24$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$24$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$24$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$24$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$4$$return := inline$java.math.BigInteger$add$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$Return:
    r5 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$0$$exception;
    goto anon39$3;

  anon39$3:
    assert {:sourceloc "ModPow1.java", 158, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0 := r22;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1 := r3;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3:
    goto inline$java.math.BigInteger$bitLength$$5$Entry;

  inline$java.math.BigInteger$bitLength$$5$Entry:
    inline$java.math.BigInteger$bitLength$$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    havoc inline$java.math.BigInteger$bitLength$$5$$b1, inline$java.math.BigInteger$bitLength$$5$$b3, inline$java.math.BigInteger$bitLength$$5$i8, inline$java.math.BigInteger$bitLength$$5$l7, inline$java.math.BigInteger$bitLength$$5$$l4, inline$java.math.BigInteger$bitLength$$5$$b5, inline$java.math.BigInteger$bitLength$$5$$l0, inline$java.math.BigInteger$bitLength$$5$$l2, inline$java.math.BigInteger$bitLength$$5$r0, inline$java.math.BigInteger$bitLength$$5$$l6, inline$java.math.BigInteger$bitLength$$5$$return, inline$java.math.BigInteger$bitLength$$5$$exception;
    goto inline$java.math.BigInteger$bitLength$$5$anon0;

  inline$java.math.BigInteger$bitLength$$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$5$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$r0 := inline$java.math.BigInteger$bitLength$$5$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon10_Then, inline$java.math.BigInteger$bitLength$$5$anon10_Else;

  inline$java.math.BigInteger$bitLength$$5$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block11;

  inline$java.math.BigInteger$bitLength$$5$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon3;

  inline$java.math.BigInteger$bitLength$$5$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$5$block16;

  inline$java.math.BigInteger$bitLength$$5$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon11_Then, inline$java.math.BigInteger$bitLength$$5$anon11_Else;

  inline$java.math.BigInteger$bitLength$$5$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block12;

  inline$java.math.BigInteger$bitLength$$5$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$5$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon6;

  inline$java.math.BigInteger$bitLength$$5$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$block13;

  inline$java.math.BigInteger$bitLength$$5$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$l6 := -inline$java.math.BigInteger$bitLength$$5$$l4;
    goto inline$java.math.BigInteger$bitLength$$5$block13;

  inline$java.math.BigInteger$bitLength$$5$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$l7 := inline$java.math.BigInteger$bitLength$$5$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$5$block14;

  inline$java.math.BigInteger$bitLength$$5$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$5$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon12_Then, inline$java.math.BigInteger$bitLength$$5$anon12_Else;

  inline$java.math.BigInteger$bitLength$$5$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$5$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$block15;

  inline$java.math.BigInteger$bitLength$$5$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$5$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$5$anon9;

  inline$java.math.BigInteger$bitLength$$5$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$i8 := inline$java.math.BigInteger$bitLength$$5$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$5$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$5$block14;

  inline$java.math.BigInteger$bitLength$$5$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$5$$return := inline$java.math.BigInteger$bitLength$$5$i8;
    goto inline$java.math.BigInteger$bitLength$$5$block16;

  inline$java.math.BigInteger$bitLength$$5$block16:
    goto inline$java.math.BigInteger$bitLength$$5$Return;

  inline$java.math.BigInteger$bitLength$$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0 := inline$java.math.BigInteger$bitLength$$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$bitLength$$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6:
    goto inline$java.math.BigInteger$bitLength$$6$Entry;

  inline$java.math.BigInteger$bitLength$$6$Entry:
    inline$java.math.BigInteger$bitLength$$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$bitLength$$6$$b1, inline$java.math.BigInteger$bitLength$$6$$b3, inline$java.math.BigInteger$bitLength$$6$i8, inline$java.math.BigInteger$bitLength$$6$l7, inline$java.math.BigInteger$bitLength$$6$$l4, inline$java.math.BigInteger$bitLength$$6$$b5, inline$java.math.BigInteger$bitLength$$6$$l0, inline$java.math.BigInteger$bitLength$$6$$l2, inline$java.math.BigInteger$bitLength$$6$r0, inline$java.math.BigInteger$bitLength$$6$$l6, inline$java.math.BigInteger$bitLength$$6$$return, inline$java.math.BigInteger$bitLength$$6$$exception;
    goto inline$java.math.BigInteger$bitLength$$6$anon0;

  inline$java.math.BigInteger$bitLength$$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$6$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$r0 := inline$java.math.BigInteger$bitLength$$6$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon10_Then, inline$java.math.BigInteger$bitLength$$6$anon10_Else;

  inline$java.math.BigInteger$bitLength$$6$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block11;

  inline$java.math.BigInteger$bitLength$$6$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon3;

  inline$java.math.BigInteger$bitLength$$6$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$6$block16;

  inline$java.math.BigInteger$bitLength$$6$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon11_Then, inline$java.math.BigInteger$bitLength$$6$anon11_Else;

  inline$java.math.BigInteger$bitLength$$6$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block12;

  inline$java.math.BigInteger$bitLength$$6$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$6$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon6;

  inline$java.math.BigInteger$bitLength$$6$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$block13;

  inline$java.math.BigInteger$bitLength$$6$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$l6 := -inline$java.math.BigInteger$bitLength$$6$$l4;
    goto inline$java.math.BigInteger$bitLength$$6$block13;

  inline$java.math.BigInteger$bitLength$$6$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$l7 := inline$java.math.BigInteger$bitLength$$6$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$6$block14;

  inline$java.math.BigInteger$bitLength$$6$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$6$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon12_Then, inline$java.math.BigInteger$bitLength$$6$anon12_Else;

  inline$java.math.BigInteger$bitLength$$6$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$6$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$block15;

  inline$java.math.BigInteger$bitLength$$6$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$6$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$6$anon9;

  inline$java.math.BigInteger$bitLength$$6$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$i8 := inline$java.math.BigInteger$bitLength$$6$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$6$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$6$block14;

  inline$java.math.BigInteger$bitLength$$6$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$6$$return := inline$java.math.BigInteger$bitLength$$6$i8;
    goto inline$java.math.BigInteger$bitLength$$6$block16;

  inline$java.math.BigInteger$bitLength$$6$block16:
    goto inline$java.math.BigInteger$bitLength$$6$Return;

  inline$java.math.BigInteger$bitLength$$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1 := inline$java.math.BigInteger$bitLength$$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$bitLength$$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$4$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$4$$r3, inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$4$$l0, inline$java.math.BigInteger$equals$java.lang.Object$4$$r4, inline$java.math.BigInteger$equals$java.lang.Object$4$$b2, inline$java.math.BigInteger$equals$java.lang.Object$4$r2, inline$java.math.BigInteger$equals$java.lang.Object$4$$l1, inline$java.math.BigInteger$equals$java.lang.Object$4$r1, inline$java.math.BigInteger$equals$java.lang.Object$4$r0, inline$java.math.BigInteger$equals$java.lang.Object$4$$return, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$r0 := inline$java.math.BigInteger$equals$java.lang.Object$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$r1 := inline$java.math.BigInteger$equals$java.lang.Object$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$r3, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$4$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$r4, inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$4$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$4$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$4$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$4$r2 := inline$java.math.BigInteger$equals$java.lang.Object$4$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$4$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$4$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$4$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$4$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$4$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$4$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$4$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$4$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$5$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$5$$r3, inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$5$$l0, inline$java.math.BigInteger$equals$java.lang.Object$5$$r4, inline$java.math.BigInteger$equals$java.lang.Object$5$$b2, inline$java.math.BigInteger$equals$java.lang.Object$5$r2, inline$java.math.BigInteger$equals$java.lang.Object$5$$l1, inline$java.math.BigInteger$equals$java.lang.Object$5$r1, inline$java.math.BigInteger$equals$java.lang.Object$5$r0, inline$java.math.BigInteger$equals$java.lang.Object$5$$return, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$r0 := inline$java.math.BigInteger$equals$java.lang.Object$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$r1 := inline$java.math.BigInteger$equals$java.lang.Object$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$r3, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$5$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$r4, inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$5$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$5$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$5$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$5$r2 := inline$java.math.BigInteger$equals$java.lang.Object$5$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$5$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$5$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$5$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$5$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$5$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$5$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$5$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$5$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$equals$java.lang.Object$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$3$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$25$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$25$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$25$r0, inline$java.math.BigInteger$$la$init$ra$$long$25$l0, inline$java.math.BigInteger$$la$init$ra$$long$25$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$25$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$25$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$25$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$25$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$25$r0 := inline$java.math.BigInteger$$la$init$ra$$long$25$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$25$l0 := inline$java.math.BigInteger$$la$init$ra$$long$25$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$25$Entry;

  inline$java.lang.Object$$la$init$ra$$$25$Entry:
    inline$java.lang.Object$$la$init$ra$$$25$$this := inline$java.math.BigInteger$$la$init$ra$$long$25$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$25$anon0;

  inline$java.lang.Object$$la$init$ra$$$25$anon0:
    inline$java.lang.Object$$la$init$ra$$$25$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$25$Return;

  inline$java.lang.Object$$la$init$ra$$$25$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$25$$exception := inline$java.lang.Object$$la$init$ra$$$25$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$25$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$25$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$25$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$25$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$25$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$25$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception := inline$java.math.BigInteger$$la$init$ra$$long$25$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$3$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$3$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$4$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$26$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$26$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$26$r0, inline$java.math.BigInteger$$la$init$ra$$long$26$l0, inline$java.math.BigInteger$$la$init$ra$$long$26$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$26$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$26$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$26$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$26$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$26$r0 := inline$java.math.BigInteger$$la$init$ra$$long$26$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$26$l0 := inline$java.math.BigInteger$$la$init$ra$$long$26$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$26$Entry;

  inline$java.lang.Object$$la$init$ra$$$26$Entry:
    inline$java.lang.Object$$la$init$ra$$$26$$this := inline$java.math.BigInteger$$la$init$ra$$long$26$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$26$anon0;

  inline$java.lang.Object$$la$init$ra$$$26$anon0:
    inline$java.lang.Object$$la$init$ra$$$26$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$26$Return;

  inline$java.lang.Object$$la$init$ra$$$26$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$26$$exception := inline$java.lang.Object$$la$init$ra$$$26$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$26$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$26$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$26$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$26$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$26$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$26$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$26$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$4$Entry;

  inline$java.math.BigInteger$shiftRight$int$4$Entry:
    inline$java.math.BigInteger$shiftRight$int$4$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$4$r0, inline$java.math.BigInteger$shiftRight$int$4$$l2, inline$java.math.BigInteger$shiftRight$int$4$i0, inline$java.math.BigInteger$shiftRight$int$4$$r1, inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$4$$l1, inline$java.math.BigInteger$shiftRight$int$4$$return, inline$java.math.BigInteger$shiftRight$int$4$$exception;
    inline$java.math.BigInteger$shiftRight$int$4$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$4$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$4$anon0;

  inline$java.math.BigInteger$shiftRight$int$4$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$4$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$4$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$r0 := inline$java.math.BigInteger$shiftRight$int$4$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$i0 := inline$java.math.BigInteger$shiftRight$int$4$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$4$$r1 := inline$java.math.BigInteger$shiftRight$int$4$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$4$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$4$$l1, 
  inline$java.math.BigInteger$shiftRight$int$4$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$27$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$27$$this := inline$java.math.BigInteger$shiftRight$int$4$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$4$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$27$r0, inline$java.math.BigInteger$$la$init$ra$$long$27$l0, inline$java.math.BigInteger$$la$init$ra$$long$27$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$27$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$27$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$27$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$27$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$27$r0 := inline$java.math.BigInteger$$la$init$ra$$long$27$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$27$l0 := inline$java.math.BigInteger$$la$init$ra$$long$27$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$27$Entry;

  inline$java.lang.Object$$la$init$ra$$$27$Entry:
    inline$java.lang.Object$$la$init$ra$$$27$$this := inline$java.math.BigInteger$$la$init$ra$$long$27$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$27$anon0;

  inline$java.lang.Object$$la$init$ra$$$27$anon0:
    inline$java.lang.Object$$la$init$ra$$$27$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$27$Return;

  inline$java.lang.Object$$la$init$ra$$$27$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$27$$exception := inline$java.lang.Object$$la$init$ra$$$27$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$27$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$27$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$27$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$27$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$27$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$27$Return:
    inline$java.math.BigInteger$shiftRight$int$4$$exception := inline$java.math.BigInteger$$la$init$ra$$long$27$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$4$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$4$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$4$$return := inline$java.math.BigInteger$shiftRight$int$4$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$4$block4;

  inline$java.math.BigInteger$shiftRight$int$4$block4:
    goto inline$java.math.BigInteger$shiftRight$int$4$Return;

  inline$java.math.BigInteger$shiftRight$int$4$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2 := inline$java.math.BigInteger$shiftRight$int$4$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftRight$int$4$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$7$Entry;

  inline$java.math.BigInteger$shiftLeft$int$7$Entry:
    inline$java.math.BigInteger$shiftLeft$int$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2;
    inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$7$$l2, inline$java.math.BigInteger$shiftLeft$int$7$$l1, inline$java.math.BigInteger$shiftLeft$int$7$r0, inline$java.math.BigInteger$shiftLeft$int$7$i0, inline$java.math.BigInteger$shiftLeft$int$7$$r1, inline$java.math.BigInteger$shiftLeft$int$7$$return, inline$java.math.BigInteger$shiftLeft$int$7$$exception;
    inline$java.math.BigInteger$shiftLeft$int$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$7$anon0;

  inline$java.math.BigInteger$shiftLeft$int$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$r0 := inline$java.math.BigInteger$shiftLeft$int$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$i0 := inline$java.math.BigInteger$shiftLeft$int$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$7$$r1 := inline$java.math.BigInteger$shiftLeft$int$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$7$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$7$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$28$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$28$$this := inline$java.math.BigInteger$shiftLeft$int$7$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$28$r0, inline$java.math.BigInteger$$la$init$ra$$long$28$l0, inline$java.math.BigInteger$$la$init$ra$$long$28$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$28$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$28$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$28$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$28$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$28$r0 := inline$java.math.BigInteger$$la$init$ra$$long$28$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$28$l0 := inline$java.math.BigInteger$$la$init$ra$$long$28$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$28$Entry;

  inline$java.lang.Object$$la$init$ra$$$28$Entry:
    inline$java.lang.Object$$la$init$ra$$$28$$this := inline$java.math.BigInteger$$la$init$ra$$long$28$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$28$anon0;

  inline$java.lang.Object$$la$init$ra$$$28$anon0:
    inline$java.lang.Object$$la$init$ra$$$28$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$28$Return;

  inline$java.lang.Object$$la$init$ra$$$28$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$28$$exception := inline$java.lang.Object$$la$init$ra$$$28$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$28$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$28$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$28$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$28$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$28$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$28$Return:
    inline$java.math.BigInteger$shiftLeft$int$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$28$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$7$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$7$$return := inline$java.math.BigInteger$shiftLeft$int$7$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$7$block5;

  inline$java.math.BigInteger$shiftLeft$int$7$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$7$Return;

  inline$java.math.BigInteger$shiftLeft$int$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11 := inline$java.math.BigInteger$shiftLeft$int$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$29$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$29$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$29$r0, inline$java.math.BigInteger$$la$init$ra$$long$29$l0, inline$java.math.BigInteger$$la$init$ra$$long$29$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$29$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$29$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$29$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$29$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$29$r0 := inline$java.math.BigInteger$$la$init$ra$$long$29$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$29$l0 := inline$java.math.BigInteger$$la$init$ra$$long$29$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$29$Entry;

  inline$java.lang.Object$$la$init$ra$$$29$Entry:
    inline$java.lang.Object$$la$init$ra$$$29$$this := inline$java.math.BigInteger$$la$init$ra$$long$29$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$29$anon0;

  inline$java.lang.Object$$la$init$ra$$$29$anon0:
    inline$java.lang.Object$$la$init$ra$$$29$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$29$Return;

  inline$java.lang.Object$$la$init$ra$$$29$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$29$$exception := inline$java.lang.Object$$la$init$ra$$$29$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$29$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$29$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$29$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$29$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$29$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$29$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$29$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$5$Entry;

  inline$java.math.BigInteger$shiftRight$int$5$Entry:
    inline$java.math.BigInteger$shiftRight$int$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$5$r0, inline$java.math.BigInteger$shiftRight$int$5$$l2, inline$java.math.BigInteger$shiftRight$int$5$i0, inline$java.math.BigInteger$shiftRight$int$5$$r1, inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$5$$l1, inline$java.math.BigInteger$shiftRight$int$5$$return, inline$java.math.BigInteger$shiftRight$int$5$$exception;
    inline$java.math.BigInteger$shiftRight$int$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$5$anon0;

  inline$java.math.BigInteger$shiftRight$int$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$r0 := inline$java.math.BigInteger$shiftRight$int$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$i0 := inline$java.math.BigInteger$shiftRight$int$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$5$$r1 := inline$java.math.BigInteger$shiftRight$int$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$5$$l1, 
  inline$java.math.BigInteger$shiftRight$int$5$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$30$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$30$$this := inline$java.math.BigInteger$shiftRight$int$5$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$30$r0, inline$java.math.BigInteger$$la$init$ra$$long$30$l0, inline$java.math.BigInteger$$la$init$ra$$long$30$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$30$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$30$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$30$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$30$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$30$r0 := inline$java.math.BigInteger$$la$init$ra$$long$30$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$30$l0 := inline$java.math.BigInteger$$la$init$ra$$long$30$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$30$Entry;

  inline$java.lang.Object$$la$init$ra$$$30$Entry:
    inline$java.lang.Object$$la$init$ra$$$30$$this := inline$java.math.BigInteger$$la$init$ra$$long$30$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$30$anon0;

  inline$java.lang.Object$$la$init$ra$$$30$anon0:
    inline$java.lang.Object$$la$init$ra$$$30$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$30$Return;

  inline$java.lang.Object$$la$init$ra$$$30$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$30$$exception := inline$java.lang.Object$$la$init$ra$$$30$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$30$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$30$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$30$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$30$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$30$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$30$Return:
    inline$java.math.BigInteger$shiftRight$int$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$30$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$5$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$5$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$5$$return := inline$java.math.BigInteger$shiftRight$int$5$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$5$block4;

  inline$java.math.BigInteger$shiftRight$int$5$block4:
    goto inline$java.math.BigInteger$shiftRight$int$5$Return;

  inline$java.math.BigInteger$shiftRight$int$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4 := inline$java.math.BigInteger$shiftRight$int$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftRight$int$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$8$Entry;

  inline$java.math.BigInteger$shiftLeft$int$8$Entry:
    inline$java.math.BigInteger$shiftLeft$int$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4;
    inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$8$$l2, inline$java.math.BigInteger$shiftLeft$int$8$$l1, inline$java.math.BigInteger$shiftLeft$int$8$r0, inline$java.math.BigInteger$shiftLeft$int$8$i0, inline$java.math.BigInteger$shiftLeft$int$8$$r1, inline$java.math.BigInteger$shiftLeft$int$8$$return, inline$java.math.BigInteger$shiftLeft$int$8$$exception;
    inline$java.math.BigInteger$shiftLeft$int$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$8$anon0;

  inline$java.math.BigInteger$shiftLeft$int$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$r0 := inline$java.math.BigInteger$shiftLeft$int$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$i0 := inline$java.math.BigInteger$shiftLeft$int$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$8$$r1 := inline$java.math.BigInteger$shiftLeft$int$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$8$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$8$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$31$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$31$$this := inline$java.math.BigInteger$shiftLeft$int$8$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$31$r0, inline$java.math.BigInteger$$la$init$ra$$long$31$l0, inline$java.math.BigInteger$$la$init$ra$$long$31$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$31$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$31$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$31$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$31$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$31$r0 := inline$java.math.BigInteger$$la$init$ra$$long$31$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$31$l0 := inline$java.math.BigInteger$$la$init$ra$$long$31$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$31$Entry;

  inline$java.lang.Object$$la$init$ra$$$31$Entry:
    inline$java.lang.Object$$la$init$ra$$$31$$this := inline$java.math.BigInteger$$la$init$ra$$long$31$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$31$anon0;

  inline$java.lang.Object$$la$init$ra$$$31$anon0:
    inline$java.lang.Object$$la$init$ra$$$31$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$31$Return;

  inline$java.lang.Object$$la$init$ra$$$31$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$31$$exception := inline$java.lang.Object$$la$init$ra$$$31$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$31$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$31$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$31$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$31$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$31$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$31$Return:
    inline$java.math.BigInteger$shiftLeft$int$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$31$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$8$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$8$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$8$$return := inline$java.math.BigInteger$shiftLeft$int$8$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$8$block5;

  inline$java.math.BigInteger$shiftLeft$int$8$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$8$Return;

  inline$java.math.BigInteger$shiftLeft$int$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12 := inline$java.math.BigInteger$shiftLeft$int$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$32$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$32$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$32$r0, inline$java.math.BigInteger$$la$init$ra$$long$32$l0, inline$java.math.BigInteger$$la$init$ra$$long$32$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$32$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$32$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$32$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$32$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$32$r0 := inline$java.math.BigInteger$$la$init$ra$$long$32$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$32$l0 := inline$java.math.BigInteger$$la$init$ra$$long$32$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$32$Entry;

  inline$java.lang.Object$$la$init$ra$$$32$Entry:
    inline$java.lang.Object$$la$init$ra$$$32$$this := inline$java.math.BigInteger$$la$init$ra$$long$32$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$32$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$32$anon0;

  inline$java.lang.Object$$la$init$ra$$$32$anon0:
    inline$java.lang.Object$$la$init$ra$$$32$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$32$Return;

  inline$java.lang.Object$$la$init$ra$$$32$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$32$$exception := inline$java.lang.Object$$la$init$ra$$$32$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$32$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$32$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$32$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$32$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$32$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$32$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$32$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$5$r1, inline$java.math.BigInteger$add$java.math.BigInteger$5$r0, inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$5$$return, inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$5$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$5$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$33$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$33$$this := inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$33$r0, inline$java.math.BigInteger$$la$init$ra$$long$33$l0, inline$java.math.BigInteger$$la$init$ra$$long$33$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$33$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$33$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$33$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$33$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$33$r0 := inline$java.math.BigInteger$$la$init$ra$$long$33$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$33$l0 := inline$java.math.BigInteger$$la$init$ra$$long$33$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$33$Entry;

  inline$java.lang.Object$$la$init$ra$$$33$Entry:
    inline$java.lang.Object$$la$init$ra$$$33$$this := inline$java.math.BigInteger$$la$init$ra$$long$33$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$33$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$33$anon0;

  inline$java.lang.Object$$la$init$ra$$$33$anon0:
    inline$java.lang.Object$$la$init$ra$$$33$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$33$Return;

  inline$java.lang.Object$$la$init$ra$$$33$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$33$$exception := inline$java.lang.Object$$la$init$ra$$$33$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$33$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$33$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$33$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$33$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$33$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$33$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$33$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$5$$return := inline$java.math.BigInteger$add$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$6$r1, inline$java.math.BigInteger$add$java.math.BigInteger$6$r0, inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$6$$return, inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$6$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$34$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$34$$this := inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$34$r0, inline$java.math.BigInteger$$la$init$ra$$long$34$l0, inline$java.math.BigInteger$$la$init$ra$$long$34$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$34$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$34$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$34$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$34$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$34$r0 := inline$java.math.BigInteger$$la$init$ra$$long$34$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$34$l0 := inline$java.math.BigInteger$$la$init$ra$$long$34$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$34$Entry;

  inline$java.lang.Object$$la$init$ra$$$34$Entry:
    inline$java.lang.Object$$la$init$ra$$$34$$this := inline$java.math.BigInteger$$la$init$ra$$long$34$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$34$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$34$anon0;

  inline$java.lang.Object$$la$init$ra$$$34$anon0:
    inline$java.lang.Object$$la$init$ra$$$34$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$34$Return;

  inline$java.lang.Object$$la$init$ra$$$34$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$34$$exception := inline$java.lang.Object$$la$init$ra$$$34$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$34$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$34$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$34$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$34$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$34$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$34$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$34$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$6$$return := inline$java.math.BigInteger$add$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$8$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$35$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$35$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$35$r0, inline$java.math.BigInteger$$la$init$ra$$long$35$l0, inline$java.math.BigInteger$$la$init$ra$$long$35$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$35$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$35$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$35$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$35$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$35$r0 := inline$java.math.BigInteger$$la$init$ra$$long$35$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$35$l0 := inline$java.math.BigInteger$$la$init$ra$$long$35$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$35$Entry;

  inline$java.lang.Object$$la$init$ra$$$35$Entry:
    inline$java.lang.Object$$la$init$ra$$$35$$this := inline$java.math.BigInteger$$la$init$ra$$long$35$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$35$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$35$anon0;

  inline$java.lang.Object$$la$init$ra$$$35$anon0:
    inline$java.lang.Object$$la$init$ra$$$35$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$35$Return;

  inline$java.lang.Object$$la$init$ra$$$35$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$35$$exception := inline$java.lang.Object$$la$init$ra$$$35$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$35$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$35$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$35$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$35$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$35$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$35$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$35$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$9$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$36$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$36$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$36$r0, inline$java.math.BigInteger$$la$init$ra$$long$36$l0, inline$java.math.BigInteger$$la$init$ra$$long$36$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$36$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$36$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$36$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$36$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$36$r0 := inline$java.math.BigInteger$$la$init$ra$$long$36$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$36$l0 := inline$java.math.BigInteger$$la$init$ra$$long$36$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$36$Entry;

  inline$java.lang.Object$$la$init$ra$$$36$Entry:
    inline$java.lang.Object$$la$init$ra$$$36$$this := inline$java.math.BigInteger$$la$init$ra$$long$36$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$36$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$36$anon0;

  inline$java.lang.Object$$la$init$ra$$$36$anon0:
    inline$java.lang.Object$$la$init$ra$$$36$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$36$Return;

  inline$java.lang.Object$$la$init$ra$$$36$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$36$$exception := inline$java.lang.Object$$la$init$ra$$$36$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$36$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$36$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$36$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$36$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$36$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$36$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$36$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$9$Entry;

  inline$java.math.BigInteger$shiftLeft$int$9$Entry:
    inline$java.math.BigInteger$shiftLeft$int$9$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r16;
    inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$9$$l2, inline$java.math.BigInteger$shiftLeft$int$9$$l1, inline$java.math.BigInteger$shiftLeft$int$9$r0, inline$java.math.BigInteger$shiftLeft$int$9$i0, inline$java.math.BigInteger$shiftLeft$int$9$$r1, inline$java.math.BigInteger$shiftLeft$int$9$$return, inline$java.math.BigInteger$shiftLeft$int$9$$exception;
    inline$java.math.BigInteger$shiftLeft$int$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$9$anon0;

  inline$java.math.BigInteger$shiftLeft$int$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$r0 := inline$java.math.BigInteger$shiftLeft$int$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$i0 := inline$java.math.BigInteger$shiftLeft$int$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$9$$r1 := inline$java.math.BigInteger$shiftLeft$int$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$9$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$9$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$37$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$37$$this := inline$java.math.BigInteger$shiftLeft$int$9$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$37$r0, inline$java.math.BigInteger$$la$init$ra$$long$37$l0, inline$java.math.BigInteger$$la$init$ra$$long$37$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$37$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$37$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$37$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$37$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$37$r0 := inline$java.math.BigInteger$$la$init$ra$$long$37$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$37$l0 := inline$java.math.BigInteger$$la$init$ra$$long$37$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$37$Entry;

  inline$java.lang.Object$$la$init$ra$$$37$Entry:
    inline$java.lang.Object$$la$init$ra$$$37$$this := inline$java.math.BigInteger$$la$init$ra$$long$37$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$37$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$37$anon0;

  inline$java.lang.Object$$la$init$ra$$$37$anon0:
    inline$java.lang.Object$$la$init$ra$$$37$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$37$Return;

  inline$java.lang.Object$$la$init$ra$$$37$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$37$$exception := inline$java.lang.Object$$la$init$ra$$$37$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$37$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$37$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$37$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$37$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$37$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$37$Return:
    inline$java.math.BigInteger$shiftLeft$int$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$37$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$9$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$9$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$9$$return := inline$java.math.BigInteger$shiftLeft$int$9$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$9$block5;

  inline$java.math.BigInteger$shiftLeft$int$9$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$9$Return;

  inline$java.math.BigInteger$shiftLeft$int$9$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17 := inline$java.math.BigInteger$shiftLeft$int$9$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$9$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$7$r1, inline$java.math.BigInteger$add$java.math.BigInteger$7$r0, inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$7$$return, inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$7$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$7$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$7$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$38$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$38$$this := inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$38$r0, inline$java.math.BigInteger$$la$init$ra$$long$38$l0, inline$java.math.BigInteger$$la$init$ra$$long$38$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$38$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$38$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$38$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$38$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$38$r0 := inline$java.math.BigInteger$$la$init$ra$$long$38$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$38$l0 := inline$java.math.BigInteger$$la$init$ra$$long$38$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$38$Entry;

  inline$java.lang.Object$$la$init$ra$$$38$Entry:
    inline$java.lang.Object$$la$init$ra$$$38$$this := inline$java.math.BigInteger$$la$init$ra$$long$38$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$38$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$38$anon0;

  inline$java.lang.Object$$la$init$ra$$$38$anon0:
    inline$java.lang.Object$$la$init$ra$$$38$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$38$Return;

  inline$java.lang.Object$$la$init$ra$$$38$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$38$$exception := inline$java.lang.Object$$la$init$ra$$$38$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$38$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$38$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$38$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$38$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$38$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$38$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$38$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$7$$return := inline$java.math.BigInteger$add$java.math.BigInteger$7$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$7$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$10$Entry;

  inline$java.math.BigInteger$shiftLeft$int$10$Entry:
    inline$java.math.BigInteger$shiftLeft$int$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r7;
    inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$10$$l2, inline$java.math.BigInteger$shiftLeft$int$10$$l1, inline$java.math.BigInteger$shiftLeft$int$10$r0, inline$java.math.BigInteger$shiftLeft$int$10$i0, inline$java.math.BigInteger$shiftLeft$int$10$$r1, inline$java.math.BigInteger$shiftLeft$int$10$$return, inline$java.math.BigInteger$shiftLeft$int$10$$exception;
    inline$java.math.BigInteger$shiftLeft$int$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$10$anon0;

  inline$java.math.BigInteger$shiftLeft$int$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$r0 := inline$java.math.BigInteger$shiftLeft$int$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$i0 := inline$java.math.BigInteger$shiftLeft$int$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$10$$r1 := inline$java.math.BigInteger$shiftLeft$int$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$10$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$10$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$39$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$39$$this := inline$java.math.BigInteger$shiftLeft$int$10$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$39$r0, inline$java.math.BigInteger$$la$init$ra$$long$39$l0, inline$java.math.BigInteger$$la$init$ra$$long$39$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$39$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$39$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$39$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$39$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$39$r0 := inline$java.math.BigInteger$$la$init$ra$$long$39$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$39$l0 := inline$java.math.BigInteger$$la$init$ra$$long$39$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$39$Entry;

  inline$java.lang.Object$$la$init$ra$$$39$Entry:
    inline$java.lang.Object$$la$init$ra$$$39$$this := inline$java.math.BigInteger$$la$init$ra$$long$39$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$39$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$39$anon0;

  inline$java.lang.Object$$la$init$ra$$$39$anon0:
    inline$java.lang.Object$$la$init$ra$$$39$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$39$Return;

  inline$java.lang.Object$$la$init$ra$$$39$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$39$$exception := inline$java.lang.Object$$la$init$ra$$$39$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$39$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$39$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$39$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$39$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$39$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$39$Return:
    inline$java.math.BigInteger$shiftLeft$int$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$39$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$10$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$10$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$10$$return := inline$java.math.BigInteger$shiftLeft$int$10$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$10$block5;

  inline$java.math.BigInteger$shiftLeft$int$10$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$10$Return;

  inline$java.math.BigInteger$shiftLeft$int$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19 := inline$java.math.BigInteger$shiftLeft$int$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$shiftLeft$int$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$8$r1, inline$java.math.BigInteger$add$java.math.BigInteger$8$r0, inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$8$$return, inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$8$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$8$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$8$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$8$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$40$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$40$$this := inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$40$r0, inline$java.math.BigInteger$$la$init$ra$$long$40$l0, inline$java.math.BigInteger$$la$init$ra$$long$40$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$40$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$40$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$40$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$40$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$40$r0 := inline$java.math.BigInteger$$la$init$ra$$long$40$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$40$l0 := inline$java.math.BigInteger$$la$init$ra$$long$40$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$40$Entry;

  inline$java.lang.Object$$la$init$ra$$$40$Entry:
    inline$java.lang.Object$$la$init$ra$$$40$$this := inline$java.math.BigInteger$$la$init$ra$$long$40$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$40$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$40$anon0;

  inline$java.lang.Object$$la$init$ra$$$40$anon0:
    inline$java.lang.Object$$la$init$ra$$$40$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$40$Return;

  inline$java.lang.Object$$la$init$ra$$$40$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$40$$exception := inline$java.lang.Object$$la$init$ra$$$40$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$40$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$40$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$40$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$40$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$40$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$40$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception := inline$java.math.BigInteger$$la$init$ra$$long$40$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$8$$return := inline$java.math.BigInteger$add$java.math.BigInteger$8$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$8$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$Return:
    r6 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$1$$exception;
    goto anon39$4;

  anon39$4:
    assert {:sourceloc "ModPow1.java", 159, -1, -1, -1} true;
    goto anon77_Then, anon77_Else;

  anon77_Then:
    assume {:partition} r2 != unsafe.$null;
    $exception := $exception;
    goto anon42;

  anon77_Else:
    assume {:partition} r2 == unsafe.$null;
    call $fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_7;
    return;

  anon42:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$this := r2;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0 := r22;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$9$r1, inline$java.math.BigInteger$add$java.math.BigInteger$9$r0, inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$9$$return, inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$9$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$9$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$9$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$9$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$41$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$41$$this := inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$41$r0, inline$java.math.BigInteger$$la$init$ra$$long$41$l0, inline$java.math.BigInteger$$la$init$ra$$long$41$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$41$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$41$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$41$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$41$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$41$r0 := inline$java.math.BigInteger$$la$init$ra$$long$41$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$41$l0 := inline$java.math.BigInteger$$la$init$ra$$long$41$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$41$Entry;

  inline$java.lang.Object$$la$init$ra$$$41$Entry:
    inline$java.lang.Object$$la$init$ra$$$41$$this := inline$java.math.BigInteger$$la$init$ra$$long$41$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$41$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$41$anon0;

  inline$java.lang.Object$$la$init$ra$$$41$anon0:
    inline$java.lang.Object$$la$init$ra$$$41$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$41$Return;

  inline$java.lang.Object$$la$init$ra$$$41$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$41$$exception := inline$java.lang.Object$$la$init$ra$$$41$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$41$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$41$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$41$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$41$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$41$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$41$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception := inline$java.math.BigInteger$$la$init$ra$$long$41$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$9$$return := inline$java.math.BigInteger$add$java.math.BigInteger$9$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$9$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$9$Return:
    $r12 := inline$java.math.BigInteger$add$java.math.BigInteger$9$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$9$$exception;
    goto anon42$1;

  anon42$1:
    assert {:sourceloc "ModPow1.java", 159, -1, -1, -1} true;
    goto anon78_Then, anon78_Else;

  anon78_Then:
    assume {:partition} r4 != unsafe.$null;
    $exception := $exception;
    goto anon45;

  anon78_Else:
    assume {:partition} r4 == unsafe.$null;
    call $fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_8;
    return;

  anon45:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$this := r4;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0 := r3;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$10$r1, inline$java.math.BigInteger$add$java.math.BigInteger$10$r0, inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$10$$return, inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$10$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$10$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$10$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$10$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$42$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$42$$this := inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$42$r0, inline$java.math.BigInteger$$la$init$ra$$long$42$l0, inline$java.math.BigInteger$$la$init$ra$$long$42$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$42$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$42$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$42$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$42$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$42$r0 := inline$java.math.BigInteger$$la$init$ra$$long$42$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$42$l0 := inline$java.math.BigInteger$$la$init$ra$$long$42$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$42$Entry;

  inline$java.lang.Object$$la$init$ra$$$42$Entry:
    inline$java.lang.Object$$la$init$ra$$$42$$this := inline$java.math.BigInteger$$la$init$ra$$long$42$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$42$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$42$anon0;

  inline$java.lang.Object$$la$init$ra$$$42$anon0:
    inline$java.lang.Object$$la$init$ra$$$42$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$42$Return;

  inline$java.lang.Object$$la$init$ra$$$42$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$42$$exception := inline$java.lang.Object$$la$init$ra$$$42$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$42$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$42$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$42$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$42$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$42$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$42$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$42$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$10$$return := inline$java.math.BigInteger$add$java.math.BigInteger$10$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$10$Return:
    $r13 := inline$java.math.BigInteger$add$java.math.BigInteger$10$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$10$$exception;
    goto anon45$1;

  anon45$1:
    assert {:sourceloc "ModPow1.java", 159, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Entry;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Entry:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0 := $r12;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1 := $r13;
    havoc inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$objIndex := unsafe.$objIndex;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$heap := unsafe.$heap;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon0;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$in_parameter__1;
    assert {:sourceloc "ModPow1.java", 95, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon55_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3:
    goto inline$java.math.BigInteger$bitLength$$7$Entry;

  inline$java.math.BigInteger$bitLength$$7$Entry:
    inline$java.math.BigInteger$bitLength$$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    havoc inline$java.math.BigInteger$bitLength$$7$$b1, inline$java.math.BigInteger$bitLength$$7$$b3, inline$java.math.BigInteger$bitLength$$7$i8, inline$java.math.BigInteger$bitLength$$7$l7, inline$java.math.BigInteger$bitLength$$7$$l4, inline$java.math.BigInteger$bitLength$$7$$b5, inline$java.math.BigInteger$bitLength$$7$$l0, inline$java.math.BigInteger$bitLength$$7$$l2, inline$java.math.BigInteger$bitLength$$7$r0, inline$java.math.BigInteger$bitLength$$7$$l6, inline$java.math.BigInteger$bitLength$$7$$return, inline$java.math.BigInteger$bitLength$$7$$exception;
    goto inline$java.math.BigInteger$bitLength$$7$anon0;

  inline$java.math.BigInteger$bitLength$$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$7$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$r0 := inline$java.math.BigInteger$bitLength$$7$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon10_Then, inline$java.math.BigInteger$bitLength$$7$anon10_Else;

  inline$java.math.BigInteger$bitLength$$7$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block11;

  inline$java.math.BigInteger$bitLength$$7$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon3;

  inline$java.math.BigInteger$bitLength$$7$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$7$block16;

  inline$java.math.BigInteger$bitLength$$7$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon11_Then, inline$java.math.BigInteger$bitLength$$7$anon11_Else;

  inline$java.math.BigInteger$bitLength$$7$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block12;

  inline$java.math.BigInteger$bitLength$$7$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$7$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon6;

  inline$java.math.BigInteger$bitLength$$7$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$block13;

  inline$java.math.BigInteger$bitLength$$7$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$l6 := -inline$java.math.BigInteger$bitLength$$7$$l4;
    goto inline$java.math.BigInteger$bitLength$$7$block13;

  inline$java.math.BigInteger$bitLength$$7$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$l7 := inline$java.math.BigInteger$bitLength$$7$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$7$block14;

  inline$java.math.BigInteger$bitLength$$7$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$7$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon12_Then, inline$java.math.BigInteger$bitLength$$7$anon12_Else;

  inline$java.math.BigInteger$bitLength$$7$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$7$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$block15;

  inline$java.math.BigInteger$bitLength$$7$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$7$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$7$anon9;

  inline$java.math.BigInteger$bitLength$$7$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$i8 := inline$java.math.BigInteger$bitLength$$7$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$7$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$7$block14;

  inline$java.math.BigInteger$bitLength$$7$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$7$$return := inline$java.math.BigInteger$bitLength$$7$i8;
    goto inline$java.math.BigInteger$bitLength$$7$block16;

  inline$java.math.BigInteger$bitLength$$7$block16:
    goto inline$java.math.BigInteger$bitLength$$7$Return;

  inline$java.math.BigInteger$bitLength$$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0 := inline$java.math.BigInteger$bitLength$$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$bitLength$$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon3$1:
    assert {:sourceloc "ModPow1.java", 96, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon56_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6:
    goto inline$java.math.BigInteger$bitLength$$8$Entry;

  inline$java.math.BigInteger$bitLength$$8$Entry:
    inline$java.math.BigInteger$bitLength$$8$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$bitLength$$8$$b1, inline$java.math.BigInteger$bitLength$$8$$b3, inline$java.math.BigInteger$bitLength$$8$i8, inline$java.math.BigInteger$bitLength$$8$l7, inline$java.math.BigInteger$bitLength$$8$$l4, inline$java.math.BigInteger$bitLength$$8$$b5, inline$java.math.BigInteger$bitLength$$8$$l0, inline$java.math.BigInteger$bitLength$$8$$l2, inline$java.math.BigInteger$bitLength$$8$r0, inline$java.math.BigInteger$bitLength$$8$$l6, inline$java.math.BigInteger$bitLength$$8$$return, inline$java.math.BigInteger$bitLength$$8$$exception;
    goto inline$java.math.BigInteger$bitLength$$8$anon0;

  inline$java.math.BigInteger$bitLength$$8$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$8$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$8$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$r0 := inline$java.math.BigInteger$bitLength$$8$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$8$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon10_Then, inline$java.math.BigInteger$bitLength$$8$anon10_Else;

  inline$java.math.BigInteger$bitLength$$8$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$block11;

  inline$java.math.BigInteger$bitLength$$8$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon3;

  inline$java.math.BigInteger$bitLength$$8$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$8$block16;

  inline$java.math.BigInteger$bitLength$$8$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$8$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon11_Then, inline$java.math.BigInteger$bitLength$$8$anon11_Else;

  inline$java.math.BigInteger$bitLength$$8$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$block12;

  inline$java.math.BigInteger$bitLength$$8$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$8$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon6;

  inline$java.math.BigInteger$bitLength$$8$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$block13;

  inline$java.math.BigInteger$bitLength$$8$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$8$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$l6 := -inline$java.math.BigInteger$bitLength$$8$$l4;
    goto inline$java.math.BigInteger$bitLength$$8$block13;

  inline$java.math.BigInteger$bitLength$$8$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$l7 := inline$java.math.BigInteger$bitLength$$8$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$8$block14;

  inline$java.math.BigInteger$bitLength$$8$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$8$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon12_Then, inline$java.math.BigInteger$bitLength$$8$anon12_Else;

  inline$java.math.BigInteger$bitLength$$8$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$8$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$block15;

  inline$java.math.BigInteger$bitLength$$8$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$8$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$8$anon9;

  inline$java.math.BigInteger$bitLength$$8$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$i8 := inline$java.math.BigInteger$bitLength$$8$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$8$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$8$block14;

  inline$java.math.BigInteger$bitLength$$8$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$8$$return := inline$java.math.BigInteger$bitLength$$8$i8;
    goto inline$java.math.BigInteger$bitLength$$8$block16;

  inline$java.math.BigInteger$bitLength$$8$block16:
    goto inline$java.math.BigInteger$bitLength$$8$Return;

  inline$java.math.BigInteger$bitLength$$8$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1 := inline$java.math.BigInteger$bitLength$$8$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$bitLength$$8$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$1:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$6$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r9;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$6$$r3, inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$6$$l0, inline$java.math.BigInteger$equals$java.lang.Object$6$$r4, inline$java.math.BigInteger$equals$java.lang.Object$6$$b2, inline$java.math.BigInteger$equals$java.lang.Object$6$r2, inline$java.math.BigInteger$equals$java.lang.Object$6$$l1, inline$java.math.BigInteger$equals$java.lang.Object$6$r1, inline$java.math.BigInteger$equals$java.lang.Object$6$r0, inline$java.math.BigInteger$equals$java.lang.Object$6$$return, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$r0 := inline$java.math.BigInteger$equals$java.lang.Object$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$r1 := inline$java.math.BigInteger$equals$java.lang.Object$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$r3, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$6$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$r4, inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$6$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$6$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$6$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$6$r2 := inline$java.math.BigInteger$equals$java.lang.Object$6$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$6$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$6$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$6$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$6$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$6$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$6$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$6$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$6$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0 := inline$java.math.BigInteger$equals$java.lang.Object$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon6$2:
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0
   == 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon57_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z0
   != 0;
    assert {:sourceloc "ModPow1.java", 97, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon9;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon9:
    assert {:sourceloc "ModPow1.java", 98, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10 := unsafe.java.math.BigInteger$java.math.BigInteger$ONE80;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Entry;

  inline$java.math.BigInteger$equals$java.lang.Object$7$Entry:
    inline$java.math.BigInteger$equals$java.lang.Object$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r10;
    havoc inline$java.math.BigInteger$equals$java.lang.Object$7$$r3, inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0, inline$java.math.BigInteger$equals$java.lang.Object$7$$l0, inline$java.math.BigInteger$equals$java.lang.Object$7$$r4, inline$java.math.BigInteger$equals$java.lang.Object$7$$b2, inline$java.math.BigInteger$equals$java.lang.Object$7$r2, inline$java.math.BigInteger$equals$java.lang.Object$7$$l1, inline$java.math.BigInteger$equals$java.lang.Object$7$r1, inline$java.math.BigInteger$equals$java.lang.Object$7$r0, inline$java.math.BigInteger$equals$java.lang.Object$7$$return, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon0;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$equals$java.lang.Object$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0, unsafe.$type]
   <: unsafe.java.lang.Object;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$r0 := inline$java.math.BigInteger$equals$java.lang.Object$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$r1 := inline$java.math.BigInteger$equals$java.lang.Object$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r0
   != inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block20;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon16_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r0
   == inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 70, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon3;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon3:
    assert {:sourceloc "BigInteger.java", 71, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block20:
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r1 != unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block21;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon17_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$r1 == unsafe.$null;
    assert {:sourceloc "BigInteger.java", 72, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon6;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon6:
    assert {:sourceloc "BigInteger.java", 73, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block21:
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$r3, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$7$r0);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$r4, inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := unsafe.java.lang.Object$getClass$(inline$java.math.BigInteger$equals$java.lang.Object$7$r1);
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$r3
   == inline$java.math.BigInteger$equals$java.lang.Object$7$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block22;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon18_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$r3
   != inline$java.math.BigInteger$equals$java.lang.Object$7$$r4;
    assert {:sourceloc "BigInteger.java", 74, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon9;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon9:
    assert {:sourceloc "BigInteger.java", 75, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block22:
    assert {:sourceloc "BigInteger.java", 76, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Then:
    assume {:partition} unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon12;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon19_Else:
    assume {:partition} !(unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r1, unsafe.$type]
   <: unsafe.java.math.BigInteger);
    call inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0 := unsafe.$new(unsafe.java.lang.ClassCastException);
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$fakelocal_0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon12:
    inline$java.math.BigInteger$equals$java.lang.Object$7$r2 := inline$java.math.BigInteger$equals$java.lang.Object$7$r1;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$l0 := unsafe.$heap[inline$java.math.BigInteger$equals$java.lang.Object$7$r2, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 := unsafe.$cmpInt(inline$java.math.BigInteger$equals$java.lang.Object$7$$l1, 
  inline$java.math.BigInteger$equals$java.lang.Object$7$$l0);
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Then, inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Else;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Then:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 == 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block23;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon20_Else:
    assume {:partition} inline$java.math.BigInteger$equals$java.lang.Object$7$$b2 != 0;
    assert {:sourceloc "BigInteger.java", 77, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$anon15;

  inline$java.math.BigInteger$equals$java.lang.Object$7$anon15:
    assert {:sourceloc "BigInteger.java", 78, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 0;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block23:
    assert {:sourceloc "BigInteger.java", 79, -1, -1, -1} true;
    inline$java.math.BigInteger$equals$java.lang.Object$7$$return := 1;
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$block24;

  inline$java.math.BigInteger$equals$java.lang.Object$7$block24:
    goto inline$java.math.BigInteger$equals$java.lang.Object$7$Return;

  inline$java.math.BigInteger$equals$java.lang.Object$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1 := inline$java.math.BigInteger$equals$java.lang.Object$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$equals$java.lang.Object$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block43$1:
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1
   == 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block44;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon58_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$z1
   != 0;
    assert {:sourceloc "ModPow1.java", 100, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon12;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon12:
    assert {:sourceloc "ModPow1.java", 101, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block44:
    assert {:sourceloc "ModPow1.java", 103, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r20 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 104, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.java.lang.Math$max$int_int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1);
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7
   > 800;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon59_Else:
    assume {:partition} 800
   >= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7;
    assert {:sourceloc "ModPow1.java", 105, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$5$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$43$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$43$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$43$r0, inline$java.math.BigInteger$$la$init$ra$$long$43$l0, inline$java.math.BigInteger$$la$init$ra$$long$43$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$43$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$43$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$43$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$43$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$43$r0 := inline$java.math.BigInteger$$la$init$ra$$long$43$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$43$l0 := inline$java.math.BigInteger$$la$init$ra$$long$43$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$43$Entry;

  inline$java.lang.Object$$la$init$ra$$$43$Entry:
    inline$java.lang.Object$$la$init$ra$$$43$$this := inline$java.math.BigInteger$$la$init$ra$$long$43$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$43$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$43$anon0;

  inline$java.lang.Object$$la$init$ra$$$43$anon0:
    inline$java.lang.Object$$la$init$ra$$$43$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$43$Return;

  inline$java.lang.Object$$la$init$ra$$$43$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$43$$exception := inline$java.lang.Object$$la$init$ra$$$43$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$43$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$43$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$43$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$43$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$43$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$43$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception := inline$java.math.BigInteger$$la$init$ra$$long$43$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$5$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$5$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon15$1:
    assert {:sourceloc "ModPow1.java", 106, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block45:
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i0
   - inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i1;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := unsafe.java.lang.Math$abs$int(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i2);
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3
   < 32;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block47;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon60_Else:
    assume {:partition} 32
   <= inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i3;
    assert {:sourceloc "ModPow1.java", 107, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Entry;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Entry:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    havoc inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon0;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Then, inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Else;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 != unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1 == unsafe.$null;
    call inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return := unsafe.$null;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$fakelocal_1;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0 := unsafe.$heap[inline$java.math.BigInteger$multiply$java.math.BigInteger$6$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2 := unsafe.$mulInt(inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l1, 
  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l0);
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$44$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$44$$this := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$44$r0, inline$java.math.BigInteger$$la$init$ra$$long$44$l0, inline$java.math.BigInteger$$la$init$ra$$long$44$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$44$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$44$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$44$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$44$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$44$r0 := inline$java.math.BigInteger$$la$init$ra$$long$44$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$44$l0 := inline$java.math.BigInteger$$la$init$ra$$long$44$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$44$Entry;

  inline$java.lang.Object$$la$init$ra$$$44$Entry:
    inline$java.lang.Object$$la$init$ra$$$44$$this := inline$java.math.BigInteger$$la$init$ra$$long$44$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$44$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$44$anon0;

  inline$java.lang.Object$$la$init$ra$$$44$anon0:
    inline$java.lang.Object$$la$init$ra$$$44$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$44$Return;

  inline$java.lang.Object$$la$init$ra$$$44$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$44$$exception := inline$java.lang.Object$$la$init$ra$$$44$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$44$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$44$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$44$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$44$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$44$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$44$Return:
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$44$$exception;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3$1;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$anon3$1:
    assert {:sourceloc "BigInteger.java", 18, -1, -1, -1} true;
    inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$r2;
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$block3;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$block3:
    goto inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return;

  inline$java.math.BigInteger$multiply$java.math.BigInteger$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$multiply$java.math.BigInteger$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon18$1:
    assert {:sourceloc "ModPow1.java", 109, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block47:
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon21;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon61_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_2;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon21:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5 := unsafe.$divInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Then:
    assume {:partition} 2 != 0;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon62_Else:
    assume {:partition} 2 == 0;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3 := unsafe.$new(unsafe.java.lang.ArithmeticException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_3;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4 := unsafe.$modInt(inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i7, 2);
    assert {:sourceloc "ModPow1.java", 112, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i5
   + inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i4;
    assert {:sourceloc "ModPow1.java", 114, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$6$Entry;

  inline$java.math.BigInteger$shiftRight$int$6$Entry:
    inline$java.math.BigInteger$shiftRight$int$6$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$6$r0, inline$java.math.BigInteger$shiftRight$int$6$$l2, inline$java.math.BigInteger$shiftRight$int$6$i0, inline$java.math.BigInteger$shiftRight$int$6$$r1, inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$6$$l1, inline$java.math.BigInteger$shiftRight$int$6$$return, inline$java.math.BigInteger$shiftRight$int$6$$exception;
    inline$java.math.BigInteger$shiftRight$int$6$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$6$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$6$anon0;

  inline$java.math.BigInteger$shiftRight$int$6$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$6$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$6$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$r0 := inline$java.math.BigInteger$shiftRight$int$6$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$i0 := inline$java.math.BigInteger$shiftRight$int$6$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$6$$r1 := inline$java.math.BigInteger$shiftRight$int$6$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$6$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$6$$l1, 
  inline$java.math.BigInteger$shiftRight$int$6$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$45$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$45$$this := inline$java.math.BigInteger$shiftRight$int$6$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$6$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$45$r0, inline$java.math.BigInteger$$la$init$ra$$long$45$l0, inline$java.math.BigInteger$$la$init$ra$$long$45$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$45$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$45$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$45$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$45$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$45$r0 := inline$java.math.BigInteger$$la$init$ra$$long$45$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$45$l0 := inline$java.math.BigInteger$$la$init$ra$$long$45$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$45$Entry;

  inline$java.lang.Object$$la$init$ra$$$45$Entry:
    inline$java.lang.Object$$la$init$ra$$$45$$this := inline$java.math.BigInteger$$la$init$ra$$long$45$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$45$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$45$anon0;

  inline$java.lang.Object$$la$init$ra$$$45$anon0:
    inline$java.lang.Object$$la$init$ra$$$45$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$45$Return;

  inline$java.lang.Object$$la$init$ra$$$45$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$45$$exception := inline$java.lang.Object$$la$init$ra$$$45$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$45$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$45$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$45$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$45$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$45$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$45$Return:
    inline$java.math.BigInteger$shiftRight$int$6$$exception := inline$java.math.BigInteger$$la$init$ra$$long$45$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$6$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$6$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$6$$return := inline$java.math.BigInteger$shiftRight$int$6$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$6$block4;

  inline$java.math.BigInteger$shiftRight$int$6$block4:
    goto inline$java.math.BigInteger$shiftRight$int$6$Return;

  inline$java.math.BigInteger$shiftRight$int$6$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2 := inline$java.math.BigInteger$shiftRight$int$6$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftRight$int$6$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon24$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon63_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_4;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27:
    goto inline$java.math.BigInteger$shiftLeft$int$11$Entry;

  inline$java.math.BigInteger$shiftLeft$int$11$Entry:
    inline$java.math.BigInteger$shiftLeft$int$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2;
    inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$11$$l2, inline$java.math.BigInteger$shiftLeft$int$11$$l1, inline$java.math.BigInteger$shiftLeft$int$11$r0, inline$java.math.BigInteger$shiftLeft$int$11$i0, inline$java.math.BigInteger$shiftLeft$int$11$$r1, inline$java.math.BigInteger$shiftLeft$int$11$$return, inline$java.math.BigInteger$shiftLeft$int$11$$exception;
    inline$java.math.BigInteger$shiftLeft$int$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$11$anon0;

  inline$java.math.BigInteger$shiftLeft$int$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$r0 := inline$java.math.BigInteger$shiftLeft$int$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$i0 := inline$java.math.BigInteger$shiftLeft$int$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$11$$r1 := inline$java.math.BigInteger$shiftLeft$int$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$11$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$11$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$46$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$46$$this := inline$java.math.BigInteger$shiftLeft$int$11$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$46$r0, inline$java.math.BigInteger$$la$init$ra$$long$46$l0, inline$java.math.BigInteger$$la$init$ra$$long$46$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$46$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$46$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$46$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$46$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$46$r0 := inline$java.math.BigInteger$$la$init$ra$$long$46$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$46$l0 := inline$java.math.BigInteger$$la$init$ra$$long$46$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$46$Entry;

  inline$java.lang.Object$$la$init$ra$$$46$Entry:
    inline$java.lang.Object$$la$init$ra$$$46$$this := inline$java.math.BigInteger$$la$init$ra$$long$46$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$46$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$46$anon0;

  inline$java.lang.Object$$la$init$ra$$$46$anon0:
    inline$java.lang.Object$$la$init$ra$$$46$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$46$Return;

  inline$java.lang.Object$$la$init$ra$$$46$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$46$$exception := inline$java.lang.Object$$la$init$ra$$$46$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$46$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$46$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$46$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$46$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$46$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$46$Return:
    inline$java.math.BigInteger$shiftLeft$int$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$46$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$11$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$11$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$11$$return := inline$java.math.BigInteger$shiftLeft$int$11$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$11$block5;

  inline$java.math.BigInteger$shiftLeft$int$11$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$11$Return;

  inline$java.math.BigInteger$shiftLeft$int$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11 := inline$java.math.BigInteger$shiftLeft$int$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$1:
    assert {:sourceloc "ModPow1.java", 115, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r0;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r11;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$10$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$47$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$47$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$47$r0, inline$java.math.BigInteger$$la$init$ra$$long$47$l0, inline$java.math.BigInteger$$la$init$ra$$long$47$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$47$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$47$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$47$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$47$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$47$r0 := inline$java.math.BigInteger$$la$init$ra$$long$47$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$47$l0 := inline$java.math.BigInteger$$la$init$ra$$long$47$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$47$Entry;

  inline$java.lang.Object$$la$init$ra$$$47$Entry:
    inline$java.lang.Object$$la$init$ra$$$47$$this := inline$java.math.BigInteger$$la$init$ra$$long$47$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$47$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$47$anon0;

  inline$java.lang.Object$$la$init$ra$$$47$anon0:
    inline$java.lang.Object$$la$init$ra$$$47$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$47$Return;

  inline$java.lang.Object$$la$init$ra$$$47$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$47$$exception := inline$java.lang.Object$$la$init$ra$$$47$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$47$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$47$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$47$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$47$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$47$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$47$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception := inline$java.math.BigInteger$$la$init$ra$$long$47$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$10$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3 := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$10$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$2:
    assert {:sourceloc "ModPow1.java", 116, -1, -1, -1} true;
    goto inline$java.math.BigInteger$shiftRight$int$7$Entry;

  inline$java.math.BigInteger$shiftRight$int$7$Entry:
    inline$java.math.BigInteger$shiftRight$int$7$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftRight$int$7$r0, inline$java.math.BigInteger$shiftRight$int$7$$l2, inline$java.math.BigInteger$shiftRight$int$7$i0, inline$java.math.BigInteger$shiftRight$int$7$$r1, inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0, inline$java.math.BigInteger$shiftRight$int$7$$l1, inline$java.math.BigInteger$shiftRight$int$7$$return, inline$java.math.BigInteger$shiftRight$int$7$$exception;
    inline$java.math.BigInteger$shiftRight$int$7$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftRight$int$7$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftRight$int$7$anon0;

  inline$java.math.BigInteger$shiftRight$int$7$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftRight$int$7$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftRight$int$7$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$r0 := inline$java.math.BigInteger$shiftRight$int$7$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$i0 := inline$java.math.BigInteger$shiftRight$int$7$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftRight$int$7$$r1 := inline$java.math.BigInteger$shiftRight$int$7$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftRight$int$7$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$l2 := unsafe.$shrInt(inline$java.math.BigInteger$shiftRight$int$7$$l1, 
  inline$java.math.BigInteger$shiftRight$int$7$i0);
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$48$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$48$$this := inline$java.math.BigInteger$shiftRight$int$7$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0 := inline$java.math.BigInteger$shiftRight$int$7$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$48$r0, inline$java.math.BigInteger$$la$init$ra$$long$48$l0, inline$java.math.BigInteger$$la$init$ra$$long$48$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$48$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$48$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$48$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$48$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$48$r0 := inline$java.math.BigInteger$$la$init$ra$$long$48$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$48$l0 := inline$java.math.BigInteger$$la$init$ra$$long$48$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$48$Entry;

  inline$java.lang.Object$$la$init$ra$$$48$Entry:
    inline$java.lang.Object$$la$init$ra$$$48$$this := inline$java.math.BigInteger$$la$init$ra$$long$48$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$48$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$48$anon0;

  inline$java.lang.Object$$la$init$ra$$$48$anon0:
    inline$java.lang.Object$$la$init$ra$$$48$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$48$Return;

  inline$java.lang.Object$$la$init$ra$$$48$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$48$$exception := inline$java.lang.Object$$la$init$ra$$$48$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$48$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$48$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$48$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$48$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$48$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$48$Return:
    inline$java.math.BigInteger$shiftRight$int$7$$exception := inline$java.math.BigInteger$$la$init$ra$$long$48$$exception;
    goto inline$java.math.BigInteger$shiftRight$int$7$anon0$1;

  inline$java.math.BigInteger$shiftRight$int$7$anon0$1:
    assert {:sourceloc "BigInteger.java", 22, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftRight$int$7$$return := inline$java.math.BigInteger$shiftRight$int$7$$r1;
    goto inline$java.math.BigInteger$shiftRight$int$7$block4;

  inline$java.math.BigInteger$shiftRight$int$7$block4:
    goto inline$java.math.BigInteger$shiftRight$int$7$Return;

  inline$java.math.BigInteger$shiftRight$int$7$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4 := inline$java.math.BigInteger$shiftRight$int$7$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftRight$int$7$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$3;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon27$3:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon64_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_5;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30:
    goto inline$java.math.BigInteger$shiftLeft$int$12$Entry;

  inline$java.math.BigInteger$shiftLeft$int$12$Entry:
    inline$java.math.BigInteger$shiftLeft$int$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4;
    inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$12$$l2, inline$java.math.BigInteger$shiftLeft$int$12$$l1, inline$java.math.BigInteger$shiftLeft$int$12$r0, inline$java.math.BigInteger$shiftLeft$int$12$i0, inline$java.math.BigInteger$shiftLeft$int$12$$r1, inline$java.math.BigInteger$shiftLeft$int$12$$return, inline$java.math.BigInteger$shiftLeft$int$12$$exception;
    inline$java.math.BigInteger$shiftLeft$int$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$12$anon0;

  inline$java.math.BigInteger$shiftLeft$int$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$r0 := inline$java.math.BigInteger$shiftLeft$int$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$i0 := inline$java.math.BigInteger$shiftLeft$int$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$12$$r1 := inline$java.math.BigInteger$shiftLeft$int$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$12$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$12$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$49$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$49$$this := inline$java.math.BigInteger$shiftLeft$int$12$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$49$r0, inline$java.math.BigInteger$$la$init$ra$$long$49$l0, inline$java.math.BigInteger$$la$init$ra$$long$49$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$49$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$49$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$49$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$49$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$49$r0 := inline$java.math.BigInteger$$la$init$ra$$long$49$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$49$l0 := inline$java.math.BigInteger$$la$init$ra$$long$49$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$49$Entry;

  inline$java.lang.Object$$la$init$ra$$$49$Entry:
    inline$java.lang.Object$$la$init$ra$$$49$$this := inline$java.math.BigInteger$$la$init$ra$$long$49$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$49$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$49$anon0;

  inline$java.lang.Object$$la$init$ra$$$49$anon0:
    inline$java.lang.Object$$la$init$ra$$$49$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$49$Return;

  inline$java.lang.Object$$la$init$ra$$$49$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$49$$exception := inline$java.lang.Object$$la$init$ra$$$49$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$49$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$49$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$49$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$49$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$49$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$49$Return:
    inline$java.math.BigInteger$shiftLeft$int$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$49$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$12$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$12$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$12$$return := inline$java.math.BigInteger$shiftLeft$int$12$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$12$block5;

  inline$java.math.BigInteger$shiftLeft$int$12$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$12$Return;

  inline$java.math.BigInteger$shiftLeft$int$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12 := inline$java.math.BigInteger$shiftLeft$int$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$1:
    assert {:sourceloc "ModPow1.java", 117, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r1;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r12;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$11$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$50$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$50$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$50$r0, inline$java.math.BigInteger$$la$init$ra$$long$50$l0, inline$java.math.BigInteger$$la$init$ra$$long$50$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$50$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$50$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$50$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$50$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$50$r0 := inline$java.math.BigInteger$$la$init$ra$$long$50$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$50$l0 := inline$java.math.BigInteger$$la$init$ra$$long$50$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$50$Entry;

  inline$java.lang.Object$$la$init$ra$$$50$Entry:
    inline$java.lang.Object$$la$init$ra$$$50$$this := inline$java.math.BigInteger$$la$init$ra$$long$50$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$50$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$50$anon0;

  inline$java.lang.Object$$la$init$ra$$$50$anon0:
    inline$java.lang.Object$$la$init$ra$$$50$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$50$Return;

  inline$java.lang.Object$$la$init$ra$$$50$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$50$$exception := inline$java.lang.Object$$la$init$ra$$$50$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$50$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$50$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$50$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$50$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$50$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$50$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$50$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5 := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$2;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon30$2:
    assert {:sourceloc "ModPow1.java", 119, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 120, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon65_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_6;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$11$r1, inline$java.math.BigInteger$add$java.math.BigInteger$11$r0, inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$11$$return, inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$11$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$11$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$11$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$11$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$51$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$51$$this := inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$51$r0, inline$java.math.BigInteger$$la$init$ra$$long$51$l0, inline$java.math.BigInteger$$la$init$ra$$long$51$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$51$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$51$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$51$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$51$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$51$r0 := inline$java.math.BigInteger$$la$init$ra$$long$51$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$51$l0 := inline$java.math.BigInteger$$la$init$ra$$long$51$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$51$Entry;

  inline$java.lang.Object$$la$init$ra$$$51$Entry:
    inline$java.lang.Object$$la$init$ra$$$51$$this := inline$java.math.BigInteger$$la$init$ra$$long$51$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$51$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$51$anon0;

  inline$java.lang.Object$$la$init$ra$$$51$anon0:
    inline$java.lang.Object$$la$init$ra$$$51$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$51$Return;

  inline$java.lang.Object$$la$init$ra$$$51$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$51$$exception := inline$java.lang.Object$$la$init$ra$$$51$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$51$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$51$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$51$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$51$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$51$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$51$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception := inline$java.math.BigInteger$$la$init$ra$$long$51$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$11$$return := inline$java.math.BigInteger$add$java.math.BigInteger$11$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$11$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$11$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r13 := inline$java.math.BigInteger$add$java.math.BigInteger$11$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$11$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon33$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon66_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_7;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r4;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$12$r1, inline$java.math.BigInteger$add$java.math.BigInteger$12$r0, inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$12$$return, inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$12$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$12$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$12$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$12$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$52$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$52$$this := inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$52$r0, inline$java.math.BigInteger$$la$init$ra$$long$52$l0, inline$java.math.BigInteger$$la$init$ra$$long$52$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$52$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$52$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$52$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$52$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$52$r0 := inline$java.math.BigInteger$$la$init$ra$$long$52$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$52$l0 := inline$java.math.BigInteger$$la$init$ra$$long$52$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$52$Entry;

  inline$java.lang.Object$$la$init$ra$$$52$Entry:
    inline$java.lang.Object$$la$init$ra$$$52$$this := inline$java.math.BigInteger$$la$init$ra$$long$52$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$52$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$52$anon0;

  inline$java.lang.Object$$la$init$ra$$$52$anon0:
    inline$java.lang.Object$$la$init$ra$$$52$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$52$Return;

  inline$java.lang.Object$$la$init$ra$$$52$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$52$$exception := inline$java.lang.Object$$la$init$ra$$$52$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$52$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$52$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$52$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$52$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$52$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$52$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$52$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$12$$return := inline$java.math.BigInteger$add$java.math.BigInteger$12$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r14 := inline$java.math.BigInteger$add$java.math.BigInteger$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon36$1:
    assert {:sourceloc "ModPow1.java", 121, -1, -1, -1} true;
    assume false;
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon67_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_8;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r8;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$12$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$53$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$53$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$53$r0, inline$java.math.BigInteger$$la$init$ra$$long$53$l0, inline$java.math.BigInteger$$la$init$ra$$long$53$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$53$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$53$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$53$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$53$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$53$r0 := inline$java.math.BigInteger$$la$init$ra$$long$53$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$53$l0 := inline$java.math.BigInteger$$la$init$ra$$long$53$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$53$Entry;

  inline$java.lang.Object$$la$init$ra$$$53$Entry:
    inline$java.lang.Object$$la$init$ra$$$53$$this := inline$java.math.BigInteger$$la$init$ra$$long$53$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$53$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$53$anon0;

  inline$java.lang.Object$$la$init$ra$$$53$anon0:
    inline$java.lang.Object$$la$init$ra$$$53$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$53$Return;

  inline$java.lang.Object$$la$init$ra$$$53$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$53$$exception := inline$java.lang.Object$$la$init$ra$$$53$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$53$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$53$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$53$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$53$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$53$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$53$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception := inline$java.math.BigInteger$$la$init$ra$$long$53$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$12$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$12$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon39$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon68_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_9;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r15;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$13$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$54$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$54$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$54$r0, inline$java.math.BigInteger$$la$init$ra$$long$54$l0, inline$java.math.BigInteger$$la$init$ra$$long$54$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$54$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$54$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$54$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$54$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$54$r0 := inline$java.math.BigInteger$$la$init$ra$$long$54$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$54$l0 := inline$java.math.BigInteger$$la$init$ra$$long$54$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$54$Entry;

  inline$java.lang.Object$$la$init$ra$$$54$Entry:
    inline$java.lang.Object$$la$init$ra$$$54$$this := inline$java.math.BigInteger$$la$init$ra$$long$54$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$54$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$54$anon0;

  inline$java.lang.Object$$la$init$ra$$$54$anon0:
    inline$java.lang.Object$$la$init$ra$$$54$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$54$Return;

  inline$java.lang.Object$$la$init$ra$$$54$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$54$$exception := inline$java.lang.Object$$la$init$ra$$$54$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$54$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$54$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$54$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$54$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$54$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$54$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$54$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16 := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon42$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon69_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_10;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45:
    goto inline$java.math.BigInteger$shiftLeft$int$13$Entry;

  inline$java.math.BigInteger$shiftLeft$int$13$Entry:
    inline$java.math.BigInteger$shiftLeft$int$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r16;
    inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8;
    havoc inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$13$$l2, inline$java.math.BigInteger$shiftLeft$int$13$$l1, inline$java.math.BigInteger$shiftLeft$int$13$r0, inline$java.math.BigInteger$shiftLeft$int$13$i0, inline$java.math.BigInteger$shiftLeft$int$13$$r1, inline$java.math.BigInteger$shiftLeft$int$13$$return, inline$java.math.BigInteger$shiftLeft$int$13$$exception;
    inline$java.math.BigInteger$shiftLeft$int$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$13$anon0;

  inline$java.math.BigInteger$shiftLeft$int$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$r0 := inline$java.math.BigInteger$shiftLeft$int$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$i0 := inline$java.math.BigInteger$shiftLeft$int$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$13$$r1 := inline$java.math.BigInteger$shiftLeft$int$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$13$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$13$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$55$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$55$$this := inline$java.math.BigInteger$shiftLeft$int$13$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$55$r0, inline$java.math.BigInteger$$la$init$ra$$long$55$l0, inline$java.math.BigInteger$$la$init$ra$$long$55$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$55$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$55$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$55$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$55$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$55$r0 := inline$java.math.BigInteger$$la$init$ra$$long$55$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$55$l0 := inline$java.math.BigInteger$$la$init$ra$$long$55$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$55$Entry;

  inline$java.lang.Object$$la$init$ra$$$55$Entry:
    inline$java.lang.Object$$la$init$ra$$$55$$this := inline$java.math.BigInteger$$la$init$ra$$long$55$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$55$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$55$anon0;

  inline$java.lang.Object$$la$init$ra$$$55$anon0:
    inline$java.lang.Object$$la$init$ra$$$55$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$55$Return;

  inline$java.lang.Object$$la$init$ra$$$55$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$55$$exception := inline$java.lang.Object$$la$init$ra$$$55$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$55$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$55$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$55$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$55$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$55$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$55$Return:
    inline$java.math.BigInteger$shiftLeft$int$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$55$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$13$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$13$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$13$$return := inline$java.math.BigInteger$shiftLeft$int$13$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$13$block5;

  inline$java.math.BigInteger$shiftLeft$int$13$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$13$Return;

  inline$java.math.BigInteger$shiftLeft$int$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17 := inline$java.math.BigInteger$shiftLeft$int$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon45$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon70_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_11;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r6;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r17;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$13$r1, inline$java.math.BigInteger$add$java.math.BigInteger$13$r0, inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$13$$return, inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$13$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$13$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$13$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$13$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$56$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$56$$this := inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$56$r0, inline$java.math.BigInteger$$la$init$ra$$long$56$l0, inline$java.math.BigInteger$$la$init$ra$$long$56$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$56$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$56$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$56$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$56$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$56$r0 := inline$java.math.BigInteger$$la$init$ra$$long$56$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$56$l0 := inline$java.math.BigInteger$$la$init$ra$$long$56$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$56$Entry;

  inline$java.lang.Object$$la$init$ra$$$56$Entry:
    inline$java.lang.Object$$la$init$ra$$$56$$this := inline$java.math.BigInteger$$la$init$ra$$long$56$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$56$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$56$anon0;

  inline$java.lang.Object$$la$init$ra$$$56$anon0:
    inline$java.lang.Object$$la$init$ra$$$56$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$56$Return;

  inline$java.lang.Object$$la$init$ra$$$56$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$56$$exception := inline$java.lang.Object$$la$init$ra$$$56$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$56$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$56$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$56$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$56$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$56$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$56$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception := inline$java.math.BigInteger$$la$init$ra$$long$56$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$13$$return := inline$java.math.BigInteger$add$java.math.BigInteger$13$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$13$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$13$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18 := inline$java.math.BigInteger$add$java.math.BigInteger$13$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$13$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon48$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6 := unsafe.$mulInt(2, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$i8);
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon71_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_12;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51:
    goto inline$java.math.BigInteger$shiftLeft$int$14$Entry;

  inline$java.math.BigInteger$shiftLeft$int$14$Entry:
    inline$java.math.BigInteger$shiftLeft$int$14$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r7;
    inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$14$$l2, inline$java.math.BigInteger$shiftLeft$int$14$$l1, inline$java.math.BigInteger$shiftLeft$int$14$r0, inline$java.math.BigInteger$shiftLeft$int$14$i0, inline$java.math.BigInteger$shiftLeft$int$14$$r1, inline$java.math.BigInteger$shiftLeft$int$14$$return, inline$java.math.BigInteger$shiftLeft$int$14$$exception;
    inline$java.math.BigInteger$shiftLeft$int$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$14$anon0;

  inline$java.math.BigInteger$shiftLeft$int$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$r0 := inline$java.math.BigInteger$shiftLeft$int$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$i0 := inline$java.math.BigInteger$shiftLeft$int$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$14$$r1 := inline$java.math.BigInteger$shiftLeft$int$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$14$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$14$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$57$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$57$$this := inline$java.math.BigInteger$shiftLeft$int$14$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$57$r0, inline$java.math.BigInteger$$la$init$ra$$long$57$l0, inline$java.math.BigInteger$$la$init$ra$$long$57$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$57$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$57$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$57$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$57$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$57$r0 := inline$java.math.BigInteger$$la$init$ra$$long$57$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$57$l0 := inline$java.math.BigInteger$$la$init$ra$$long$57$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$57$Entry;

  inline$java.lang.Object$$la$init$ra$$$57$Entry:
    inline$java.lang.Object$$la$init$ra$$$57$$this := inline$java.math.BigInteger$$la$init$ra$$long$57$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$57$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$57$anon0;

  inline$java.lang.Object$$la$init$ra$$$57$anon0:
    inline$java.lang.Object$$la$init$ra$$$57$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$57$Return;

  inline$java.lang.Object$$la$init$ra$$$57$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$57$$exception := inline$java.lang.Object$$la$init$ra$$$57$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$57$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$57$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$57$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$57$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$57$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$57$Return:
    inline$java.math.BigInteger$shiftLeft$int$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$57$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$14$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$14$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$14$$return := inline$java.math.BigInteger$shiftLeft$int$14$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$14$block5;

  inline$java.math.BigInteger$shiftLeft$int$14$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$14$Return;

  inline$java.math.BigInteger$shiftLeft$int$14$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19 := inline$java.math.BigInteger$shiftLeft$int$14$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$shiftLeft$int$14$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon51$1:
    assert {:sourceloc "ModPow1.java", 122, -1, -1, -1} true;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Then, inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Else;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Then:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18
   != unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon72_Else:
    assume {:partition} inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18
   == unsafe.$null;
    call inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := unsafe.$null;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$fakelocal_13;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$this := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r18;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$r19;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$14$r1, inline$java.math.BigInteger$add$java.math.BigInteger$14$r0, inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$14$$return, inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$14$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$14$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$14$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$14$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$58$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$58$$this := inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$58$r0, inline$java.math.BigInteger$$la$init$ra$$long$58$l0, inline$java.math.BigInteger$$la$init$ra$$long$58$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$58$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$58$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$58$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$58$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$58$r0 := inline$java.math.BigInteger$$la$init$ra$$long$58$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$58$l0 := inline$java.math.BigInteger$$la$init$ra$$long$58$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$58$Entry;

  inline$java.lang.Object$$la$init$ra$$$58$Entry:
    inline$java.lang.Object$$la$init$ra$$$58$$this := inline$java.math.BigInteger$$la$init$ra$$long$58$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$58$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$58$anon0;

  inline$java.lang.Object$$la$init$ra$$$58$anon0:
    inline$java.lang.Object$$la$init$ra$$$58$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$58$Return;

  inline$java.lang.Object$$la$init$ra$$$58$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$58$$exception := inline$java.lang.Object$$la$init$ra$$$58$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$58$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$58$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$58$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$58$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$58$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$58$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$58$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$14$$return := inline$java.math.BigInteger$add$java.math.BigInteger$14$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$14$Return:
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21 := inline$java.math.BigInteger$add$java.math.BigInteger$14$$return;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$14$$exception;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54$1;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$anon54$1:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block46:
    assert {:sourceloc "ModPow1.java", 124, -1, -1, -1} true;
    inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$r21;
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$block48:
    goto inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return;

  inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$Return:
    r7 := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$return;
    $exception := inline$ModPow1$fastMultiply_1$java.math.BigInteger_java.math.BigInteger$2$$exception;
    goto anon45$2;

  anon45$2:
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    goto anon79_Then, anon79_Else;

  anon79_Then:
    assume {:partition} r7 != unsafe.$null;
    $exception := $exception;
    goto anon48;

  anon79_Else:
    assume {:partition} r7 == unsafe.$null;
    call $fakelocal_9 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_9;
    return;

  anon48:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this := r7;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0 := r5;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$14$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$59$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$59$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$59$r0, inline$java.math.BigInteger$$la$init$ra$$long$59$l0, inline$java.math.BigInteger$$la$init$ra$$long$59$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$59$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$59$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$59$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$59$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$59$r0 := inline$java.math.BigInteger$$la$init$ra$$long$59$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$59$l0 := inline$java.math.BigInteger$$la$init$ra$$long$59$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$59$Entry;

  inline$java.lang.Object$$la$init$ra$$$59$Entry:
    inline$java.lang.Object$$la$init$ra$$$59$$this := inline$java.math.BigInteger$$la$init$ra$$long$59$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$59$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$59$anon0;

  inline$java.lang.Object$$la$init$ra$$$59$anon0:
    inline$java.lang.Object$$la$init$ra$$$59$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$59$Return;

  inline$java.lang.Object$$la$init$ra$$$59$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$59$$exception := inline$java.lang.Object$$la$init$ra$$$59$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$59$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$59$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$59$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$59$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$59$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$59$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception := inline$java.math.BigInteger$$la$init$ra$$long$59$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$14$Return:
    $r14 := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$14$$exception;
    goto anon48$1;

  anon48$1:
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    goto anon80_Then, anon80_Else;

  anon80_Then:
    assume {:partition} $r14 != unsafe.$null;
    $exception := $exception;
    goto anon51;

  anon80_Else:
    assume {:partition} $r14 == unsafe.$null;
    call $fakelocal_10 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_10;
    return;

  anon51:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Entry;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Entry:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this := $r14;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0 := r6;
    havoc inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon0;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this
   != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Then, inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Else;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 != unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1 == unsafe.$null;
    call inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return := unsafe.$null;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$fakelocal_1;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0 := unsafe.$heap[inline$java.math.BigInteger$subtract$java.math.BigInteger$15$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l1
   - inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l0;
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$60$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$60$$this := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$60$r0, inline$java.math.BigInteger$$la$init$ra$$long$60$l0, inline$java.math.BigInteger$$la$init$ra$$long$60$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$60$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$60$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$60$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$60$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$60$r0 := inline$java.math.BigInteger$$la$init$ra$$long$60$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$60$l0 := inline$java.math.BigInteger$$la$init$ra$$long$60$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$60$Entry;

  inline$java.lang.Object$$la$init$ra$$$60$Entry:
    inline$java.lang.Object$$la$init$ra$$$60$$this := inline$java.math.BigInteger$$la$init$ra$$long$60$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$60$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$60$anon0;

  inline$java.lang.Object$$la$init$ra$$$60$anon0:
    inline$java.lang.Object$$la$init$ra$$$60$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$60$Return;

  inline$java.lang.Object$$la$init$ra$$$60$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$60$$exception := inline$java.lang.Object$$la$init$ra$$$60$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$60$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$60$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$60$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$60$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$60$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$60$Return:
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$60$$exception;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3$1;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$anon3$1:
    assert {:sourceloc "BigInteger.java", 30, -1, -1, -1} true;
    inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$r2;
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$block6;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$block6:
    goto inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$subtract$java.math.BigInteger$15$Return:
    $r15 := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$return;
    $exception := inline$java.math.BigInteger$subtract$java.math.BigInteger$15$$exception;
    goto anon51$1;

  anon51$1:
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    goto anon81_Then, anon81_Else;

  anon81_Then:
    assume {:partition} $r15 != unsafe.$null;
    $exception := $exception;
    goto anon54;

  anon81_Else:
    assume {:partition} $r15 == unsafe.$null;
    call $fakelocal_11 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_11;
    return;

  anon54:
    goto inline$java.math.BigInteger$shiftLeft$int$15$Entry;

  inline$java.math.BigInteger$shiftLeft$int$15$Entry:
    inline$java.math.BigInteger$shiftLeft$int$15$$this := $r15;
    inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0 := i10;
    havoc inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$15$$l2, inline$java.math.BigInteger$shiftLeft$int$15$$l1, inline$java.math.BigInteger$shiftLeft$int$15$r0, inline$java.math.BigInteger$shiftLeft$int$15$i0, inline$java.math.BigInteger$shiftLeft$int$15$$r1, inline$java.math.BigInteger$shiftLeft$int$15$$return, inline$java.math.BigInteger$shiftLeft$int$15$$exception;
    inline$java.math.BigInteger$shiftLeft$int$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$15$anon0;

  inline$java.math.BigInteger$shiftLeft$int$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$r0 := inline$java.math.BigInteger$shiftLeft$int$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$i0 := inline$java.math.BigInteger$shiftLeft$int$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$15$$r1 := inline$java.math.BigInteger$shiftLeft$int$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$15$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$15$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$61$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$61$$this := inline$java.math.BigInteger$shiftLeft$int$15$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$61$r0, inline$java.math.BigInteger$$la$init$ra$$long$61$l0, inline$java.math.BigInteger$$la$init$ra$$long$61$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$61$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$61$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$61$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$61$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$61$r0 := inline$java.math.BigInteger$$la$init$ra$$long$61$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$61$l0 := inline$java.math.BigInteger$$la$init$ra$$long$61$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$61$Entry;

  inline$java.lang.Object$$la$init$ra$$$61$Entry:
    inline$java.lang.Object$$la$init$ra$$$61$$this := inline$java.math.BigInteger$$la$init$ra$$long$61$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$61$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$61$anon0;

  inline$java.lang.Object$$la$init$ra$$$61$anon0:
    inline$java.lang.Object$$la$init$ra$$$61$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$61$Return;

  inline$java.lang.Object$$la$init$ra$$$61$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$61$$exception := inline$java.lang.Object$$la$init$ra$$$61$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$61$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$61$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$61$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$61$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$61$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$61$Return:
    inline$java.math.BigInteger$shiftLeft$int$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$61$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$15$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$15$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$15$$return := inline$java.math.BigInteger$shiftLeft$int$15$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$15$block5;

  inline$java.math.BigInteger$shiftLeft$int$15$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$15$Return;

  inline$java.math.BigInteger$shiftLeft$int$15$Return:
    $r16 := inline$java.math.BigInteger$shiftLeft$int$15$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$15$$exception;
    goto anon54$1;

  anon54$1:
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    goto anon82_Then, anon82_Else;

  anon82_Then:
    assume {:partition} r5 != unsafe.$null;
    $exception := $exception;
    goto anon57;

  anon82_Else:
    assume {:partition} r5 == unsafe.$null;
    call $fakelocal_12 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_12;
    return;

  anon57:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$this := r5;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0 := $r16;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$15$r1, inline$java.math.BigInteger$add$java.math.BigInteger$15$r0, inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$15$$return, inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$15$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$15$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$15$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$15$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$62$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$62$$this := inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$62$r0, inline$java.math.BigInteger$$la$init$ra$$long$62$l0, inline$java.math.BigInteger$$la$init$ra$$long$62$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$62$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$62$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$62$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$62$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$62$r0 := inline$java.math.BigInteger$$la$init$ra$$long$62$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$62$l0 := inline$java.math.BigInteger$$la$init$ra$$long$62$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$62$Entry;

  inline$java.lang.Object$$la$init$ra$$$62$Entry:
    inline$java.lang.Object$$la$init$ra$$$62$$this := inline$java.math.BigInteger$$la$init$ra$$long$62$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$62$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$62$anon0;

  inline$java.lang.Object$$la$init$ra$$$62$anon0:
    inline$java.lang.Object$$la$init$ra$$$62$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$62$Return;

  inline$java.lang.Object$$la$init$ra$$$62$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$62$$exception := inline$java.lang.Object$$la$init$ra$$$62$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$62$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$62$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$62$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$62$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$62$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$62$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception := inline$java.math.BigInteger$$la$init$ra$$long$62$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$15$$return := inline$java.math.BigInteger$add$java.math.BigInteger$15$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$15$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$15$Return:
    $r17 := inline$java.math.BigInteger$add$java.math.BigInteger$15$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$15$$exception;
    goto anon57$1;

  anon57$1:
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    $i6 := unsafe.$mulInt(2, i10);
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    goto anon83_Then, anon83_Else;

  anon83_Then:
    assume {:partition} r6 != unsafe.$null;
    $exception := $exception;
    goto anon60;

  anon83_Else:
    assume {:partition} r6 == unsafe.$null;
    call $fakelocal_13 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_13;
    return;

  anon60:
    goto inline$java.math.BigInteger$shiftLeft$int$16$Entry;

  inline$java.math.BigInteger$shiftLeft$int$16$Entry:
    inline$java.math.BigInteger$shiftLeft$int$16$$this := r6;
    inline$java.math.BigInteger$shiftLeft$int$16$$in_parameter__0 := $i6;
    havoc inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$16$$l2, inline$java.math.BigInteger$shiftLeft$int$16$$l1, inline$java.math.BigInteger$shiftLeft$int$16$r0, inline$java.math.BigInteger$shiftLeft$int$16$i0, inline$java.math.BigInteger$shiftLeft$int$16$$r1, inline$java.math.BigInteger$shiftLeft$int$16$$return, inline$java.math.BigInteger$shiftLeft$int$16$$exception;
    inline$java.math.BigInteger$shiftLeft$int$16$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$16$anon0;

  inline$java.math.BigInteger$shiftLeft$int$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$16$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$16$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$r0 := inline$java.math.BigInteger$shiftLeft$int$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$i0 := inline$java.math.BigInteger$shiftLeft$int$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$16$$r1 := inline$java.math.BigInteger$shiftLeft$int$16$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$16$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$16$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$16$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$63$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$63$$this := inline$java.math.BigInteger$shiftLeft$int$16$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$16$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$63$r0, inline$java.math.BigInteger$$la$init$ra$$long$63$l0, inline$java.math.BigInteger$$la$init$ra$$long$63$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$63$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$63$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$63$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$63$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$63$r0 := inline$java.math.BigInteger$$la$init$ra$$long$63$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$63$l0 := inline$java.math.BigInteger$$la$init$ra$$long$63$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$63$Entry;

  inline$java.lang.Object$$la$init$ra$$$63$Entry:
    inline$java.lang.Object$$la$init$ra$$$63$$this := inline$java.math.BigInteger$$la$init$ra$$long$63$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$63$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$63$anon0;

  inline$java.lang.Object$$la$init$ra$$$63$anon0:
    inline$java.lang.Object$$la$init$ra$$$63$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$63$Return;

  inline$java.lang.Object$$la$init$ra$$$63$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$63$$exception := inline$java.lang.Object$$la$init$ra$$$63$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$63$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$63$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$63$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$63$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$63$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$63$Return:
    inline$java.math.BigInteger$shiftLeft$int$16$$exception := inline$java.math.BigInteger$$la$init$ra$$long$63$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$16$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$16$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$16$$return := inline$java.math.BigInteger$shiftLeft$int$16$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$16$block5;

  inline$java.math.BigInteger$shiftLeft$int$16$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$16$Return;

  inline$java.math.BigInteger$shiftLeft$int$16$Return:
    $r18 := inline$java.math.BigInteger$shiftLeft$int$16$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$16$$exception;
    goto anon60$1;

  anon60$1:
    assert {:sourceloc "ModPow1.java", 160, -1, -1, -1} true;
    goto anon84_Then, anon84_Else;

  anon84_Then:
    assume {:partition} $r17 != unsafe.$null;
    $exception := $exception;
    goto anon63;

  anon84_Else:
    assume {:partition} $r17 == unsafe.$null;
    call $fakelocal_14 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_14;
    return;

  anon63:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$this := $r17;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0 := $r18;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$16$r1, inline$java.math.BigInteger$add$java.math.BigInteger$16$r0, inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$16$$return, inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$16$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$16$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$16$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$16$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$16$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$16$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$64$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$64$$this := inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$64$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$64$r0, inline$java.math.BigInteger$$la$init$ra$$long$64$l0, inline$java.math.BigInteger$$la$init$ra$$long$64$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$64$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$64$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$64$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$64$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$64$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$64$r0 := inline$java.math.BigInteger$$la$init$ra$$long$64$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$64$l0 := inline$java.math.BigInteger$$la$init$ra$$long$64$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$64$Entry;

  inline$java.lang.Object$$la$init$ra$$$64$Entry:
    inline$java.lang.Object$$la$init$ra$$$64$$this := inline$java.math.BigInteger$$la$init$ra$$long$64$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$64$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$64$anon0;

  inline$java.lang.Object$$la$init$ra$$$64$anon0:
    inline$java.lang.Object$$la$init$ra$$$64$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$64$Return;

  inline$java.lang.Object$$la$init$ra$$$64$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$64$$exception := inline$java.lang.Object$$la$init$ra$$$64$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$64$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$64$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$64$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$64$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$64$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$64$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception := inline$java.math.BigInteger$$la$init$ra$$long$64$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$16$$return := inline$java.math.BigInteger$add$java.math.BigInteger$16$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$16$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$16$Return:
    r21 := inline$java.math.BigInteger$add$java.math.BigInteger$16$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$16$$exception;
    goto anon63$1;

  anon63$1:
    goto block52;

  block52:
    assert {:sourceloc "ModPow1.java", 162, -1, -1, -1} true;
    $return := r21;
    goto block57;

  block57:
    return;
}



implementation unsafe.ModPow1$standardMultiply$java.math.BigInteger_java.math.BigInteger($in_parameter__0: ref, $in_parameter__1: ref)
   returns ($return: ref, $exception: ref)
{
  var $fakelocal_0: ref;
  var $z0: int;
  var $fakelocal_2: ref;
  var $r2: ref;
  var r0: ref;
  var i1: int;
  var $i0: int;
  var r1: ref;
  var r3: ref;
  var $fakelocal_1: ref;
  var inline$java.math.BigInteger$bitLength$$0$$b1: int;
  var inline$java.math.BigInteger$bitLength$$0$$b3: int;
  var inline$java.math.BigInteger$bitLength$$0$i8: int;
  var inline$java.math.BigInteger$bitLength$$0$l7: int;
  var inline$java.math.BigInteger$bitLength$$0$$l4: int;
  var inline$java.math.BigInteger$bitLength$$0$$b5: int;
  var inline$java.math.BigInteger$bitLength$$0$$l0: int;
  var inline$java.math.BigInteger$bitLength$$0$$l2: int;
  var inline$java.math.BigInteger$bitLength$$0$r0: ref;
  var inline$java.math.BigInteger$bitLength$$0$$l6: int;
  var inline$java.math.BigInteger$bitLength$$0$$this: ref;
  var inline$java.math.BigInteger$bitLength$$0$$return: int;
  var inline$java.math.BigInteger$bitLength$$0$$exception: ref;
  var inline$java.math.BigInteger$testBit$int$0$r0: ref;
  var inline$java.math.BigInteger$testBit$int$0$$z0: int;
  var inline$java.math.BigInteger$testBit$int$0$i0: int;
  var inline$java.math.BigInteger$testBit$int$0$$b5: int;
  var inline$java.math.BigInteger$testBit$int$0$$l2: int;
  var inline$java.math.BigInteger$testBit$int$0$$l3: int;
  var inline$java.math.BigInteger$testBit$int$0$$i1: int;
  var inline$java.math.BigInteger$testBit$int$0$$l4: int;
  var inline$java.math.BigInteger$testBit$int$0$$this: ref;
  var inline$java.math.BigInteger$testBit$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$testBit$int$0$$return: int;
  var inline$java.math.BigInteger$testBit$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l2: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$l1: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$r0: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$i0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$r1: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$this: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$return: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$exception: ref;
  var inline$java.math.BigInteger$shiftLeft$int$0$$objIndex: int;
  var inline$java.math.BigInteger$shiftLeft$int$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$0$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$0$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$0$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$r0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$this: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$return: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception: ref;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex: int;
  var inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap: $heap_type;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$r0: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$l0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$this: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0: int;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$exception: ref;
  var inline$java.math.BigInteger$$la$init$ra$$long$1$$heap: $heap_type;
  var inline$java.lang.Object$$la$init$ra$$$1$$this: ref;
  var inline$java.lang.Object$$la$init$ra$$$1$$exception: ref;

  anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume unsafe.$heap[$in_parameter__0, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$in_parameter__1, unsafe.$type] <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[$return, unsafe.$type] <: unsafe.java.math.BigInteger;
    $exception := unsafe.$null;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r0 := $in_parameter__0;
    assert {:sourceloc "ModPow1.java", -1, -1, -1, -1} true;
    r1 := $in_parameter__1;
    assert {:sourceloc "ModPow1.java", 167, -1, -1, -1} true;
    r3 := unsafe.java.math.BigInteger$java.math.BigInteger$ZERO79;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    i1 := 0;
    goto block58;

  block58:
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    goto anon16_Then, anon16_Else;

  anon16_Then:
    assume {:partition} r1 != unsafe.$null;
    $exception := $exception;
    goto anon3;

  anon16_Else:
    assume {:partition} r1 == unsafe.$null;
    call $fakelocal_0 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_0;
    return;

  anon3:
    goto inline$java.math.BigInteger$bitLength$$0$Entry;

  inline$java.math.BigInteger$bitLength$$0$Entry:
    inline$java.math.BigInteger$bitLength$$0$$this := r1;
    havoc inline$java.math.BigInteger$bitLength$$0$$b1, inline$java.math.BigInteger$bitLength$$0$$b3, inline$java.math.BigInteger$bitLength$$0$i8, inline$java.math.BigInteger$bitLength$$0$l7, inline$java.math.BigInteger$bitLength$$0$$l4, inline$java.math.BigInteger$bitLength$$0$$b5, inline$java.math.BigInteger$bitLength$$0$$l0, inline$java.math.BigInteger$bitLength$$0$$l2, inline$java.math.BigInteger$bitLength$$0$r0, inline$java.math.BigInteger$bitLength$$0$$l6, inline$java.math.BigInteger$bitLength$$0$$return, inline$java.math.BigInteger$bitLength$$0$$exception;
    goto inline$java.math.BigInteger$bitLength$$0$anon0;

  inline$java.math.BigInteger$bitLength$$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$bitLength$$0$$this != unsafe.$null;
    inline$java.math.BigInteger$bitLength$$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$r0 := inline$java.math.BigInteger$bitLength$$0$$this;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b1 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l0, 0);
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon10_Then, inline$java.math.BigInteger$bitLength$$0$anon10_Else;

  inline$java.math.BigInteger$bitLength$$0$anon10_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 != 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block11;

  inline$java.math.BigInteger$bitLength$$0$anon10_Else:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b1 == 0;
    assert {:sourceloc "BigInteger.java", 50, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon3;

  inline$java.math.BigInteger$bitLength$$0$anon3:
    assert {:sourceloc "BigInteger.java", 51, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := 1;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block11:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l2 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b3 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$$l2, 0);
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon11_Then, inline$java.math.BigInteger$bitLength$$0$anon11_Else;

  inline$java.math.BigInteger$bitLength$$0$anon11_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b3 <= 0;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block12;

  inline$java.math.BigInteger$bitLength$$0$anon11_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b3;
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon6;

  inline$java.math.BigInteger$bitLength$$0$anon6:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block12:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l4 := unsafe.$heap[inline$java.math.BigInteger$bitLength$$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$l6 := -inline$java.math.BigInteger$bitLength$$0$$l4;
    goto inline$java.math.BigInteger$bitLength$$0$block13;

  inline$java.math.BigInteger$bitLength$$0$block13:
    assert {:sourceloc "BigInteger.java", 54, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := inline$java.math.BigInteger$bitLength$$0$$l6;
    assert {:sourceloc "BigInteger.java", 55, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := 0;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block14:
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$bitLength$$0$l7, 0);
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon12_Then, inline$java.math.BigInteger$bitLength$$0$anon12_Else;

  inline$java.math.BigInteger$bitLength$$0$anon12_Then:
    assume {:partition} inline$java.math.BigInteger$bitLength$$0$$b5 <= 0;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$block15;

  inline$java.math.BigInteger$bitLength$$0$anon12_Else:
    assume {:partition} 0 < inline$java.math.BigInteger$bitLength$$0$$b5;
    assert {:sourceloc "BigInteger.java", 56, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$bitLength$$0$anon9;

  inline$java.math.BigInteger$bitLength$$0$anon9:
    assert {:sourceloc "BigInteger.java", 57, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$i8 := inline$java.math.BigInteger$bitLength$$0$i8 + 1;
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$l7 := unsafe.$shrInt(inline$java.math.BigInteger$bitLength$$0$l7, 1);
    assert {:sourceloc "BigInteger.java", 58, -1, -1, -1} true;
    goto inline$java.math.BigInteger$bitLength$$0$block14;

  inline$java.math.BigInteger$bitLength$$0$block15:
    assert {:sourceloc "BigInteger.java", 61, -1, -1, -1} true;
    inline$java.math.BigInteger$bitLength$$0$$return := inline$java.math.BigInteger$bitLength$$0$i8;
    goto inline$java.math.BigInteger$bitLength$$0$block16;

  inline$java.math.BigInteger$bitLength$$0$block16:
    goto inline$java.math.BigInteger$bitLength$$0$Return;

  inline$java.math.BigInteger$bitLength$$0$Return:
    $i0 := inline$java.math.BigInteger$bitLength$$0$$return;
    $exception := inline$java.math.BigInteger$bitLength$$0$$exception;
    goto anon3$1;

  anon3$1:
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    goto anon17_Then, anon17_Else;

  anon17_Then:
    assume {:partition} i1 >= $i0;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} {:comment "thenblock"} true;
    goto block59;

  anon17_Else:
    assume {:partition} $i0 > i1;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} {:comment "elseblock"} true;
    goto anon6;

  anon6:
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$Entry;

  inline$java.math.BigInteger$testBit$int$0$Entry:
    inline$java.math.BigInteger$testBit$int$0$$this := r1;
    inline$java.math.BigInteger$testBit$int$0$$in_parameter__0 := i1;
    havoc inline$java.math.BigInteger$testBit$int$0$r0, inline$java.math.BigInteger$testBit$int$0$$z0, inline$java.math.BigInteger$testBit$int$0$i0, inline$java.math.BigInteger$testBit$int$0$$b5, inline$java.math.BigInteger$testBit$int$0$$l2, inline$java.math.BigInteger$testBit$int$0$$l3, inline$java.math.BigInteger$testBit$int$0$$i1, inline$java.math.BigInteger$testBit$int$0$$l4, inline$java.math.BigInteger$testBit$int$0$$return, inline$java.math.BigInteger$testBit$int$0$$exception;
    goto inline$java.math.BigInteger$testBit$int$0$anon0;

  inline$java.math.BigInteger$testBit$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$testBit$int$0$$this != unsafe.$null;
    inline$java.math.BigInteger$testBit$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$r0 := inline$java.math.BigInteger$testBit$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$i0 := inline$java.math.BigInteger$testBit$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l3 := unsafe.$heap[inline$java.math.BigInteger$testBit$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$i1 := unsafe.$shlInt(1, inline$java.math.BigInteger$testBit$int$0$i0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l2 := inline$java.math.BigInteger$testBit$int$0$$i1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$l4 := unsafe.$bitAnd(inline$java.math.BigInteger$testBit$int$0$$l3, 
  inline$java.math.BigInteger$testBit$int$0$$l2);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$b5 := unsafe.$cmpInt(inline$java.math.BigInteger$testBit$int$0$$l4, 0);
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon4_Then, inline$java.math.BigInteger$testBit$int$0$anon4_Else;

  inline$java.math.BigInteger$testBit$int$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 == 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "thenblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$block17;

  inline$java.math.BigInteger$testBit$int$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$testBit$int$0$$b5 != 0;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} {:comment "elseblock"} true;
    goto inline$java.math.BigInteger$testBit$int$0$anon3;

  inline$java.math.BigInteger$testBit$int$0$anon3:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 1;
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block17:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$z0 := 0;
    goto inline$java.math.BigInteger$testBit$int$0$block18;

  inline$java.math.BigInteger$testBit$int$0$block18:
    assert {:sourceloc "BigInteger.java", 65, -1, -1, -1} true;
    inline$java.math.BigInteger$testBit$int$0$$return := inline$java.math.BigInteger$testBit$int$0$$z0;
    goto inline$java.math.BigInteger$testBit$int$0$block19;

  inline$java.math.BigInteger$testBit$int$0$block19:
    goto inline$java.math.BigInteger$testBit$int$0$Return;

  inline$java.math.BigInteger$testBit$int$0$Return:
    $z0 := inline$java.math.BigInteger$testBit$int$0$$return;
    $exception := inline$java.math.BigInteger$testBit$int$0$$exception;
    goto anon6$1;

  anon6$1:
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} true;
    goto anon18_Then, anon18_Else;

  anon18_Then:
    assume {:partition} $z0 == 0;
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} {:comment "thenblock"} true;
    goto block60;

  anon18_Else:
    assume {:partition} $z0 != 0;
    assert {:sourceloc "ModPow1.java", 169, -1, -1, -1} {:comment "elseblock"} true;
    goto anon9;

  anon9:
    assert {:sourceloc "ModPow1.java", 170, -1, -1, -1} true;
    goto anon19_Then, anon19_Else;

  anon19_Then:
    assume {:partition} r0 != unsafe.$null;
    $exception := $exception;
    goto anon12;

  anon19_Else:
    assume {:partition} r0 == unsafe.$null;
    call $fakelocal_1 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_1;
    return;

  anon12:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Entry;

  inline$java.math.BigInteger$shiftLeft$int$0$Entry:
    inline$java.math.BigInteger$shiftLeft$int$0$$this := r0;
    inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0 := i1;
    havoc inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0, inline$java.math.BigInteger$shiftLeft$int$0$$l2, inline$java.math.BigInteger$shiftLeft$int$0$$l1, inline$java.math.BigInteger$shiftLeft$int$0$r0, inline$java.math.BigInteger$shiftLeft$int$0$i0, inline$java.math.BigInteger$shiftLeft$int$0$$r1, inline$java.math.BigInteger$shiftLeft$int$0$$return, inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    inline$java.math.BigInteger$shiftLeft$int$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$shiftLeft$int$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$shiftLeft$int$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$r0 := inline$java.math.BigInteger$shiftLeft$int$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$i0 := inline$java.math.BigInteger$shiftLeft$int$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    call inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$shiftLeft$int$0$$r1 := inline$java.math.BigInteger$shiftLeft$int$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$shiftLeft$int$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$l2 := unsafe.$shlInt(inline$java.math.BigInteger$shiftLeft$int$0$$l1, 
  inline$java.math.BigInteger$shiftLeft$int$0$i0);
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$this := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0 := inline$java.math.BigInteger$shiftLeft$int$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$0$r0, inline$java.math.BigInteger$$la$init$ra$$long$0$l0, inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$0$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$r0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$0$l0 := inline$java.math.BigInteger$$la$init$ra$$long$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$0$Entry;

  inline$java.lang.Object$$la$init$ra$$$0$Entry:
    inline$java.lang.Object$$la$init$ra$$$0$$this := inline$java.math.BigInteger$$la$init$ra$$long$0$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$0$anon0;

  inline$java.lang.Object$$la$init$ra$$$0$anon0:
    inline$java.lang.Object$$la$init$ra$$$0$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$0$Return;

  inline$java.lang.Object$$la$init$ra$$$0$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$0$$exception := inline$java.lang.Object$$la$init$ra$$$0$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$0$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$0$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$0$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$0$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$0$Return:
    inline$java.math.BigInteger$shiftLeft$int$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$0$$exception;
    goto inline$java.math.BigInteger$shiftLeft$int$0$anon0$1;

  inline$java.math.BigInteger$shiftLeft$int$0$anon0$1:
    assert {:sourceloc "BigInteger.java", 26, -1, -1, -1} true;
    inline$java.math.BigInteger$shiftLeft$int$0$$return := inline$java.math.BigInteger$shiftLeft$int$0$$r1;
    goto inline$java.math.BigInteger$shiftLeft$int$0$block5;

  inline$java.math.BigInteger$shiftLeft$int$0$block5:
    goto inline$java.math.BigInteger$shiftLeft$int$0$Return;

  inline$java.math.BigInteger$shiftLeft$int$0$Return:
    $r2 := inline$java.math.BigInteger$shiftLeft$int$0$$return;
    $exception := inline$java.math.BigInteger$shiftLeft$int$0$$exception;
    goto anon12$1;

  anon12$1:
    assert {:sourceloc "ModPow1.java", 170, -1, -1, -1} true;
    goto anon20_Then, anon20_Else;

  anon20_Then:
    assume {:partition} r3 != unsafe.$null;
    $exception := $exception;
    goto anon15;

  anon20_Else:
    assume {:partition} r3 == unsafe.$null;
    call $fakelocal_2 := unsafe.$new(unsafe.java.lang.RuntimeException);
    $return := unsafe.$null;
    $exception := $fakelocal_2;
    return;

  anon15:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Entry:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$this := r3;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0 := $r2;
    havoc inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0, inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2, inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0, inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1, inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$objIndex := unsafe.$objIndex;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$add$java.math.BigInteger$0$$this != unsafe.$null;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$$return, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0 := unsafe.$new(unsafe.java.math.BigInteger);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r0, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then, inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Then:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 != unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon4_Else:
    assume {:partition} inline$java.math.BigInteger$add$java.math.BigInteger$0$r1 == unsafe.$null;
    call inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1 := unsafe.$new(unsafe.java.lang.NullPointerException);
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := unsafe.$null;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$fakelocal_1;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0 := unsafe.$heap[inline$java.math.BigInteger$add$java.math.BigInteger$0$r1, unsafe.long$java.math.BigInteger$value0];
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l1
   + inline$java.math.BigInteger$add$java.math.BigInteger$0$$l0;
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Entry;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Entry:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$this := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$l2;
    havoc inline$java.math.BigInteger$$la$init$ra$$long$1$r0, inline$java.math.BigInteger$$la$init$ra$$long$1$l0, inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$heap := unsafe.$heap;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0:
    assume (forall T: javaType :: unsafe.$heap[unsafe.$null, unsafe.$type] <: T);
    assume (forall _r: ref :: unsafe.$arrSizeHeap[_r] >= 0);
    assume (forall _r: ref :: unsafe.$stringSizeHeap[_r] >= 0);
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$$this, unsafe.$type]
   <: unsafe.java.math.BigInteger;
    assume {:sourceloc "BigInteger.java", -1, -1, -1, -1} inline$java.math.BigInteger$$la$init$ra$$long$1$$this != unsafe.$null;
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := unsafe.$null;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$r0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$this;
    assert {:sourceloc "BigInteger.java", -1, -1, -1, -1} true;
    inline$java.math.BigInteger$$la$init$ra$$long$1$l0 := inline$java.math.BigInteger$$la$init$ra$$long$1$$in_parameter__0;
    assert {:sourceloc "BigInteger.java", 6, -1, -1, -1} true;
    goto inline$java.lang.Object$$la$init$ra$$$1$Entry;

  inline$java.lang.Object$$la$init$ra$$$1$Entry:
    inline$java.lang.Object$$la$init$ra$$$1$$this := inline$java.math.BigInteger$$la$init$ra$$long$1$r0;
    havoc inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.lang.Object$$la$init$ra$$$1$anon0;

  inline$java.lang.Object$$la$init$ra$$$1$anon0:
    inline$java.lang.Object$$la$init$ra$$$1$$exception := unsafe.$null;
    goto inline$java.lang.Object$$la$init$ra$$$1$Return;

  inline$java.lang.Object$$la$init$ra$$$1$Return:
    inline$java.math.BigInteger$$la$init$ra$$long$1$$exception := inline$java.lang.Object$$la$init$ra$$$1$$exception;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$anon0$1:
    assert {:sourceloc "BigInteger.java", 7, -1, -1, -1} true;
    unsafe.$heap := unsafe.$heap[inline$java.math.BigInteger$$la$init$ra$$long$1$r0, unsafe.long$java.math.BigInteger$value0 := inline$java.math.BigInteger$$la$init$ra$$long$1$l0];
    assert {:sourceloc "BigInteger.java", 8, -1, -1, -1} true;
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$block1;

  inline$java.math.BigInteger$$la$init$ra$$long$1$block1:
    goto inline$java.math.BigInteger$$la$init$ra$$long$1$Return;

  inline$java.math.BigInteger$$la$init$ra$$long$1$Return:
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception := inline$java.math.BigInteger$$la$init$ra$$long$1$$exception;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$anon3$1:
    assert {:sourceloc "BigInteger.java", 34, -1, -1, -1} true;
    inline$java.math.BigInteger$add$java.math.BigInteger$0$$return := inline$java.math.BigInteger$add$java.math.BigInteger$0$$r2;
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$block7;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$block7:
    goto inline$java.math.BigInteger$add$java.math.BigInteger$0$Return;

  inline$java.math.BigInteger$add$java.math.BigInteger$0$Return:
    r3 := inline$java.math.BigInteger$add$java.math.BigInteger$0$$return;
    $exception := inline$java.math.BigInteger$add$java.math.BigInteger$0$$exception;
    goto anon15$1;

  anon15$1:
    goto block60;

  block60:
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    i1 := i1 + 1;
    assert {:sourceloc "ModPow1.java", 168, -1, -1, -1} true;
    goto block58;

  block59:
    assert {:sourceloc "ModPow1.java", 173, -1, -1, -1} true;
    $return := r3;
    goto block61;

  block61:
    return;
}



implementation unsafe.java.lang.Object$$la$init$ra$$($this: ref) returns ($exception: ref)
{

  anon0:
    $exception := unsafe.$null;
    return;
}



type ref;

type javaType;

type Field _;

type $heap_type = <$GenericType__0>[ref,Field $GenericType__0]$GenericType__0;

type boolArrHeap_type = [ref][int]bool;

type refArrHeap_type = [ref][int]ref;

type realArrHeap_type = [ref][int]int;

type intArrHeap_type = [ref][int]int;
