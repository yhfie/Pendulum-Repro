public class OSecurityManager extends java.lang.Object
{
    public static final java.lang.String HASH_ALGORITHM;
    public static final java.lang.String HASH_ALGORITHM_PREFIX;
    public static final java.lang.String PBKDF2_ALGORITHM;
    public static final java.lang.String PBKDF2_ALGORITHM_PREFIX;
    public static final java.lang.String PBKDF2_SHA256_ALGORITHM;
    public static final java.lang.String PBKDF2_SHA256_ALGORITHM_PREFIX;
    public static final int SALT_SIZE;
    public static final int HASH_SIZE;
    private static final OSecurityManager instance;
    private java.security.MessageDigest md;
    private static java.util.Map SALT_CACHE;

    public void <init>()
    {
        OSecurityManager r0;
        java.security.NoSuchAlgorithmException r1, $r3;
        java.security.MessageDigest $r2;
        com.orientechnologies.common.log.OLogManager $r4;
        java.lang.Object[] $r5;

        r0 := @this: OSecurityManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r0.<OSecurityManager: java.security.MessageDigest md> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <com.orientechnologies.common.log.OLogManager: com.orientechnologies.common.log.OLogManager instance()>();

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<com.orientechnologies.common.log.OLogManager: void error(java.lang.Object,java.lang.String,java.lang.Throwable,java.lang.Object[])>(r0, "Cannot use OSecurityManager", r1, $r5);

     label4:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.lang.String createHash(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.UnsupportedEncodingException
    {
        java.lang.String r0, $r4, r5;
        java.security.MessageDigest r1;
        byte[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        if r5 != null goto label1;

        r5 = "SHA-256";

     label1:
        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r5);

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2);

        $r4 = staticinvoke <OSecurityManager: java.lang.String byteArrayToHexStr(byte[])>($r3);

        return $r4;
    }

    public static OSecurityManager instance()
    {
        OSecurityManager $r0;

        $r0 = <OSecurityManager: OSecurityManager instance>;

        return $r0;
    }

    public static boolean isEqual_inline(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, i7;
        byte $b3, $b4, $b5, b6;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        b6 = 0;

        i7 = 0;

     label5:
        $i2 = lengthof r0;

        if i7 >= $i2 goto label6;

        $b4 = r0[i7];

        $b3 = r1[i7];

        $b5 = $b4 ^ $b3;

        b6 = b6 | $b5;

        i7 = i7 + 1;

        goto label5;

     label6:
        if b6 != 0 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }

    public boolean equals_inline(java.lang.String, java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, r2;
        char[] r3, r4;
        boolean z0, $z1, $z2, z3, z4;
        int $i0, $i1, i6, i7;
        java.lang.Boolean $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r18, $r19, $r20, $r22;
        java.lang.Object $r7, $r11, $r15, $r17, $r21;
        char $c2, $c3;
        long $l4, $l5;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z3 = 0;

        z4 = 0;

        i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i6 != $i0 goto label3;

        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r4 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label1:
        $i1 = i6;

        i6 = i6 + -1;

        if $i1 == 0 goto label2;

        $c2 = r3[i7];

        $l5 = (long) $c2;

        $c3 = r4[i7];

        $l4 = (long) $c3;

        z0 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: boolean neq(long,long)>($l5, $l4);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r15 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z4, $r13, $r14);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r17 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r15, $r16);

        $r18 = (java.lang.Boolean) $r17;

        z3 = virtualinvoke $r18.<java.lang.Boolean: boolean booleanValue()>();

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r21 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z0, $r19, $r20);

        $r22 = (java.lang.Boolean) $r21;

        z4 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        i7 = i7 + 1;

        goto label1;

     label2:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r11 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z4, $r9, $r10);

        $r12 = (java.lang.Boolean) $r11;

        $z2 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label3:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7 = staticinvoke <sg.edu.nus.comp.tsunami.safe.Safe: java.lang.Object cond(boolean,java.lang.Object,java.lang.Object)>(z4, $r5, $r6);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public boolean checkPassword_unsafe(java.lang.String, java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, r2, $r3, $r4, $r5, $r6, r7, r8, r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("{SHA-256}");

        if $z0 == 0 goto label1;

        $r5 = "{SHA-256}";

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i2);

        $r6 = virtualinvoke r0.<OSecurityManager: java.lang.String createSHA256(java.lang.String)>(r1);

        $z6 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        return $z6;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("{PBKDF2WithHmacSHA1}");

        if $z1 == 0 goto label2;

        $r4 = "{PBKDF2WithHmacSHA1}";

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

        $z5 = virtualinvoke r0.<OSecurityManager: boolean checkPasswordWithSalt(java.lang.String,java.lang.String,java.lang.String)>(r1, r8, "PBKDF2WithHmacSHA1");

        return $z5;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("{PBKDF2WithHmacSHA256}");

        if $z2 == 0 goto label3;

        $r3 = "{PBKDF2WithHmacSHA256}";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i0);

        $z4 = virtualinvoke r0.<OSecurityManager: boolean checkPasswordWithSalt(java.lang.String,java.lang.String,java.lang.String)>(r1, r9, "PBKDF2WithHmacSHA256");

        return $z4;

     label3:
        $z3 = virtualinvoke r0.<OSecurityManager: boolean equals_inline(java.lang.String,java.lang.String)>(r1, r2);

        return $z3;
    }

    public java.lang.String createSHA256(java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, $r3;
        byte[] $r2;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<OSecurityManager: byte[] digestSHA256(java.lang.String)>(r1);

        $r3 = staticinvoke <OSecurityManager: java.lang.String byteArrayToHexStr(byte[])>($r2);

        return $r3;
    }

    public java.lang.String createHash(java.lang.String, java.lang.String, boolean)
    {
        OSecurityManager r0;
        java.lang.String r1, r2, $r5, $r6, $r7, $r13, $r16, r23;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder r3, $r4, $r9, $r10, $r11, $r12;
        java.lang.IllegalArgumentException $r8, $r21, $r22;
        com.orientechnologies.orient.core.config.OGlobalConfiguration $r14, $r17;
        int $i0, $i1;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input string is null");

        throw $r22;

     label1:
        if r2 != null goto label2;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Algorithm is null");

        throw $r21;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(128);

        r3 = $r4;

        if z0 == 0 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

     label3:
        $r5 = "SHA-256";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label4;

        r23 = virtualinvoke r0.<OSecurityManager: java.lang.String createSHA256(java.lang.String)>(r1);

        goto label7;

     label4:
        $r6 = "PBKDF2WithHmacSHA1";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label5;

        $r17 = <com.orientechnologies.orient.core.config.OGlobalConfiguration: com.orientechnologies.orient.core.config.OGlobalConfiguration SECURITY_USER_PASSWORD_SALT_ITERATIONS>;

        $i1 = virtualinvoke $r17.<com.orientechnologies.orient.core.config.OGlobalConfiguration: int getValueAsInteger()>();

        r23 = virtualinvoke r0.<OSecurityManager: java.lang.String createHashWithSalt(java.lang.String,int,java.lang.String)>(r1, $i1, r2);

        goto label7;

     label5:
        $r7 = "PBKDF2WithHmacSHA256";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z3 == 0 goto label6;

        $r14 = <com.orientechnologies.orient.core.config.OGlobalConfiguration: com.orientechnologies.orient.core.config.OGlobalConfiguration SECURITY_USER_PASSWORD_SALT_ITERATIONS>;

        $i0 = virtualinvoke $r14.<com.orientechnologies.orient.core.config.OGlobalConfiguration: int getValueAsInteger()>();

        r23 = virtualinvoke r0.<OSecurityManager: java.lang.String createHashWithSalt(java.lang.String,int,java.lang.String)>(r1, $i0, r2);

        goto label7;

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Algorithm \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label7:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r16 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public synchronized byte[] digestSHA256(java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1;
        java.io.UnsupportedEncodingException r2, $r6;
        java.security.MessageDigest $r3;
        byte[] $r4, $r5;
        com.orientechnologies.common.log.OLogManager $r7;
        java.lang.Object[] $r8;
        com.orientechnologies.common.exception.OException $r10;
        com.orientechnologies.orient.core.exception.OConfigurationException r11;
        java.lang.Throwable r12;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<OSecurityManager: java.security.MessageDigest md>;

        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = staticinvoke <com.orientechnologies.common.log.OLogManager: com.orientechnologies.common.log.OLogManager instance()>();

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke $r7.<com.orientechnologies.common.log.OLogManager: void error(java.lang.Object,java.lang.String,java.lang.Throwable,java.lang.Object[])>(r0, "The requested encoding is not supported: cannot execute security checks", r2, $r8);

        r11 = new com.orientechnologies.orient.core.exception.OConfigurationException;

        specialinvoke r11.<com.orientechnologies.orient.core.exception.OConfigurationException: void <init>(java.lang.String)>("The requested encoding is not supported: cannot execute security checks");

        $r10 = staticinvoke <com.orientechnologies.common.exception.OException: com.orientechnologies.common.exception.OException wrapException(com.orientechnologies.common.exception.OException,java.lang.Throwable)>(r11, r2);

        r12 = (java.lang.Throwable) $r10;

        throw r12;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.String createHashWithSalt(java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, $r3;
        com.orientechnologies.orient.core.config.OGlobalConfiguration $r2;
        int $i0;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.orientechnologies.orient.core.config.OGlobalConfiguration: com.orientechnologies.orient.core.config.OGlobalConfiguration SECURITY_USER_PASSWORD_SALT_ITERATIONS>;

        $i0 = virtualinvoke $r2.<com.orientechnologies.orient.core.config.OGlobalConfiguration: int getValueAsInteger()>();

        $r3 = virtualinvoke r0.<OSecurityManager: java.lang.String createHashWithSalt(java.lang.String,int,java.lang.String)>(r1, $i0, "PBKDF2WithHmacSHA256");

        return $r3;
    }

    public java.lang.String createHashWithSalt(java.lang.String, int, java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, r2, $r8, $r11, $r15;
        int i0;
        java.security.SecureRandom r3, $r6;
        byte[] r4, r5;
        java.lang.StringBuilder $r7, $r9, $r10, $r12, $r13, $r14;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r6 = new java.security.SecureRandom;

        specialinvoke $r6.<java.security.SecureRandom: void <init>()>();

        r3 = $r6;

        r4 = newarray (byte)[24];

        virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r4);

        r5 = specialinvoke r0.<OSecurityManager: byte[] getPbkdf2(java.lang.String,byte[],int,int,java.lang.String)>(r1, r4, i0, 24, r2);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = staticinvoke <OSecurityManager: java.lang.String byteArrayToHexStr(byte[])>(r5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = staticinvoke <OSecurityManager: java.lang.String byteArrayToHexStr(byte[])>(r4);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public boolean checkPasswordWithSalt(java.lang.String, java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<OSecurityManager: boolean checkPasswordWithSalt(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "PBKDF2WithHmacSHA256");

        return $z0;
    }

    public boolean checkPasswordWithSalt(java.lang.String, java.lang.String, java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, r2, r3, $r8, $r9, $r10;
        java.lang.String[] r4;
        byte[] r5, r6, r7;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i1 = lengthof r4;

        if $i1 == 3 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hash does not contain the requested parts: <hash>:<salt>:<iterations>");

        throw $r11;

     label1:
        $r8 = r4[0];

        r5 = staticinvoke <OSecurityManager: byte[] hexToByteArray(java.lang.String)>($r8);

        $r9 = r4[1];

        r6 = staticinvoke <OSecurityManager: byte[] hexToByteArray(java.lang.String)>($r9);

        $r10 = r4[2];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $i2 = lengthof r5;

        r7 = specialinvoke r0.<OSecurityManager: byte[] getPbkdf2(java.lang.String,byte[],int,int,java.lang.String)>(r1, r6, i0, $i2, r3);

        $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r5, r7);

        return $z0;
    }

    private byte[] getPbkdf2(java.lang.String, byte[], int, int, java.lang.String)
    {
        OSecurityManager r0;
        java.lang.String r1, r3, r4, $r10, $r21, r32, r38;
        byte[] r2, r33, r35;
        int i0, i1, $i2;
        javax.crypto.SecretKeyFactory r5;
        java.lang.StringBuilder $r7, $r9, $r19, $r20, $r22, $r23, $r24, $r25, $r26, r37, r39;
        java.util.Map $r11, $r15, $r16, $r27;
        char[] $r13;
        javax.crypto.SecretKey $r14;
        java.lang.Object $r28;
        java.lang.Exception $r29, r36;
        com.orientechnologies.common.exception.OException $r31;
        javax.crypto.spec.PBEKeySpec r34, r40;
        com.orientechnologies.orient.core.exception.OSecurityException r41;
        java.lang.Throwable r42;

        r0 := @this: OSecurityManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r32 = null;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r38 = new java.lang.String;

        specialinvoke r38.<java.lang.String: void <init>(byte[])>(r2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke r0.<OSecurityManager: java.lang.String createSHA256(java.lang.String)>($r10);

        $r11 = <OSecurityManager: java.util.Map SALT_CACHE>;

        if $r11 == null goto label1;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r21 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r2);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = <OSecurityManager: java.util.Map SALT_CACHE>;

        $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        r33 = (byte[]) $r28;

        if r33 == null goto label1;

        return r33;

     label1:
        r40 = new javax.crypto.spec.PBEKeySpec;

        $r13 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i2 = i1 * 8;

        specialinvoke r40.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r13, r2, i0, $i2);

        r34 = r40;

     label2:
        r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r3);

        $r14 = virtualinvoke r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r34);

        r35 = interfaceinvoke $r14.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r15 = <OSecurityManager: java.util.Map SALT_CACHE>;

        if $r15 == null goto label3;

        $r16 = <OSecurityManager: java.util.Map SALT_CACHE>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r35);

     label3:
        return r35;

     label4:
        $r29 := @caughtexception;

        r36 = $r29;

        r41 = new com.orientechnologies.orient.core.exception.OSecurityException;

        specialinvoke r41.<com.orientechnologies.orient.core.exception.OSecurityException: void <init>(java.lang.String)>("Cannot create a key with \'PBKDF2WithHmacSHA1\' algorithm");

        $r31 = staticinvoke <com.orientechnologies.common.exception.OException: com.orientechnologies.common.exception.OException wrapException(com.orientechnologies.common.exception.OException,java.lang.Throwable)>(r41, r36);

        r42 = (java.lang.Throwable) $r31;

        throw r42;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static java.lang.String byteArrayToHexStr(byte[])
    {
        byte[] r0;
        char[] r1;
        byte b0, b2;
        short s1, $s6;
        int $i3, $i4, $i5, $i7, $i9, $i10, $i11, $i13, i14, $i15, $i16;
        java.lang.String $r2;
        char $c8, $c12;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return null;

     label1:
        $i3 = lengthof r0;

        $i4 = $i3 * 2;

        r1 = newarray (char)[$i4];

        i14 = 0;

     label2:
        $i5 = lengthof r0;

        if i14 >= $i5 goto label7;

        b0 = r0[i14];

        $s6 = b0 & 240;

        s1 = $s6 >> 4;

        b2 = b0 & 15;

        $i9 = 2 * i14;

        if s1 >= 10 goto label3;

        $i15 = 48 + s1;

        goto label4;

     label3:
        $i7 = 65 + s1;

        $i15 = $i7 - 10;

     label4:
        $c8 = (char) $i15;

        r1[$i9] = $c8;

        $i10 = 2 * i14;

        $i13 = $i10 + 1;

        if b2 >= 10 goto label5;

        $i16 = 48 + b2;

        goto label6;

     label5:
        $i11 = 65 + b2;

        $i16 = $i11 - 10;

     label6:
        $c12 = (char) $i16;

        r1[$i13] = $c12;

        i14 = i14 + 1;

        goto label2;

     label7:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    private static byte[] hexToByteArray(java.lang.String)
    {
        java.lang.String r0, $r2;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        byte $b7;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        r1 = newarray (byte)[$i1];

        i8 = 0;

     label1:
        $i2 = lengthof r1;

        if i8 >= $i2 goto label2;

        $i5 = 2 * i8;

        $i3 = 2 * i8;

        $i4 = $i3 + 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $b7 = (byte) $i6;

        r1[i8] = $b7;

        i8 = i8 + 1;

        goto label1;

     label2:
        return r1;
    }

    static void <clinit>()
    {
        int i0;
        com.orientechnologies.orient.core.config.OGlobalConfiguration $r1;
        java.util.Map $r3, r6;
        OSecurityManager r4;
        com.orientechnologies.common.collection.OLRUCache r5;

        <OSecurityManager: int HASH_SIZE> = 24;

        <OSecurityManager: int SALT_SIZE> = 24;

        <OSecurityManager: java.lang.String PBKDF2_SHA256_ALGORITHM_PREFIX> = "{PBKDF2WithHmacSHA256}";

        <OSecurityManager: java.lang.String PBKDF2_SHA256_ALGORITHM> = "PBKDF2WithHmacSHA256";

        <OSecurityManager: java.lang.String PBKDF2_ALGORITHM_PREFIX> = "{PBKDF2WithHmacSHA1}";

        <OSecurityManager: java.lang.String PBKDF2_ALGORITHM> = "PBKDF2WithHmacSHA1";

        <OSecurityManager: java.lang.String HASH_ALGORITHM_PREFIX> = "{SHA-256}";

        <OSecurityManager: java.lang.String HASH_ALGORITHM> = "SHA-256";

        r4 = new OSecurityManager;

        specialinvoke r4.<OSecurityManager: void <init>()>();

        <OSecurityManager: OSecurityManager instance> = r4;

        <OSecurityManager: java.util.Map SALT_CACHE> = null;

        $r1 = <com.orientechnologies.orient.core.config.OGlobalConfiguration: com.orientechnologies.orient.core.config.OGlobalConfiguration SECURITY_USER_PASSWORD_SALT_CACHE_SIZE>;

        i0 = virtualinvoke $r1.<com.orientechnologies.orient.core.config.OGlobalConfiguration: int getValueAsInteger()>();

        if i0 <= 0 goto label1;

        r5 = new com.orientechnologies.common.collection.OLRUCache;

        specialinvoke r5.<com.orientechnologies.common.collection.OLRUCache: void <init>(int)>(i0);

        r6 = (java.util.Map) r5;

        $r3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(r6);

        <OSecurityManager: java.util.Map SALT_CACHE> = $r3;

     label1:
        return;
    }
}
