(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.PWCheck () T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 () T@U)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 () T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap@22 () T@U)
(declare-fun fixed.$heap@11 () T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun $in_parameter__0 () T@U)
(declare-fun fixed.$heap@12 () T@U)
(declare-fun call3formal@$obj@0 () T@U)
(declare-fun $in_parameter__1 () T@U)
(declare-fun fixed.$heap@13 () T@U)
(declare-fun call3formal@$obj@0@@0 () T@U)
(declare-fun fixed.$heap@18 () T@U)
(declare-fun call3formal@$obj@0@@1 () T@U)
(declare-fun fixed.$heap@19 () T@U)
(declare-fun call3formal@$obj@0@@2 () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$heap@20 () T@U)
(declare-fun call3formal@$obj@0@@3 () T@U)
(declare-fun fixed.$heap@21 () T@U)
(declare-fun call3formal@$obj@0@@4 () T@U)
(declare-fun fixed.$intArrHeap () T@U)
(declare-fun fixed.$heap@14 () T@U)
(declare-fun call3formal@$obj@0@@5 () T@U)
(declare-fun fixed.$heap@15 () T@U)
(declare-fun call3formal@$obj@0@@6 () T@U)
(declare-fun fixed.$heap@16 () T@U)
(declare-fun call3formal@$obj@0@@7 () T@U)
(declare-fun fixed.$heap@17 () T@U)
(declare-fun call3formal@$obj@0@@8 () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun fixed.$heap@0 () T@U)
(declare-fun call3formal@$obj@0@@9 () T@U)
(declare-fun fixed.$heap@1 () T@U)
(declare-fun call3formal@$obj@0@@10 () T@U)
(declare-fun fixed.$heap@10 () T@U)
(declare-fun fixed.$heap@6 () T@U)
(declare-fun call3formal@$obj@0@@11 () T@U)
(declare-fun fixed.$heap@7 () T@U)
(declare-fun call3formal@$obj@0@@12 () T@U)
(declare-fun fixed.$heap@8 () T@U)
(declare-fun call3formal@$obj@0@@13 () T@U)
(declare-fun fixed.$heap@9 () T@U)
(declare-fun call3formal@$obj@0@@14 () T@U)
(declare-fun fixed.$heap@2 () T@U)
(declare-fun call3formal@$obj@0@@15 () T@U)
(declare-fun fixed.$heap@3 () T@U)
(declare-fun call3formal@$obj@0@@16 () T@U)
(declare-fun fixed.$heap@4 () T@U)
(declare-fun call3formal@$obj@0@@17 () T@U)
(declare-fun fixed.$heap@5 () T@U)
(declare-fun call3formal@$obj@0@@18 () T@U)
(declare-fun %lbl%+354155 () Bool)
(declare-fun %lbl%+354133 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_i6@2 () Int)
(declare-fun %lbl%+354135 () Bool)
(declare-fun %lbl%+354145 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b5@2 () Int)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b4@2 () Int)
(declare-fun %lbl%+354134 () Bool)
(declare-fun %lbl%+354154 () Bool)
(declare-fun %lbl%+354146 () Bool)
(declare-fun %lbl%+354147 () Bool)
(declare-fun %lbl%+354136 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i3@2 () Int)
(declare-fun %lbl%+354183 () Bool)
(declare-fun %lbl%+354177 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$i6@1 () Int)
(declare-fun %lbl%+354179 () Bool)
(declare-fun %lbl%+354178 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 () Int)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1 () Int)
(declare-fun %lbl%+354176 () Bool)
(declare-fun %lbl%+354175 () Bool)
(declare-fun %lbl%+354174 () Bool)
(declare-fun %lbl%+354173 () Bool)
(declare-fun %lbl%+354180 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1 () Int)
(declare-fun %lbl%+354227 () Bool)
(declare-fun %lbl%+354205 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_i6@2 () Int)
(declare-fun %lbl%+354207 () Bool)
(declare-fun %lbl%+354217 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b5@2 () Int)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b4@2 () Int)
(declare-fun %lbl%+354206 () Bool)
(declare-fun %lbl%+354226 () Bool)
(declare-fun %lbl%+354218 () Bool)
(declare-fun %lbl%+354219 () Bool)
(declare-fun %lbl%+354208 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i3@2 () Int)
(declare-fun %lbl%+354255 () Bool)
(declare-fun %lbl%+354249 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$i6@1 () Int)
(declare-fun %lbl%+354251 () Bool)
(declare-fun %lbl%+354250 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 () Int)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1 () Int)
(declare-fun %lbl%+354248 () Bool)
(declare-fun %lbl%+354247 () Bool)
(declare-fun %lbl%+354246 () Bool)
(declare-fun %lbl%+354245 () Bool)
(declare-fun %lbl%+354252 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1 () Int)
(declare-fun %lbl%+361445 () Bool)
(declare-fun %lbl%@367186 () Bool)
(declare-fun AA_TEMP133@2 () Bool)
(declare-fun AA_TEMP132@2 () Bool)
(declare-fun AA_TEMP131@2 () Bool)
(declare-fun AA_TEMP130@2 () Bool)
(declare-fun %lbl%+354258 () Bool)
(declare-fun AA_TEMP130@1 () Bool)
(declare-fun AA_TEMP130@0 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 () Int)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 () Int)
(declare-fun AA_TEMP131@1 () Bool)
(declare-fun AA_TEMP131@0 () Bool)
(declare-fun AA_TEMP132@1 () Bool)
(declare-fun AA_TEMP132@0 () Bool)
(declare-fun fixed.$objIndex@20 () Int)
(declare-fun AA_TEMP133@1 () Bool)
(declare-fun AA_TEMP133@0 () Bool)
(declare-fun %lbl%+354257 () Bool)
(declare-fun %lbl%+354244 () Bool)
(declare-fun fixed.$objIndex () Int)
(declare-fun fixed.$objIndex@19 () Int)
(declare-fun %lbl%+354243 () Bool)
(declare-fun %lbl%+354242 () Bool)
(declare-fun %lbl%+354241 () Bool)
(declare-fun fixed.$objIndex@18 () Int)
(declare-fun %lbl%+354240 () Bool)
(declare-fun %lbl%+354239 () Bool)
(declare-fun %lbl%+354238 () Bool)
(declare-fun %lbl%+354237 () Bool)
(declare-fun %lbl%+354236 () Bool)
(declare-fun fixed.$objIndex@17 () Int)
(declare-fun %lbl%+354235 () Bool)
(declare-fun %lbl%+354234 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1 () Int)
(declare-fun %lbl%+354231 () Bool)
(declare-fun fixed.$objIndex@16 () Int)
(declare-fun %lbl%+354197 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1 () Int)
(declare-fun %lbl%+354254 () Bool)
(declare-fun %lbl%+354253 () Bool)
(declare-fun %lbl%+354233 () Bool)
(declare-fun %lbl%+354232 () Bool)
(declare-fun %lbl%+354256 () Bool)
(declare-fun %lbl%+354230 () Bool)
(declare-fun %lbl%+354229 () Bool)
(declare-fun %lbl%+354221 () Bool)
(declare-fun fixed.$objIndex@15 () Int)
(declare-fun %lbl%+354220 () Bool)
(declare-fun %lbl%+354222 () Bool)
(declare-fun %lbl%+354224 () Bool)
(declare-fun fixed.$objIndex@14 () Int)
(declare-fun %lbl%+354223 () Bool)
(declare-fun %lbl%+354225 () Bool)
(declare-fun %lbl%+354209 () Bool)
(declare-fun %lbl%+354210 () Bool)
(declare-fun %lbl%+354212 () Bool)
(declare-fun fixed.$objIndex@13 () Int)
(declare-fun %lbl%+354211 () Bool)
(declare-fun %lbl%+354213 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i2@2 () Int)
(declare-fun %lbl%+354215 () Bool)
(declare-fun %lbl%+354214 () Bool)
(declare-fun %lbl%+354216 () Bool)
(declare-fun %lbl%+354204 () Bool)
(declare-fun fixed.$objIndex@12 () Int)
(declare-fun %lbl%+354203 () Bool)
(declare-fun %lbl%+354202 () Bool)
(declare-fun %lbl%+354201 () Bool)
(declare-fun %lbl%+354200 () Bool)
(declare-fun %lbl%+354199 () Bool)
(declare-fun %lbl%+354198 () Bool)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 () Int)
(declare-fun inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1 () Int)
(declare-fun %lbl%+354196 () Bool)
(declare-fun %lbl%+354195 () Bool)
(declare-fun %lbl%+354194 () Bool)
(declare-fun %lbl%+354193 () Bool)
(declare-fun %lbl%+354192 () Bool)
(declare-fun fixed.$objIndex@11 () Int)
(declare-fun %lbl%+354191 () Bool)
(declare-fun %lbl%+354190 () Bool)
(declare-fun %lbl%+354189 () Bool)
(declare-fun fixed.$objIndex@10 () Int)
(declare-fun %lbl%+354188 () Bool)
(declare-fun %lbl%+354187 () Bool)
(declare-fun %lbl%+354186 () Bool)
(declare-fun %lbl%+354185 () Bool)
(declare-fun %lbl%+354172 () Bool)
(declare-fun fixed.$objIndex@9 () Int)
(declare-fun %lbl%+354171 () Bool)
(declare-fun %lbl%+354170 () Bool)
(declare-fun %lbl%+354169 () Bool)
(declare-fun fixed.$objIndex@8 () Int)
(declare-fun %lbl%+354168 () Bool)
(declare-fun %lbl%+354167 () Bool)
(declare-fun %lbl%+354166 () Bool)
(declare-fun %lbl%+354165 () Bool)
(declare-fun %lbl%+354164 () Bool)
(declare-fun fixed.$objIndex@7 () Int)
(declare-fun %lbl%+354163 () Bool)
(declare-fun %lbl%+354162 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1 () Int)
(declare-fun %lbl%+354159 () Bool)
(declare-fun fixed.$objIndex@6 () Int)
(declare-fun %lbl%+354125 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1 () Int)
(declare-fun %lbl%+354182 () Bool)
(declare-fun %lbl%+354181 () Bool)
(declare-fun %lbl%+354161 () Bool)
(declare-fun %lbl%+354160 () Bool)
(declare-fun %lbl%+354184 () Bool)
(declare-fun %lbl%+354158 () Bool)
(declare-fun %lbl%+354157 () Bool)
(declare-fun %lbl%+354149 () Bool)
(declare-fun fixed.$objIndex@5 () Int)
(declare-fun %lbl%+354148 () Bool)
(declare-fun %lbl%+354150 () Bool)
(declare-fun %lbl%+354152 () Bool)
(declare-fun fixed.$objIndex@4 () Int)
(declare-fun %lbl%+354151 () Bool)
(declare-fun %lbl%+354153 () Bool)
(declare-fun %lbl%+354137 () Bool)
(declare-fun %lbl%+354138 () Bool)
(declare-fun %lbl%+354140 () Bool)
(declare-fun fixed.$objIndex@3 () Int)
(declare-fun %lbl%+354139 () Bool)
(declare-fun %lbl%+354141 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i2@2 () Int)
(declare-fun %lbl%+354143 () Bool)
(declare-fun %lbl%+354142 () Bool)
(declare-fun %lbl%+354144 () Bool)
(declare-fun %lbl%+354132 () Bool)
(declare-fun fixed.$objIndex@2 () Int)
(declare-fun %lbl%+354131 () Bool)
(declare-fun %lbl%+354130 () Bool)
(declare-fun %lbl%+354129 () Bool)
(declare-fun %lbl%+354128 () Bool)
(declare-fun %lbl%+354127 () Bool)
(declare-fun %lbl%+354126 () Bool)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 () Int)
(declare-fun inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1 () Int)
(declare-fun %lbl%+354124 () Bool)
(declare-fun %lbl%+354123 () Bool)
(declare-fun %lbl%+354122 () Bool)
(declare-fun %lbl%+354121 () Bool)
(declare-fun %lbl%+354120 () Bool)
(declare-fun fixed.$objIndex@1 () Int)
(declare-fun %lbl%+354119 () Bool)
(declare-fun %lbl%+354118 () Bool)
(declare-fun %lbl%+354117 () Bool)
(declare-fun fixed.$objIndex@0 () Int)
(declare-fun %lbl%+354116 () Bool)
(declare-fun %lbl%+354115 () Bool)
(declare-fun %lbl%+354114 () Bool)
(declare-fun %lbl%+361443 () Bool)
(declare-fun %lbl%+361458 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@0) (UOrdering2 w@@0 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@0) (= fixed.java.lang.Object w@@0))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@0) (UOrdering2 w@@0 fixed.java.lang.Object))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@1)) (or (= fixed.java.lang.Boolean w@@1) (UOrdering2 fixed.java.lang.Object w@@1)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@1))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) javaTypeType) (UOrdering2 w@@2 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@2) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@2 fixed.java.lang.Boolean))
)))
(assert (= (type fixed.PWCheck) javaTypeType))
(assert (not (= fixed.PWCheck fixed.java.lang.Object)))
(assert (UOrdering2 fixed.PWCheck fixed.java.lang.Object))
(assert (forall ((w@@3 T@U) ) (!  (=> (= (type w@@3) javaTypeType) (=> (and (UOrdering2 fixed.PWCheck w@@3) (UOrdering2 w@@3 fixed.java.lang.Object)) (or (= fixed.PWCheck w@@3) (= fixed.java.lang.Object w@@3))))
 :pattern ( (UOrdering2 fixed.PWCheck w@@3) (UOrdering2 w@@3 fixed.java.lang.Object))
)))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 fixed.PWCheck w@@4)) (or (= fixed.PWCheck w@@4) (UOrdering2 fixed.java.lang.Object w@@4)))
 :pattern ( (UOrdering2 fixed.PWCheck w@@4))
)))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 w@@5 fixed.PWCheck)) (= (oneStep fixed.java.lang.Object w@@5) fixed.PWCheck))
 :pattern ( (UOrdering2 w@@5 fixed.PWCheck))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@6)) (= fixed.java.io.Serializable w@@6))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@6))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@7) (= fixed.java.lang.Object w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@8) (= fixed.java.io.Serializable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@9)) (or (or (= fixed.java.lang.Throwable w@@9) (UOrdering2 fixed.java.lang.Object w@@9)) (UOrdering2 fixed.java.io.Serializable w@@9)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@9))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 w@@10 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@10) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@10 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@11 T@U) ) (!  (=> (= (type w@@11) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@11) (= fixed.java.lang.Throwable w@@11))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@12)) (or (= fixed.java.lang.Exception w@@12) (UOrdering2 fixed.java.lang.Throwable w@@12)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@12))
)))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 w@@13 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@13) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@13 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@14) (= fixed.java.lang.Exception w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@15)) (or (= fixed.java.lang.RuntimeException w@@15) (UOrdering2 fixed.java.lang.Exception w@@15)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@15))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 w@@16 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@16) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@16 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@17) (= fixed.java.lang.RuntimeException w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@18)) (or (= fixed.java.lang.NullPointerException w@@18) (UOrdering2 fixed.java.lang.RuntimeException w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@19) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@20 T@U) ) (!  (=> (= (type w@@20) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@20) (UOrdering2 w@@20 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@20) (= fixed.java.lang.RuntimeException w@@20))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@20) (UOrdering2 w@@20 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@21 T@U) ) (!  (=> (and (= (type w@@21) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@21)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@21) (UOrdering2 fixed.java.lang.RuntimeException w@@21)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@21))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 w@@22 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@22) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@22 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@23 T@U) ) (!  (=> (= (type w@@23) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@23) (UOrdering2 w@@23 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@23) (= fixed.java.lang.IndexOutOfBoundsException w@@23))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@23) (UOrdering2 w@@23 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@24 T@U) ) (!  (=> (and (= (type w@@24) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@24)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@24) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@24)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@24))
)))
(assert (forall ((w@@25 T@U) ) (!  (=> (and (= (type w@@25) javaTypeType) (UOrdering2 w@@25 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@25) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@25 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@26 T@U) ) (!  (=> (= (type w@@26) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (UOrdering2 w@@26 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (= fixed.java.lang.Object w@@26))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@26) (UOrdering2 w@@26 fixed.java.lang.Object))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (and (= (type w@@27) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27) (UOrdering2 fixed.java.lang.Object w@@27)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@27))
)))
(assert (forall ((w@@28 T@U) ) (!  (=> (and (= (type w@@28) javaTypeType) (UOrdering2 w@@28 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@28) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@28 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@29)) (= fixed.java.lang.Comparable w@@29))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@29))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@30 T@U) ) (!  (=> (= (type w@@30) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@30) (UOrdering2 w@@30 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@30) (= fixed.java.lang.RuntimeException w@@30))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@30) (UOrdering2 w@@30 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@31)) (or (= fixed.java.lang.ClassCastException w@@31) (UOrdering2 fixed.java.lang.RuntimeException w@@31)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@31))
)))
(assert (forall ((w@@32 T@U) ) (!  (=> (and (= (type w@@32) javaTypeType) (UOrdering2 w@@32 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@32) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@32 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 w@@33 fixed.java.lang.Object)) (or (or (or (or (= fixed.java.lang.Object w@@33) (UOrdering2 w@@33 fixed.java.lang.Boolean)) (UOrdering2 w@@33 fixed.PWCheck)) (UOrdering2 w@@33 fixed.java.lang.Throwable)) (UOrdering2 w@@33 fixed.sg.edu.nus.comp.tsunami.safe.Safe)))
 :pattern ( (UOrdering2 w@@33 fixed.java.lang.Object))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@34))
 :pattern ( (UOrdering2 w@@34 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@35 T@U) ) (!  (=> (and (= (type w@@35) javaTypeType) (UOrdering2 w@@35 fixed.PWCheck)) (= fixed.PWCheck w@@35))
 :pattern ( (UOrdering2 w@@35 fixed.PWCheck))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 w@@36 fixed.java.io.Serializable)) (or (= fixed.java.io.Serializable w@@36) (UOrdering2 w@@36 fixed.java.lang.Throwable)))
 :pattern ( (UOrdering2 w@@36 fixed.java.io.Serializable))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 w@@37 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@37) (UOrdering2 w@@37 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@37 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@38 T@U) ) (!  (=> (and (= (type w@@38) javaTypeType) (UOrdering2 w@@38 fixed.java.lang.Exception)) (or (= fixed.java.lang.Exception w@@38) (UOrdering2 w@@38 fixed.java.lang.RuntimeException)))
 :pattern ( (UOrdering2 w@@38 fixed.java.lang.Exception))
)))
(assert (forall ((w@@39 T@U) ) (!  (=> (and (= (type w@@39) javaTypeType) (UOrdering2 w@@39 fixed.java.lang.RuntimeException)) (or (or (or (= fixed.java.lang.RuntimeException w@@39) (UOrdering2 w@@39 fixed.java.lang.NullPointerException)) (UOrdering2 w@@39 fixed.java.lang.IndexOutOfBoundsException)) (UOrdering2 w@@39 fixed.java.lang.ClassCastException)))
 :pattern ( (UOrdering2 w@@39 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 w@@40 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@40))
 :pattern ( (UOrdering2 w@@40 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@41 T@U) ) (!  (=> (and (= (type w@@41) javaTypeType) (UOrdering2 w@@41 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@41) (UOrdering2 w@@41 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@41 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 w@@42 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@42))
 :pattern ( (UOrdering2 w@@42 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (and (= (type w@@43) javaTypeType) (UOrdering2 w@@43 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@43))
 :pattern ( (UOrdering2 w@@43 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 w@@44 fixed.java.lang.Comparable)) (= fixed.java.lang.Comparable w@@44))
 :pattern ( (UOrdering2 w@@44 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) javaTypeType) (UOrdering2 w@@45 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@45))
 :pattern ( (UOrdering2 w@@45 fixed.java.lang.ClassCastException))
)))
(assert  (and (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 4)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (Ctor refType) 5)) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.java.lang.Boolean fixed.PWCheck fixed.java.io.Serializable fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.NullPointerException fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Comparable fixed.java.lang.ClassCastException)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCPW.99:15|
 :skolemid |1528|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCPW.103:15|
 :skolemid |1529|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCPW.107:15|
 :skolemid |1530|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCPW.111:15|
 :skolemid |1531|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCPW.115:15|
 :skolemid |1532|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCPW.119:15|
 :skolemid |1533|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCPW.121:15|
 :skolemid |1534|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCPW.8145:15|
 :skolemid |1823|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCPW.8149:15|
 :skolemid |1824|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCPW.8153:15|
 :skolemid |1825|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCPW.8157:15|
 :skolemid |1826|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCPW.8161:15|
 :skolemid |1827|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCPW.8165:15|
 :skolemid |1828|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCPW.8167:15|
 :skolemid |1829|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1) refType) (= (type inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1) refType)) (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
))) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap@22) (MapType0Type refType))) (= (type fixed.$heap@11) (MapType0Type refType))) (= (type fixed.$heap) (MapType0Type refType))) (= (type $in_parameter__0) refType)) (= (type fixed.$heap@12) (MapType0Type refType))) (= (type call3formal@$obj@0) refType)) (= (type $in_parameter__1) refType)) (= (type fixed.$heap@13) (MapType0Type refType))) (= (type call3formal@$obj@0@@0) refType)) (= (type fixed.$heap@18) (MapType0Type refType))) (= (type call3formal@$obj@0@@1) refType)) (= (type fixed.$heap@19) (MapType0Type refType))) (= (type call3formal@$obj@0@@2) refType)) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$heap@20) (MapType0Type refType))) (= (type call3formal@$obj@0@@3) refType)) (= (type fixed.$heap@21) (MapType0Type refType))) (= (type call3formal@$obj@0@@4) refType)) (= (type fixed.$intArrHeap) (MapType1Type refType (MapType1Type intType intType)))) (= (type fixed.$heap@14) (MapType0Type refType))) (= (type call3formal@$obj@0@@5) refType)) (= (type fixed.$heap@15) (MapType0Type refType))) (= (type call3formal@$obj@0@@6) refType)) (= (type fixed.$heap@16) (MapType0Type refType))) (= (type call3formal@$obj@0@@7) refType)) (= (type fixed.$heap@17) (MapType0Type refType))) (= (type call3formal@$obj@0@@8) refType)) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type fixed.$heap@0) (MapType0Type refType))) (= (type call3formal@$obj@0@@9) refType)) (= (type fixed.$heap@1) (MapType0Type refType))) (= (type call3formal@$obj@0@@10) refType)) (= (type fixed.$heap@10) (MapType0Type refType))) (= (type fixed.$heap@6) (MapType0Type refType))) (= (type call3formal@$obj@0@@11) refType)) (= (type fixed.$heap@7) (MapType0Type refType))) (= (type call3formal@$obj@0@@12) refType)) (= (type fixed.$heap@8) (MapType0Type refType))) (= (type call3formal@$obj@0@@13) refType)) (= (type fixed.$heap@9) (MapType0Type refType))) (= (type call3formal@$obj@0@@14) refType)) (= (type fixed.$heap@2) (MapType0Type refType))) (= (type call3formal@$obj@0@@15) refType)) (= (type fixed.$heap@3) (MapType0Type refType))) (= (type call3formal@$obj@0@@16) refType)) (= (type fixed.$heap@4) (MapType0Type refType))) (= (type call3formal@$obj@0@@17) refType)) (= (type fixed.$heap@5) (MapType0Type refType))) (= (type call3formal@$obj@0@@18) refType)))
(push 1)
(set-info :boogie-vc-id PROC_.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_EQ_unsafe__xx__fixed)
(assert (not
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block13_dummy_correct  (=> (! (and %lbl%+354155 true) :lblpos +354155) true)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block13_correct  (=> (! (and %lbl%+354133 true) :lblpos +354133) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_i6@2 (+ 0 1)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block13_dummy_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block14_correct  (=> (! (and %lbl%+354135 true) :lblpos +354135) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block13_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon40_Then_correct  (=> (! (and %lbl%+354145 true) :lblpos +354145) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b5@2 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b4@2) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block14_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon30_correct  (=> (! (and %lbl%+354134 true) :lblpos +354134) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block13_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon40_Else_correct  (=> (! (and %lbl%+354154 true) :lblpos +354154) (=> (not (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b5@2 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b4@2)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon30_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon27_correct  (=> (! (and %lbl%+354146 true) :lblpos +354146) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b4@2 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__1) (int_2_U 0)))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon40_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon40_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon39_Then_correct  (=> (! (and %lbl%+354147 true) :lblpos +354147) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon27_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon37_Then_correct  (=> (! (and %lbl%+354136 true) :lblpos +354136) (=> (>= 0 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i3@2) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block13_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_dummy_correct  (=> (! (and %lbl%+354183 true) :lblpos +354183) true)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_correct  (=> (! (and %lbl%+354177 true) :lblpos +354177) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$i6@1 (+ 0 1)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_dummy_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block14_correct  (=> (! (and %lbl%+354179 true) :lblpos +354179) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Then_correct  (=> (! (and %lbl%+354178 true) :lblpos +354178) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block14_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon30_correct  (=> (! (and %lbl%+354176 true) :lblpos +354176) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Else_correct  (=> (! (and %lbl%+354175 true) :lblpos +354175) (=> (not (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon30_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon27_correct  (=> (! (and %lbl%+354174 true) :lblpos +354174) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__1) (int_2_U 0)))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then_correct  (=> (! (and %lbl%+354173 true) :lblpos +354173) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon27_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then_correct  (=> (! (and %lbl%+354180 true) :lblpos +354180) (=> (>= 0 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block12_dummy_correct  (=> (! (and %lbl%+354227 true) :lblpos +354227) true)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block12_correct  (=> (! (and %lbl%+354205 true) :lblpos +354205) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_i6@2 (+ 0 1)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block12_dummy_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block13_correct  (=> (! (and %lbl%+354207 true) :lblpos +354207) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block12_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon40_Then_correct  (=> (! (and %lbl%+354217 true) :lblpos +354217) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b5@2 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b4@2) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block13_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon30_correct  (=> (! (and %lbl%+354206 true) :lblpos +354206) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block12_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon40_Else_correct  (=> (! (and %lbl%+354226 true) :lblpos +354226) (=> (not (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b5@2 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b4@2)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon30_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon27_correct  (=> (! (and %lbl%+354218 true) :lblpos +354218) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b4@2 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__1) (int_2_U 0)))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon40_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon40_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon39_Then_correct  (=> (! (and %lbl%+354219 true) :lblpos +354219) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon27_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon37_Then_correct  (=> (! (and %lbl%+354208 true) :lblpos +354208) (=> (>= 0 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i3@2) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block12_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_dummy_correct  (=> (! (and %lbl%+354255 true) :lblpos +354255) true)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_correct  (=> (! (and %lbl%+354249 true) :lblpos +354249) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$i6@1 (+ 0 1)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_dummy_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_correct  (=> (! (and %lbl%+354251 true) :lblpos +354251) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Then_correct  (=> (! (and %lbl%+354250 true) :lblpos +354250) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block13_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon30_correct  (=> (! (and %lbl%+354248 true) :lblpos +354248) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Else_correct  (=> (! (and %lbl%+354247 true) :lblpos +354247) (=> (not (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon30_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon27_correct  (=> (! (and %lbl%+354246 true) :lblpos +354246) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b4@1 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__1) (int_2_U 0)))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon40_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then_correct  (=> (! (and %lbl%+354245 true) :lblpos +354245) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon27_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then_correct  (=> (! (and %lbl%+354252 true) :lblpos +354252) (=> (>= 0 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_correct))))
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+361445 true) :lblpos +361445) (! (or %lbl%@367186  (and (and (and AA_TEMP133@2 AA_TEMP132@2) AA_TEMP131@2) AA_TEMP130@2)) :lblneg @367186))))
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+354258 true) :lblpos +354258) (=> (and (and (and (and (and (=> AA_TEMP130@1 (or AA_TEMP130@0 (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2))) (=> (or AA_TEMP130@0 (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2)) AA_TEMP130@1)) (and (=> AA_TEMP131@1 (or AA_TEMP131@0 (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1))) (=> (or AA_TEMP131@0 (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1)) AA_TEMP131@1))) (and (=> AA_TEMP132@1 (or AA_TEMP132@0 (= fixed.$objIndex@20 fixed.$objIndex@20))) (=> (or AA_TEMP132@0 (= fixed.$objIndex@20 fixed.$objIndex@20)) AA_TEMP132@1))) (and (=> AA_TEMP133@1 (or AA_TEMP133@0 (forall ((r T@U) (f T@U) ) (! (let ((_ty (FieldTypeInv0 (type f))))
 (=> (and (= (type r) refType) (= (type f) (FieldType _ty))) (or (= (MapType0Select fixed.$heap@22 r f) (MapType0Select fixed.$heap@11 r f)) (not (U_2_bool (MapType0Select fixed.$heap r fixed.$alloc))))))
 :qid |RSPROCPW.11549:20|
 :skolemid |1857|
 :no-pattern (type r)
 :no-pattern (type f)
 :no-pattern (U_2_int r)
 :no-pattern (U_2_bool r)
 :no-pattern (U_2_int f)
 :no-pattern (U_2_bool f)
)))) (=> (or AA_TEMP133@0 (forall ((r@@0 T@U) (f@@0 T@U) ) (! (let ((_ty@@0 (FieldTypeInv0 (type f@@0))))
 (=> (and (= (type r@@0) refType) (= (type f@@0) (FieldType _ty@@0))) (or (= (MapType0Select fixed.$heap@22 r@@0 f@@0) (MapType0Select fixed.$heap@11 r@@0 f@@0)) (not (U_2_bool (MapType0Select fixed.$heap r@@0 fixed.$alloc))))))
 :qid |RSPROCPW.11549:20|
 :skolemid |1857|
 :no-pattern (type r@@0)
 :no-pattern (type f@@0)
 :no-pattern (U_2_int r@@0)
 :no-pattern (U_2_bool r@@0)
 :no-pattern (U_2_int f@@0)
 :no-pattern (U_2_bool f@@0)
))) AA_TEMP133@1))) (and (and (and (=> AA_TEMP130@2 AA_TEMP130@1) (=> AA_TEMP130@1 AA_TEMP130@2)) (and (=> AA_TEMP131@2 AA_TEMP131@1) (=> AA_TEMP131@1 AA_TEMP131@2))) (and (and (=> AA_TEMP132@2 AA_TEMP132@1) (=> AA_TEMP132@1 AA_TEMP132@2)) (and (=> AA_TEMP133@2 AA_TEMP133@1) (=> AA_TEMP133@1 AA_TEMP133@2))))) GeneratedUnifiedExit_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+354257 true) :lblpos +354257) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else_correct  (=> (! (and %lbl%+354244 true) :lblpos +354244) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0))) (= fixed.$heap@21 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@4 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@4 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (and (= call3formal@$obj@0@@4 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@4 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@4 fixed.$alloc))) (= fixed.$objIndex@19 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@22 fixed.$heap@21) (= fixed.$objIndex@20 fixed.$objIndex@19)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@4)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon24_correct  (=> (! (and %lbl%+354243 true) :lblpos +354243) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then_correct  (=> (! (and %lbl%+354242 true) :lblpos +354242) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon24_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else_correct  (=> (! (and %lbl%+354241 true) :lblpos +354241) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0))) (= fixed.$heap@20 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@3 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@3 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (and (= call3formal@$obj@0@@3 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@3 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@3 fixed.$alloc))) (= fixed.$objIndex@18 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@22 fixed.$heap@20) (= fixed.$objIndex@20 fixed.$objIndex@18)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@3)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon21_correct  (=> (! (and %lbl%+354240 true) :lblpos +354240) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else_correct  (=> (! (and %lbl%+354239 true) :lblpos +354239) (=> (> inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1 0) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon21_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon18_correct  (=> (! (and %lbl%+354238 true) :lblpos +354238) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then_correct  (=> (! (and %lbl%+354237 true) :lblpos +354237) (=> (not (= $in_parameter__1 fixed.$null)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon18_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else_correct  (=> (! (and %lbl%+354236 true) :lblpos +354236) (=> (and (= $in_parameter__1 fixed.$null) (= fixed.$heap@19 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@2 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@2 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0@@2 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@2 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@2 fixed.$alloc))) (= fixed.$objIndex@17 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@22 fixed.$heap@19) (= fixed.$objIndex@20 fixed.$objIndex@17)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@2)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon15_correct  (=> (! (and %lbl%+354235 true) :lblpos +354235) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else_correct  (=> (! (and %lbl%+354234 true) :lblpos +354234) (=> (> inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1 0) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon15_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else_correct  (=> (! (and %lbl%+354231 true) :lblpos +354231) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@18 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@1 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@1 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0@@1 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@1 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@1 fixed.$alloc))) (= fixed.$objIndex@16 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@22 fixed.$heap@18) (= fixed.$objIndex@20 fixed.$objIndex@16)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@1)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block14_correct  (=> (! (and %lbl%+354197 true) :lblpos +354197) (=> (and (and (= fixed.$heap@22 fixed.$heap) (= fixed.$objIndex@20 fixed.$objIndex)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 fixed.$null))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11_correct  (=> (! (and %lbl%+354254 true) :lblpos +354254) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1 1) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block14_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then_correct  (=> (! (and %lbl%+354253 true) :lblpos +354253) (=> (>= 0 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon12_correct  (=> (! (and %lbl%+354233 true) :lblpos +354233) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then_correct  (=> (! (and %lbl%+354232 true) :lblpos +354232) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon12_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10_last_correct  (=> (! (and %lbl%+354256 true) :lblpos +354256) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10$1_correct  (=> (! (and %lbl%+354230 true) :lblpos +354230) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10_last_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Return_correct  (=> (! (and %lbl%+354229 true) :lblpos +354229) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10$1_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon39_Else_correct  (=> (! (and %lbl%+354221 true) :lblpos +354221) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0))) (= fixed.$heap@17 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@8 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@8 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@8 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@8 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@8 fixed.$alloc))) (= fixed.$objIndex@15 (+ fixed.$objIndex 1)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon24_correct  (=> (! (and %lbl%+354220 true) :lblpos +354220) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$b5@2 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon39_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon39_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon38_Then_correct  (=> (! (and %lbl%+354222 true) :lblpos +354222) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon24_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon38_Else_correct  (=> (! (and %lbl%+354224 true) :lblpos +354224) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0))) (= fixed.$heap@16 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@7 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@7 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@7 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@7 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@7 fixed.$alloc))) (= fixed.$objIndex@14 (+ fixed.$objIndex 1)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon21_correct  (=> (! (and %lbl%+354223 true) :lblpos +354223) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon38_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon38_Else_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon37_Else_correct  (=> (! (and %lbl%+354225 true) :lblpos +354225) (=> (> inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i3@2 0) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon21_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon18_correct  (=> (! (and %lbl%+354209 true) :lblpos +354209) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i3@2 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon37_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon37_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon36_Then_correct  (=> (! (and %lbl%+354210 true) :lblpos +354210) (=> (not (= $in_parameter__1 fixed.$null)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon18_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon36_Else_correct  (=> (! (and %lbl%+354212 true) :lblpos +354212) (=> (and (= $in_parameter__1 fixed.$null) (= fixed.$heap@15 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@6 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@6 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (= call3formal@$obj@0@@6 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@6 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@6 fixed.$alloc))) (= fixed.$objIndex@13 (+ fixed.$objIndex 1)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon15_correct  (=> (! (and %lbl%+354211 true) :lblpos +354211) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon36_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon36_Else_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon35_Else_correct  (=> (! (and %lbl%+354213 true) :lblpos +354213) (=> (> inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i2@2 0) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon15_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon35_Then_correct  (=> (! (and %lbl%+354215 true) :lblpos +354215) (=> (>= 0 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i2@2) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Return_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon12_correct  (=> (! (and %lbl%+354214 true) :lblpos +354214) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$out_$i2@2 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon35_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon35_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon34_Then_correct  (=> (! (and %lbl%+354216 true) :lblpos +354216) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon12_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon34_Else_correct  (=> (! (and %lbl%+354204 true) :lblpos +354204) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@14 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@5 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@5 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (= call3formal@$obj@0@@5 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@5 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@5 fixed.$alloc))) (= fixed.$objIndex@12 (+ fixed.$objIndex 1)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block10_correct  (=> (! (and %lbl%+354203 true) :lblpos +354203) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon34_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$anon34_Else_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$entry_correct  (=> (! (and %lbl%+354202 true) :lblpos +354202) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$block10_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Entry_correct  (=> (! (and %lbl%+354201 true) :lblpos +354201) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$entry_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10_correct  (=> (! (and %lbl%+354200 true) :lblpos +354200) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block10$0$Entry_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block9_correct  (=> (! (and %lbl%+354199 true) :lblpos +354199) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10_correct)))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then_correct  (=> (! (and %lbl%+354198 true) :lblpos +354198) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block9_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon9_correct  (=> (! (and %lbl%+354196 true) :lblpos +354196) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1 0) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block14_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else_correct  (=> (! (and %lbl%+354195 true) :lblpos +354195) (=> (not (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon9_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon6_correct  (=> (! (and %lbl%+354194 true) :lblpos +354194) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then_correct  (=> (! (and %lbl%+354193 true) :lblpos +354193) (=> (not (= $in_parameter__1 fixed.$null)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon6_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else_correct  (=> (! (and %lbl%+354192 true) :lblpos +354192) (=> (and (= $in_parameter__1 fixed.$null) (= fixed.$heap@13 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@0 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0@@0 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@0 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@0 fixed.$alloc))) (= fixed.$objIndex@11 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@22 fixed.$heap@13) (= fixed.$objIndex@20 fixed.$objIndex@11)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@0)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon3_correct  (=> (! (and %lbl%+354191 true) :lblpos +354191) (=> (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then_correct  (=> (! (and %lbl%+354190 true) :lblpos +354190) (=> (not (= $in_parameter__0 fixed.$null)) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon3_correct))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else_correct  (=> (! (and %lbl%+354189 true) :lblpos +354189) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@12 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0 fixed.$alloc (bool_2_U true)) call3formal@$obj@0 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (and (= call3formal@$obj@0 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0 fixed.$alloc))) (= fixed.$objIndex@10 (+ fixed.$objIndex 1)))) (and (and (= fixed.$heap@22 fixed.$heap@12) (= fixed.$objIndex@20 fixed.$objIndex@10)) (and (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0) (= inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0)))) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+354188 true) :lblpos +354188) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCPW.11089:20|
 :skolemid |1854|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCPW.11090:20|
 :skolemid |1855|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCPW.11091:20|
 :skolemid |1856|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then_correct inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else_correct))))))
(let ((inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+354187 true) :lblpos +354187) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+354186 true) :lblpos +354186) inline$fixed.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Entry_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct  (=> (! (and %lbl%+354185 true) :lblpos +354185) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else_correct  (=> (! (and %lbl%+354172 true) :lblpos +354172) (=> (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0))) (=> (and (and (and (= fixed.$heap@9 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@14 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@14 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException)) (= call3formal@$obj@0@@14 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@14 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@14 fixed.$alloc))))) (and (and (= fixed.$objIndex@9 (+ fixed.$objIndex 1)) (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0)) (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@14) (= fixed.$heap@11 fixed.$heap@9)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon24_correct  (=> (! (and %lbl%+354171 true) :lblpos +354171) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$b5@1 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon39_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then_correct  (=> (! (and %lbl%+354170 true) :lblpos +354170) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon24_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else_correct  (=> (! (and %lbl%+354169 true) :lblpos +354169) (=> (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0))) (=> (and (and (and (= fixed.$heap@8 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@13 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@13 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException)) (= call3formal@$obj@0@@13 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@13 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@13 fixed.$alloc))))) (and (and (= fixed.$objIndex@8 (+ fixed.$objIndex 1)) (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0)) (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@13) (= fixed.$heap@11 fixed.$heap@8)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon21_correct  (=> (! (and %lbl%+354168 true) :lblpos +354168) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon38_Else_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else_correct  (=> (! (and %lbl%+354167 true) :lblpos +354167) (=> (> inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1 0) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon21_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon18_correct  (=> (! (and %lbl%+354166 true) :lblpos +354166) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i3@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon37_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then_correct  (=> (! (and %lbl%+354165 true) :lblpos +354165) (=> (not (= $in_parameter__1 fixed.$null)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon18_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else_correct  (=> (! (and %lbl%+354164 true) :lblpos +354164) (=> (= $in_parameter__1 fixed.$null) (=> (and (and (and (= fixed.$heap@7 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@12 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@12 fixed.$type fixed.java.lang.NullPointerException)) (= call3formal@$obj@0@@12 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@12 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@12 fixed.$alloc))))) (and (and (= fixed.$objIndex@7 (+ fixed.$objIndex 1)) (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0)) (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@12) (= fixed.$heap@11 fixed.$heap@7)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon15_correct  (=> (! (and %lbl%+354163 true) :lblpos +354163) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon36_Else_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else_correct  (=> (! (and %lbl%+354162 true) :lblpos +354162) (=> (> inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1 0) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon15_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else_correct  (=> (! (and %lbl%+354159 true) :lblpos +354159) (=> (= $in_parameter__0 fixed.$null) (=> (and (and (and (= fixed.$heap@6 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@11 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@11 fixed.$type fixed.java.lang.NullPointerException)) (= call3formal@$obj@0@@11 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@11 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@11 fixed.$alloc))))) (and (and (= fixed.$objIndex@6 (+ fixed.$objIndex 1)) (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0)) (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@11) (= fixed.$heap@11 fixed.$heap@6)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block15_correct  (=> (! (and %lbl%+354125 true) :lblpos +354125) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1) (=> (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 fixed.$null) (= fixed.$heap@11 fixed.$heap@10)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_correct  (=> (! (and %lbl%+354182 true) :lblpos +354182) (=> (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1 1) (= fixed.$heap@10 fixed.$heap)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block15_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then_correct  (=> (! (and %lbl%+354181 true) :lblpos +354181) (=> (>= 0 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block12_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon12_correct  (=> (! (and %lbl%+354161 true) :lblpos +354161) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i2@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon35_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then_correct  (=> (! (and %lbl%+354160 true) :lblpos +354160) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon12_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11_last_correct  (=> (! (and %lbl%+354184 true) :lblpos +354184) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon34_Else_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11$1_correct  (=> (! (and %lbl%+354158 true) :lblpos +354158) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11_last_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Return_correct  (=> (! (and %lbl%+354157 true) :lblpos +354157) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11$1_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon39_Else_correct  (=> (! (and %lbl%+354149 true) :lblpos +354149) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (>= 0 0))) (= fixed.$heap@5 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@18 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@18 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@18 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@18 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@18 fixed.$alloc))) (= fixed.$objIndex@5 (+ fixed.$objIndex 1)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon24_correct  (=> (! (and %lbl%+354148 true) :lblpos +354148) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$b5@2 (U_2_int (MapType1Select (MapType1Select fixed.$intArrHeap $in_parameter__0) (int_2_U 0)))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon39_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon39_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon38_Then_correct  (=> (! (and %lbl%+354150 true) :lblpos +354150) (=> (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon24_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon38_Else_correct  (=> (! (and %lbl%+354152 true) :lblpos +354152) (=> (and (not (and (< 0 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (>= 0 0))) (= fixed.$heap@4 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@17 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@17 fixed.$type fixed.java.lang.ArrayIndexOutOfBoundsException))) (=> (and (and (= call3formal@$obj@0@@17 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@17 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@17 fixed.$alloc))) (= fixed.$objIndex@4 (+ fixed.$objIndex 1)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon21_correct  (=> (! (and %lbl%+354151 true) :lblpos +354151) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon38_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon38_Else_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon37_Else_correct  (=> (! (and %lbl%+354153 true) :lblpos +354153) (=> (> inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i3@2 0) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon21_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon18_correct  (=> (! (and %lbl%+354137 true) :lblpos +354137) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i3@2 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon37_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon37_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon36_Then_correct  (=> (! (and %lbl%+354138 true) :lblpos +354138) (=> (not (= $in_parameter__1 fixed.$null)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon18_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon36_Else_correct  (=> (! (and %lbl%+354140 true) :lblpos +354140) (=> (and (= $in_parameter__1 fixed.$null) (= fixed.$heap@3 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@16 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@16 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (= call3formal@$obj@0@@16 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@16 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@16 fixed.$alloc))) (= fixed.$objIndex@3 (+ fixed.$objIndex 1)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon15_correct  (=> (! (and %lbl%+354139 true) :lblpos +354139) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon36_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon36_Else_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon35_Else_correct  (=> (! (and %lbl%+354141 true) :lblpos +354141) (=> (> inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i2@2 0) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon15_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon35_Then_correct  (=> (! (and %lbl%+354143 true) :lblpos +354143) (=> (>= 0 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i2@2) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Return_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon12_correct  (=> (! (and %lbl%+354142 true) :lblpos +354142) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$out_$i2@2 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon35_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon35_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon34_Then_correct  (=> (! (and %lbl%+354144 true) :lblpos +354144) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon12_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon34_Else_correct  (=> (! (and %lbl%+354132 true) :lblpos +354132) (=> (and (= $in_parameter__0 fixed.$null) (= fixed.$heap@2 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@15 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@15 fixed.$type fixed.java.lang.NullPointerException))) (=> (and (and (= call3formal@$obj@0@@15 (fixed.$intToRef fixed.$objIndex)) (not (= call3formal@$obj@0@@15 fixed.$null))) (and (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@15 fixed.$alloc))) (= fixed.$objIndex@2 (+ fixed.$objIndex 1)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block11_correct  (=> (! (and %lbl%+354131 true) :lblpos +354131) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon34_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$anon34_Else_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$entry_correct  (=> (! (and %lbl%+354130 true) :lblpos +354130) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$block11_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Entry_correct  (=> (! (and %lbl%+354129 true) :lblpos +354129) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$entry_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11_correct  (=> (! (and %lbl%+354128 true) :lblpos +354128) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$inline$PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$_loop_block11$0$Entry_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10_correct  (=> (! (and %lbl%+354127 true) :lblpos +354127) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block11_correct)))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then_correct  (=> (! (and %lbl%+354126 true) :lblpos +354126) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block10_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon9_correct  (=> (! (and %lbl%+354124 true) :lblpos +354124) (=> (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@1 0) (= fixed.$heap@10 fixed.$heap)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$block15_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else_correct  (=> (! (and %lbl%+354123 true) :lblpos +354123) (=> (not (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon9_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon6_correct  (=> (! (and %lbl%+354122 true) :lblpos +354122) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i0@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__1))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon33_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then_correct  (=> (! (and %lbl%+354121 true) :lblpos +354121) (=> (not (= $in_parameter__1 fixed.$null)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon6_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else_correct  (=> (! (and %lbl%+354120 true) :lblpos +354120) (=> (= $in_parameter__1 fixed.$null) (=> (and (and (and (= fixed.$heap@1 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@10 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@10 fixed.$type fixed.java.lang.NullPointerException)) (= call3formal@$obj@0@@10 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@10 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@10 fixed.$alloc))))) (and (and (= fixed.$objIndex@1 (+ fixed.$objIndex 1)) (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0)) (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@10) (= fixed.$heap@11 fixed.$heap@1)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon3_correct  (=> (! (and %lbl%+354119 true) :lblpos +354119) (=> (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$i1@1 (U_2_int (MapType1Select fixed.$arrSizeHeap $in_parameter__0))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon32_Else_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then_correct  (=> (! (and %lbl%+354118 true) :lblpos +354118) (=> (not (= $in_parameter__0 fixed.$null)) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon3_correct))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else_correct  (=> (! (and %lbl%+354117 true) :lblpos +354117) (=> (= $in_parameter__0 fixed.$null) (=> (and (and (and (= fixed.$heap@0 (MapType0Store (MapType0Store fixed.$heap call3formal@$obj@0@@9 fixed.$alloc (bool_2_U true)) call3formal@$obj@0@@9 fixed.$type fixed.java.lang.NullPointerException)) (= call3formal@$obj@0@@9 (fixed.$intToRef fixed.$objIndex))) (and (not (= call3formal@$obj@0@@9 fixed.$null)) (not (U_2_bool (MapType0Select fixed.$heap call3formal@$obj@0@@9 fixed.$alloc))))) (and (and (= fixed.$objIndex@0 (+ fixed.$objIndex 1)) (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$return@2 0)) (and (= inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$$exception@1 call3formal@$obj@0@@9) (= fixed.$heap@11 fixed.$heap@0)))) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Return_correct)))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon0_correct  (=> (! (and %lbl%+354116 true) :lblpos +354116) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCPW.10622:20|
 :skolemid |1851|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCPW.10623:20|
 :skolemid |1852|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCPW.10624:20|
 :skolemid |1853|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Then_correct inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon31_Else_correct))))))
(let ((inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Entry_correct  (=> (! (and %lbl%+354115 true) :lblpos +354115) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+354114 true) :lblpos +354114) inline$unsafe.PWCheck$pwcheck2_unsafe$byte$lp$$rp$_byte$lp$$rp$$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+361443 true) :lblpos +361443) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+361458 true) :lblpos +361458) q@0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
