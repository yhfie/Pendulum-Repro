(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-option :TIMEOUT 20000000)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun javaTypeType () T@T)
(declare-fun fixed.java.lang.Object () T@U)
(declare-fun fixed.org.openmrs.util.Security () T@U)
(declare-fun oneStep (T@U T@U) T@U)
(declare-fun fixed.java.io.Serializable () T@U)
(declare-fun fixed.java.lang.Comparable () T@U)
(declare-fun fixed.java.lang.CharSequence () T@U)
(declare-fun fixed.org.openmrs.api.APIException () T@U)
(declare-fun fixed.java.lang.Throwable () T@U)
(declare-fun fixed.java.lang.Exception () T@U)
(declare-fun fixed.java.lang.RuntimeException () T@U)
(declare-fun fixed.java.lang.ClassCastException () T@U)
(declare-fun refType () T@T)
(declare-fun fixed.$StringConst0 () T@U)
(declare-fun fixed.sg.edu.nus.comp.tsunami.safe.Safe () T@U)
(declare-fun fixed.java.lang.Appendable () T@U)
(declare-fun fixed.java.lang.AbstractStringBuilder () T@U)
(declare-fun fixed.$StringConst1 () T@U)
(declare-fun fixed.$StringConst2 () T@U)
(declare-fun fixed.java.security.MessageDigestSpi () T@U)
(declare-fun fixed.java.security.MessageDigest () T@U)
(declare-fun fixed.java.security.GeneralSecurityException () T@U)
(declare-fun fixed.java.security.NoSuchAlgorithmException () T@U)
(declare-fun fixed.org.slf4j.Logger () T@U)
(declare-fun fixed.$StringConst3 () T@U)
(declare-fun fixed.$StringConst4 () T@U)
(declare-fun fixed.java.lang.IndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.ArrayIndexOutOfBoundsException () T@U)
(declare-fun fixed.java.lang.NullPointerException () T@U)
(declare-fun fixed.$StringConst5 () T@U)
(declare-fun fixed.java.lang.Number () T@U)
(declare-fun fixed.java.lang.Integer () T@U)
(declare-fun fixed.java.util.Random () T@U)
(declare-fun fixed.java.lang.System () T@U)
(declare-fun fixed.java.lang.Long () T@U)
(declare-fun fixed.java.security.spec.AlgorithmParameterSpec () T@U)
(declare-fun fixed.javax.crypto.spec.IvParameterSpec () T@U)
(declare-fun fixed.java.security.spec.KeySpec () T@U)
(declare-fun fixed.java.security.Key () T@U)
(declare-fun fixed.javax.security.auth.Destroyable () T@U)
(declare-fun fixed.javax.crypto.SecretKey () T@U)
(declare-fun fixed.javax.crypto.spec.SecretKeySpec () T@U)
(declare-fun fixed.$StringConst6 () T@U)
(declare-fun fixed.$StringConst7 () T@U)
(declare-fun fixed.javax.crypto.Cipher () T@U)
(declare-fun fixed.javax.crypto.NoSuchPaddingException () T@U)
(declare-fun fixed.java.security.InvalidAlgorithmParameterException () T@U)
(declare-fun fixed.javax.crypto.BadPaddingException () T@U)
(declare-fun fixed.java.util.Base64 () T@U)
(declare-fun fixed.java.util.Base64$Encoder () T@U)
(declare-fun fixed.$StringConst8 () T@U)
(declare-fun fixed.java.util.Base64$Decoder () T@U)
(declare-fun fixed.$StringConst9 () T@U)
(declare-fun fixed.org.openmrs.api.context.Context () T@U)
(declare-fun fixed.java.util.Dictionary () T@U)
(declare-fun fixed.java.util.Map () T@U)
(declare-fun fixed.java.lang.Cloneable () T@U)
(declare-fun fixed.java.util.Hashtable () T@U)
(declare-fun fixed.java.util.Properties () T@U)
(declare-fun fixed.$StringConst10 () T@U)
(declare-fun fixed.$StringConst11 () T@U)
(declare-fun fixed.org.springframework.util.StringUtils () T@U)
(declare-fun fixed.$StringConst12 () T@U)
(declare-fun fixed.java.security.SecureRandom () T@U)
(declare-fun fixed.$StringConst13 () T@U)
(declare-fun fixed.$StringConst14 () T@U)
(declare-fun fixed.$StringConst15 () T@U)
(declare-fun fixed.javax.crypto.KeyGenerator () T@U)
(declare-fun fixed.$StringConst16 () T@U)
(declare-fun fixed.CC$org$_$openmrs$_$util$_$Security () T@U)
(declare-fun fixed.org.slf4j.LoggerFactory () T@U)
(declare-fun fixed.java.lang.reflect.AnnotatedElement () T@U)
(declare-fun fixed.java.lang.reflect.GenericDeclaration () T@U)
(declare-fun fixed.java.lang.reflect.Type () T@U)
(declare-fun fixed.java.lang.Class () T@U)
(declare-fun fixed.java.nio.charset.Charset () T@U)
(declare-fun fixed.java.lang.StringBuilder () T@U)
(declare-fun fixed.java.lang.String () T@U)
(declare-fun fixed.java.lang.Character () T@U)
(declare-fun fixed.java.util.Arrays () T@U)
(declare-fun fixed.java.lang.Boolean () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun fixed.$type () T@U)
(declare-fun fixed.$alloc () T@U)
(declare-fun fixed.$null () T@U)
(declare-fun fixed.$intToBool (Int) Bool)
(declare-fun fixed.$refToBool (T@U) Bool)
(declare-fun fixed.$boolToInt (Bool) Int)
(declare-fun fixed.$cmpReal (Real Real) Int)
(declare-fun fixed.$cmpInt (Int Int) Int)
(declare-fun fixed.$intToRef (Int) T@U)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun fixed.$heap () T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun fixed.$arrSizeHeap () T@U)
(declare-fun fixed.$stringSizeHeap () T@U)
(declare-fun $this () T@U)
(declare-fun %lbl%+4033338 () Bool)
(declare-fun AA_TEMP430@1 () Bool)
(declare-fun AA_TEMP430@0 () Bool)
(declare-fun %lbl%@4067604 () Bool)
(declare-fun %lbl%+4033337 () Bool)
(declare-fun %lbl%+4033336 () Bool)
(declare-fun %lbl%+4033335 () Bool)
(declare-fun %lbl%+4033334 () Bool)
(declare-fun %lbl%+4033333 () Bool)
(declare-fun %lbl%+4033332 () Bool)
(declare-fun %lbl%+4033331 () Bool)
(declare-fun %lbl%+4033330 () Bool)
(declare-fun %lbl%+4033329 () Bool)
(declare-fun %lbl%+4033328 () Bool)
(declare-fun %lbl%+4033327 () Bool)
(declare-fun %lbl%+4033326 () Bool)
(declare-fun %lbl%+4033325 () Bool)
(declare-fun %lbl%+4033324 () Bool)
(declare-fun %lbl%+4033323 () Bool)
(declare-fun %lbl%+4033322 () Bool)
(declare-fun %lbl%+4033321 () Bool)
(declare-fun %lbl%+4033320 () Bool)
(declare-fun %lbl%+4067345 () Bool)
(declare-fun %lbl%+4067349 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@2)
 :no-pattern (U_2_bool x@@2)
)))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z))
)))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4))
)))
(assert  (and (= (Ctor javaTypeType) 3) (= (type fixed.java.lang.Object) javaTypeType)))
(assert (forall ((w T@U) ) (!  (=> (and (= (type w) javaTypeType) (UOrdering2 fixed.java.lang.Object w)) (= fixed.java.lang.Object w))
 :pattern ( (UOrdering2 fixed.java.lang.Object w))
)))
(assert (= (type fixed.org.openmrs.util.Security) javaTypeType))
(assert (not (= fixed.org.openmrs.util.Security fixed.java.lang.Object)))
(assert (UOrdering2 fixed.org.openmrs.util.Security fixed.java.lang.Object))
(assert (forall ((w@@0 T@U) ) (!  (=> (= (type w@@0) javaTypeType) (=> (and (UOrdering2 fixed.org.openmrs.util.Security w@@0) (UOrdering2 w@@0 fixed.java.lang.Object)) (or (= fixed.org.openmrs.util.Security w@@0) (= fixed.java.lang.Object w@@0))))
 :pattern ( (UOrdering2 fixed.org.openmrs.util.Security w@@0) (UOrdering2 w@@0 fixed.java.lang.Object))
)))
(assert (forall ((w@@1 T@U) ) (!  (=> (and (= (type w@@1) javaTypeType) (UOrdering2 fixed.org.openmrs.util.Security w@@1)) (or (= fixed.org.openmrs.util.Security w@@1) (UOrdering2 fixed.java.lang.Object w@@1)))
 :pattern ( (UOrdering2 fixed.org.openmrs.util.Security w@@1))
)))
(assert (forall ((arg0@@5 T@U) (arg1 T@U) ) (! (= (type (oneStep arg0@@5 arg1)) javaTypeType)
 :qid |funType:oneStep|
 :pattern ( (oneStep arg0@@5 arg1))
)))
(assert (forall ((w@@2 T@U) ) (!  (=> (and (= (type w@@2) javaTypeType) (UOrdering2 w@@2 fixed.org.openmrs.util.Security)) (= (oneStep fixed.java.lang.Object w@@2) fixed.org.openmrs.util.Security))
 :pattern ( (UOrdering2 w@@2 fixed.org.openmrs.util.Security))
)))
(assert (= (type fixed.java.io.Serializable) javaTypeType))
(assert (forall ((w@@3 T@U) ) (!  (=> (and (= (type w@@3) javaTypeType) (UOrdering2 fixed.java.io.Serializable w@@3)) (= fixed.java.io.Serializable w@@3))
 :pattern ( (UOrdering2 fixed.java.io.Serializable w@@3))
)))
(assert (= (type fixed.java.lang.Comparable) javaTypeType))
(assert (forall ((w@@4 T@U) ) (!  (=> (and (= (type w@@4) javaTypeType) (UOrdering2 fixed.java.lang.Comparable w@@4)) (= fixed.java.lang.Comparable w@@4))
 :pattern ( (UOrdering2 fixed.java.lang.Comparable w@@4))
)))
(assert (= (type fixed.java.lang.CharSequence) javaTypeType))
(assert (forall ((w@@5 T@U) ) (!  (=> (and (= (type w@@5) javaTypeType) (UOrdering2 fixed.java.lang.CharSequence w@@5)) (= fixed.java.lang.CharSequence w@@5))
 :pattern ( (UOrdering2 fixed.java.lang.CharSequence w@@5))
)))
(assert (= (type fixed.org.openmrs.api.APIException) javaTypeType))
(assert (forall ((w@@6 T@U) ) (!  (=> (and (= (type w@@6) javaTypeType) (UOrdering2 fixed.org.openmrs.api.APIException w@@6)) (= fixed.org.openmrs.api.APIException w@@6))
 :pattern ( (UOrdering2 fixed.org.openmrs.api.APIException w@@6))
)))
(assert (= (type fixed.java.lang.Throwable) javaTypeType))
(assert (not (= fixed.java.lang.Throwable fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Throwable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Throwable fixed.java.io.Serializable))
(assert (forall ((w@@7 T@U) ) (!  (=> (= (type w@@7) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object)) (or (= fixed.java.lang.Throwable w@@7) (= fixed.java.lang.Object w@@7))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@7) (UOrdering2 w@@7 fixed.java.lang.Object))
)))
(assert (forall ((w@@8 T@U) ) (!  (=> (= (type w@@8) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable)) (or (= fixed.java.lang.Throwable w@@8) (= fixed.java.io.Serializable w@@8))))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@8) (UOrdering2 w@@8 fixed.java.io.Serializable))
)))
(assert (forall ((w@@9 T@U) ) (!  (=> (and (= (type w@@9) javaTypeType) (UOrdering2 fixed.java.lang.Throwable w@@9)) (or (or (= fixed.java.lang.Throwable w@@9) (UOrdering2 fixed.java.lang.Object w@@9)) (UOrdering2 fixed.java.io.Serializable w@@9)))
 :pattern ( (UOrdering2 fixed.java.lang.Throwable w@@9))
)))
(assert (forall ((w@@10 T@U) ) (!  (=> (and (= (type w@@10) javaTypeType) (UOrdering2 w@@10 fixed.java.lang.Throwable)) (= (oneStep fixed.java.lang.Object w@@10) fixed.java.lang.Throwable))
 :pattern ( (UOrdering2 w@@10 fixed.java.lang.Throwable))
)))
(assert (= (type fixed.java.lang.Exception) javaTypeType))
(assert (not (= fixed.java.lang.Exception fixed.java.lang.Throwable)))
(assert (UOrdering2 fixed.java.lang.Exception fixed.java.lang.Throwable))
(assert (forall ((w@@11 T@U) ) (!  (=> (= (type w@@11) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Exception w@@11) (= fixed.java.lang.Throwable w@@11))))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@11) (UOrdering2 w@@11 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@12 T@U) ) (!  (=> (and (= (type w@@12) javaTypeType) (UOrdering2 fixed.java.lang.Exception w@@12)) (or (= fixed.java.lang.Exception w@@12) (UOrdering2 fixed.java.lang.Throwable w@@12)))
 :pattern ( (UOrdering2 fixed.java.lang.Exception w@@12))
)))
(assert (forall ((w@@13 T@U) ) (!  (=> (and (= (type w@@13) javaTypeType) (UOrdering2 w@@13 fixed.java.lang.Exception)) (= (oneStep fixed.java.lang.Throwable w@@13) fixed.java.lang.Exception))
 :pattern ( (UOrdering2 w@@13 fixed.java.lang.Exception))
)))
(assert (= (type fixed.java.lang.RuntimeException) javaTypeType))
(assert (not (= fixed.java.lang.RuntimeException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.lang.RuntimeException fixed.java.lang.Exception))
(assert (forall ((w@@14 T@U) ) (!  (=> (= (type w@@14) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception)) (or (= fixed.java.lang.RuntimeException w@@14) (= fixed.java.lang.Exception w@@14))))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@14) (UOrdering2 w@@14 fixed.java.lang.Exception))
)))
(assert (forall ((w@@15 T@U) ) (!  (=> (and (= (type w@@15) javaTypeType) (UOrdering2 fixed.java.lang.RuntimeException w@@15)) (or (= fixed.java.lang.RuntimeException w@@15) (UOrdering2 fixed.java.lang.Exception w@@15)))
 :pattern ( (UOrdering2 fixed.java.lang.RuntimeException w@@15))
)))
(assert (forall ((w@@16 T@U) ) (!  (=> (and (= (type w@@16) javaTypeType) (UOrdering2 w@@16 fixed.java.lang.RuntimeException)) (= (oneStep fixed.java.lang.Exception w@@16) fixed.java.lang.RuntimeException))
 :pattern ( (UOrdering2 w@@16 fixed.java.lang.RuntimeException))
)))
(assert (= (type fixed.java.lang.ClassCastException) javaTypeType))
(assert (not (= fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.ClassCastException fixed.java.lang.RuntimeException))
(assert (forall ((w@@17 T@U) ) (!  (=> (= (type w@@17) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ClassCastException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.ClassCastException w@@17) (= fixed.java.lang.RuntimeException w@@17))))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@17) (UOrdering2 w@@17 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@18 T@U) ) (!  (=> (and (= (type w@@18) javaTypeType) (UOrdering2 fixed.java.lang.ClassCastException w@@18)) (or (= fixed.java.lang.ClassCastException w@@18) (UOrdering2 fixed.java.lang.RuntimeException w@@18)))
 :pattern ( (UOrdering2 fixed.java.lang.ClassCastException w@@18))
)))
(assert (forall ((w@@19 T@U) ) (!  (=> (and (= (type w@@19) javaTypeType) (UOrdering2 w@@19 fixed.java.lang.ClassCastException)) (= (oneStep fixed.java.lang.RuntimeException w@@19) fixed.java.lang.ClassCastException))
 :pattern ( (UOrdering2 w@@19 fixed.java.lang.ClassCastException))
)))
(assert  (and (= (Ctor refType) 4) (= (type fixed.$StringConst0) refType)))
(assert (forall ((w@@20 T@U) ) (!  (=> (and (= (type w@@20) refType) (UOrdering2 fixed.$StringConst0 w@@20)) (= fixed.$StringConst0 w@@20))
 :pattern ( (UOrdering2 fixed.$StringConst0 w@@20))
)))
(assert (= (type fixed.sg.edu.nus.comp.tsunami.safe.Safe) javaTypeType))
(assert (not (= fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object)))
(assert (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Object))
(assert (forall ((w@@21 T@U) ) (!  (=> (= (type w@@21) javaTypeType) (=> (and (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@21) (UOrdering2 w@@21 fixed.java.lang.Object)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@21) (= fixed.java.lang.Object w@@21))))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@21) (UOrdering2 w@@21 fixed.java.lang.Object))
)))
(assert (forall ((w@@22 T@U) ) (!  (=> (and (= (type w@@22) javaTypeType) (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@22)) (or (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@22) (UOrdering2 fixed.java.lang.Object w@@22)))
 :pattern ( (UOrdering2 fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@22))
)))
(assert (forall ((w@@23 T@U) ) (!  (=> (and (= (type w@@23) javaTypeType) (UOrdering2 w@@23 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= (oneStep fixed.java.lang.Object w@@23) fixed.sg.edu.nus.comp.tsunami.safe.Safe))
 :pattern ( (UOrdering2 w@@23 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (= (type fixed.java.lang.Appendable) javaTypeType))
(assert (forall ((w@@24 T@U) ) (!  (=> (and (= (type w@@24) javaTypeType) (UOrdering2 fixed.java.lang.Appendable w@@24)) (= fixed.java.lang.Appendable w@@24))
 :pattern ( (UOrdering2 fixed.java.lang.Appendable w@@24))
)))
(assert (= (type fixed.java.lang.AbstractStringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Object))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.Appendable))
(assert (not (= fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence)))
(assert (UOrdering2 fixed.java.lang.AbstractStringBuilder fixed.java.lang.CharSequence))
(assert (forall ((w@@25 T@U) ) (!  (=> (= (type w@@25) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@25) (UOrdering2 w@@25 fixed.java.lang.Object)) (or (= fixed.java.lang.AbstractStringBuilder w@@25) (= fixed.java.lang.Object w@@25))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@25) (UOrdering2 w@@25 fixed.java.lang.Object))
)))
(assert (forall ((w@@26 T@U) ) (!  (=> (= (type w@@26) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@26) (UOrdering2 w@@26 fixed.java.lang.Appendable)) (or (= fixed.java.lang.AbstractStringBuilder w@@26) (= fixed.java.lang.Appendable w@@26))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@26) (UOrdering2 w@@26 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@27 T@U) ) (!  (=> (= (type w@@27) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@27) (UOrdering2 w@@27 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.AbstractStringBuilder w@@27) (= fixed.java.lang.CharSequence w@@27))))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@27) (UOrdering2 w@@27 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@28 T@U) ) (!  (=> (and (= (type w@@28) javaTypeType) (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@28)) (or (or (or (= fixed.java.lang.AbstractStringBuilder w@@28) (UOrdering2 fixed.java.lang.Object w@@28)) (UOrdering2 fixed.java.lang.Appendable w@@28)) (UOrdering2 fixed.java.lang.CharSequence w@@28)))
 :pattern ( (UOrdering2 fixed.java.lang.AbstractStringBuilder w@@28))
)))
(assert (forall ((w@@29 T@U) ) (!  (=> (and (= (type w@@29) javaTypeType) (UOrdering2 w@@29 fixed.java.lang.AbstractStringBuilder)) (= (oneStep fixed.java.lang.Object w@@29) fixed.java.lang.AbstractStringBuilder))
 :pattern ( (UOrdering2 w@@29 fixed.java.lang.AbstractStringBuilder))
)))
(assert (= (type fixed.$StringConst1) refType))
(assert (forall ((w@@30 T@U) ) (!  (=> (and (= (type w@@30) refType) (UOrdering2 fixed.$StringConst1 w@@30)) (= fixed.$StringConst1 w@@30))
 :pattern ( (UOrdering2 fixed.$StringConst1 w@@30))
)))
(assert (= (type fixed.$StringConst2) refType))
(assert (forall ((w@@31 T@U) ) (!  (=> (and (= (type w@@31) refType) (UOrdering2 fixed.$StringConst2 w@@31)) (= fixed.$StringConst2 w@@31))
 :pattern ( (UOrdering2 fixed.$StringConst2 w@@31))
)))
(assert (= (type fixed.java.security.MessageDigestSpi) javaTypeType))
(assert (not (= fixed.java.security.MessageDigestSpi fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.security.MessageDigestSpi fixed.java.lang.Object))
(assert (forall ((w@@32 T@U) ) (!  (=> (= (type w@@32) javaTypeType) (=> (and (UOrdering2 fixed.java.security.MessageDigestSpi w@@32) (UOrdering2 w@@32 fixed.java.lang.Object)) (or (= fixed.java.security.MessageDigestSpi w@@32) (= fixed.java.lang.Object w@@32))))
 :pattern ( (UOrdering2 fixed.java.security.MessageDigestSpi w@@32) (UOrdering2 w@@32 fixed.java.lang.Object))
)))
(assert (forall ((w@@33 T@U) ) (!  (=> (and (= (type w@@33) javaTypeType) (UOrdering2 fixed.java.security.MessageDigestSpi w@@33)) (or (= fixed.java.security.MessageDigestSpi w@@33) (UOrdering2 fixed.java.lang.Object w@@33)))
 :pattern ( (UOrdering2 fixed.java.security.MessageDigestSpi w@@33))
)))
(assert (forall ((w@@34 T@U) ) (!  (=> (and (= (type w@@34) javaTypeType) (UOrdering2 w@@34 fixed.java.security.MessageDigestSpi)) (= (oneStep fixed.java.lang.Object w@@34) fixed.java.security.MessageDigestSpi))
 :pattern ( (UOrdering2 w@@34 fixed.java.security.MessageDigestSpi))
)))
(assert (= (type fixed.java.security.MessageDigest) javaTypeType))
(assert (not (= fixed.java.security.MessageDigest fixed.java.security.MessageDigestSpi)))
(assert (UOrdering2 fixed.java.security.MessageDigest fixed.java.security.MessageDigestSpi))
(assert (forall ((w@@35 T@U) ) (!  (=> (= (type w@@35) javaTypeType) (=> (and (UOrdering2 fixed.java.security.MessageDigest w@@35) (UOrdering2 w@@35 fixed.java.security.MessageDigestSpi)) (or (= fixed.java.security.MessageDigest w@@35) (= fixed.java.security.MessageDigestSpi w@@35))))
 :pattern ( (UOrdering2 fixed.java.security.MessageDigest w@@35) (UOrdering2 w@@35 fixed.java.security.MessageDigestSpi))
)))
(assert (forall ((w@@36 T@U) ) (!  (=> (and (= (type w@@36) javaTypeType) (UOrdering2 fixed.java.security.MessageDigest w@@36)) (or (= fixed.java.security.MessageDigest w@@36) (UOrdering2 fixed.java.security.MessageDigestSpi w@@36)))
 :pattern ( (UOrdering2 fixed.java.security.MessageDigest w@@36))
)))
(assert (forall ((w@@37 T@U) ) (!  (=> (and (= (type w@@37) javaTypeType) (UOrdering2 w@@37 fixed.java.security.MessageDigest)) (= (oneStep fixed.java.security.MessageDigestSpi w@@37) fixed.java.security.MessageDigest))
 :pattern ( (UOrdering2 w@@37 fixed.java.security.MessageDigest))
)))
(assert (= (type fixed.java.security.GeneralSecurityException) javaTypeType))
(assert (not (= fixed.java.security.GeneralSecurityException fixed.java.lang.Exception)))
(assert (UOrdering2 fixed.java.security.GeneralSecurityException fixed.java.lang.Exception))
(assert (forall ((w@@38 T@U) ) (!  (=> (= (type w@@38) javaTypeType) (=> (and (UOrdering2 fixed.java.security.GeneralSecurityException w@@38) (UOrdering2 w@@38 fixed.java.lang.Exception)) (or (= fixed.java.security.GeneralSecurityException w@@38) (= fixed.java.lang.Exception w@@38))))
 :pattern ( (UOrdering2 fixed.java.security.GeneralSecurityException w@@38) (UOrdering2 w@@38 fixed.java.lang.Exception))
)))
(assert (forall ((w@@39 T@U) ) (!  (=> (and (= (type w@@39) javaTypeType) (UOrdering2 fixed.java.security.GeneralSecurityException w@@39)) (or (= fixed.java.security.GeneralSecurityException w@@39) (UOrdering2 fixed.java.lang.Exception w@@39)))
 :pattern ( (UOrdering2 fixed.java.security.GeneralSecurityException w@@39))
)))
(assert (forall ((w@@40 T@U) ) (!  (=> (and (= (type w@@40) javaTypeType) (UOrdering2 w@@40 fixed.java.security.GeneralSecurityException)) (= (oneStep fixed.java.lang.Exception w@@40) fixed.java.security.GeneralSecurityException))
 :pattern ( (UOrdering2 w@@40 fixed.java.security.GeneralSecurityException))
)))
(assert (= (type fixed.java.security.NoSuchAlgorithmException) javaTypeType))
(assert (not (= fixed.java.security.NoSuchAlgorithmException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.java.security.NoSuchAlgorithmException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@41 T@U) ) (!  (=> (= (type w@@41) javaTypeType) (=> (and (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@41) (UOrdering2 w@@41 fixed.java.security.GeneralSecurityException)) (or (= fixed.java.security.NoSuchAlgorithmException w@@41) (= fixed.java.security.GeneralSecurityException w@@41))))
 :pattern ( (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@41) (UOrdering2 w@@41 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@42 T@U) ) (!  (=> (and (= (type w@@42) javaTypeType) (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@42)) (or (= fixed.java.security.NoSuchAlgorithmException w@@42) (UOrdering2 fixed.java.security.GeneralSecurityException w@@42)))
 :pattern ( (UOrdering2 fixed.java.security.NoSuchAlgorithmException w@@42))
)))
(assert (forall ((w@@43 T@U) ) (!  (=> (and (= (type w@@43) javaTypeType) (UOrdering2 w@@43 fixed.java.security.NoSuchAlgorithmException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@43) fixed.java.security.NoSuchAlgorithmException))
 :pattern ( (UOrdering2 w@@43 fixed.java.security.NoSuchAlgorithmException))
)))
(assert (= (type fixed.org.slf4j.Logger) javaTypeType))
(assert (forall ((w@@44 T@U) ) (!  (=> (and (= (type w@@44) javaTypeType) (UOrdering2 fixed.org.slf4j.Logger w@@44)) (= fixed.org.slf4j.Logger w@@44))
 :pattern ( (UOrdering2 fixed.org.slf4j.Logger w@@44))
)))
(assert (= (type fixed.$StringConst3) refType))
(assert (forall ((w@@45 T@U) ) (!  (=> (and (= (type w@@45) refType) (UOrdering2 fixed.$StringConst3 w@@45)) (= fixed.$StringConst3 w@@45))
 :pattern ( (UOrdering2 fixed.$StringConst3 w@@45))
)))
(assert (= (type fixed.$StringConst4) refType))
(assert (forall ((w@@46 T@U) ) (!  (=> (and (= (type w@@46) refType) (UOrdering2 fixed.$StringConst4 w@@46)) (= fixed.$StringConst4 w@@46))
 :pattern ( (UOrdering2 fixed.$StringConst4 w@@46))
)))
(assert (= (type fixed.java.lang.IndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.RuntimeException))
(assert (forall ((w@@47 T@U) ) (!  (=> (= (type w@@47) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@47) (UOrdering2 w@@47 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@47) (= fixed.java.lang.RuntimeException w@@47))))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@47) (UOrdering2 w@@47 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@48 T@U) ) (!  (=> (and (= (type w@@48) javaTypeType) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@48)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@48) (UOrdering2 fixed.java.lang.RuntimeException w@@48)))
 :pattern ( (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@48))
)))
(assert (forall ((w@@49 T@U) ) (!  (=> (and (= (type w@@49) javaTypeType) (UOrdering2 w@@49 fixed.java.lang.IndexOutOfBoundsException)) (= (oneStep fixed.java.lang.RuntimeException w@@49) fixed.java.lang.IndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@49 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.ArrayIndexOutOfBoundsException) javaTypeType))
(assert (not (= fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException)))
(assert (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.IndexOutOfBoundsException))
(assert (forall ((w@@50 T@U) ) (!  (=> (= (type w@@50) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@50) (UOrdering2 w@@50 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@50) (= fixed.java.lang.IndexOutOfBoundsException w@@50))))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@50) (UOrdering2 w@@50 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@51 T@U) ) (!  (=> (and (= (type w@@51) javaTypeType) (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@51)) (or (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@51) (UOrdering2 fixed.java.lang.IndexOutOfBoundsException w@@51)))
 :pattern ( (UOrdering2 fixed.java.lang.ArrayIndexOutOfBoundsException w@@51))
)))
(assert (forall ((w@@52 T@U) ) (!  (=> (and (= (type w@@52) javaTypeType) (UOrdering2 w@@52 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= (oneStep fixed.java.lang.IndexOutOfBoundsException w@@52) fixed.java.lang.ArrayIndexOutOfBoundsException))
 :pattern ( (UOrdering2 w@@52 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (= (type fixed.java.lang.NullPointerException) javaTypeType))
(assert (not (= fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException)))
(assert (UOrdering2 fixed.java.lang.NullPointerException fixed.java.lang.RuntimeException))
(assert (forall ((w@@53 T@U) ) (!  (=> (= (type w@@53) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.NullPointerException w@@53) (UOrdering2 w@@53 fixed.java.lang.RuntimeException)) (or (= fixed.java.lang.NullPointerException w@@53) (= fixed.java.lang.RuntimeException w@@53))))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@53) (UOrdering2 w@@53 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@54 T@U) ) (!  (=> (and (= (type w@@54) javaTypeType) (UOrdering2 fixed.java.lang.NullPointerException w@@54)) (or (= fixed.java.lang.NullPointerException w@@54) (UOrdering2 fixed.java.lang.RuntimeException w@@54)))
 :pattern ( (UOrdering2 fixed.java.lang.NullPointerException w@@54))
)))
(assert (forall ((w@@55 T@U) ) (!  (=> (and (= (type w@@55) javaTypeType) (UOrdering2 w@@55 fixed.java.lang.NullPointerException)) (= (oneStep fixed.java.lang.RuntimeException w@@55) fixed.java.lang.NullPointerException))
 :pattern ( (UOrdering2 w@@55 fixed.java.lang.NullPointerException))
)))
(assert (= (type fixed.$StringConst5) refType))
(assert (forall ((w@@56 T@U) ) (!  (=> (and (= (type w@@56) refType) (UOrdering2 fixed.$StringConst5 w@@56)) (= fixed.$StringConst5 w@@56))
 :pattern ( (UOrdering2 fixed.$StringConst5 w@@56))
)))
(assert (= (type fixed.java.lang.Number) javaTypeType))
(assert (not (= fixed.java.lang.Number fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Number fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Number fixed.java.io.Serializable))
(assert (forall ((w@@57 T@U) ) (!  (=> (= (type w@@57) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@57) (UOrdering2 w@@57 fixed.java.lang.Object)) (or (= fixed.java.lang.Number w@@57) (= fixed.java.lang.Object w@@57))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@57) (UOrdering2 w@@57 fixed.java.lang.Object))
)))
(assert (forall ((w@@58 T@U) ) (!  (=> (= (type w@@58) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Number w@@58) (UOrdering2 w@@58 fixed.java.io.Serializable)) (or (= fixed.java.lang.Number w@@58) (= fixed.java.io.Serializable w@@58))))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@58) (UOrdering2 w@@58 fixed.java.io.Serializable))
)))
(assert (forall ((w@@59 T@U) ) (!  (=> (and (= (type w@@59) javaTypeType) (UOrdering2 fixed.java.lang.Number w@@59)) (or (or (= fixed.java.lang.Number w@@59) (UOrdering2 fixed.java.lang.Object w@@59)) (UOrdering2 fixed.java.io.Serializable w@@59)))
 :pattern ( (UOrdering2 fixed.java.lang.Number w@@59))
)))
(assert (forall ((w@@60 T@U) ) (!  (=> (and (= (type w@@60) javaTypeType) (UOrdering2 w@@60 fixed.java.lang.Number)) (= (oneStep fixed.java.lang.Object w@@60) fixed.java.lang.Number))
 :pattern ( (UOrdering2 w@@60 fixed.java.lang.Number))
)))
(assert (= (type fixed.java.lang.Integer) javaTypeType))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Number)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Number))
(assert (not (= fixed.java.lang.Integer fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Integer fixed.java.lang.Comparable))
(assert (forall ((w@@61 T@U) ) (!  (=> (= (type w@@61) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@61) (UOrdering2 w@@61 fixed.java.lang.Number)) (or (= fixed.java.lang.Integer w@@61) (= fixed.java.lang.Number w@@61))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@61) (UOrdering2 w@@61 fixed.java.lang.Number))
)))
(assert (forall ((w@@62 T@U) ) (!  (=> (= (type w@@62) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Integer w@@62) (UOrdering2 w@@62 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Integer w@@62) (= fixed.java.lang.Comparable w@@62))))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@62) (UOrdering2 w@@62 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@63 T@U) ) (!  (=> (and (= (type w@@63) javaTypeType) (UOrdering2 fixed.java.lang.Integer w@@63)) (or (or (= fixed.java.lang.Integer w@@63) (UOrdering2 fixed.java.lang.Number w@@63)) (UOrdering2 fixed.java.lang.Comparable w@@63)))
 :pattern ( (UOrdering2 fixed.java.lang.Integer w@@63))
)))
(assert (forall ((w@@64 T@U) ) (!  (=> (and (= (type w@@64) javaTypeType) (UOrdering2 w@@64 fixed.java.lang.Integer)) (= (oneStep fixed.java.lang.Number w@@64) fixed.java.lang.Integer))
 :pattern ( (UOrdering2 w@@64 fixed.java.lang.Integer))
)))
(assert (= (type fixed.java.util.Random) javaTypeType))
(assert (not (= fixed.java.util.Random fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Random fixed.java.lang.Object))
(assert (not (= fixed.java.util.Random fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.util.Random fixed.java.io.Serializable))
(assert (forall ((w@@65 T@U) ) (!  (=> (= (type w@@65) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Random w@@65) (UOrdering2 w@@65 fixed.java.lang.Object)) (or (= fixed.java.util.Random w@@65) (= fixed.java.lang.Object w@@65))))
 :pattern ( (UOrdering2 fixed.java.util.Random w@@65) (UOrdering2 w@@65 fixed.java.lang.Object))
)))
(assert (forall ((w@@66 T@U) ) (!  (=> (= (type w@@66) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Random w@@66) (UOrdering2 w@@66 fixed.java.io.Serializable)) (or (= fixed.java.util.Random w@@66) (= fixed.java.io.Serializable w@@66))))
 :pattern ( (UOrdering2 fixed.java.util.Random w@@66) (UOrdering2 w@@66 fixed.java.io.Serializable))
)))
(assert (forall ((w@@67 T@U) ) (!  (=> (and (= (type w@@67) javaTypeType) (UOrdering2 fixed.java.util.Random w@@67)) (or (or (= fixed.java.util.Random w@@67) (UOrdering2 fixed.java.lang.Object w@@67)) (UOrdering2 fixed.java.io.Serializable w@@67)))
 :pattern ( (UOrdering2 fixed.java.util.Random w@@67))
)))
(assert (forall ((w@@68 T@U) ) (!  (=> (and (= (type w@@68) javaTypeType) (UOrdering2 w@@68 fixed.java.util.Random)) (= (oneStep fixed.java.lang.Object w@@68) fixed.java.util.Random))
 :pattern ( (UOrdering2 w@@68 fixed.java.util.Random))
)))
(assert (= (type fixed.java.lang.System) javaTypeType))
(assert (not (= fixed.java.lang.System fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.System fixed.java.lang.Object))
(assert (forall ((w@@69 T@U) ) (!  (=> (= (type w@@69) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.System w@@69) (UOrdering2 w@@69 fixed.java.lang.Object)) (or (= fixed.java.lang.System w@@69) (= fixed.java.lang.Object w@@69))))
 :pattern ( (UOrdering2 fixed.java.lang.System w@@69) (UOrdering2 w@@69 fixed.java.lang.Object))
)))
(assert (forall ((w@@70 T@U) ) (!  (=> (and (= (type w@@70) javaTypeType) (UOrdering2 fixed.java.lang.System w@@70)) (or (= fixed.java.lang.System w@@70) (UOrdering2 fixed.java.lang.Object w@@70)))
 :pattern ( (UOrdering2 fixed.java.lang.System w@@70))
)))
(assert (forall ((w@@71 T@U) ) (!  (=> (and (= (type w@@71) javaTypeType) (UOrdering2 w@@71 fixed.java.lang.System)) (= (oneStep fixed.java.lang.Object w@@71) fixed.java.lang.System))
 :pattern ( (UOrdering2 w@@71 fixed.java.lang.System))
)))
(assert (= (type fixed.java.lang.Long) javaTypeType))
(assert (not (= fixed.java.lang.Long fixed.java.lang.Number)))
(assert (UOrdering2 fixed.java.lang.Long fixed.java.lang.Number))
(assert (not (= fixed.java.lang.Long fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Long fixed.java.lang.Comparable))
(assert (forall ((w@@72 T@U) ) (!  (=> (= (type w@@72) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Long w@@72) (UOrdering2 w@@72 fixed.java.lang.Number)) (or (= fixed.java.lang.Long w@@72) (= fixed.java.lang.Number w@@72))))
 :pattern ( (UOrdering2 fixed.java.lang.Long w@@72) (UOrdering2 w@@72 fixed.java.lang.Number))
)))
(assert (forall ((w@@73 T@U) ) (!  (=> (= (type w@@73) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Long w@@73) (UOrdering2 w@@73 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Long w@@73) (= fixed.java.lang.Comparable w@@73))))
 :pattern ( (UOrdering2 fixed.java.lang.Long w@@73) (UOrdering2 w@@73 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@74 T@U) ) (!  (=> (and (= (type w@@74) javaTypeType) (UOrdering2 fixed.java.lang.Long w@@74)) (or (or (= fixed.java.lang.Long w@@74) (UOrdering2 fixed.java.lang.Number w@@74)) (UOrdering2 fixed.java.lang.Comparable w@@74)))
 :pattern ( (UOrdering2 fixed.java.lang.Long w@@74))
)))
(assert (forall ((w@@75 T@U) ) (!  (=> (and (= (type w@@75) javaTypeType) (UOrdering2 w@@75 fixed.java.lang.Long)) (= (oneStep fixed.java.lang.Number w@@75) fixed.java.lang.Long))
 :pattern ( (UOrdering2 w@@75 fixed.java.lang.Long))
)))
(assert (= (type fixed.java.security.spec.AlgorithmParameterSpec) javaTypeType))
(assert (forall ((w@@76 T@U) ) (!  (=> (and (= (type w@@76) javaTypeType) (UOrdering2 fixed.java.security.spec.AlgorithmParameterSpec w@@76)) (= fixed.java.security.spec.AlgorithmParameterSpec w@@76))
 :pattern ( (UOrdering2 fixed.java.security.spec.AlgorithmParameterSpec w@@76))
)))
(assert (= (type fixed.javax.crypto.spec.IvParameterSpec) javaTypeType))
(assert (not (= fixed.javax.crypto.spec.IvParameterSpec fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec fixed.java.lang.Object))
(assert (not (= fixed.javax.crypto.spec.IvParameterSpec fixed.java.security.spec.AlgorithmParameterSpec)))
(assert (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec fixed.java.security.spec.AlgorithmParameterSpec))
(assert (forall ((w@@77 T@U) ) (!  (=> (= (type w@@77) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@77) (UOrdering2 w@@77 fixed.java.lang.Object)) (or (= fixed.javax.crypto.spec.IvParameterSpec w@@77) (= fixed.java.lang.Object w@@77))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@77) (UOrdering2 w@@77 fixed.java.lang.Object))
)))
(assert (forall ((w@@78 T@U) ) (!  (=> (= (type w@@78) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@78) (UOrdering2 w@@78 fixed.java.security.spec.AlgorithmParameterSpec)) (or (= fixed.javax.crypto.spec.IvParameterSpec w@@78) (= fixed.java.security.spec.AlgorithmParameterSpec w@@78))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@78) (UOrdering2 w@@78 fixed.java.security.spec.AlgorithmParameterSpec))
)))
(assert (forall ((w@@79 T@U) ) (!  (=> (and (= (type w@@79) javaTypeType) (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@79)) (or (or (= fixed.javax.crypto.spec.IvParameterSpec w@@79) (UOrdering2 fixed.java.lang.Object w@@79)) (UOrdering2 fixed.java.security.spec.AlgorithmParameterSpec w@@79)))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.IvParameterSpec w@@79))
)))
(assert (forall ((w@@80 T@U) ) (!  (=> (and (= (type w@@80) javaTypeType) (UOrdering2 w@@80 fixed.javax.crypto.spec.IvParameterSpec)) (= (oneStep fixed.java.lang.Object w@@80) fixed.javax.crypto.spec.IvParameterSpec))
 :pattern ( (UOrdering2 w@@80 fixed.javax.crypto.spec.IvParameterSpec))
)))
(assert (= (type fixed.java.security.spec.KeySpec) javaTypeType))
(assert (forall ((w@@81 T@U) ) (!  (=> (and (= (type w@@81) javaTypeType) (UOrdering2 fixed.java.security.spec.KeySpec w@@81)) (= fixed.java.security.spec.KeySpec w@@81))
 :pattern ( (UOrdering2 fixed.java.security.spec.KeySpec w@@81))
)))
(assert (= (type fixed.java.security.Key) javaTypeType))
(assert (not (= fixed.java.security.Key fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.security.Key fixed.java.io.Serializable))
(assert (forall ((w@@82 T@U) ) (!  (=> (= (type w@@82) javaTypeType) (=> (and (UOrdering2 fixed.java.security.Key w@@82) (UOrdering2 w@@82 fixed.java.io.Serializable)) (or (= fixed.java.security.Key w@@82) (= fixed.java.io.Serializable w@@82))))
 :pattern ( (UOrdering2 fixed.java.security.Key w@@82) (UOrdering2 w@@82 fixed.java.io.Serializable))
)))
(assert (forall ((w@@83 T@U) ) (!  (=> (and (= (type w@@83) javaTypeType) (UOrdering2 fixed.java.security.Key w@@83)) (or (= fixed.java.security.Key w@@83) (UOrdering2 fixed.java.io.Serializable w@@83)))
 :pattern ( (UOrdering2 fixed.java.security.Key w@@83))
)))
(assert (= (type fixed.javax.security.auth.Destroyable) javaTypeType))
(assert (forall ((w@@84 T@U) ) (!  (=> (and (= (type w@@84) javaTypeType) (UOrdering2 fixed.javax.security.auth.Destroyable w@@84)) (= fixed.javax.security.auth.Destroyable w@@84))
 :pattern ( (UOrdering2 fixed.javax.security.auth.Destroyable w@@84))
)))
(assert (= (type fixed.javax.crypto.SecretKey) javaTypeType))
(assert (not (= fixed.javax.crypto.SecretKey fixed.java.security.Key)))
(assert (UOrdering2 fixed.javax.crypto.SecretKey fixed.java.security.Key))
(assert (not (= fixed.javax.crypto.SecretKey fixed.javax.security.auth.Destroyable)))
(assert (UOrdering2 fixed.javax.crypto.SecretKey fixed.javax.security.auth.Destroyable))
(assert (forall ((w@@85 T@U) ) (!  (=> (= (type w@@85) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.SecretKey w@@85) (UOrdering2 w@@85 fixed.java.security.Key)) (or (= fixed.javax.crypto.SecretKey w@@85) (= fixed.java.security.Key w@@85))))
 :pattern ( (UOrdering2 fixed.javax.crypto.SecretKey w@@85) (UOrdering2 w@@85 fixed.java.security.Key))
)))
(assert (forall ((w@@86 T@U) ) (!  (=> (= (type w@@86) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.SecretKey w@@86) (UOrdering2 w@@86 fixed.javax.security.auth.Destroyable)) (or (= fixed.javax.crypto.SecretKey w@@86) (= fixed.javax.security.auth.Destroyable w@@86))))
 :pattern ( (UOrdering2 fixed.javax.crypto.SecretKey w@@86) (UOrdering2 w@@86 fixed.javax.security.auth.Destroyable))
)))
(assert (forall ((w@@87 T@U) ) (!  (=> (and (= (type w@@87) javaTypeType) (UOrdering2 fixed.javax.crypto.SecretKey w@@87)) (or (or (= fixed.javax.crypto.SecretKey w@@87) (UOrdering2 fixed.java.security.Key w@@87)) (UOrdering2 fixed.javax.security.auth.Destroyable w@@87)))
 :pattern ( (UOrdering2 fixed.javax.crypto.SecretKey w@@87))
)))
(assert (= (type fixed.javax.crypto.spec.SecretKeySpec) javaTypeType))
(assert (not (= fixed.javax.crypto.spec.SecretKeySpec fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec fixed.java.lang.Object))
(assert (not (= fixed.javax.crypto.spec.SecretKeySpec fixed.java.security.spec.KeySpec)))
(assert (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec fixed.java.security.spec.KeySpec))
(assert (not (= fixed.javax.crypto.spec.SecretKeySpec fixed.javax.crypto.SecretKey)))
(assert (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec fixed.javax.crypto.SecretKey))
(assert (forall ((w@@88 T@U) ) (!  (=> (= (type w@@88) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@88) (UOrdering2 w@@88 fixed.java.lang.Object)) (or (= fixed.javax.crypto.spec.SecretKeySpec w@@88) (= fixed.java.lang.Object w@@88))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@88) (UOrdering2 w@@88 fixed.java.lang.Object))
)))
(assert (forall ((w@@89 T@U) ) (!  (=> (= (type w@@89) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@89) (UOrdering2 w@@89 fixed.java.security.spec.KeySpec)) (or (= fixed.javax.crypto.spec.SecretKeySpec w@@89) (= fixed.java.security.spec.KeySpec w@@89))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@89) (UOrdering2 w@@89 fixed.java.security.spec.KeySpec))
)))
(assert (forall ((w@@90 T@U) ) (!  (=> (= (type w@@90) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@90) (UOrdering2 w@@90 fixed.javax.crypto.SecretKey)) (or (= fixed.javax.crypto.spec.SecretKeySpec w@@90) (= fixed.javax.crypto.SecretKey w@@90))))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@90) (UOrdering2 w@@90 fixed.javax.crypto.SecretKey))
)))
(assert (forall ((w@@91 T@U) ) (!  (=> (and (= (type w@@91) javaTypeType) (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@91)) (or (or (or (= fixed.javax.crypto.spec.SecretKeySpec w@@91) (UOrdering2 fixed.java.lang.Object w@@91)) (UOrdering2 fixed.java.security.spec.KeySpec w@@91)) (UOrdering2 fixed.javax.crypto.SecretKey w@@91)))
 :pattern ( (UOrdering2 fixed.javax.crypto.spec.SecretKeySpec w@@91))
)))
(assert (forall ((w@@92 T@U) ) (!  (=> (and (= (type w@@92) javaTypeType) (UOrdering2 w@@92 fixed.javax.crypto.spec.SecretKeySpec)) (= (oneStep fixed.java.lang.Object w@@92) fixed.javax.crypto.spec.SecretKeySpec))
 :pattern ( (UOrdering2 w@@92 fixed.javax.crypto.spec.SecretKeySpec))
)))
(assert (= (type fixed.$StringConst6) refType))
(assert (forall ((w@@93 T@U) ) (!  (=> (and (= (type w@@93) refType) (UOrdering2 fixed.$StringConst6 w@@93)) (= fixed.$StringConst6 w@@93))
 :pattern ( (UOrdering2 fixed.$StringConst6 w@@93))
)))
(assert (= (type fixed.$StringConst7) refType))
(assert (forall ((w@@94 T@U) ) (!  (=> (and (= (type w@@94) refType) (UOrdering2 fixed.$StringConst7 w@@94)) (= fixed.$StringConst7 w@@94))
 :pattern ( (UOrdering2 fixed.$StringConst7 w@@94))
)))
(assert (= (type fixed.javax.crypto.Cipher) javaTypeType))
(assert (not (= fixed.javax.crypto.Cipher fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.Cipher fixed.java.lang.Object))
(assert (forall ((w@@95 T@U) ) (!  (=> (= (type w@@95) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.Cipher w@@95) (UOrdering2 w@@95 fixed.java.lang.Object)) (or (= fixed.javax.crypto.Cipher w@@95) (= fixed.java.lang.Object w@@95))))
 :pattern ( (UOrdering2 fixed.javax.crypto.Cipher w@@95) (UOrdering2 w@@95 fixed.java.lang.Object))
)))
(assert (forall ((w@@96 T@U) ) (!  (=> (and (= (type w@@96) javaTypeType) (UOrdering2 fixed.javax.crypto.Cipher w@@96)) (or (= fixed.javax.crypto.Cipher w@@96) (UOrdering2 fixed.java.lang.Object w@@96)))
 :pattern ( (UOrdering2 fixed.javax.crypto.Cipher w@@96))
)))
(assert (forall ((w@@97 T@U) ) (!  (=> (and (= (type w@@97) javaTypeType) (UOrdering2 w@@97 fixed.javax.crypto.Cipher)) (= (oneStep fixed.java.lang.Object w@@97) fixed.javax.crypto.Cipher))
 :pattern ( (UOrdering2 w@@97 fixed.javax.crypto.Cipher))
)))
(assert (= (type fixed.javax.crypto.NoSuchPaddingException) javaTypeType))
(assert (not (= fixed.javax.crypto.NoSuchPaddingException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.javax.crypto.NoSuchPaddingException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@98 T@U) ) (!  (=> (= (type w@@98) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@98) (UOrdering2 w@@98 fixed.java.security.GeneralSecurityException)) (or (= fixed.javax.crypto.NoSuchPaddingException w@@98) (= fixed.java.security.GeneralSecurityException w@@98))))
 :pattern ( (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@98) (UOrdering2 w@@98 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@99 T@U) ) (!  (=> (and (= (type w@@99) javaTypeType) (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@99)) (or (= fixed.javax.crypto.NoSuchPaddingException w@@99) (UOrdering2 fixed.java.security.GeneralSecurityException w@@99)))
 :pattern ( (UOrdering2 fixed.javax.crypto.NoSuchPaddingException w@@99))
)))
(assert (forall ((w@@100 T@U) ) (!  (=> (and (= (type w@@100) javaTypeType) (UOrdering2 w@@100 fixed.javax.crypto.NoSuchPaddingException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@100) fixed.javax.crypto.NoSuchPaddingException))
 :pattern ( (UOrdering2 w@@100 fixed.javax.crypto.NoSuchPaddingException))
)))
(assert (= (type fixed.java.security.InvalidAlgorithmParameterException) javaTypeType))
(assert (not (= fixed.java.security.InvalidAlgorithmParameterException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@101 T@U) ) (!  (=> (= (type w@@101) javaTypeType) (=> (and (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@101) (UOrdering2 w@@101 fixed.java.security.GeneralSecurityException)) (or (= fixed.java.security.InvalidAlgorithmParameterException w@@101) (= fixed.java.security.GeneralSecurityException w@@101))))
 :pattern ( (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@101) (UOrdering2 w@@101 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@102 T@U) ) (!  (=> (and (= (type w@@102) javaTypeType) (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@102)) (or (= fixed.java.security.InvalidAlgorithmParameterException w@@102) (UOrdering2 fixed.java.security.GeneralSecurityException w@@102)))
 :pattern ( (UOrdering2 fixed.java.security.InvalidAlgorithmParameterException w@@102))
)))
(assert (forall ((w@@103 T@U) ) (!  (=> (and (= (type w@@103) javaTypeType) (UOrdering2 w@@103 fixed.java.security.InvalidAlgorithmParameterException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@103) fixed.java.security.InvalidAlgorithmParameterException))
 :pattern ( (UOrdering2 w@@103 fixed.java.security.InvalidAlgorithmParameterException))
)))
(assert (= (type fixed.javax.crypto.BadPaddingException) javaTypeType))
(assert (not (= fixed.javax.crypto.BadPaddingException fixed.java.security.GeneralSecurityException)))
(assert (UOrdering2 fixed.javax.crypto.BadPaddingException fixed.java.security.GeneralSecurityException))
(assert (forall ((w@@104 T@U) ) (!  (=> (= (type w@@104) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.BadPaddingException w@@104) (UOrdering2 w@@104 fixed.java.security.GeneralSecurityException)) (or (= fixed.javax.crypto.BadPaddingException w@@104) (= fixed.java.security.GeneralSecurityException w@@104))))
 :pattern ( (UOrdering2 fixed.javax.crypto.BadPaddingException w@@104) (UOrdering2 w@@104 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@105 T@U) ) (!  (=> (and (= (type w@@105) javaTypeType) (UOrdering2 fixed.javax.crypto.BadPaddingException w@@105)) (or (= fixed.javax.crypto.BadPaddingException w@@105) (UOrdering2 fixed.java.security.GeneralSecurityException w@@105)))
 :pattern ( (UOrdering2 fixed.javax.crypto.BadPaddingException w@@105))
)))
(assert (forall ((w@@106 T@U) ) (!  (=> (and (= (type w@@106) javaTypeType) (UOrdering2 w@@106 fixed.javax.crypto.BadPaddingException)) (= (oneStep fixed.java.security.GeneralSecurityException w@@106) fixed.javax.crypto.BadPaddingException))
 :pattern ( (UOrdering2 w@@106 fixed.javax.crypto.BadPaddingException))
)))
(assert (= (type fixed.java.util.Base64) javaTypeType))
(assert (not (= fixed.java.util.Base64 fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Base64 fixed.java.lang.Object))
(assert (forall ((w@@107 T@U) ) (!  (=> (= (type w@@107) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Base64 w@@107) (UOrdering2 w@@107 fixed.java.lang.Object)) (or (= fixed.java.util.Base64 w@@107) (= fixed.java.lang.Object w@@107))))
 :pattern ( (UOrdering2 fixed.java.util.Base64 w@@107) (UOrdering2 w@@107 fixed.java.lang.Object))
)))
(assert (forall ((w@@108 T@U) ) (!  (=> (and (= (type w@@108) javaTypeType) (UOrdering2 fixed.java.util.Base64 w@@108)) (or (= fixed.java.util.Base64 w@@108) (UOrdering2 fixed.java.lang.Object w@@108)))
 :pattern ( (UOrdering2 fixed.java.util.Base64 w@@108))
)))
(assert (forall ((w@@109 T@U) ) (!  (=> (and (= (type w@@109) javaTypeType) (UOrdering2 w@@109 fixed.java.util.Base64)) (= (oneStep fixed.java.lang.Object w@@109) fixed.java.util.Base64))
 :pattern ( (UOrdering2 w@@109 fixed.java.util.Base64))
)))
(assert (= (type fixed.java.util.Base64$Encoder) javaTypeType))
(assert (not (= fixed.java.util.Base64$Encoder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Base64$Encoder fixed.java.lang.Object))
(assert (forall ((w@@110 T@U) ) (!  (=> (= (type w@@110) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Base64$Encoder w@@110) (UOrdering2 w@@110 fixed.java.lang.Object)) (or (= fixed.java.util.Base64$Encoder w@@110) (= fixed.java.lang.Object w@@110))))
 :pattern ( (UOrdering2 fixed.java.util.Base64$Encoder w@@110) (UOrdering2 w@@110 fixed.java.lang.Object))
)))
(assert (forall ((w@@111 T@U) ) (!  (=> (and (= (type w@@111) javaTypeType) (UOrdering2 fixed.java.util.Base64$Encoder w@@111)) (or (= fixed.java.util.Base64$Encoder w@@111) (UOrdering2 fixed.java.lang.Object w@@111)))
 :pattern ( (UOrdering2 fixed.java.util.Base64$Encoder w@@111))
)))
(assert (forall ((w@@112 T@U) ) (!  (=> (and (= (type w@@112) javaTypeType) (UOrdering2 w@@112 fixed.java.util.Base64$Encoder)) (= (oneStep fixed.java.lang.Object w@@112) fixed.java.util.Base64$Encoder))
 :pattern ( (UOrdering2 w@@112 fixed.java.util.Base64$Encoder))
)))
(assert (= (type fixed.$StringConst8) refType))
(assert (forall ((w@@113 T@U) ) (!  (=> (and (= (type w@@113) refType) (UOrdering2 fixed.$StringConst8 w@@113)) (= fixed.$StringConst8 w@@113))
 :pattern ( (UOrdering2 fixed.$StringConst8 w@@113))
)))
(assert (= (type fixed.java.util.Base64$Decoder) javaTypeType))
(assert (not (= fixed.java.util.Base64$Decoder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Base64$Decoder fixed.java.lang.Object))
(assert (forall ((w@@114 T@U) ) (!  (=> (= (type w@@114) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Base64$Decoder w@@114) (UOrdering2 w@@114 fixed.java.lang.Object)) (or (= fixed.java.util.Base64$Decoder w@@114) (= fixed.java.lang.Object w@@114))))
 :pattern ( (UOrdering2 fixed.java.util.Base64$Decoder w@@114) (UOrdering2 w@@114 fixed.java.lang.Object))
)))
(assert (forall ((w@@115 T@U) ) (!  (=> (and (= (type w@@115) javaTypeType) (UOrdering2 fixed.java.util.Base64$Decoder w@@115)) (or (= fixed.java.util.Base64$Decoder w@@115) (UOrdering2 fixed.java.lang.Object w@@115)))
 :pattern ( (UOrdering2 fixed.java.util.Base64$Decoder w@@115))
)))
(assert (forall ((w@@116 T@U) ) (!  (=> (and (= (type w@@116) javaTypeType) (UOrdering2 w@@116 fixed.java.util.Base64$Decoder)) (= (oneStep fixed.java.lang.Object w@@116) fixed.java.util.Base64$Decoder))
 :pattern ( (UOrdering2 w@@116 fixed.java.util.Base64$Decoder))
)))
(assert (= (type fixed.$StringConst9) refType))
(assert (forall ((w@@117 T@U) ) (!  (=> (and (= (type w@@117) refType) (UOrdering2 fixed.$StringConst9 w@@117)) (= fixed.$StringConst9 w@@117))
 :pattern ( (UOrdering2 fixed.$StringConst9 w@@117))
)))
(assert (= (type fixed.org.openmrs.api.context.Context) javaTypeType))
(assert (forall ((w@@118 T@U) ) (!  (=> (and (= (type w@@118) javaTypeType) (UOrdering2 fixed.org.openmrs.api.context.Context w@@118)) (= fixed.org.openmrs.api.context.Context w@@118))
 :pattern ( (UOrdering2 fixed.org.openmrs.api.context.Context w@@118))
)))
(assert (= (type fixed.java.util.Dictionary) javaTypeType))
(assert (not (= fixed.java.util.Dictionary fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Dictionary fixed.java.lang.Object))
(assert (forall ((w@@119 T@U) ) (!  (=> (= (type w@@119) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Dictionary w@@119) (UOrdering2 w@@119 fixed.java.lang.Object)) (or (= fixed.java.util.Dictionary w@@119) (= fixed.java.lang.Object w@@119))))
 :pattern ( (UOrdering2 fixed.java.util.Dictionary w@@119) (UOrdering2 w@@119 fixed.java.lang.Object))
)))
(assert (forall ((w@@120 T@U) ) (!  (=> (and (= (type w@@120) javaTypeType) (UOrdering2 fixed.java.util.Dictionary w@@120)) (or (= fixed.java.util.Dictionary w@@120) (UOrdering2 fixed.java.lang.Object w@@120)))
 :pattern ( (UOrdering2 fixed.java.util.Dictionary w@@120))
)))
(assert (forall ((w@@121 T@U) ) (!  (=> (and (= (type w@@121) javaTypeType) (UOrdering2 w@@121 fixed.java.util.Dictionary)) (= (oneStep fixed.java.lang.Object w@@121) fixed.java.util.Dictionary))
 :pattern ( (UOrdering2 w@@121 fixed.java.util.Dictionary))
)))
(assert (= (type fixed.java.util.Map) javaTypeType))
(assert (forall ((w@@122 T@U) ) (!  (=> (and (= (type w@@122) javaTypeType) (UOrdering2 fixed.java.util.Map w@@122)) (= fixed.java.util.Map w@@122))
 :pattern ( (UOrdering2 fixed.java.util.Map w@@122))
)))
(assert (= (type fixed.java.lang.Cloneable) javaTypeType))
(assert (forall ((w@@123 T@U) ) (!  (=> (and (= (type w@@123) javaTypeType) (UOrdering2 fixed.java.lang.Cloneable w@@123)) (= fixed.java.lang.Cloneable w@@123))
 :pattern ( (UOrdering2 fixed.java.lang.Cloneable w@@123))
)))
(assert (= (type fixed.java.util.Hashtable) javaTypeType))
(assert (not (= fixed.java.util.Hashtable fixed.java.util.Dictionary)))
(assert (UOrdering2 fixed.java.util.Hashtable fixed.java.util.Dictionary))
(assert (not (= fixed.java.util.Hashtable fixed.java.util.Map)))
(assert (UOrdering2 fixed.java.util.Hashtable fixed.java.util.Map))
(assert (not (= fixed.java.util.Hashtable fixed.java.lang.Cloneable)))
(assert (UOrdering2 fixed.java.util.Hashtable fixed.java.lang.Cloneable))
(assert (not (= fixed.java.util.Hashtable fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.util.Hashtable fixed.java.io.Serializable))
(assert (forall ((w@@124 T@U) ) (!  (=> (= (type w@@124) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Hashtable w@@124) (UOrdering2 w@@124 fixed.java.util.Dictionary)) (or (= fixed.java.util.Hashtable w@@124) (= fixed.java.util.Dictionary w@@124))))
 :pattern ( (UOrdering2 fixed.java.util.Hashtable w@@124) (UOrdering2 w@@124 fixed.java.util.Dictionary))
)))
(assert (forall ((w@@125 T@U) ) (!  (=> (= (type w@@125) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Hashtable w@@125) (UOrdering2 w@@125 fixed.java.util.Map)) (or (= fixed.java.util.Hashtable w@@125) (= fixed.java.util.Map w@@125))))
 :pattern ( (UOrdering2 fixed.java.util.Hashtable w@@125) (UOrdering2 w@@125 fixed.java.util.Map))
)))
(assert (forall ((w@@126 T@U) ) (!  (=> (= (type w@@126) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Hashtable w@@126) (UOrdering2 w@@126 fixed.java.lang.Cloneable)) (or (= fixed.java.util.Hashtable w@@126) (= fixed.java.lang.Cloneable w@@126))))
 :pattern ( (UOrdering2 fixed.java.util.Hashtable w@@126) (UOrdering2 w@@126 fixed.java.lang.Cloneable))
)))
(assert (forall ((w@@127 T@U) ) (!  (=> (= (type w@@127) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Hashtable w@@127) (UOrdering2 w@@127 fixed.java.io.Serializable)) (or (= fixed.java.util.Hashtable w@@127) (= fixed.java.io.Serializable w@@127))))
 :pattern ( (UOrdering2 fixed.java.util.Hashtable w@@127) (UOrdering2 w@@127 fixed.java.io.Serializable))
)))
(assert (forall ((w@@128 T@U) ) (!  (=> (and (= (type w@@128) javaTypeType) (UOrdering2 fixed.java.util.Hashtable w@@128)) (or (or (or (or (= fixed.java.util.Hashtable w@@128) (UOrdering2 fixed.java.util.Dictionary w@@128)) (UOrdering2 fixed.java.util.Map w@@128)) (UOrdering2 fixed.java.lang.Cloneable w@@128)) (UOrdering2 fixed.java.io.Serializable w@@128)))
 :pattern ( (UOrdering2 fixed.java.util.Hashtable w@@128))
)))
(assert (forall ((w@@129 T@U) ) (!  (=> (and (= (type w@@129) javaTypeType) (UOrdering2 w@@129 fixed.java.util.Hashtable)) (= (oneStep fixed.java.util.Dictionary w@@129) fixed.java.util.Hashtable))
 :pattern ( (UOrdering2 w@@129 fixed.java.util.Hashtable))
)))
(assert (= (type fixed.java.util.Properties) javaTypeType))
(assert (not (= fixed.java.util.Properties fixed.java.util.Hashtable)))
(assert (UOrdering2 fixed.java.util.Properties fixed.java.util.Hashtable))
(assert (forall ((w@@130 T@U) ) (!  (=> (= (type w@@130) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Properties w@@130) (UOrdering2 w@@130 fixed.java.util.Hashtable)) (or (= fixed.java.util.Properties w@@130) (= fixed.java.util.Hashtable w@@130))))
 :pattern ( (UOrdering2 fixed.java.util.Properties w@@130) (UOrdering2 w@@130 fixed.java.util.Hashtable))
)))
(assert (forall ((w@@131 T@U) ) (!  (=> (and (= (type w@@131) javaTypeType) (UOrdering2 fixed.java.util.Properties w@@131)) (or (= fixed.java.util.Properties w@@131) (UOrdering2 fixed.java.util.Hashtable w@@131)))
 :pattern ( (UOrdering2 fixed.java.util.Properties w@@131))
)))
(assert (forall ((w@@132 T@U) ) (!  (=> (and (= (type w@@132) javaTypeType) (UOrdering2 w@@132 fixed.java.util.Properties)) (= (oneStep fixed.java.util.Hashtable w@@132) fixed.java.util.Properties))
 :pattern ( (UOrdering2 w@@132 fixed.java.util.Properties))
)))
(assert (= (type fixed.$StringConst10) refType))
(assert (forall ((w@@133 T@U) ) (!  (=> (and (= (type w@@133) refType) (UOrdering2 fixed.$StringConst10 w@@133)) (= fixed.$StringConst10 w@@133))
 :pattern ( (UOrdering2 fixed.$StringConst10 w@@133))
)))
(assert (= (type fixed.$StringConst11) refType))
(assert (forall ((w@@134 T@U) ) (!  (=> (and (= (type w@@134) refType) (UOrdering2 fixed.$StringConst11 w@@134)) (= fixed.$StringConst11 w@@134))
 :pattern ( (UOrdering2 fixed.$StringConst11 w@@134))
)))
(assert (= (type fixed.org.springframework.util.StringUtils) javaTypeType))
(assert (forall ((w@@135 T@U) ) (!  (=> (and (= (type w@@135) javaTypeType) (UOrdering2 fixed.org.springframework.util.StringUtils w@@135)) (= fixed.org.springframework.util.StringUtils w@@135))
 :pattern ( (UOrdering2 fixed.org.springframework.util.StringUtils w@@135))
)))
(assert (= (type fixed.$StringConst12) refType))
(assert (forall ((w@@136 T@U) ) (!  (=> (and (= (type w@@136) refType) (UOrdering2 fixed.$StringConst12 w@@136)) (= fixed.$StringConst12 w@@136))
 :pattern ( (UOrdering2 fixed.$StringConst12 w@@136))
)))
(assert (= (type fixed.java.security.SecureRandom) javaTypeType))
(assert (not (= fixed.java.security.SecureRandom fixed.java.util.Random)))
(assert (UOrdering2 fixed.java.security.SecureRandom fixed.java.util.Random))
(assert (forall ((w@@137 T@U) ) (!  (=> (= (type w@@137) javaTypeType) (=> (and (UOrdering2 fixed.java.security.SecureRandom w@@137) (UOrdering2 w@@137 fixed.java.util.Random)) (or (= fixed.java.security.SecureRandom w@@137) (= fixed.java.util.Random w@@137))))
 :pattern ( (UOrdering2 fixed.java.security.SecureRandom w@@137) (UOrdering2 w@@137 fixed.java.util.Random))
)))
(assert (forall ((w@@138 T@U) ) (!  (=> (and (= (type w@@138) javaTypeType) (UOrdering2 fixed.java.security.SecureRandom w@@138)) (or (= fixed.java.security.SecureRandom w@@138) (UOrdering2 fixed.java.util.Random w@@138)))
 :pattern ( (UOrdering2 fixed.java.security.SecureRandom w@@138))
)))
(assert (forall ((w@@139 T@U) ) (!  (=> (and (= (type w@@139) javaTypeType) (UOrdering2 w@@139 fixed.java.security.SecureRandom)) (= (oneStep fixed.java.util.Random w@@139) fixed.java.security.SecureRandom))
 :pattern ( (UOrdering2 w@@139 fixed.java.security.SecureRandom))
)))
(assert (= (type fixed.$StringConst13) refType))
(assert (forall ((w@@140 T@U) ) (!  (=> (and (= (type w@@140) refType) (UOrdering2 fixed.$StringConst13 w@@140)) (= fixed.$StringConst13 w@@140))
 :pattern ( (UOrdering2 fixed.$StringConst13 w@@140))
)))
(assert (= (type fixed.$StringConst14) refType))
(assert (forall ((w@@141 T@U) ) (!  (=> (and (= (type w@@141) refType) (UOrdering2 fixed.$StringConst14 w@@141)) (= fixed.$StringConst14 w@@141))
 :pattern ( (UOrdering2 fixed.$StringConst14 w@@141))
)))
(assert (= (type fixed.$StringConst15) refType))
(assert (forall ((w@@142 T@U) ) (!  (=> (and (= (type w@@142) refType) (UOrdering2 fixed.$StringConst15 w@@142)) (= fixed.$StringConst15 w@@142))
 :pattern ( (UOrdering2 fixed.$StringConst15 w@@142))
)))
(assert (= (type fixed.javax.crypto.KeyGenerator) javaTypeType))
(assert (not (= fixed.javax.crypto.KeyGenerator fixed.java.lang.Object)))
(assert (UOrdering2 fixed.javax.crypto.KeyGenerator fixed.java.lang.Object))
(assert (forall ((w@@143 T@U) ) (!  (=> (= (type w@@143) javaTypeType) (=> (and (UOrdering2 fixed.javax.crypto.KeyGenerator w@@143) (UOrdering2 w@@143 fixed.java.lang.Object)) (or (= fixed.javax.crypto.KeyGenerator w@@143) (= fixed.java.lang.Object w@@143))))
 :pattern ( (UOrdering2 fixed.javax.crypto.KeyGenerator w@@143) (UOrdering2 w@@143 fixed.java.lang.Object))
)))
(assert (forall ((w@@144 T@U) ) (!  (=> (and (= (type w@@144) javaTypeType) (UOrdering2 fixed.javax.crypto.KeyGenerator w@@144)) (or (= fixed.javax.crypto.KeyGenerator w@@144) (UOrdering2 fixed.java.lang.Object w@@144)))
 :pattern ( (UOrdering2 fixed.javax.crypto.KeyGenerator w@@144))
)))
(assert (forall ((w@@145 T@U) ) (!  (=> (and (= (type w@@145) javaTypeType) (UOrdering2 w@@145 fixed.javax.crypto.KeyGenerator)) (= (oneStep fixed.java.lang.Object w@@145) fixed.javax.crypto.KeyGenerator))
 :pattern ( (UOrdering2 w@@145 fixed.javax.crypto.KeyGenerator))
)))
(assert (= (type fixed.$StringConst16) refType))
(assert (forall ((w@@146 T@U) ) (!  (=> (and (= (type w@@146) refType) (UOrdering2 fixed.$StringConst16 w@@146)) (= fixed.$StringConst16 w@@146))
 :pattern ( (UOrdering2 fixed.$StringConst16 w@@146))
)))
(assert (= (type fixed.CC$org$_$openmrs$_$util$_$Security) refType))
(assert (forall ((w@@147 T@U) ) (!  (=> (and (= (type w@@147) refType) (UOrdering2 fixed.CC$org$_$openmrs$_$util$_$Security w@@147)) (= fixed.CC$org$_$openmrs$_$util$_$Security w@@147))
 :pattern ( (UOrdering2 fixed.CC$org$_$openmrs$_$util$_$Security w@@147))
)))
(assert (= (type fixed.org.slf4j.LoggerFactory) javaTypeType))
(assert (forall ((w@@148 T@U) ) (!  (=> (and (= (type w@@148) javaTypeType) (UOrdering2 fixed.org.slf4j.LoggerFactory w@@148)) (= fixed.org.slf4j.LoggerFactory w@@148))
 :pattern ( (UOrdering2 fixed.org.slf4j.LoggerFactory w@@148))
)))
(assert (= (type fixed.java.lang.reflect.AnnotatedElement) javaTypeType))
(assert (forall ((w@@149 T@U) ) (!  (=> (and (= (type w@@149) javaTypeType) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@149)) (= fixed.java.lang.reflect.AnnotatedElement w@@149))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@149))
)))
(assert (= (type fixed.java.lang.reflect.GenericDeclaration) javaTypeType))
(assert (not (= fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@150 T@U) ) (!  (=> (= (type w@@150) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@150) (UOrdering2 w@@150 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@150) (= fixed.java.lang.reflect.AnnotatedElement w@@150))))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@150) (UOrdering2 w@@150 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@151 T@U) ) (!  (=> (and (= (type w@@151) javaTypeType) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@151)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@151) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@151)))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@151))
)))
(assert (= (type fixed.java.lang.reflect.Type) javaTypeType))
(assert (forall ((w@@152 T@U) ) (!  (=> (and (= (type w@@152) javaTypeType) (UOrdering2 fixed.java.lang.reflect.Type w@@152)) (= fixed.java.lang.reflect.Type w@@152))
 :pattern ( (UOrdering2 fixed.java.lang.reflect.Type w@@152))
)))
(assert (= (type fixed.java.lang.Class) javaTypeType))
(assert (not (= fixed.java.lang.Class fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Class fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.GenericDeclaration)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.GenericDeclaration))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.Type)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.Type))
(assert (not (= fixed.java.lang.Class fixed.java.lang.reflect.AnnotatedElement)))
(assert (UOrdering2 fixed.java.lang.Class fixed.java.lang.reflect.AnnotatedElement))
(assert (forall ((w@@153 T@U) ) (!  (=> (= (type w@@153) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@153) (UOrdering2 w@@153 fixed.java.lang.Object)) (or (= fixed.java.lang.Class w@@153) (= fixed.java.lang.Object w@@153))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@153) (UOrdering2 w@@153 fixed.java.lang.Object))
)))
(assert (forall ((w@@154 T@U) ) (!  (=> (= (type w@@154) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@154) (UOrdering2 w@@154 fixed.java.io.Serializable)) (or (= fixed.java.lang.Class w@@154) (= fixed.java.io.Serializable w@@154))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@154) (UOrdering2 w@@154 fixed.java.io.Serializable))
)))
(assert (forall ((w@@155 T@U) ) (!  (=> (= (type w@@155) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@155) (UOrdering2 w@@155 fixed.java.lang.reflect.GenericDeclaration)) (or (= fixed.java.lang.Class w@@155) (= fixed.java.lang.reflect.GenericDeclaration w@@155))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@155) (UOrdering2 w@@155 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@156 T@U) ) (!  (=> (= (type w@@156) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@156) (UOrdering2 w@@156 fixed.java.lang.reflect.Type)) (or (= fixed.java.lang.Class w@@156) (= fixed.java.lang.reflect.Type w@@156))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@156) (UOrdering2 w@@156 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@157 T@U) ) (!  (=> (= (type w@@157) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Class w@@157) (UOrdering2 w@@157 fixed.java.lang.reflect.AnnotatedElement)) (or (= fixed.java.lang.Class w@@157) (= fixed.java.lang.reflect.AnnotatedElement w@@157))))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@157) (UOrdering2 w@@157 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@158 T@U) ) (!  (=> (and (= (type w@@158) javaTypeType) (UOrdering2 fixed.java.lang.Class w@@158)) (or (or (or (or (or (= fixed.java.lang.Class w@@158) (UOrdering2 fixed.java.lang.Object w@@158)) (UOrdering2 fixed.java.io.Serializable w@@158)) (UOrdering2 fixed.java.lang.reflect.GenericDeclaration w@@158)) (UOrdering2 fixed.java.lang.reflect.Type w@@158)) (UOrdering2 fixed.java.lang.reflect.AnnotatedElement w@@158)))
 :pattern ( (UOrdering2 fixed.java.lang.Class w@@158))
)))
(assert (forall ((w@@159 T@U) ) (!  (=> (and (= (type w@@159) javaTypeType) (UOrdering2 w@@159 fixed.java.lang.Class)) (= (oneStep fixed.java.lang.Object w@@159) fixed.java.lang.Class))
 :pattern ( (UOrdering2 w@@159 fixed.java.lang.Class))
)))
(assert (= (type fixed.java.nio.charset.Charset) javaTypeType))
(assert (not (= fixed.java.nio.charset.Charset fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.nio.charset.Charset fixed.java.lang.Object))
(assert (forall ((w@@160 T@U) ) (!  (=> (= (type w@@160) javaTypeType) (=> (and (UOrdering2 fixed.java.nio.charset.Charset w@@160) (UOrdering2 w@@160 fixed.java.lang.Object)) (or (= fixed.java.nio.charset.Charset w@@160) (= fixed.java.lang.Object w@@160))))
 :pattern ( (UOrdering2 fixed.java.nio.charset.Charset w@@160) (UOrdering2 w@@160 fixed.java.lang.Object))
)))
(assert (forall ((w@@161 T@U) ) (!  (=> (and (= (type w@@161) javaTypeType) (UOrdering2 fixed.java.nio.charset.Charset w@@161)) (or (= fixed.java.nio.charset.Charset w@@161) (UOrdering2 fixed.java.lang.Object w@@161)))
 :pattern ( (UOrdering2 fixed.java.nio.charset.Charset w@@161))
)))
(assert (forall ((w@@162 T@U) ) (!  (=> (and (= (type w@@162) javaTypeType) (UOrdering2 w@@162 fixed.java.nio.charset.Charset)) (= (oneStep fixed.java.lang.Object w@@162) fixed.java.nio.charset.Charset))
 :pattern ( (UOrdering2 w@@162 fixed.java.nio.charset.Charset))
)))
(assert (= (type fixed.java.lang.StringBuilder) javaTypeType))
(assert (not (= fixed.java.lang.StringBuilder fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.StringBuilder fixed.java.lang.Object))
(assert (forall ((w@@163 T@U) ) (!  (=> (= (type w@@163) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.StringBuilder w@@163) (UOrdering2 w@@163 fixed.java.lang.Object)) (or (= fixed.java.lang.StringBuilder w@@163) (= fixed.java.lang.Object w@@163))))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@163) (UOrdering2 w@@163 fixed.java.lang.Object))
)))
(assert (forall ((w@@164 T@U) ) (!  (=> (and (= (type w@@164) javaTypeType) (UOrdering2 fixed.java.lang.StringBuilder w@@164)) (or (= fixed.java.lang.StringBuilder w@@164) (UOrdering2 fixed.java.lang.Object w@@164)))
 :pattern ( (UOrdering2 fixed.java.lang.StringBuilder w@@164))
)))
(assert (forall ((w@@165 T@U) ) (!  (=> (and (= (type w@@165) javaTypeType) (UOrdering2 w@@165 fixed.java.lang.StringBuilder)) (= (oneStep fixed.java.lang.Object w@@165) fixed.java.lang.StringBuilder))
 :pattern ( (UOrdering2 w@@165 fixed.java.lang.StringBuilder))
)))
(assert (= (type fixed.java.lang.String) javaTypeType))
(assert (not (= fixed.java.lang.String fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.String fixed.java.lang.Object))
(assert (forall ((w@@166 T@U) ) (!  (=> (= (type w@@166) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.String w@@166) (UOrdering2 w@@166 fixed.java.lang.Object)) (or (= fixed.java.lang.String w@@166) (= fixed.java.lang.Object w@@166))))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@166) (UOrdering2 w@@166 fixed.java.lang.Object))
)))
(assert (forall ((w@@167 T@U) ) (!  (=> (and (= (type w@@167) javaTypeType) (UOrdering2 fixed.java.lang.String w@@167)) (or (= fixed.java.lang.String w@@167) (UOrdering2 fixed.java.lang.Object w@@167)))
 :pattern ( (UOrdering2 fixed.java.lang.String w@@167))
)))
(assert (forall ((w@@168 T@U) ) (!  (=> (and (= (type w@@168) javaTypeType) (UOrdering2 w@@168 fixed.java.lang.String)) (= (oneStep fixed.java.lang.Object w@@168) fixed.java.lang.String))
 :pattern ( (UOrdering2 w@@168 fixed.java.lang.String))
)))
(assert (= (type fixed.java.lang.Character) javaTypeType))
(assert (not (= fixed.java.lang.Character fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Character fixed.java.lang.Object))
(assert (not (= fixed.java.lang.Character fixed.java.io.Serializable)))
(assert (UOrdering2 fixed.java.lang.Character fixed.java.io.Serializable))
(assert (not (= fixed.java.lang.Character fixed.java.lang.Comparable)))
(assert (UOrdering2 fixed.java.lang.Character fixed.java.lang.Comparable))
(assert (forall ((w@@169 T@U) ) (!  (=> (= (type w@@169) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Character w@@169) (UOrdering2 w@@169 fixed.java.lang.Object)) (or (= fixed.java.lang.Character w@@169) (= fixed.java.lang.Object w@@169))))
 :pattern ( (UOrdering2 fixed.java.lang.Character w@@169) (UOrdering2 w@@169 fixed.java.lang.Object))
)))
(assert (forall ((w@@170 T@U) ) (!  (=> (= (type w@@170) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Character w@@170) (UOrdering2 w@@170 fixed.java.io.Serializable)) (or (= fixed.java.lang.Character w@@170) (= fixed.java.io.Serializable w@@170))))
 :pattern ( (UOrdering2 fixed.java.lang.Character w@@170) (UOrdering2 w@@170 fixed.java.io.Serializable))
)))
(assert (forall ((w@@171 T@U) ) (!  (=> (= (type w@@171) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Character w@@171) (UOrdering2 w@@171 fixed.java.lang.Comparable)) (or (= fixed.java.lang.Character w@@171) (= fixed.java.lang.Comparable w@@171))))
 :pattern ( (UOrdering2 fixed.java.lang.Character w@@171) (UOrdering2 w@@171 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@172 T@U) ) (!  (=> (and (= (type w@@172) javaTypeType) (UOrdering2 fixed.java.lang.Character w@@172)) (or (or (or (= fixed.java.lang.Character w@@172) (UOrdering2 fixed.java.lang.Object w@@172)) (UOrdering2 fixed.java.io.Serializable w@@172)) (UOrdering2 fixed.java.lang.Comparable w@@172)))
 :pattern ( (UOrdering2 fixed.java.lang.Character w@@172))
)))
(assert (forall ((w@@173 T@U) ) (!  (=> (and (= (type w@@173) javaTypeType) (UOrdering2 w@@173 fixed.java.lang.Character)) (= (oneStep fixed.java.lang.Object w@@173) fixed.java.lang.Character))
 :pattern ( (UOrdering2 w@@173 fixed.java.lang.Character))
)))
(assert (= (type fixed.java.util.Arrays) javaTypeType))
(assert (not (= fixed.java.util.Arrays fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.util.Arrays fixed.java.lang.Object))
(assert (forall ((w@@174 T@U) ) (!  (=> (= (type w@@174) javaTypeType) (=> (and (UOrdering2 fixed.java.util.Arrays w@@174) (UOrdering2 w@@174 fixed.java.lang.Object)) (or (= fixed.java.util.Arrays w@@174) (= fixed.java.lang.Object w@@174))))
 :pattern ( (UOrdering2 fixed.java.util.Arrays w@@174) (UOrdering2 w@@174 fixed.java.lang.Object))
)))
(assert (forall ((w@@175 T@U) ) (!  (=> (and (= (type w@@175) javaTypeType) (UOrdering2 fixed.java.util.Arrays w@@175)) (or (= fixed.java.util.Arrays w@@175) (UOrdering2 fixed.java.lang.Object w@@175)))
 :pattern ( (UOrdering2 fixed.java.util.Arrays w@@175))
)))
(assert (forall ((w@@176 T@U) ) (!  (=> (and (= (type w@@176) javaTypeType) (UOrdering2 w@@176 fixed.java.util.Arrays)) (= (oneStep fixed.java.lang.Object w@@176) fixed.java.util.Arrays))
 :pattern ( (UOrdering2 w@@176 fixed.java.util.Arrays))
)))
(assert (= (type fixed.java.lang.Boolean) javaTypeType))
(assert (not (= fixed.java.lang.Boolean fixed.java.lang.Object)))
(assert (UOrdering2 fixed.java.lang.Boolean fixed.java.lang.Object))
(assert (forall ((w@@177 T@U) ) (!  (=> (= (type w@@177) javaTypeType) (=> (and (UOrdering2 fixed.java.lang.Boolean w@@177) (UOrdering2 w@@177 fixed.java.lang.Object)) (or (= fixed.java.lang.Boolean w@@177) (= fixed.java.lang.Object w@@177))))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@177) (UOrdering2 w@@177 fixed.java.lang.Object))
)))
(assert (forall ((w@@178 T@U) ) (!  (=> (and (= (type w@@178) javaTypeType) (UOrdering2 fixed.java.lang.Boolean w@@178)) (or (= fixed.java.lang.Boolean w@@178) (UOrdering2 fixed.java.lang.Object w@@178)))
 :pattern ( (UOrdering2 fixed.java.lang.Boolean w@@178))
)))
(assert (forall ((w@@179 T@U) ) (!  (=> (and (= (type w@@179) javaTypeType) (UOrdering2 w@@179 fixed.java.lang.Boolean)) (= (oneStep fixed.java.lang.Object w@@179) fixed.java.lang.Boolean))
 :pattern ( (UOrdering2 w@@179 fixed.java.lang.Boolean))
)))
(assert (forall ((w@@180 T@U) ) (!  (=> (and (= (type w@@180) javaTypeType) (UOrdering2 w@@180 fixed.java.lang.Object)) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= fixed.java.lang.Object w@@180) (UOrdering2 w@@180 fixed.org.openmrs.util.Security)) (UOrdering2 w@@180 fixed.java.lang.Throwable)) (UOrdering2 w@@180 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (UOrdering2 w@@180 fixed.java.lang.AbstractStringBuilder)) (UOrdering2 w@@180 fixed.java.security.MessageDigestSpi)) (UOrdering2 w@@180 fixed.java.lang.Number)) (UOrdering2 w@@180 fixed.java.util.Random)) (UOrdering2 w@@180 fixed.java.lang.System)) (UOrdering2 w@@180 fixed.javax.crypto.spec.IvParameterSpec)) (UOrdering2 w@@180 fixed.javax.crypto.spec.SecretKeySpec)) (UOrdering2 w@@180 fixed.javax.crypto.Cipher)) (UOrdering2 w@@180 fixed.java.util.Base64)) (UOrdering2 w@@180 fixed.java.util.Base64$Encoder)) (UOrdering2 w@@180 fixed.java.util.Base64$Decoder)) (UOrdering2 w@@180 fixed.java.util.Dictionary)) (UOrdering2 w@@180 fixed.javax.crypto.KeyGenerator)) (UOrdering2 w@@180 fixed.java.lang.Class)) (UOrdering2 w@@180 fixed.java.nio.charset.Charset)) (UOrdering2 w@@180 fixed.java.lang.StringBuilder)) (UOrdering2 w@@180 fixed.java.lang.String)) (UOrdering2 w@@180 fixed.java.lang.Character)) (UOrdering2 w@@180 fixed.java.util.Arrays)) (UOrdering2 w@@180 fixed.java.lang.Boolean)))
 :pattern ( (UOrdering2 w@@180 fixed.java.lang.Object))
)))
(assert (forall ((w@@181 T@U) ) (!  (=> (and (= (type w@@181) javaTypeType) (UOrdering2 w@@181 fixed.org.openmrs.util.Security)) (= fixed.org.openmrs.util.Security w@@181))
 :pattern ( (UOrdering2 w@@181 fixed.org.openmrs.util.Security))
)))
(assert (forall ((w@@182 T@U) ) (!  (=> (and (= (type w@@182) javaTypeType) (UOrdering2 w@@182 fixed.java.io.Serializable)) (or (or (or (or (or (or (or (= fixed.java.io.Serializable w@@182) (UOrdering2 w@@182 fixed.java.lang.Throwable)) (UOrdering2 w@@182 fixed.java.lang.Number)) (UOrdering2 w@@182 fixed.java.util.Random)) (UOrdering2 w@@182 fixed.java.security.Key)) (UOrdering2 w@@182 fixed.java.util.Hashtable)) (UOrdering2 w@@182 fixed.java.lang.Class)) (UOrdering2 w@@182 fixed.java.lang.Character)))
 :pattern ( (UOrdering2 w@@182 fixed.java.io.Serializable))
)))
(assert (forall ((w@@183 T@U) ) (!  (=> (and (= (type w@@183) javaTypeType) (UOrdering2 w@@183 fixed.java.lang.Comparable)) (or (or (or (= fixed.java.lang.Comparable w@@183) (UOrdering2 w@@183 fixed.java.lang.Integer)) (UOrdering2 w@@183 fixed.java.lang.Long)) (UOrdering2 w@@183 fixed.java.lang.Character)))
 :pattern ( (UOrdering2 w@@183 fixed.java.lang.Comparable))
)))
(assert (forall ((w@@184 T@U) ) (!  (=> (and (= (type w@@184) javaTypeType) (UOrdering2 w@@184 fixed.java.lang.CharSequence)) (or (= fixed.java.lang.CharSequence w@@184) (UOrdering2 w@@184 fixed.java.lang.AbstractStringBuilder)))
 :pattern ( (UOrdering2 w@@184 fixed.java.lang.CharSequence))
)))
(assert (forall ((w@@185 T@U) ) (!  (=> (and (= (type w@@185) javaTypeType) (UOrdering2 w@@185 fixed.org.openmrs.api.APIException)) (= fixed.org.openmrs.api.APIException w@@185))
 :pattern ( (UOrdering2 w@@185 fixed.org.openmrs.api.APIException))
)))
(assert (forall ((w@@186 T@U) ) (!  (=> (and (= (type w@@186) javaTypeType) (UOrdering2 w@@186 fixed.java.lang.Throwable)) (or (= fixed.java.lang.Throwable w@@186) (UOrdering2 w@@186 fixed.java.lang.Exception)))
 :pattern ( (UOrdering2 w@@186 fixed.java.lang.Throwable))
)))
(assert (forall ((w@@187 T@U) ) (!  (=> (and (= (type w@@187) javaTypeType) (UOrdering2 w@@187 fixed.java.lang.Exception)) (or (or (= fixed.java.lang.Exception w@@187) (UOrdering2 w@@187 fixed.java.lang.RuntimeException)) (UOrdering2 w@@187 fixed.java.security.GeneralSecurityException)))
 :pattern ( (UOrdering2 w@@187 fixed.java.lang.Exception))
)))
(assert (forall ((w@@188 T@U) ) (!  (=> (and (= (type w@@188) javaTypeType) (UOrdering2 w@@188 fixed.java.lang.RuntimeException)) (or (or (or (= fixed.java.lang.RuntimeException w@@188) (UOrdering2 w@@188 fixed.java.lang.ClassCastException)) (UOrdering2 w@@188 fixed.java.lang.IndexOutOfBoundsException)) (UOrdering2 w@@188 fixed.java.lang.NullPointerException)))
 :pattern ( (UOrdering2 w@@188 fixed.java.lang.RuntimeException))
)))
(assert (forall ((w@@189 T@U) ) (!  (=> (and (= (type w@@189) javaTypeType) (UOrdering2 w@@189 fixed.java.lang.ClassCastException)) (= fixed.java.lang.ClassCastException w@@189))
 :pattern ( (UOrdering2 w@@189 fixed.java.lang.ClassCastException))
)))
(assert (forall ((w@@190 T@U) ) (!  (=> (and (= (type w@@190) refType) (UOrdering2 w@@190 fixed.$StringConst0)) (= fixed.$StringConst0 w@@190))
 :pattern ( (UOrdering2 w@@190 fixed.$StringConst0))
)))
(assert (forall ((w@@191 T@U) ) (!  (=> (and (= (type w@@191) javaTypeType) (UOrdering2 w@@191 fixed.sg.edu.nus.comp.tsunami.safe.Safe)) (= fixed.sg.edu.nus.comp.tsunami.safe.Safe w@@191))
 :pattern ( (UOrdering2 w@@191 fixed.sg.edu.nus.comp.tsunami.safe.Safe))
)))
(assert (forall ((w@@192 T@U) ) (!  (=> (and (= (type w@@192) javaTypeType) (UOrdering2 w@@192 fixed.java.lang.Appendable)) (or (= fixed.java.lang.Appendable w@@192) (UOrdering2 w@@192 fixed.java.lang.AbstractStringBuilder)))
 :pattern ( (UOrdering2 w@@192 fixed.java.lang.Appendable))
)))
(assert (forall ((w@@193 T@U) ) (!  (=> (and (= (type w@@193) javaTypeType) (UOrdering2 w@@193 fixed.java.lang.AbstractStringBuilder)) (= fixed.java.lang.AbstractStringBuilder w@@193))
 :pattern ( (UOrdering2 w@@193 fixed.java.lang.AbstractStringBuilder))
)))
(assert (forall ((w@@194 T@U) ) (!  (=> (and (= (type w@@194) refType) (UOrdering2 w@@194 fixed.$StringConst1)) (= fixed.$StringConst1 w@@194))
 :pattern ( (UOrdering2 w@@194 fixed.$StringConst1))
)))
(assert (forall ((w@@195 T@U) ) (!  (=> (and (= (type w@@195) refType) (UOrdering2 w@@195 fixed.$StringConst2)) (= fixed.$StringConst2 w@@195))
 :pattern ( (UOrdering2 w@@195 fixed.$StringConst2))
)))
(assert (forall ((w@@196 T@U) ) (!  (=> (and (= (type w@@196) javaTypeType) (UOrdering2 w@@196 fixed.java.security.MessageDigestSpi)) (or (= fixed.java.security.MessageDigestSpi w@@196) (UOrdering2 w@@196 fixed.java.security.MessageDigest)))
 :pattern ( (UOrdering2 w@@196 fixed.java.security.MessageDigestSpi))
)))
(assert (forall ((w@@197 T@U) ) (!  (=> (and (= (type w@@197) javaTypeType) (UOrdering2 w@@197 fixed.java.security.MessageDigest)) (= fixed.java.security.MessageDigest w@@197))
 :pattern ( (UOrdering2 w@@197 fixed.java.security.MessageDigest))
)))
(assert (forall ((w@@198 T@U) ) (!  (=> (and (= (type w@@198) javaTypeType) (UOrdering2 w@@198 fixed.java.security.GeneralSecurityException)) (or (or (or (or (= fixed.java.security.GeneralSecurityException w@@198) (UOrdering2 w@@198 fixed.java.security.NoSuchAlgorithmException)) (UOrdering2 w@@198 fixed.javax.crypto.NoSuchPaddingException)) (UOrdering2 w@@198 fixed.java.security.InvalidAlgorithmParameterException)) (UOrdering2 w@@198 fixed.javax.crypto.BadPaddingException)))
 :pattern ( (UOrdering2 w@@198 fixed.java.security.GeneralSecurityException))
)))
(assert (forall ((w@@199 T@U) ) (!  (=> (and (= (type w@@199) javaTypeType) (UOrdering2 w@@199 fixed.java.security.NoSuchAlgorithmException)) (= fixed.java.security.NoSuchAlgorithmException w@@199))
 :pattern ( (UOrdering2 w@@199 fixed.java.security.NoSuchAlgorithmException))
)))
(assert (forall ((w@@200 T@U) ) (!  (=> (and (= (type w@@200) javaTypeType) (UOrdering2 w@@200 fixed.org.slf4j.Logger)) (= fixed.org.slf4j.Logger w@@200))
 :pattern ( (UOrdering2 w@@200 fixed.org.slf4j.Logger))
)))
(assert (forall ((w@@201 T@U) ) (!  (=> (and (= (type w@@201) refType) (UOrdering2 w@@201 fixed.$StringConst3)) (= fixed.$StringConst3 w@@201))
 :pattern ( (UOrdering2 w@@201 fixed.$StringConst3))
)))
(assert (forall ((w@@202 T@U) ) (!  (=> (and (= (type w@@202) refType) (UOrdering2 w@@202 fixed.$StringConst4)) (= fixed.$StringConst4 w@@202))
 :pattern ( (UOrdering2 w@@202 fixed.$StringConst4))
)))
(assert (forall ((w@@203 T@U) ) (!  (=> (and (= (type w@@203) javaTypeType) (UOrdering2 w@@203 fixed.java.lang.IndexOutOfBoundsException)) (or (= fixed.java.lang.IndexOutOfBoundsException w@@203) (UOrdering2 w@@203 fixed.java.lang.ArrayIndexOutOfBoundsException)))
 :pattern ( (UOrdering2 w@@203 fixed.java.lang.IndexOutOfBoundsException))
)))
(assert (forall ((w@@204 T@U) ) (!  (=> (and (= (type w@@204) javaTypeType) (UOrdering2 w@@204 fixed.java.lang.ArrayIndexOutOfBoundsException)) (= fixed.java.lang.ArrayIndexOutOfBoundsException w@@204))
 :pattern ( (UOrdering2 w@@204 fixed.java.lang.ArrayIndexOutOfBoundsException))
)))
(assert (forall ((w@@205 T@U) ) (!  (=> (and (= (type w@@205) javaTypeType) (UOrdering2 w@@205 fixed.java.lang.NullPointerException)) (= fixed.java.lang.NullPointerException w@@205))
 :pattern ( (UOrdering2 w@@205 fixed.java.lang.NullPointerException))
)))
(assert (forall ((w@@206 T@U) ) (!  (=> (and (= (type w@@206) refType) (UOrdering2 w@@206 fixed.$StringConst5)) (= fixed.$StringConst5 w@@206))
 :pattern ( (UOrdering2 w@@206 fixed.$StringConst5))
)))
(assert (forall ((w@@207 T@U) ) (!  (=> (and (= (type w@@207) javaTypeType) (UOrdering2 w@@207 fixed.java.lang.Number)) (or (or (= fixed.java.lang.Number w@@207) (UOrdering2 w@@207 fixed.java.lang.Integer)) (UOrdering2 w@@207 fixed.java.lang.Long)))
 :pattern ( (UOrdering2 w@@207 fixed.java.lang.Number))
)))
(assert (forall ((w@@208 T@U) ) (!  (=> (and (= (type w@@208) javaTypeType) (UOrdering2 w@@208 fixed.java.lang.Integer)) (= fixed.java.lang.Integer w@@208))
 :pattern ( (UOrdering2 w@@208 fixed.java.lang.Integer))
)))
(assert (forall ((w@@209 T@U) ) (!  (=> (and (= (type w@@209) javaTypeType) (UOrdering2 w@@209 fixed.java.util.Random)) (or (= fixed.java.util.Random w@@209) (UOrdering2 w@@209 fixed.java.security.SecureRandom)))
 :pattern ( (UOrdering2 w@@209 fixed.java.util.Random))
)))
(assert (forall ((w@@210 T@U) ) (!  (=> (and (= (type w@@210) javaTypeType) (UOrdering2 w@@210 fixed.java.lang.System)) (= fixed.java.lang.System w@@210))
 :pattern ( (UOrdering2 w@@210 fixed.java.lang.System))
)))
(assert (forall ((w@@211 T@U) ) (!  (=> (and (= (type w@@211) javaTypeType) (UOrdering2 w@@211 fixed.java.lang.Long)) (= fixed.java.lang.Long w@@211))
 :pattern ( (UOrdering2 w@@211 fixed.java.lang.Long))
)))
(assert (forall ((w@@212 T@U) ) (!  (=> (and (= (type w@@212) javaTypeType) (UOrdering2 w@@212 fixed.java.security.spec.AlgorithmParameterSpec)) (or (= fixed.java.security.spec.AlgorithmParameterSpec w@@212) (UOrdering2 w@@212 fixed.javax.crypto.spec.IvParameterSpec)))
 :pattern ( (UOrdering2 w@@212 fixed.java.security.spec.AlgorithmParameterSpec))
)))
(assert (forall ((w@@213 T@U) ) (!  (=> (and (= (type w@@213) javaTypeType) (UOrdering2 w@@213 fixed.javax.crypto.spec.IvParameterSpec)) (= fixed.javax.crypto.spec.IvParameterSpec w@@213))
 :pattern ( (UOrdering2 w@@213 fixed.javax.crypto.spec.IvParameterSpec))
)))
(assert (forall ((w@@214 T@U) ) (!  (=> (and (= (type w@@214) javaTypeType) (UOrdering2 w@@214 fixed.java.security.spec.KeySpec)) (or (= fixed.java.security.spec.KeySpec w@@214) (UOrdering2 w@@214 fixed.javax.crypto.spec.SecretKeySpec)))
 :pattern ( (UOrdering2 w@@214 fixed.java.security.spec.KeySpec))
)))
(assert (forall ((w@@215 T@U) ) (!  (=> (and (= (type w@@215) javaTypeType) (UOrdering2 w@@215 fixed.java.security.Key)) (or (= fixed.java.security.Key w@@215) (UOrdering2 w@@215 fixed.javax.crypto.SecretKey)))
 :pattern ( (UOrdering2 w@@215 fixed.java.security.Key))
)))
(assert (forall ((w@@216 T@U) ) (!  (=> (and (= (type w@@216) javaTypeType) (UOrdering2 w@@216 fixed.javax.security.auth.Destroyable)) (or (= fixed.javax.security.auth.Destroyable w@@216) (UOrdering2 w@@216 fixed.javax.crypto.SecretKey)))
 :pattern ( (UOrdering2 w@@216 fixed.javax.security.auth.Destroyable))
)))
(assert (forall ((w@@217 T@U) ) (!  (=> (and (= (type w@@217) javaTypeType) (UOrdering2 w@@217 fixed.javax.crypto.SecretKey)) (or (= fixed.javax.crypto.SecretKey w@@217) (UOrdering2 w@@217 fixed.javax.crypto.spec.SecretKeySpec)))
 :pattern ( (UOrdering2 w@@217 fixed.javax.crypto.SecretKey))
)))
(assert (forall ((w@@218 T@U) ) (!  (=> (and (= (type w@@218) javaTypeType) (UOrdering2 w@@218 fixed.javax.crypto.spec.SecretKeySpec)) (= fixed.javax.crypto.spec.SecretKeySpec w@@218))
 :pattern ( (UOrdering2 w@@218 fixed.javax.crypto.spec.SecretKeySpec))
)))
(assert (forall ((w@@219 T@U) ) (!  (=> (and (= (type w@@219) refType) (UOrdering2 w@@219 fixed.$StringConst6)) (= fixed.$StringConst6 w@@219))
 :pattern ( (UOrdering2 w@@219 fixed.$StringConst6))
)))
(assert (forall ((w@@220 T@U) ) (!  (=> (and (= (type w@@220) refType) (UOrdering2 w@@220 fixed.$StringConst7)) (= fixed.$StringConst7 w@@220))
 :pattern ( (UOrdering2 w@@220 fixed.$StringConst7))
)))
(assert (forall ((w@@221 T@U) ) (!  (=> (and (= (type w@@221) javaTypeType) (UOrdering2 w@@221 fixed.javax.crypto.Cipher)) (= fixed.javax.crypto.Cipher w@@221))
 :pattern ( (UOrdering2 w@@221 fixed.javax.crypto.Cipher))
)))
(assert (forall ((w@@222 T@U) ) (!  (=> (and (= (type w@@222) javaTypeType) (UOrdering2 w@@222 fixed.javax.crypto.NoSuchPaddingException)) (= fixed.javax.crypto.NoSuchPaddingException w@@222))
 :pattern ( (UOrdering2 w@@222 fixed.javax.crypto.NoSuchPaddingException))
)))
(assert (forall ((w@@223 T@U) ) (!  (=> (and (= (type w@@223) javaTypeType) (UOrdering2 w@@223 fixed.java.security.InvalidAlgorithmParameterException)) (= fixed.java.security.InvalidAlgorithmParameterException w@@223))
 :pattern ( (UOrdering2 w@@223 fixed.java.security.InvalidAlgorithmParameterException))
)))
(assert (forall ((w@@224 T@U) ) (!  (=> (and (= (type w@@224) javaTypeType) (UOrdering2 w@@224 fixed.javax.crypto.BadPaddingException)) (= fixed.javax.crypto.BadPaddingException w@@224))
 :pattern ( (UOrdering2 w@@224 fixed.javax.crypto.BadPaddingException))
)))
(assert (forall ((w@@225 T@U) ) (!  (=> (and (= (type w@@225) javaTypeType) (UOrdering2 w@@225 fixed.java.util.Base64)) (= fixed.java.util.Base64 w@@225))
 :pattern ( (UOrdering2 w@@225 fixed.java.util.Base64))
)))
(assert (forall ((w@@226 T@U) ) (!  (=> (and (= (type w@@226) javaTypeType) (UOrdering2 w@@226 fixed.java.util.Base64$Encoder)) (= fixed.java.util.Base64$Encoder w@@226))
 :pattern ( (UOrdering2 w@@226 fixed.java.util.Base64$Encoder))
)))
(assert (forall ((w@@227 T@U) ) (!  (=> (and (= (type w@@227) refType) (UOrdering2 w@@227 fixed.$StringConst8)) (= fixed.$StringConst8 w@@227))
 :pattern ( (UOrdering2 w@@227 fixed.$StringConst8))
)))
(assert (forall ((w@@228 T@U) ) (!  (=> (and (= (type w@@228) javaTypeType) (UOrdering2 w@@228 fixed.java.util.Base64$Decoder)) (= fixed.java.util.Base64$Decoder w@@228))
 :pattern ( (UOrdering2 w@@228 fixed.java.util.Base64$Decoder))
)))
(assert (forall ((w@@229 T@U) ) (!  (=> (and (= (type w@@229) refType) (UOrdering2 w@@229 fixed.$StringConst9)) (= fixed.$StringConst9 w@@229))
 :pattern ( (UOrdering2 w@@229 fixed.$StringConst9))
)))
(assert (forall ((w@@230 T@U) ) (!  (=> (and (= (type w@@230) javaTypeType) (UOrdering2 w@@230 fixed.org.openmrs.api.context.Context)) (= fixed.org.openmrs.api.context.Context w@@230))
 :pattern ( (UOrdering2 w@@230 fixed.org.openmrs.api.context.Context))
)))
(assert (forall ((w@@231 T@U) ) (!  (=> (and (= (type w@@231) javaTypeType) (UOrdering2 w@@231 fixed.java.util.Dictionary)) (or (= fixed.java.util.Dictionary w@@231) (UOrdering2 w@@231 fixed.java.util.Hashtable)))
 :pattern ( (UOrdering2 w@@231 fixed.java.util.Dictionary))
)))
(assert (forall ((w@@232 T@U) ) (!  (=> (and (= (type w@@232) javaTypeType) (UOrdering2 w@@232 fixed.java.util.Map)) (or (= fixed.java.util.Map w@@232) (UOrdering2 w@@232 fixed.java.util.Hashtable)))
 :pattern ( (UOrdering2 w@@232 fixed.java.util.Map))
)))
(assert (forall ((w@@233 T@U) ) (!  (=> (and (= (type w@@233) javaTypeType) (UOrdering2 w@@233 fixed.java.lang.Cloneable)) (or (= fixed.java.lang.Cloneable w@@233) (UOrdering2 w@@233 fixed.java.util.Hashtable)))
 :pattern ( (UOrdering2 w@@233 fixed.java.lang.Cloneable))
)))
(assert (forall ((w@@234 T@U) ) (!  (=> (and (= (type w@@234) javaTypeType) (UOrdering2 w@@234 fixed.java.util.Hashtable)) (or (= fixed.java.util.Hashtable w@@234) (UOrdering2 w@@234 fixed.java.util.Properties)))
 :pattern ( (UOrdering2 w@@234 fixed.java.util.Hashtable))
)))
(assert (forall ((w@@235 T@U) ) (!  (=> (and (= (type w@@235) javaTypeType) (UOrdering2 w@@235 fixed.java.util.Properties)) (= fixed.java.util.Properties w@@235))
 :pattern ( (UOrdering2 w@@235 fixed.java.util.Properties))
)))
(assert (forall ((w@@236 T@U) ) (!  (=> (and (= (type w@@236) refType) (UOrdering2 w@@236 fixed.$StringConst10)) (= fixed.$StringConst10 w@@236))
 :pattern ( (UOrdering2 w@@236 fixed.$StringConst10))
)))
(assert (forall ((w@@237 T@U) ) (!  (=> (and (= (type w@@237) refType) (UOrdering2 w@@237 fixed.$StringConst11)) (= fixed.$StringConst11 w@@237))
 :pattern ( (UOrdering2 w@@237 fixed.$StringConst11))
)))
(assert (forall ((w@@238 T@U) ) (!  (=> (and (= (type w@@238) javaTypeType) (UOrdering2 w@@238 fixed.org.springframework.util.StringUtils)) (= fixed.org.springframework.util.StringUtils w@@238))
 :pattern ( (UOrdering2 w@@238 fixed.org.springframework.util.StringUtils))
)))
(assert (forall ((w@@239 T@U) ) (!  (=> (and (= (type w@@239) refType) (UOrdering2 w@@239 fixed.$StringConst12)) (= fixed.$StringConst12 w@@239))
 :pattern ( (UOrdering2 w@@239 fixed.$StringConst12))
)))
(assert (forall ((w@@240 T@U) ) (!  (=> (and (= (type w@@240) javaTypeType) (UOrdering2 w@@240 fixed.java.security.SecureRandom)) (= fixed.java.security.SecureRandom w@@240))
 :pattern ( (UOrdering2 w@@240 fixed.java.security.SecureRandom))
)))
(assert (forall ((w@@241 T@U) ) (!  (=> (and (= (type w@@241) refType) (UOrdering2 w@@241 fixed.$StringConst13)) (= fixed.$StringConst13 w@@241))
 :pattern ( (UOrdering2 w@@241 fixed.$StringConst13))
)))
(assert (forall ((w@@242 T@U) ) (!  (=> (and (= (type w@@242) refType) (UOrdering2 w@@242 fixed.$StringConst14)) (= fixed.$StringConst14 w@@242))
 :pattern ( (UOrdering2 w@@242 fixed.$StringConst14))
)))
(assert (forall ((w@@243 T@U) ) (!  (=> (and (= (type w@@243) refType) (UOrdering2 w@@243 fixed.$StringConst15)) (= fixed.$StringConst15 w@@243))
 :pattern ( (UOrdering2 w@@243 fixed.$StringConst15))
)))
(assert (forall ((w@@244 T@U) ) (!  (=> (and (= (type w@@244) javaTypeType) (UOrdering2 w@@244 fixed.javax.crypto.KeyGenerator)) (= fixed.javax.crypto.KeyGenerator w@@244))
 :pattern ( (UOrdering2 w@@244 fixed.javax.crypto.KeyGenerator))
)))
(assert (forall ((w@@245 T@U) ) (!  (=> (and (= (type w@@245) refType) (UOrdering2 w@@245 fixed.$StringConst16)) (= fixed.$StringConst16 w@@245))
 :pattern ( (UOrdering2 w@@245 fixed.$StringConst16))
)))
(assert (forall ((w@@246 T@U) ) (!  (=> (and (= (type w@@246) refType) (UOrdering2 w@@246 fixed.CC$org$_$openmrs$_$util$_$Security)) (= fixed.CC$org$_$openmrs$_$util$_$Security w@@246))
 :pattern ( (UOrdering2 w@@246 fixed.CC$org$_$openmrs$_$util$_$Security))
)))
(assert (forall ((w@@247 T@U) ) (!  (=> (and (= (type w@@247) javaTypeType) (UOrdering2 w@@247 fixed.org.slf4j.LoggerFactory)) (= fixed.org.slf4j.LoggerFactory w@@247))
 :pattern ( (UOrdering2 w@@247 fixed.org.slf4j.LoggerFactory))
)))
(assert (forall ((w@@248 T@U) ) (!  (=> (and (= (type w@@248) javaTypeType) (UOrdering2 w@@248 fixed.java.lang.reflect.AnnotatedElement)) (or (or (= fixed.java.lang.reflect.AnnotatedElement w@@248) (UOrdering2 w@@248 fixed.java.lang.reflect.GenericDeclaration)) (UOrdering2 w@@248 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@248 fixed.java.lang.reflect.AnnotatedElement))
)))
(assert (forall ((w@@249 T@U) ) (!  (=> (and (= (type w@@249) javaTypeType) (UOrdering2 w@@249 fixed.java.lang.reflect.GenericDeclaration)) (or (= fixed.java.lang.reflect.GenericDeclaration w@@249) (UOrdering2 w@@249 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@249 fixed.java.lang.reflect.GenericDeclaration))
)))
(assert (forall ((w@@250 T@U) ) (!  (=> (and (= (type w@@250) javaTypeType) (UOrdering2 w@@250 fixed.java.lang.reflect.Type)) (or (= fixed.java.lang.reflect.Type w@@250) (UOrdering2 w@@250 fixed.java.lang.Class)))
 :pattern ( (UOrdering2 w@@250 fixed.java.lang.reflect.Type))
)))
(assert (forall ((w@@251 T@U) ) (!  (=> (and (= (type w@@251) javaTypeType) (UOrdering2 w@@251 fixed.java.lang.Class)) (= fixed.java.lang.Class w@@251))
 :pattern ( (UOrdering2 w@@251 fixed.java.lang.Class))
)))
(assert (forall ((w@@252 T@U) ) (!  (=> (and (= (type w@@252) javaTypeType) (UOrdering2 w@@252 fixed.java.nio.charset.Charset)) (= fixed.java.nio.charset.Charset w@@252))
 :pattern ( (UOrdering2 w@@252 fixed.java.nio.charset.Charset))
)))
(assert (forall ((w@@253 T@U) ) (!  (=> (and (= (type w@@253) javaTypeType) (UOrdering2 w@@253 fixed.java.lang.StringBuilder)) (= fixed.java.lang.StringBuilder w@@253))
 :pattern ( (UOrdering2 w@@253 fixed.java.lang.StringBuilder))
)))
(assert (forall ((w@@254 T@U) ) (!  (=> (and (= (type w@@254) javaTypeType) (UOrdering2 w@@254 fixed.java.lang.String)) (= fixed.java.lang.String w@@254))
 :pattern ( (UOrdering2 w@@254 fixed.java.lang.String))
)))
(assert (forall ((w@@255 T@U) ) (!  (=> (and (= (type w@@255) javaTypeType) (UOrdering2 w@@255 fixed.java.lang.Character)) (= fixed.java.lang.Character w@@255))
 :pattern ( (UOrdering2 w@@255 fixed.java.lang.Character))
)))
(assert (forall ((w@@256 T@U) ) (!  (=> (and (= (type w@@256) javaTypeType) (UOrdering2 w@@256 fixed.java.util.Arrays)) (= fixed.java.util.Arrays w@@256))
 :pattern ( (UOrdering2 w@@256 fixed.java.util.Arrays))
)))
(assert (forall ((w@@257 T@U) ) (!  (=> (and (= (type w@@257) javaTypeType) (UOrdering2 w@@257 fixed.java.lang.Boolean)) (= fixed.java.lang.Boolean w@@257))
 :pattern ( (UOrdering2 w@@257 fixed.java.lang.Boolean))
)))
(assert  (and (and (and (and (forall ((arg0@@6 T@T) ) (! (= (Ctor (FieldType arg0@@6)) 5)
 :qid |ctor:FieldType|
)) (forall ((arg0@@7 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@7)) arg0@@7)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@7))
))) (= (type fixed.$type) (FieldType javaTypeType))) (= (type fixed.$alloc) (FieldType boolType))) (= (type fixed.$null) refType)))
(assert (distinct fixed.$type fixed.$alloc fixed.$null fixed.java.lang.Object fixed.org.openmrs.util.Security fixed.java.io.Serializable fixed.java.lang.Comparable fixed.java.lang.CharSequence fixed.org.openmrs.api.APIException fixed.java.lang.Throwable fixed.java.lang.Exception fixed.java.lang.RuntimeException fixed.java.lang.ClassCastException fixed.$StringConst0 fixed.sg.edu.nus.comp.tsunami.safe.Safe fixed.java.lang.Appendable fixed.java.lang.AbstractStringBuilder fixed.$StringConst1 fixed.$StringConst2 fixed.java.security.MessageDigestSpi fixed.java.security.MessageDigest fixed.java.security.GeneralSecurityException fixed.java.security.NoSuchAlgorithmException fixed.org.slf4j.Logger fixed.$StringConst3 fixed.$StringConst4 fixed.java.lang.IndexOutOfBoundsException fixed.java.lang.ArrayIndexOutOfBoundsException fixed.java.lang.NullPointerException fixed.$StringConst5 fixed.java.lang.Number fixed.java.lang.Integer fixed.java.util.Random fixed.java.lang.System fixed.java.lang.Long fixed.java.security.spec.AlgorithmParameterSpec fixed.javax.crypto.spec.IvParameterSpec fixed.java.security.spec.KeySpec fixed.java.security.Key fixed.javax.security.auth.Destroyable fixed.javax.crypto.SecretKey fixed.javax.crypto.spec.SecretKeySpec fixed.$StringConst6 fixed.$StringConst7 fixed.javax.crypto.Cipher fixed.javax.crypto.NoSuchPaddingException fixed.java.security.InvalidAlgorithmParameterException fixed.javax.crypto.BadPaddingException fixed.java.util.Base64 fixed.java.util.Base64$Encoder fixed.$StringConst8 fixed.java.util.Base64$Decoder fixed.$StringConst9 fixed.org.openmrs.api.context.Context fixed.java.util.Dictionary fixed.java.util.Map fixed.java.lang.Cloneable fixed.java.util.Hashtable fixed.java.util.Properties fixed.$StringConst10 fixed.$StringConst11 fixed.org.springframework.util.StringUtils fixed.$StringConst12 fixed.java.security.SecureRandom fixed.$StringConst13 fixed.$StringConst14 fixed.$StringConst15 fixed.javax.crypto.KeyGenerator fixed.$StringConst16 fixed.CC$org$_$openmrs$_$util$_$Security fixed.org.slf4j.LoggerFactory fixed.java.lang.reflect.AnnotatedElement fixed.java.lang.reflect.GenericDeclaration fixed.java.lang.reflect.Type fixed.java.lang.Class fixed.java.nio.charset.Charset fixed.java.lang.StringBuilder fixed.java.lang.String fixed.java.lang.Character fixed.java.util.Arrays fixed.java.lang.Boolean)
)
(assert (forall ((x@@5 Int) ) (!  (and (=> (fixed.$intToBool x@@5) (ite (= x@@5 0) false true)) (=> (ite (= x@@5 0) false true) (fixed.$intToBool x@@5)))
 :qid |RSPROCja.237:15|
 :skolemid |22812|
 :pattern ( (fixed.$intToBool x@@5))
)))
(assert (forall ((x@@6 T@U) ) (!  (=> (= (type x@@6) refType) (and (=> (fixed.$refToBool x@@6) (ite (= x@@6 fixed.$null) false true)) (=> (ite (= x@@6 fixed.$null) false true) (fixed.$refToBool x@@6))))
 :qid |RSPROCja.241:15|
 :skolemid |22813|
 :pattern ( (fixed.$refToBool x@@6))
)))
(assert (forall ((x@@7 Bool) ) (! (= (fixed.$boolToInt x@@7) (ite  (and (=> x@@7 true) (=> true x@@7)) 1 0))
 :qid |RSPROCja.245:15|
 :skolemid |22814|
 :pattern ( (fixed.$boolToInt x@@7))
)))
(assert (forall ((x@@8 Real) (y@@1 Real) ) (! (= (fixed.$cmpReal x@@8 y@@1) (ite (> x@@8 y@@1) 1 (ite (< x@@8 y@@1) (- 0 1) 0)))
 :qid |RSPROCja.249:15|
 :skolemid |22815|
 :pattern ( (fixed.$cmpReal x@@8 y@@1))
)))
(assert (forall ((x@@9 Int) (y@@2 Int) ) (! (= (fixed.$cmpInt x@@9 y@@2) (ite (> x@@9 y@@2) 1 (ite (< x@@9 y@@2) (- 0 1) 0)))
 :qid |RSPROCja.253:15|
 :skolemid |22816|
 :pattern ( (fixed.$cmpInt x@@9 y@@2))
)))
(assert (forall ((arg0@@8 Int) ) (! (= (type (fixed.$intToRef arg0@@8)) refType)
 :qid |funType:fixed.$intToRef|
 :pattern ( (fixed.$intToRef arg0@@8))
)))
(assert (forall ((index Int) ) (! (not (= (fixed.$intToRef index) fixed.$null))
 :qid |RSPROCja.257:15|
 :skolemid |22817|
)))
(assert (forall ((i1 Int) (i2 Int) ) (!  (and (=> (= i1 i2) (= (fixed.$intToRef i1) (fixed.$intToRef i2))) (=> (= (fixed.$intToRef i1) (fixed.$intToRef i2)) (= i1 i2)))
 :qid |RSPROCja.259:15|
 :skolemid |22818|
)))
(assert (forall ((x@@10 Int) ) (!  (and (=> (fixed.$intToBool x@@10) (ite (= x@@10 0) false true)) (=> (ite (= x@@10 0) false true) (fixed.$intToBool x@@10)))
 :qid |RSPROCja.34230:15|
 :skolemid |23920|
 :pattern ( (fixed.$intToBool x@@10))
)))
(assert (forall ((x@@11 T@U) ) (!  (=> (= (type x@@11) refType) (and (=> (fixed.$refToBool x@@11) (ite (= x@@11 fixed.$null) false true)) (=> (ite (= x@@11 fixed.$null) false true) (fixed.$refToBool x@@11))))
 :qid |RSPROCja.34234:15|
 :skolemid |23921|
 :pattern ( (fixed.$refToBool x@@11))
)))
(assert (forall ((x@@12 Bool) ) (! (= (fixed.$boolToInt x@@12) (ite  (and (=> x@@12 true) (=> true x@@12)) 1 0))
 :qid |RSPROCja.34238:15|
 :skolemid |23922|
 :pattern ( (fixed.$boolToInt x@@12))
)))
(assert (forall ((x@@13 Real) (y@@3 Real) ) (! (= (fixed.$cmpReal x@@13 y@@3) (ite (> x@@13 y@@3) 1 (ite (< x@@13 y@@3) (- 0 1) 0)))
 :qid |RSPROCja.34242:15|
 :skolemid |23923|
 :pattern ( (fixed.$cmpReal x@@13 y@@3))
)))
(assert (forall ((x@@14 Int) (y@@4 Int) ) (! (= (fixed.$cmpInt x@@14 y@@4) (ite (> x@@14 y@@4) 1 (ite (< x@@14 y@@4) (- 0 1) 0)))
 :qid |RSPROCja.34246:15|
 :skolemid |23924|
 :pattern ( (fixed.$cmpInt x@@14 y@@4))
)))
(assert (forall ((index@@0 Int) ) (! (not (= (fixed.$intToRef index@@0) fixed.$null))
 :qid |RSPROCja.34250:15|
 :skolemid |23925|
)))
(assert (forall ((i1@@0 Int) (i2@@0 Int) ) (!  (and (=> (= i1@@0 i2@@0) (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0))) (=> (= (fixed.$intToRef i1@@0) (fixed.$intToRef i2@@0)) (= i1@@0 i2@@0)))
 :qid |RSPROCja.34252:15|
 :skolemid |23926|
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@9 T@T) ) (! (= (Ctor (MapType0Type arg0@@9)) 6)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@10 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@10)) arg0@@10)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@10))
))) (forall ((arg0@@11 T@U) (arg1@@0 T@U) (arg2 T@U) ) (! (let (($GenericType__0 (FieldTypeInv0 (type arg2))))
(= (type (MapType0Select arg0@@11 arg1@@0 arg2)) $GenericType__0))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@11 arg1@@0 arg2))
))) (forall ((arg0@@12 T@U) (arg1@@1 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@1)))
(= (type (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@12 arg1@@1 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let (($GenericType__0@@0 (FieldTypeInv0 (type x1))))
 (=> (= (type val) $GenericType__0@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (type fixed.$heap) (MapType0Type refType))) (forall ((arg0@@13 T@T) (arg1@@2 T@T) ) (! (= (Ctor (MapType1Type arg0@@13 arg1@@2)) 7)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@14 T@T) (arg1@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@14 arg1@@3)) arg0@@14)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@14 arg1@@3))
))) (forall ((arg0@@15 T@T) (arg1@@4 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@15 arg1@@4)) arg1@@4)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@15 arg1@@4))
))) (forall ((arg0@@16 T@U) (arg1@@5 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@16))))
(= (type (MapType1Select arg0@@16 arg1@@5)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@16 arg1@@5))
))) (forall ((arg0@@17 T@U) (arg1@@6 T@U) (arg2@@1 T@U) ) (! (let ((aVar1@@0 (type arg2@@1)))
(let ((aVar0@@0 (type arg1@@6)))
(= (type (MapType1Store arg0@@17 arg1@@6 arg2@@1)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@17 arg1@@6 arg2@@1))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) x0@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 val@@5) y0@@3) (MapType1Select m@@5 y0@@3)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (type fixed.$arrSizeHeap) (MapType1Type refType intType))) (= (type fixed.$stringSizeHeap) (MapType1Type refType intType))) (= (type $this) refType)))
(push 1)
(set-info :boogie-vc-id PROC_.java.nio.charset.Charset$$la$init$ra$$_EQ_unsafe__xx__fixed)
(assert (not
(let ((AA_INSTR_EQ_BODY$2_correct  (=> (! (and %lbl%+4033338 true) :lblpos +4033338) (=> (and (=> AA_TEMP430@1 (or AA_TEMP430@0 (= fixed.$null fixed.$null))) (=> (or AA_TEMP430@0 (= fixed.$null fixed.$null)) AA_TEMP430@1)) (! (or %lbl%@4067604 AA_TEMP430@1) :lblneg @4067604)))))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+4033337 true) :lblpos +4033337) AA_INSTR_EQ_BODY$2_correct)))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$block56_correct  (=> (! (and %lbl%+4033336 true) :lblpos +4033336) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$anon0$1_correct  (=> (! (and %lbl%+4033335 true) :lblpos +4033335) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$block56_correct)))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+4033334 true) :lblpos +4033334) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$anon0$1_correct)))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+4033333 true) :lblpos +4033333) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+4033332 true) :lblpos +4033332) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+4033331 true) :lblpos +4033331) (=> (forall ((T T@U) ) (!  (=> (= (type T) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T))
 :qid |RSPROCja.68881:20|
 :skolemid |24971|
 :no-pattern (type T)
 :no-pattern (U_2_int T)
 :no-pattern (U_2_bool T)
)) (=> (and (and (forall ((_r T@U) ) (!  (=> (= (type _r) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r)) 0))
 :qid |RSPROCja.68882:20|
 :skolemid |24972|
 :no-pattern (type _r)
 :no-pattern (U_2_int _r)
 :no-pattern (U_2_bool _r)
)) (forall ((_r@@0 T@U) ) (!  (=> (= (type _r@@0) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@0)) 0))
 :qid |RSPROCja.68883:20|
 :skolemid |24973|
 :no-pattern (type _r@@0)
 :no-pattern (U_2_int _r@@0)
 :no-pattern (U_2_bool _r@@0)
))) (and (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.java.nio.charset.Charset) (not (= $this fixed.$null)))) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+4033330 true) :lblpos +4033330) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY$1_correct  (=> (! (and %lbl%+4033329 true) :lblpos +4033329) inline$fixed.java.nio.charset.Charset$$la$init$ra$$$0$Entry_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+4033328 true) :lblpos +4033328) AA_INSTR_EQ_BODY$1_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$block56_correct  (=> (! (and %lbl%+4033327 true) :lblpos +4033327) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$anon0$1_correct  (=> (! (and %lbl%+4033326 true) :lblpos +4033326) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$block56_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct  (=> (! (and %lbl%+4033325 true) :lblpos +4033325) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$anon0$1_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+4033324 true) :lblpos +4033324) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Return_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+4033323 true) :lblpos +4033323) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$anon0_correct)))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$anon0_correct  (=> (! (and %lbl%+4033322 true) :lblpos +4033322) (=> (forall ((T@@0 T@U) ) (!  (=> (= (type T@@0) javaTypeType) (UOrdering2 (MapType0Select fixed.$heap fixed.$null fixed.$type) T@@0))
 :qid |RSPROCja.68834:20|
 :skolemid |24968|
 :no-pattern (type T@@0)
 :no-pattern (U_2_int T@@0)
 :no-pattern (U_2_bool T@@0)
)) (=> (and (and (forall ((_r@@1 T@U) ) (!  (=> (= (type _r@@1) refType) (>= (U_2_int (MapType1Select fixed.$arrSizeHeap _r@@1)) 0))
 :qid |RSPROCja.68835:20|
 :skolemid |24969|
 :no-pattern (type _r@@1)
 :no-pattern (U_2_int _r@@1)
 :no-pattern (U_2_bool _r@@1)
)) (forall ((_r@@2 T@U) ) (!  (=> (= (type _r@@2) refType) (>= (U_2_int (MapType1Select fixed.$stringSizeHeap _r@@2)) 0))
 :qid |RSPROCja.68836:20|
 :skolemid |24970|
 :no-pattern (type _r@@2)
 :no-pattern (U_2_int _r@@2)
 :no-pattern (U_2_bool _r@@2)
))) (and (UOrdering2 (MapType0Select fixed.$heap $this fixed.$type) fixed.java.nio.charset.Charset) (not (= $this fixed.$null)))) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$inline$java.lang.Object$$la$init$ra$$$0$Entry_correct)))))
(let ((inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$Entry_correct  (=> (! (and %lbl%+4033321 true) :lblpos +4033321) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$anon0_correct)))
(let ((AA_INSTR_EQ_BODY_correct  (=> (! (and %lbl%+4033320 true) :lblpos +4033320) inline$unsafe.java.nio.charset.Charset$$la$init$ra$$$0$Entry_correct)))
(let ((q@0_correct  (=> (! (and %lbl%+4067345 true) :lblpos +4067345) AA_INSTR_EQ_BODY_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+4067349 true) :lblpos +4067349) q@0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
